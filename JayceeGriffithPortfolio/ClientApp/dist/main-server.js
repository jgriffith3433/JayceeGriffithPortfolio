!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="dist/",n(n.s=115)}([function(e,t,n){e.exports=n(1)(4)},function(e,t){e.exports=require("./vendor")},function(e,t,n){"use strict";var r;function o(e,t,n){if(!n||typeof n.value!==r.typeOfFunction)throw new TypeError("Only methods can be decorated with @bind. <"+t+"> is not a method!");return{configurable:r.boolTrue,get:function(){var e=n.value.bind(this);return Object.defineProperty(this,t,{value:e,configurable:r.boolTrue,writable:r.boolTrue}),e}}}Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.typeOfFunction="function",e.boolTrue=!0}(r||(r={})),t.bind=o,t.default=o},function(e,t,n){e.exports=n(1)(301)},function(e,t,n){"use strict";t.__esModule=!0,t.withRouter=t.matchPath=t.generatePath=t.Switch=t.StaticRouter=t.Router=t.Route=t.Redirect=t.Prompt=t.NavLink=t.MemoryRouter=t.Link=t.HashRouter=t.BrowserRouter=void 0;var r=y(n(56)),o=y(n(63)),i=y(n(34)),a=y(n(64)),s=y(n(66)),l=y(n(68)),c=y(n(70)),u=y(n(35)),f=y(n(22)),p=y(n(72)),d=y(n(74)),h=y(n(76)),m=y(n(78)),v=y(n(80));function y(e){return e&&e.__esModule?e:{default:e}}t.BrowserRouter=r.default,t.HashRouter=o.default,t.Link=i.default,t.MemoryRouter=a.default,t.NavLink=s.default,t.Prompt=l.default,t.Redirect=c.default,t.Route=u.default,t.Router=f.default,t.StaticRouter=p.default,t.Switch=d.default,t.generatePath=h.default,t.matchPath=m.default,t.withRouter=v.default},function(e,t,n){e.exports=n(1)(84)},function(e,t,n){e.exports=n(1)(7)},function(e,t,n){e.exports=n(1)(195)},function(e,t,n){e.exports=n(1)(229)},function(e,t,n){e.exports=n(1)(187)},function(e,t,n){e.exports=n(1)(143)},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){e.exports=n(1)(264)},function(e,t,n){e.exports=n(1)(148)},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n(57)),i=s(n(58)),a=n(11);function s(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,i){var s=void 0;"string"==typeof e?(s=(0,a.parsePath)(e)).state=t:(void 0===(s=r({},e)).pathname&&(s.pathname=""),s.search?"?"!==s.search.charAt(0)&&(s.search="?"+s.search):s.search="",s.hash?"#"!==s.hash.charAt(0)&&(s.hash="#"+s.hash):s.hash="",void 0!==t&&void 0===s.state&&(s.state=t));try{s.pathname=decodeURI(s.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+s.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(s.key=n),i?s.pathname?"/"!==s.pathname.charAt(0)&&(s.pathname=(0,o.default)(s.pathname,i.pathname)):s.pathname=i.pathname:s.pathname||(s.pathname="/"),s},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,i.default)(e.state,t.state)}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){e.exports=n(1)(132)},function(e,t,n){e.exports=n(1)(242)},function(e,t,n){e.exports=n(1)(253)},function(e,t,n){"use strict";t.__esModule=!0,t.createPath=t.parsePath=t.locationsAreEqual=t.createLocation=t.createMemoryHistory=t.createHashHistory=t.createBrowserHistory=void 0;var r=n(14);Object.defineProperty(t,"createLocation",{enumerable:!0,get:function(){return r.createLocation}}),Object.defineProperty(t,"locationsAreEqual",{enumerable:!0,get:function(){return r.locationsAreEqual}});var o=n(11);Object.defineProperty(t,"parsePath",{enumerable:!0,get:function(){return o.parsePath}}),Object.defineProperty(t,"createPath",{enumerable:!0,get:function(){return o.createPath}});var i=l(n(59)),a=l(n(60)),s=l(n(61));function l(e){return e&&e.__esModule?e:{default:e}}t.createBrowserHistory=i.default,t.createHashHistory=a.default,t.createMemoryHistory=s.default},function(e,t,n){e.exports=n(1)(19)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(15));t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,r.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,o,i){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof o?o(a,i):((0,r.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==a)}else i(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(62));t.default=r.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(36);t.UnityVersion=o.UnityVersion;var i=r(n(84));t.UnityContent=i.default;var a=r(n(85));t.default=a.default},function(e,t){e.exports=require("timers")},function(e,t,n){e.exports=n.p+"ca6e18d297f499728270623baa09432b.jpg"},function(e,t,n){e.exports=n.p+"a1d58cf19b77fb6f6917befb472cdc8d.jpg"},function(e,t,n){e.exports=n.p+"6b7dcfac373293aa5eadf6eb0a29418e.jpg"},function(e,t,n){e.exports=n.p+"f215b8ab565c09e3da83575440569612.jpg"},function(e,t,n){e.exports=n.p+"f2f30dc7704b93cd414dba2533f7a0f7.jpg"},function(e,t,n){e.exports=n.p+"6254da913578421dc62065fede06f3e9.jpg"},function(e,t,n){e.exports=n.p+"e2b29d705fb34bbfc88be3bd0dfd2e3f.jpg"},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n(0)),i=l(n(6)),a=l(n(20)),s=n(19);function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},f=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!u(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);(0,a.default)(this.context.router,"You should not use <Link> outside a <Router>"),(0,a.default)(void 0!==t,'You must specify the "to" property');var l=this.context.router.history,c="string"==typeof t?(0,s.createLocation)(t,null,null,l.location):t,u=l.createHref(c);return o.default.createElement("a",r({},i,{onClick:this.handleClick,href:u,ref:n}))},t}(o.default.Component);f.propTypes={onClick:i.default.func,target:i.default.string,replace:i.default.bool,to:i.default.oneOfType([i.default.string,i.default.object]).isRequired,innerRef:i.default.oneOfType([i.default.string,i.default.func])},f.defaultProps={replace:!1},f.contextTypes={router:i.default.shape({history:i.default.shape({push:i.default.func.isRequired,replace:i.default.func.isRequired,createHref:i.default.func.isRequired}).isRequired}).isRequired},t.default=f},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(67));t.default=r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.UNITY_5_6=0]="UNITY_5_6",e[e.UNITY_2017=1]="UNITY_2017",e[e.UNITY_2018=2]="UNITY_2018"}(t.UnityVersion||(t.UnityVersion={}))},function(e,t,n){"use strict"},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(97));t.default={CAROUSEL:function(e){return(0,r.default)({carousel:!0,"carousel-slider":e})},WRAPPER:function(e,t){return(0,r.default)({"thumbs-wrapper":!e,"slider-wrapper":e,"axis-horizontal":"horizontal"===t,"axis-vertical":"horizontal"!==t})},SLIDER:function(e,t){return(0,r.default)({thumbs:!e,slider:e,animated:!t})},ITEM:function(e,t){return(0,r.default)({thumb:!e,slide:e,selected:t})},ARROW_PREV:function(e){return(0,r.default)({"control-arrow control-prev":!0,"control-disabled":e})},ARROW_NEXT:function(e){return(0,r.default)({"control-arrow control-next":!0,"control-disabled":e})},DOT:function(e){return(0,r.default)({dot:!0,selected:e})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return"translate3d"+("("+("horizontal"===t?[e,0,0]:[0,e,0]).join(",")+")")}},function(e,t,n){var r,o,i;o=[t,n(98)],void 0===(i="function"==typeof(r=function(e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(e){return e&&e.__esModule?e:{default:e}}(t);e.default=n.default})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=p(i),s=p(n(6)),l=p(n(40)),c=n(99),u=p(n(41)),f=p(n(42));function p(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return h.call(n),n.state={selectedItem:e.selectedItem,hasMount:!1,firstItem:0,itemSize:null,visibleItems:0,lastPosition:0,showArrows:!1,images:n.getImages()},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"componentDidMount",value:function(e){this.setupThumbs()}},{key:"componentWillReceiveProps",value:function(e,t){e.selectedItem!==this.state.selectedItem&&this.setState({selectedItem:e.selectedItem,firstItem:this.getFirstItem(e.selectedItem)}),e.children!==this.props.children&&this.setState({images:this.getImages()})}},{key:"componentDidUpdate",value:function(e){this.props.children!==e.children&&this.updateSizes()}},{key:"componentWillUnmount",value:function(){this.destroyThumbs()}},{key:"setupThumbs",value:function(){window.addEventListener("resize",this.updateSizes),window.addEventListener("DOMContentLoaded",this.updateSizes),this.updateSizes()}},{key:"destroyThumbs",value:function(){window.removeEventListener("resize",this.updateSizes),window.removeEventListener("DOMContentLoaded",this.updateSizes)}},{key:"getImages",value:function(){var e=i.Children.map(this.props.children,function(e,t){var n=e;return"img"!==e.type&&(n=i.Children.toArray(e.props.children).filter(function(e){return"img"===e.type})[0]),n&&0!==n.length?n:null});return 0===e.filter(function(e){return null!==e}).length?(console.warn("No images found! Can't build the thumb list without images. If you don't need thumbs, set showThumbs={false} in the Carousel. Note that it's not possible to get images rendered inside custom components. More info at https://github.com/leandrowd/react-responsive-carousel/blob/master/TROUBLESHOOTING.md"),null):e}},{key:"getFirstItem",value:function(e){var t=e;return e>=this.state.lastPosition&&(t=this.state.lastPosition),e<this.state.firstItem+this.state.visibleItems&&(t=this.state.firstItem),e<this.state.firstItem&&(t=e),t}},{key:"renderItems",value:function(){var e=this;return this.state.images.map(function(t,n){var o=l.default.ITEM(!1,n===e.state.selectedItem&&e.state.hasMount),i={key:n,ref:function(t){return e.setThumbsRef(t,n)},className:o,onClick:e.handleClickItem.bind(e,n,e.props.children[n]),onKeyDown:e.handleClickItem.bind(e,n,e.props.children[n])};return 0===n&&(t=a.default.cloneElement(t,{onLoad:e.setMountState})),a.default.createElement("li",r({},i,{role:"button",tabIndex:0}),t)})}},{key:"render",value:function(){if(!this.props.children)return null;var e,t=this.state.showArrows&&this.state.firstItem>0,n=this.state.showArrows&&this.state.firstItem<this.state.lastPosition,r=-this.state.firstItem*this.state.itemSize+"px",o=(0,u.default)(r,this.props.axis),i=this.props.transitionTime+"ms";return e={WebkitTransform:o,MozTransform:o,MsTransform:o,OTransform:o,transform:o,msTransform:o,WebkitTransitionDuration:i,MozTransitionDuration:i,MsTransitionDuration:i,OTransitionDuration:i,transitionDuration:i,msTransitionDuration:i},a.default.createElement("div",{className:l.default.CAROUSEL(!1)},a.default.createElement("div",{className:l.default.WRAPPER(!1),ref:this.setItemsWrapperRef},a.default.createElement("button",{type:"button",className:l.default.ARROW_PREV(!t),onClick:this.slideRight}),a.default.createElement(f.default,{tagName:"ul",selectedItem:this.state.selectedItem,className:l.default.SLIDER(!1,this.state.swiping),onSwipeLeft:this.slideLeft,onSwipeRight:this.slideRight,onSwipeMove:this.onSwipeMove,onSwipeStart:this.onSwipeStart,onSwipeEnd:this.onSwipeEnd,style:e,ref:this.setItemsListRef},this.renderItems()),a.default.createElement("button",{type:"button",className:l.default.ARROW_NEXT(!n),onClick:this.slideLeft})))}}]),t}();d.displayName="Thumbs",d.propsTypes={children:s.default.element.isRequired,transitionTime:s.default.number,selectedItem:s.default.number,thumbWidth:s.default.number},d.defaultProps={selectedItem:0,transitionTime:350,axis:"horizontal"};var h=function(){var e=this;this.setItemsWrapperRef=function(t){e.itemsWrapperRef=t},this.setItemsListRef=function(t){e.itemsListRef=t},this.setThumbsRef=function(t,n){e.thumbsRef||(e.thumbsRef=[]),e.thumbsRef[n]=t},this.updateSizes=function(){if(e.props.children&&e.itemsWrapperRef){var t=e.props.children.length,n=e.itemsWrapperRef.clientWidth,r=e.props.thumbWidth?e.props.thumbWidth:(0,c.outerWidth)(e.thumbsRef[0]),o=Math.floor(n/r),i=t-o,a=o<t;e.setState(function(t,n){return{itemSize:r,visibleItems:o,firstItem:a?e.getFirstItem(n.selectedItem):0,lastPosition:i,showArrows:a}})}},this.setMountState=function(){e.setState({hasMount:!0}),e.updateSizes()},this.handleClickItem=function(t,n,r){if(!r.keyCode||"Enter"===r.key){var o=e.props.onSelectItem;"function"==typeof o&&o(t,n)}},this.onSwipeStart=function(){e.setState({swiping:!0})},this.onSwipeEnd=function(){e.setState({swiping:!1})},this.onSwipeMove=function(t){var n=-e.state.firstItem*e.state.itemSize,r=-e.state.visibleItems*e.state.itemSize;0===n&&t>0&&(t=0),n===r&&t<0&&(t=0);var o=n+100/(e.itemsWrapperRef.clientWidth/t)+"%";e.itemsListRef&&["WebkitTransform","MozTransform","MsTransform","OTransform","transform","msTransform"].forEach(function(t){e.itemsListRef.style[t]=(0,u.default)(o,e.props.axis)})},this.slideRight=function(t){e.moveTo(e.state.firstItem-("number"==typeof t?t:1))},this.slideLeft=function(t){e.moveTo(e.state.firstItem+("number"==typeof t?t:1))},this.moveTo=function(t){t=(t=t<0?0:t)>=e.lastPosition?e.lastPosition:t,e.setState({firstItem:t,selectedItem:e.state.selectedItem})}};t.default=d},function(e,t,n){e.exports=n(1)(481)},function(e,t,n){e.exports=n(1)(260)},function(e,t,n){e.exports=n(1)(478)},function(e,t,n){e.exports=n(1)(186)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(92));t.default=r.default,e.exports=t.default},function(e,t,n){e.exports=n(1)(246)},function(e,t,n){e.exports=n.p+"6a50cb30e6d0464aba45ec14263058d2.jpg"},function(e,t,n){e.exports=n.p+"d1c37ec98e69508cb302acdd4e208240.jpg"},function(e,t,n){e.exports=n(1)(189)},function(e,t,n){"use strict";e.exports=n(101)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DebounceCache=t.onlyResolvesLast=t.debounce=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){return e&&e.__esModule?e:{default:e}}(n(114));var i=t.debounce=function(e,t,n){return(0,o.default)(e,t,n)},a=t.onlyResolvesLast=function(e){var t=void 0;return function(){t&&t();var n=function(e){var t=!1;return{promise:new Promise(function(n,r){e.then(function(e){return t?void 0:n(e)},function(e){return t?void 0:r(e)})}),cancel:function(){t=!0}}}(e.apply(void 0,arguments)),r=n.promise,o=n.cancel;return t=o,r}},s=t.DebounceCache=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.getDebouncedFunction=function(e,n,r,o){var s=r.key,l=r.onlyResolvesLast,c=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(r,["key","onlyResolvesLast"]),u=s.apply(void 0,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(o));if(!t.debounceCache[u]){var f=i(e,n,c);l&&(f=a(f)),t.debounceCache[u]=f}return t.debounceCache[u]},this.debounceCache={}},l={key:function(){return null},onlyResolvesLast:!0};t.default=function(e,t,n){var o=r({},l,n),i=new s;return function(){for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];return i.getDebouncedFunction(e,t,o,r).apply(void 0,r)}}},function(e,t,n){e.exports=n(1)(309)},function(e,t,n){"use strict";t.__esModule=!0;var r=l(n(32)),o=l(n(0)),i=l(n(6)),a=n(19),s=l(n(22));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.history=(0,a.createBrowserHistory)(r.props),c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,r.default)(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return o.default.createElement(s.default,{history:this.history,children:this.props.children})},t}(o.default.Component);u.propTypes={basename:i.default.string,forceRefresh:i.default.bool,getUserConfirmation:i.default.func,keyLength:i.default.number,children:i.default.node},t.default=u},function(e,t,n){e.exports=n(1)(140)},function(e,t,n){e.exports=n(1)(141)},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=f(n(15)),a=f(n(20)),s=n(14),l=n(11),c=f(n(21)),u=n(33);function f(e){return e&&e.__esModule?e:{default:e}}var p=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(u.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,u.supportsHistory)(),f=!(0,u.supportsPopStateOnHashChange)(),d=e.forceRefresh,h=void 0!==d&&d,m=e.getUserConfirmation,v=void 0===m?u.getConfirmation:m,y=e.keyLength,b=void 0===y?6:y,g=e.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(e.basename)):"",_=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,i.default)(!g||(0,l.hasBasename)(a,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+g+'".'),g&&(a=(0,l.stripBasename)(a,g)),(0,s.createLocation)(a,r,n)},w=function(){return Math.random().toString(36).substr(2,b)},E=(0,c.default)(),S=function(e){o(I,e),I.length=t.length,E.notifyListeners(I.location,I.action)},O=function(e){(0,u.isExtraneousPopstateEvent)(e)||R(_(e.state))},P=function(){R(_(p()))},k=!1,R=function(e){k?(k=!1,S()):E.confirmTransitionTo(e,"POP",v,function(t){t?S({action:"POP",location:e}):j(e)})},j=function(e){var t=I.location,n=x.indexOf(t.key);-1===n&&(n=0);var r=x.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(k=!0,L(o))},C=_(p()),x=[C.key],T=function(e){return g+(0,l.createPath)(e)},L=function(e){t.go(e)},M=0,N=function(e){1===(M+=e)?((0,u.addEventListener)(window,"popstate",O),f&&(0,u.addEventListener)(window,"hashchange",P)):0===M&&((0,u.removeEventListener)(window,"popstate",O),f&&(0,u.removeEventListener)(window,"hashchange",P))},A=!1,I={length:t.length,action:"POP",location:C,createHref:T,push:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,s.createLocation)(e,o,w(),I.location);E.confirmTransitionTo(a,"PUSH",v,function(e){if(e){var r=T(a),o=a.key,s=a.state;if(n)if(t.pushState({key:o,state:s},null,r),h)window.location.href=r;else{var l=x.indexOf(I.location.key),c=x.slice(0,-1===l?0:l+1);c.push(a.key),x=c,S({action:"PUSH",location:a})}else(0,i.default)(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,s.createLocation)(e,o,w(),I.location);E.confirmTransitionTo(a,"REPLACE",v,function(e){if(e){var r=T(a),o=a.key,s=a.state;if(n)if(t.replaceState({key:o,state:s},null,r),h)window.location.replace(r);else{var l=x.indexOf(I.location.key);-1!==l&&(x[l]=a.key),S({action:"REPLACE",location:a})}else(0,i.default)(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:L,goBack:function(){return L(-1)},goForward:function(){return L(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return A||(N(1),A=!0),function(){return A&&(A=!1,N(-1)),t()}},listen:function(e){var t=E.appendListener(e);return N(1),function(){N(-1),t()}}};return I}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(15)),i=u(n(20)),a=n(14),s=n(11),l=u(n(21)),c=n(33);function u(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,s.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:s.stripLeadingSlash,decodePath:s.addLeadingSlash},slash:{encodePath:s.addLeadingSlash,decodePath:s.addLeadingSlash}},p=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},d=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(c.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,c.supportsGoWithoutReloadUsingHash)(),u=e.getUserConfirmation,h=void 0===u?c.getConfirmation:u,m=e.hashType,v=void 0===m?"slash":m,y=e.basename?(0,s.stripTrailingSlash)((0,s.addLeadingSlash)(e.basename)):"",b=f[v],g=b.encodePath,_=b.decodePath,w=function(){var e=_(p());return(0,o.default)(!y||(0,s.hasBasename)(e,y),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+y+'".'),y&&(e=(0,s.stripBasename)(e,y)),(0,a.createLocation)(e)},E=(0,l.default)(),S=function(e){r(F,e),F.length=t.length,E.notifyListeners(F.location,F.action)},O=!1,P=null,k=function(){var e=p(),t=g(e);if(e!==t)d(t);else{var n=w(),r=F.location;if(!O&&(0,a.locationsAreEqual)(r,n))return;if(P===(0,s.createPath)(n))return;P=null,R(n)}},R=function(e){O?(O=!1,S()):E.confirmTransitionTo(e,"POP",h,function(t){t?S({action:"POP",location:e}):j(e)})},j=function(e){var t=F.location,n=L.lastIndexOf((0,s.createPath)(t));-1===n&&(n=0);var r=L.lastIndexOf((0,s.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(O=!0,M(o))},C=p(),x=g(C);C!==x&&d(x);var T=w(),L=[(0,s.createPath)(T)],M=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},N=0,A=function(e){1===(N+=e)?(0,c.addEventListener)(window,"hashchange",k):0===N&&(0,c.removeEventListener)(window,"hashchange",k)},I=!1,F={length:t.length,action:"POP",location:T,createHref:function(e){return"#"+g(y+(0,s.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,F.location);E.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(y+t);if(p()!==r){P=t,function(e){window.location.hash=e}(r);var i=L.lastIndexOf((0,s.createPath)(F.location)),a=L.slice(0,-1===i?0:i+1);a.push(t),L=a,S({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),S()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,F.location);E.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(y+t);p()!==r&&(P=t,d(r));var o=L.indexOf((0,s.createPath)(F.location));-1!==o&&(L[o]=t),S({action:"REPLACE",location:n})}})},go:M,goBack:function(){return M(-1)},goForward:function(){return M(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return I||(A(1),I=!0),function(){return I&&(I=!1,A(-1)),t()}},listen:function(e){var t=E.appendListener(e);return A(1),function(){A(-1),t()}}};return F}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=c(n(15)),a=n(11),s=n(14),l=c(n(21));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,c=void 0===n?["/"]:n,f=e.initialIndex,p=void 0===f?0:f,d=e.keyLength,h=void 0===d?6:d,m=(0,l.default)(),v=function(e){o(E,e),E.length=E.entries.length,m.notifyListeners(E.location,E.action)},y=function(){return Math.random().toString(36).substr(2,h)},b=u(p,0,c.length-1),g=c.map(function(e){return"string"==typeof e?(0,s.createLocation)(e,void 0,y()):(0,s.createLocation)(e,void 0,e.key||y())}),_=a.createPath,w=function(e){var n=u(E.index+e,0,E.entries.length-1),r=E.entries[n];m.confirmTransitionTo(r,"POP",t,function(e){e?v({action:"POP",location:r,index:n}):v()})},E={length:g.length,action:"POP",location:g[b],index:b,entries:g,createHref:_,push:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,y(),E.location);m.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=E.index+1,n=E.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),v({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,y(),E.location);m.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(E.entries[E.index]=o,v({action:"REPLACE",location:o}))})},go:w,goBack:function(){return w(-1)},goForward:function(){return w(1)},canGo:function(e){var t=E.index+e;return t>=0&&t<E.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return E}},function(e,t,n){e.exports=n(1)(87)},function(e,t,n){"use strict";t.__esModule=!0;var r=l(n(32)),o=l(n(0)),i=l(n(6)),a=n(19),s=l(n(22));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.history=(0,a.createHashHistory)(r.props),c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,r.default)(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return o.default.createElement(s.default,{history:this.history,children:this.props.children})},t}(o.default.Component);u.propTypes={basename:i.default.string,getUserConfirmation:i.default.func,hashType:i.default.oneOf(["hashbang","noslash","slash"]),children:i.default.node},t.default=u},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(65));t.default=r.default},function(e,t,n){e.exports=n(1)(284)},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=c(n(0)),a=c(n(6)),s=c(n(35)),l=c(n(34));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e){var t=e.to,n=e.exact,a=e.strict,c=e.location,u=e.activeClassName,f=e.className,p=e.activeStyle,d=e.style,h=e.isActive,m=e["aria-current"],v=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),y="object"===(void 0===t?"undefined":o(t))?t.pathname:t,b=y&&y.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return i.default.createElement(s.default,{path:b,exact:n,strict:a,location:c,children:function(e){var n=e.location,o=e.match,a=!!(h?h(o,n):o);return i.default.createElement(l.default,r({to:t,className:a?[f,u].filter(function(e){return e}).join(" "):f,style:a?r({},d,p):d,"aria-current":a&&m||null},v))}})};u.propTypes={to:l.default.propTypes.to,exact:a.default.bool,strict:a.default.bool,location:a.default.object,activeClassName:a.default.string,className:a.default.string,activeStyle:a.default.object,style:a.default.object,isActive:a.default.func,"aria-current":a.default.oneOf(["page","step","location","date","time","true"])},u.defaultProps={activeClassName:"active","aria-current":"page"},t.default=u},function(e,t,n){e.exports=n(1)(154)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(69));t.default=r.default},function(e,t,n){e.exports=n(1)(288)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(71));t.default=r.default},function(e,t,n){e.exports=n(1)(289)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(73));t.default=r.default},function(e,t,n){e.exports=n(1)(291)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(75));t.default=r.default},function(e,t,n){e.exports=n(1)(292)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(77));t.default=r.default},function(e,t,n){e.exports=n(1)(152)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(79));t.default=r.default},function(e,t,n){e.exports=n(1)(88)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(81));t.default=r.default},function(e,t,n){e.exports=n(1)(293)},function(e,t){},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(36);n(37);var o=function(){function e(t,n,o){var i=o||{};this.buildJsonPath=t,this.unityLoaderJsPath=n,this.uniqueID=++e.uniqueID,this.unityEvents=[],this.unityConfig={modules:i.modules||{},unityVersion:i.unityVersion||r.UnityVersion.UNITY_2018,adjustOnWindowResize:i.adjustOnWindowResize,id:i.id||"nill"}}return e.prototype.setComponentInstance=function(e){this.unityComponent=e},e.prototype.setUnityInstance=function(e){this.unityInstance=e},e.prototype.setFullscreen=function(e){null!=this.unityInstance&&this.unityInstance.SetFullscreen(!0===e?1:0)},e.prototype.send=function(e,t,n){null!=this.unityInstance&&(void 0===n?this.unityInstance.SendMessage(e,t):this.unityInstance.SendMessage(e,t,n))},e.prototype.on=function(e,t){this.unityEvents.push({eventName:e,eventCallback:t}),void 0===window.ReactUnityWebGL&&(window.ReactUnityWebGL={}),window.ReactUnityWebGL[e]=function(e){return t(e)}},e.prototype.triggerUnityEvent=function(e,t){for(var n=0;n<this.unityEvents.length;n++)this.unityEvents[n].eventName===e&&this.unityEvents[n].eventCallback(t)},e.uniqueID=0,e}();t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(86)),s=i(n(91));n(37);var l=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n.unityLoaderService=new s.default,n.onWindowResizeBinding=n.onWindowResize.bind(n),n.unityContent=n.props.unityContent,n.unityContent.setComponentInstance(n),n}return r(t,e),t.prototype.onProgress=function(e,t){this.unityContent.triggerUnityEvent("progress",t),1===t&&this.unityContent.triggerUnityEvent("loaded")},t.prototype.onWindowResize=function(){!0===this.unityContent.unityConfig.adjustOnWindowResize&&this.adjustCanvasToContainer()},t.prototype.adjustCanvasToContainer=function(){var e=this.htmlElement.offsetWidth,t=this.htmlElement.offsetHeight,n=this.htmlElement.getElementsByTagName("canvas")[0];null!==n&&(n.height!==t&&(n.height=t),n.width!==e&&(n.width=e))},t.prototype.componentDidMount=function(){var e=this;window.addEventListener("resize",this.onWindowResizeBinding),this.unityLoaderService.append(this.props.unityContent.unityLoaderJsPath,function(){e.unityContent.setUnityInstance(UnityLoader.instantiate("__ReactUnityWebGL_"+e.props.unityContent.uniqueID+"__",e.props.unityContent.buildJsonPath,{onProgress:e.onProgress.bind(e),Module:e.props.unityContent.unityConfig.modules,width:"100%",height:"100%"}))})},t.prototype.componentWillUnmount=function(){window.removeEventListener("resize",this.onWindowResizeBinding)},t.prototype.render=function(){var e=this;return a.createElement("div",{className:this.props.className||"",ref:function(t){return e.htmlElement=t},id:"__ReactUnityWebGL_"+this.props.unityContent.uniqueID+"__",style:{width:this.props.width||"800px",height:this.props.height||"600px"}})},t}(a.Component);t.default=l},function(e,t,n){"use strict";e.exports=n(87)},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(88),o=n(89),i=n(90),a=n(38),s="function"==typeof Symbol&&Symbol.for,l=s?Symbol.for("react.element"):60103,c=s?Symbol.for("react.portal"):60106,u=s?Symbol.for("react.fragment"):60107,f=s?Symbol.for("react.strict_mode"):60108,p=s?Symbol.for("react.profiler"):60114,d=s?Symbol.for("react.provider"):60109,h=s?Symbol.for("react.context"):60110,m=s?Symbol.for("react.async_mode"):60111,v=s?Symbol.for("react.forward_ref"):60112;s&&Symbol.for("react.timeout");var y="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function _(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||g}function w(){}function E(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||g}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=_.prototype;var S=E.prototype=new w;S.constructor=E,r(S,_.prototype),S.isPureReactComponent=!0;var O={current:null},P=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function R(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)P.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:l,type:e,key:i,ref:a,props:o,_owner:O.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var C=/\/+/g,x=[];function T(e,t,n,r){if(x.length){var o=x.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function L(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>x.length&&x.push(e)}function M(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case l:case c:i=!0}}if(i)return n(r,e,""===t?"."+N(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var s=t+N(o=e[a],a);i+=M(o,s,n,r)}else if(null===e||void 0===e?s=null:s="function"==typeof(s=y&&e[y]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),a=0;!(o=e.next()).done;)i+=M(o=o.value,s=t+N(o,a++),n,r);else"object"===o&&b("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,a.thatReturnsArgument):null!=e&&(j(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(C,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(C,"$&/")+"/"),t=T(t,i,r,o),null==e||M(e,"",I,t),L(t)}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=T(null,null,t,n),null==e||M(e,"",A,t),L(t)},count:function(e){return null==e?0:M(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return F(e,t,null,a.thatReturnsArgument),t},only:function(e){return j(e)||b("143"),e}},createRef:function(){return{current:null}},Component:_,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:h,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:v,render:e}},Fragment:u,StrictMode:f,unstable_AsyncMode:m,unstable_Profiler:p,createElement:R,cloneElement:function(e,t,n){(null===e||void 0===e)&&b("267",e);var o=void 0,i=r({},e.props),a=e.key,s=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,c=O.current),void 0!==t.key&&(a=""+t.key);var u=void 0;for(o in e.type&&e.type.defaultProps&&(u=e.type.defaultProps),t)P.call(t,o)&&!k.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==u?u[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){u=Array(o);for(var f=0;f<o;f++)u[f]=arguments[f+2];i.children=u}return{$$typeof:l,type:e.type,key:a,ref:s,props:i,_owner:c}},createFactory:function(e){var t=R.bind(null,e);return t.type=e,t},isValidElement:j,version:"16.4.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:O,assign:r}},D={default:W},U=D&&W||D;e.exports=U.default?U.default:U},function(e,t,n){e.exports=n(1)(56)},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,s,l){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,o,i,a,s,l],f=0;(c=new Error(t.replace(/%s/g,function(){return u[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.documentHead=document.getElementsByTagName("head")[0]}return e.prototype.append=function(e,t){this.unityLoaderScript=document.createElement("script"),this.unityLoaderScript.type="text/javascript",this.unityLoaderScript.async=!0,this.unityLoaderScript.src=e,this.unityLoaderScript.onload=function(){t()},this.documentHead.appendChild(this.unityLoaderScript)},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=l(o),a=n(6),s=l(n(93));function l(e){return e&&e.__esModule?e:{default:e}}var c={"ps-scroll-y":"onScrollY","ps-scroll-x":"onScrollX","ps-scroll-up":"onScrollUp","ps-scroll-down":"onScrollDown","ps-scroll-left":"onScrollLeft","ps-scroll-right":"onScrollRight","ps-y-reach-start":"onYReachStart","ps-y-reach-end":"onYReachEnd","ps-x-reach-start":"onXReachStart","ps-x-reach-end":"onXReachEnd"};Object.freeze(c);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleRef=n.handleRef.bind(n),n._handlerByEvent={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this._ps=new s.default(this._container,this.props.option),this._updateEventHook()}},{key:"componentDidUpdate",value:function(e){this._updateEventHook(e),this._ps.update()}},{key:"componentWillUnmount",value:function(){var e=this;Object.keys(this._handlerByEvent).forEach(function(t){var n=e._handlerByEvent[t];n&&e._container.removeEventListener(t,n,!1)}),this._handlerByEvent={},this._ps.destroy(),this._ps=null}},{key:"_updateEventHook",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object.keys(c).forEach(function(n){var r=e.props[c[n]],o=t[c[n]];if(r!==o){if(o){var i=e._handlerByEvent[n];e._container.removeEventListener(n,i,!1),e._handlerByEvent[n]=null}if(r){var a=function(){return r(e._container)};e._container.addEventListener(n,a,!1),e._handlerByEvent[n]=a}}})}},{key:"updateScroll",value:function(){this._ps.update()}},{key:"handleRef",value:function(e){this._container=e,this.props.containerRef(e)}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.component,r=e.className,o=e.style,a=n;return i.default.createElement(a,{style:o,className:"scrollbar-container "+r,ref:this.handleRef},t)}}]),t}();t.default=u,u.defaultProps={className:"",style:void 0,option:void 0,containerRef:function(){},onScrollY:void 0,onScrollX:void 0,onScrollUp:void 0,onScrollDown:void 0,onScrollLeft:void 0,onScrollRight:void 0,onYReachStart:void 0,onYReachEnd:void 0,onXReachStart:void 0,onXReachEnd:void 0,component:"div"},u.propTypes={children:a.PropTypes.node.isRequired,className:a.PropTypes.string,style:a.PropTypes.object,option:a.PropTypes.object,containerRef:a.PropTypes.func,onScrollY:a.PropTypes.func,onScrollX:a.PropTypes.func,onScrollUp:a.PropTypes.func,onScrollDown:a.PropTypes.func,onScrollLeft:a.PropTypes.func,onScrollRight:a.PropTypes.func,onYReachStart:a.PropTypes.func,onYReachEnd:a.PropTypes.func,onXReachStart:a.PropTypes.func,onXReachEnd:a.PropTypes.func,component:a.PropTypes.string},e.exports=t.default},function(e,t,n){"use strict";
/*!
 * perfect-scrollbar v1.4.0
 * (c) 2018 Hyunje Jun
 * @license MIT
 */function r(e){return getComputedStyle(e)}function o(e,t){for(var n in t){var r=t[n];"number"==typeof r&&(r+="px"),e.style[n]=r}return e}function i(e){var t=document.createElement("div");return t.className=e,t}var a="undefined"!=typeof Element&&(Element.prototype.matches||Element.prototype.webkitMatchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector);function s(e,t){if(!a)throw new Error("No element matching method supported");return a.call(e,t)}function l(e){e.remove?e.remove():e.parentNode&&e.parentNode.removeChild(e)}function c(e,t){return Array.prototype.filter.call(e.children,function(e){return s(e,t)})}var u={main:"ps",element:{thumb:function(e){return"ps__thumb-"+e},rail:function(e){return"ps__rail-"+e},consuming:"ps__child--consume"},state:{focus:"ps--focus",clicking:"ps--clicking",active:function(e){return"ps--active-"+e},scrolling:function(e){return"ps--scrolling-"+e}}},f={x:null,y:null};function p(e,t){var n=e.element.classList,r=u.state.scrolling(t);n.contains(r)?clearTimeout(f[t]):n.add(r)}function d(e,t){f[t]=setTimeout(function(){return e.isAlive&&e.element.classList.remove(u.state.scrolling(t))},e.settings.scrollingThreshold)}var h=function(e){this.element=e,this.handlers={}},m={isEmpty:{configurable:!0}};h.prototype.bind=function(e,t){void 0===this.handlers[e]&&(this.handlers[e]=[]),this.handlers[e].push(t),this.element.addEventListener(e,t,!1)},h.prototype.unbind=function(e,t){var n=this;this.handlers[e]=this.handlers[e].filter(function(r){return!(!t||r===t)||(n.element.removeEventListener(e,r,!1),!1)})},h.prototype.unbindAll=function(){for(var e in this.handlers)this.unbind(e)},m.isEmpty.get=function(){var e=this;return Object.keys(this.handlers).every(function(t){return 0===e.handlers[t].length})},Object.defineProperties(h.prototype,m);var v=function(){this.eventElements=[]};function y(e){if("function"==typeof window.CustomEvent)return new CustomEvent(e);var t=document.createEvent("CustomEvent");return t.initCustomEvent(e,!1,!1,void 0),t}v.prototype.eventElement=function(e){var t=this.eventElements.filter(function(t){return t.element===e})[0];return t||(t=new h(e),this.eventElements.push(t)),t},v.prototype.bind=function(e,t,n){this.eventElement(e).bind(t,n)},v.prototype.unbind=function(e,t,n){var r=this.eventElement(e);r.unbind(t,n),r.isEmpty&&this.eventElements.splice(this.eventElements.indexOf(r),1)},v.prototype.unbindAll=function(){this.eventElements.forEach(function(e){return e.unbindAll()}),this.eventElements=[]},v.prototype.once=function(e,t,n){var r=this.eventElement(e),o=function(e){r.unbind(t,o),n(e)};r.bind(t,o)};var b=function(e,t,n,r,o){var i;if(void 0===r&&(r=!0),void 0===o&&(o=!1),"top"===t)i=["contentHeight","containerHeight","scrollTop","y","up","down"];else{if("left"!==t)throw new Error("A proper axis should be provided");i=["contentWidth","containerWidth","scrollLeft","x","left","right"]}!function(e,t,n,r,o){var i=n[0],a=n[1],s=n[2],l=n[3],c=n[4],u=n[5];void 0===r&&(r=!0);void 0===o&&(o=!1);var f=e.element;e.reach[l]=null,f[s]<1&&(e.reach[l]="start");f[s]>e[i]-e[a]-1&&(e.reach[l]="end");t&&(f.dispatchEvent(y("ps-scroll-"+l)),t<0?f.dispatchEvent(y("ps-scroll-"+c)):t>0&&f.dispatchEvent(y("ps-scroll-"+u)),r&&function(e,t){p(e,t),d(e,t)}(e,l));e.reach[l]&&(t||o)&&f.dispatchEvent(y("ps-"+l+"-reach-"+e.reach[l]))}(e,n,i,r,o)};function g(e){return parseInt(e,10)||0}var _={isWebKit:"undefined"!=typeof document&&"WebkitAppearance"in document.documentElement.style,supportsTouch:"undefined"!=typeof window&&("ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch),supportsIePointer:"undefined"!=typeof navigator&&navigator.msMaxTouchPoints,isChrome:"undefined"!=typeof navigator&&/Chrome/i.test(navigator&&navigator.userAgent)},w=function(e){var t=e.element,n=Math.floor(t.scrollTop);e.containerWidth=t.clientWidth,e.containerHeight=t.clientHeight,e.contentWidth=t.scrollWidth,e.contentHeight=t.scrollHeight,t.contains(e.scrollbarXRail)||(c(t,u.element.rail("x")).forEach(function(e){return l(e)}),t.appendChild(e.scrollbarXRail)),t.contains(e.scrollbarYRail)||(c(t,u.element.rail("y")).forEach(function(e){return l(e)}),t.appendChild(e.scrollbarYRail)),!e.settings.suppressScrollX&&e.containerWidth+e.settings.scrollXMarginOffset<e.contentWidth?(e.scrollbarXActive=!0,e.railXWidth=e.containerWidth-e.railXMarginWidth,e.railXRatio=e.containerWidth/e.railXWidth,e.scrollbarXWidth=E(e,g(e.railXWidth*e.containerWidth/e.contentWidth)),e.scrollbarXLeft=g((e.negativeScrollAdjustment+t.scrollLeft)*(e.railXWidth-e.scrollbarXWidth)/(e.contentWidth-e.containerWidth))):e.scrollbarXActive=!1,!e.settings.suppressScrollY&&e.containerHeight+e.settings.scrollYMarginOffset<e.contentHeight?(e.scrollbarYActive=!0,e.railYHeight=e.containerHeight-e.railYMarginHeight,e.railYRatio=e.containerHeight/e.railYHeight,e.scrollbarYHeight=E(e,g(e.railYHeight*e.containerHeight/e.contentHeight)),e.scrollbarYTop=g(n*(e.railYHeight-e.scrollbarYHeight)/(e.contentHeight-e.containerHeight))):e.scrollbarYActive=!1,e.scrollbarXLeft>=e.railXWidth-e.scrollbarXWidth&&(e.scrollbarXLeft=e.railXWidth-e.scrollbarXWidth),e.scrollbarYTop>=e.railYHeight-e.scrollbarYHeight&&(e.scrollbarYTop=e.railYHeight-e.scrollbarYHeight),function(e,t){var n={width:t.railXWidth},r=Math.floor(e.scrollTop);t.isRtl?n.left=t.negativeScrollAdjustment+e.scrollLeft+t.containerWidth-t.contentWidth:n.left=e.scrollLeft;t.isScrollbarXUsingBottom?n.bottom=t.scrollbarXBottom-r:n.top=t.scrollbarXTop+r;o(t.scrollbarXRail,n);var i={top:r,height:t.railYHeight};t.isScrollbarYUsingRight?t.isRtl?i.right=t.contentWidth-(t.negativeScrollAdjustment+e.scrollLeft)-t.scrollbarYRight-t.scrollbarYOuterWidth:i.right=t.scrollbarYRight-e.scrollLeft:t.isRtl?i.left=t.negativeScrollAdjustment+e.scrollLeft+2*t.containerWidth-t.contentWidth-t.scrollbarYLeft-t.scrollbarYOuterWidth:i.left=t.scrollbarYLeft+e.scrollLeft;o(t.scrollbarYRail,i),o(t.scrollbarX,{left:t.scrollbarXLeft,width:t.scrollbarXWidth-t.railBorderXWidth}),o(t.scrollbarY,{top:t.scrollbarYTop,height:t.scrollbarYHeight-t.railBorderYWidth})}(t,e),e.scrollbarXActive?t.classList.add(u.state.active("x")):(t.classList.remove(u.state.active("x")),e.scrollbarXWidth=0,e.scrollbarXLeft=0,t.scrollLeft=0),e.scrollbarYActive?t.classList.add(u.state.active("y")):(t.classList.remove(u.state.active("y")),e.scrollbarYHeight=0,e.scrollbarYTop=0,t.scrollTop=0)};function E(e,t){return e.settings.minScrollbarLength&&(t=Math.max(t,e.settings.minScrollbarLength)),e.settings.maxScrollbarLength&&(t=Math.min(t,e.settings.maxScrollbarLength)),t}function S(e,t){var n=t[0],r=t[1],o=t[2],i=t[3],a=t[4],s=t[5],l=t[6],c=t[7],f=t[8],h=e.element,m=null,v=null,y=null;function b(t){h[l]=m+y*(t[o]-v),p(e,c),w(e),t.stopPropagation(),t.preventDefault()}function g(){d(e,c),e[f].classList.remove(u.state.clicking),e.event.unbind(e.ownerDocument,"mousemove",b)}e.event.bind(e[a],"mousedown",function(t){m=h[l],v=t[o],y=(e[r]-e[n])/(e[i]-e[s]),e.event.bind(e.ownerDocument,"mousemove",b),e.event.once(e.ownerDocument,"mouseup",g),e[f].classList.add(u.state.clicking),t.stopPropagation(),t.preventDefault()})}var O={"click-rail":function(e){e.event.bind(e.scrollbarY,"mousedown",function(e){return e.stopPropagation()}),e.event.bind(e.scrollbarYRail,"mousedown",function(t){var n=t.pageY-window.pageYOffset-e.scrollbarYRail.getBoundingClientRect().top>e.scrollbarYTop?1:-1;e.element.scrollTop+=n*e.containerHeight,w(e),t.stopPropagation()}),e.event.bind(e.scrollbarX,"mousedown",function(e){return e.stopPropagation()}),e.event.bind(e.scrollbarXRail,"mousedown",function(t){var n=t.pageX-window.pageXOffset-e.scrollbarXRail.getBoundingClientRect().left>e.scrollbarXLeft?1:-1;e.element.scrollLeft+=n*e.containerWidth,w(e),t.stopPropagation()})},"drag-thumb":function(e){S(e,["containerWidth","contentWidth","pageX","railXWidth","scrollbarX","scrollbarXWidth","scrollLeft","x","scrollbarXRail"]),S(e,["containerHeight","contentHeight","pageY","railYHeight","scrollbarY","scrollbarYHeight","scrollTop","y","scrollbarYRail"])},keyboard:function(e){var t=e.element;e.event.bind(e.ownerDocument,"keydown",function(n){if(!(n.isDefaultPrevented&&n.isDefaultPrevented()||n.defaultPrevented)&&(s(t,":hover")||s(e.scrollbarX,":focus")||s(e.scrollbarY,":focus"))){var r=document.activeElement?document.activeElement:e.ownerDocument.activeElement;if(r){if("IFRAME"===r.tagName)r=r.contentDocument.activeElement;else for(;r.shadowRoot;)r=r.shadowRoot.activeElement;if(function(e){return s(e,"input,[contenteditable]")||s(e,"select,[contenteditable]")||s(e,"textarea,[contenteditable]")||s(e,"button,[contenteditable]")}(r))return}var o=0,i=0;switch(n.which){case 37:o=n.metaKey?-e.contentWidth:n.altKey?-e.containerWidth:-30;break;case 38:i=n.metaKey?e.contentHeight:n.altKey?e.containerHeight:30;break;case 39:o=n.metaKey?e.contentWidth:n.altKey?e.containerWidth:30;break;case 40:i=n.metaKey?-e.contentHeight:n.altKey?-e.containerHeight:-30;break;case 32:i=n.shiftKey?e.containerHeight:-e.containerHeight;break;case 33:i=e.containerHeight;break;case 34:i=-e.containerHeight;break;case 36:i=e.contentHeight;break;case 35:i=-e.contentHeight;break;default:return}e.settings.suppressScrollX&&0!==o||e.settings.suppressScrollY&&0!==i||(t.scrollTop-=i,t.scrollLeft+=o,w(e),function(n,r){var o=Math.floor(t.scrollTop);if(0===n){if(!e.scrollbarYActive)return!1;if(0===o&&r>0||o>=e.contentHeight-e.containerHeight&&r<0)return!e.settings.wheelPropagation}var i=t.scrollLeft;if(0===r){if(!e.scrollbarXActive)return!1;if(0===i&&n<0||i>=e.contentWidth-e.containerWidth&&n>0)return!e.settings.wheelPropagation}return!0}(o,i)&&n.preventDefault())}})},wheel:function(e){var t=e.element;function n(n){var o=function(e){var t=e.deltaX,n=-1*e.deltaY;return void 0!==t&&void 0!==n||(t=-1*e.wheelDeltaX/6,n=e.wheelDeltaY/6),e.deltaMode&&1===e.deltaMode&&(t*=10,n*=10),t!=t&&n!=n&&(t=0,n=e.wheelDelta),e.shiftKey?[-n,-t]:[t,n]}(n),i=o[0],a=o[1];if(!function(e,n,o){if(!_.isWebKit&&t.querySelector("select:focus"))return!0;if(!t.contains(e))return!1;for(var i=e;i&&i!==t;){if(i.classList.contains(u.element.consuming))return!0;var a=r(i);if([a.overflow,a.overflowX,a.overflowY].join("").match(/(scroll|auto)/)){var s=i.scrollHeight-i.clientHeight;if(s>0&&!(0===i.scrollTop&&o>0||i.scrollTop===s&&o<0))return!0;var l=i.scrollWidth-i.clientWidth;if(l>0&&!(0===i.scrollLeft&&n<0||i.scrollLeft===l&&n>0))return!0}i=i.parentNode}return!1}(n.target,i,a)){var s=!1;e.settings.useBothWheelAxes?e.scrollbarYActive&&!e.scrollbarXActive?(a?t.scrollTop-=a*e.settings.wheelSpeed:t.scrollTop+=i*e.settings.wheelSpeed,s=!0):e.scrollbarXActive&&!e.scrollbarYActive&&(i?t.scrollLeft+=i*e.settings.wheelSpeed:t.scrollLeft-=a*e.settings.wheelSpeed,s=!0):(t.scrollTop-=a*e.settings.wheelSpeed,t.scrollLeft+=i*e.settings.wheelSpeed),w(e),(s=s||function(n,r){var o=Math.floor(t.scrollTop),i=0===t.scrollTop,a=o+t.offsetHeight===t.scrollHeight,s=0===t.scrollLeft,l=t.scrollLeft+t.offsetWidth===t.scrollWidth;return!(Math.abs(r)>Math.abs(n)?i||a:s||l)||!e.settings.wheelPropagation}(i,a))&&!n.ctrlKey&&(n.stopPropagation(),n.preventDefault())}}void 0!==window.onwheel?e.event.bind(t,"wheel",n):void 0!==window.onmousewheel&&e.event.bind(t,"mousewheel",n)},touch:function(e){if(_.supportsTouch||_.supportsIePointer){var t=e.element,n={},o=0,i={},a=null;_.supportsTouch?(e.event.bind(t,"touchstart",f),e.event.bind(t,"touchmove",p),e.event.bind(t,"touchend",d)):_.supportsIePointer&&(window.PointerEvent?(e.event.bind(t,"pointerdown",f),e.event.bind(t,"pointermove",p),e.event.bind(t,"pointerup",d)):window.MSPointerEvent&&(e.event.bind(t,"MSPointerDown",f),e.event.bind(t,"MSPointerMove",p),e.event.bind(t,"MSPointerUp",d)))}function s(n,r){t.scrollTop-=r,t.scrollLeft-=n,w(e)}function l(e){return e.targetTouches?e.targetTouches[0]:e}function c(e){return!(e.pointerType&&"pen"===e.pointerType&&0===e.buttons||(!e.targetTouches||1!==e.targetTouches.length)&&(!e.pointerType||"mouse"===e.pointerType||e.pointerType===e.MSPOINTER_TYPE_MOUSE))}function f(e){if(c(e)){var t=l(e);n.pageX=t.pageX,n.pageY=t.pageY,o=(new Date).getTime(),null!==a&&clearInterval(a)}}function p(a){if(c(a)){var f=l(a),p={pageX:f.pageX,pageY:f.pageY},d=p.pageX-n.pageX,h=p.pageY-n.pageY;if(function(e,n,o){if(!t.contains(e))return!1;for(var i=e;i&&i!==t;){if(i.classList.contains(u.element.consuming))return!0;var a=r(i);if([a.overflow,a.overflowX,a.overflowY].join("").match(/(scroll|auto)/)){var s=i.scrollHeight-i.clientHeight;if(s>0&&!(0===i.scrollTop&&o>0||i.scrollTop===s&&o<0))return!0;var l=i.scrollLeft-i.clientWidth;if(l>0&&!(0===i.scrollLeft&&n<0||i.scrollLeft===l&&n>0))return!0}i=i.parentNode}return!1}(a.target,d,h))return;s(d,h),n=p;var m=(new Date).getTime(),v=m-o;v>0&&(i.x=d/v,i.y=h/v,o=m),function(n,r){var o=Math.floor(t.scrollTop),i=t.scrollLeft,a=Math.abs(n),s=Math.abs(r);if(s>a){if(r<0&&o===e.contentHeight-e.containerHeight||r>0&&0===o)return 0===window.scrollY&&r>0&&_.isChrome}else if(a>s&&(n<0&&i===e.contentWidth-e.containerWidth||n>0&&0===i))return!0;return!0}(d,h)&&a.preventDefault()}}function d(){e.settings.swipeEasing&&(clearInterval(a),a=setInterval(function(){e.isInitialized?clearInterval(a):i.x||i.y?Math.abs(i.x)<.01&&Math.abs(i.y)<.01?clearInterval(a):(s(30*i.x,30*i.y),i.x*=.8,i.y*=.8):clearInterval(a)},10))}}},P=function(e,t){var n=this;if(void 0===t&&(t={}),"string"==typeof e&&(e=document.querySelector(e)),!e||!e.nodeName)throw new Error("no element is specified to initialize PerfectScrollbar");for(var a in this.element=e,e.classList.add(u.main),this.settings={handlers:["click-rail","drag-thumb","keyboard","wheel","touch"],maxScrollbarLength:null,minScrollbarLength:null,scrollingThreshold:1e3,scrollXMarginOffset:0,scrollYMarginOffset:0,suppressScrollX:!1,suppressScrollY:!1,swipeEasing:!0,useBothWheelAxes:!1,wheelPropagation:!0,wheelSpeed:1},t)n.settings[a]=t[a];this.containerWidth=null,this.containerHeight=null,this.contentWidth=null,this.contentHeight=null;var s=function(){return e.classList.add(u.state.focus)},l=function(){return e.classList.remove(u.state.focus)};this.isRtl="rtl"===r(e).direction,this.isNegativeScroll=function(){var t,n=e.scrollLeft;return e.scrollLeft=-1,t=e.scrollLeft<0,e.scrollLeft=n,t}(),this.negativeScrollAdjustment=this.isNegativeScroll?e.scrollWidth-e.clientWidth:0,this.event=new v,this.ownerDocument=e.ownerDocument||document,this.scrollbarXRail=i(u.element.rail("x")),e.appendChild(this.scrollbarXRail),this.scrollbarX=i(u.element.thumb("x")),this.scrollbarXRail.appendChild(this.scrollbarX),this.scrollbarX.setAttribute("tabindex",0),this.event.bind(this.scrollbarX,"focus",s),this.event.bind(this.scrollbarX,"blur",l),this.scrollbarXActive=null,this.scrollbarXWidth=null,this.scrollbarXLeft=null;var c=r(this.scrollbarXRail);this.scrollbarXBottom=parseInt(c.bottom,10),isNaN(this.scrollbarXBottom)?(this.isScrollbarXUsingBottom=!1,this.scrollbarXTop=g(c.top)):this.isScrollbarXUsingBottom=!0,this.railBorderXWidth=g(c.borderLeftWidth)+g(c.borderRightWidth),o(this.scrollbarXRail,{display:"block"}),this.railXMarginWidth=g(c.marginLeft)+g(c.marginRight),o(this.scrollbarXRail,{display:""}),this.railXWidth=null,this.railXRatio=null,this.scrollbarYRail=i(u.element.rail("y")),e.appendChild(this.scrollbarYRail),this.scrollbarY=i(u.element.thumb("y")),this.scrollbarYRail.appendChild(this.scrollbarY),this.scrollbarY.setAttribute("tabindex",0),this.event.bind(this.scrollbarY,"focus",s),this.event.bind(this.scrollbarY,"blur",l),this.scrollbarYActive=null,this.scrollbarYHeight=null,this.scrollbarYTop=null;var f=r(this.scrollbarYRail);this.scrollbarYRight=parseInt(f.right,10),isNaN(this.scrollbarYRight)?(this.isScrollbarYUsingRight=!1,this.scrollbarYLeft=g(f.left)):this.isScrollbarYUsingRight=!0,this.scrollbarYOuterWidth=this.isRtl?function(e){var t=r(e);return g(t.width)+g(t.paddingLeft)+g(t.paddingRight)+g(t.borderLeftWidth)+g(t.borderRightWidth)}(this.scrollbarY):null,this.railBorderYWidth=g(f.borderTopWidth)+g(f.borderBottomWidth),o(this.scrollbarYRail,{display:"block"}),this.railYMarginHeight=g(f.marginTop)+g(f.marginBottom),o(this.scrollbarYRail,{display:""}),this.railYHeight=null,this.railYRatio=null,this.reach={x:e.scrollLeft<=0?"start":e.scrollLeft>=this.contentWidth-this.containerWidth?"end":null,y:e.scrollTop<=0?"start":e.scrollTop>=this.contentHeight-this.containerHeight?"end":null},this.isAlive=!0,this.settings.handlers.forEach(function(e){return O[e](n)}),this.lastScrollTop=Math.floor(e.scrollTop),this.lastScrollLeft=e.scrollLeft,this.event.bind(this.element,"scroll",function(e){return n.onScroll(e)}),w(this)};P.prototype.update=function(){this.isAlive&&(this.negativeScrollAdjustment=this.isNegativeScroll?this.element.scrollWidth-this.element.clientWidth:0,o(this.scrollbarXRail,{display:"block"}),o(this.scrollbarYRail,{display:"block"}),this.railXMarginWidth=g(r(this.scrollbarXRail).marginLeft)+g(r(this.scrollbarXRail).marginRight),this.railYMarginHeight=g(r(this.scrollbarYRail).marginTop)+g(r(this.scrollbarYRail).marginBottom),o(this.scrollbarXRail,{display:"none"}),o(this.scrollbarYRail,{display:"none"}),w(this),b(this,"top",0,!1,!0),b(this,"left",0,!1,!0),o(this.scrollbarXRail,{display:""}),o(this.scrollbarYRail,{display:""}))},P.prototype.onScroll=function(e){this.isAlive&&(w(this),b(this,"top",this.element.scrollTop-this.lastScrollTop),b(this,"left",this.element.scrollLeft-this.lastScrollLeft),this.lastScrollTop=Math.floor(this.element.scrollTop),this.lastScrollLeft=this.element.scrollLeft)},P.prototype.destroy=function(){this.isAlive&&(this.event.unbindAll(),l(this.scrollbarX),l(this.scrollbarY),l(this.scrollbarXRail),l(this.scrollbarYRail),this.removePsClasses(),this.element=null,this.scrollbarX=null,this.scrollbarY=null,this.scrollbarXRail=null,this.scrollbarYRail=null,this.isAlive=!1)},P.prototype.removePsClasses=function(){this.element.className=this.element.className.split(" ").filter(function(e){return!e.match(/^ps([-_].+|)$/)}).join(" ")},e.exports=P},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Thumbs=t.Carousel=void 0;var r=i(n(96)),o=i(n(43));function i(e){return e&&e.__esModule?e:{default:e}}t.Carousel=r.default,t.Thumbs=o.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=h(i),s=h(n(16)),l=h(n(6)),c=h(n(40)),u=h(n(41)),f=h(n(42)),p=h(n(43)),d=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(100));function h(e){return e&&e.__esModule?e:{default:e}}var m=function(){},v=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return y.call(n),n.state={initialized:!1,selectedItem:e.selectedItem,hasMount:!1,isMouseEntered:!1,autoPlay:e.autoPlay},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"componentDidMount",value:function(){this.props.children&&this.setupCarousel()}},{key:"componentWillReceiveProps",value:function(e){var t=this;e.selectedItem!==this.state.selectedItem&&(this.updateSizes(),this.moveTo(e.selectedItem)),e.autoPlay!==this.state.autoPlay&&this.setState({autoPlay:e.autoPlay},function(){t.state.autoPlay?t.setupAutoPlay():t.destroyAutoPlay()})}},{key:"componentDidUpdate",value:function(e,t){e.children||!this.props.children||this.state.initialized||this.setupCarousel(),t.swiping&&!this.state.swiping&&this.resetPosition()}},{key:"componentWillUnmount",value:function(){this.destroyCarousel()}},{key:"setupCarousel",value:function(){this.bindEvents(),this.state.autoPlay&&i.Children.count(this.props.children)>1&&this.setupAutoPlay(),this.setState({initialized:!0});var e=this.getInitialImage();e?e.addEventListener("load",this.setMountState):this.setMountState()}},{key:"destroyCarousel",value:function(){this.state.initialized&&(this.unbindEvents(),this.destroyAutoPlay())}},{key:"setupAutoPlay",value:function(){this.autoPlay();var e=this.carouselWrapperRef;this.props.stopOnHover&&e&&(e.addEventListener("mouseenter",this.stopOnHover),e.addEventListener("mouseleave",this.startOnLeave))}},{key:"destroyAutoPlay",value:function(){this.clearAutoPlay();var e=this.carouselWrapperRef;this.props.stopOnHover&&e&&(e.removeEventListener("mouseenter",this.stopOnHover),e.removeEventListener("mouseleave",this.startOnLeave))}},{key:"bindEvents",value:function(){window.addEventListener("resize",this.updateSizes),window.addEventListener("DOMContentLoaded",this.updateSizes),this.props.useKeyboardArrows&&document.addEventListener("keydown",this.navigateWithKeyboard)}},{key:"unbindEvents",value:function(){window.removeEventListener("resize",this.updateSizes),window.removeEventListener("DOMContentLoaded",this.updateSizes);var e=this.getInitialImage();e&&e.removeEventListener("load",this.setMountState),this.props.useKeyboardArrows&&document.removeEventListener("keydown",this.navigateWithKeyboard)}},{key:"getPosition",value:function(e){this.props.infiniteLoop&&++e;var t=i.Children.count(this.props.children);if(this.props.centerMode&&"horizontal"===this.props.axis){var n=-e*this.props.centerSlidePercentage,r=t-1;return e&&(e!==r||this.props.infiniteLoop)?n+=(100-this.props.centerSlidePercentage)/2:e===r&&(n+=100-this.props.centerSlidePercentage),n}return 100*-e}},{key:"renderItems",value:function(e){var t=this;return i.Children.map(this.props.children,function(n,r){var o={ref:function(e){return t.setItemsRef(e,r)},key:"itemKey"+r+(e?"clone":""),className:c.default.ITEM(!0,r===t.state.selectedItem),onClick:t.handleClickItem.bind(t,r,n)};return t.props.centerMode&&"horizontal"===t.props.axis&&(o.style={minWidth:t.props.centerSlidePercentage+"%"}),a.default.createElement("li",o,n)})}},{key:"renderControls",value:function(){var e=this;return this.props.showIndicators?a.default.createElement("ul",{className:"control-dots"},i.Children.map(this.props.children,function(t,n){return a.default.createElement("li",{className:c.default.DOT(n===e.state.selectedItem),onClick:e.changeItem,onKeyDown:e.changeItem,value:n,key:n,role:"button",tabIndex:0})})):null}},{key:"renderStatus",value:function(){return this.props.showStatus?a.default.createElement("p",{className:"carousel-status"},this.props.statusFormatter(this.state.selectedItem+1,i.Children.count(this.props.children))):null}},{key:"renderThumbs",value:function(){return this.props.showThumbs&&0!==i.Children.count(this.props.children)?a.default.createElement(p.default,{ref:this.setThumbsRef,onSelectItem:this.handleClickThumb,selectedItem:this.state.selectedItem,transitionTime:this.props.transitionTime,thumbWidth:this.props.thumbWidth},this.props.children):null}},{key:"render",value:function(){if(!this.props.children||0===i.Children.count(this.props.children))return null;var e="horizontal"===this.props.axis,t=this.props.showArrows&&i.Children.count(this.props.children)>1,n=t&&(this.state.selectedItem>0||this.props.infiniteLoop),o=t&&(this.state.selectedItem<i.Children.count(this.props.children)-1||this.props.infiniteLoop),s={},l=this.getPosition(this.state.selectedItem),p=(0,u.default)(l+"%",this.props.axis),d=this.props.transitionTime+"ms";s={WebkitTransform:p,MozTransform:p,MsTransform:p,OTransform:p,transform:p,msTransform:p},this.state.swiping||(s=r({},s,{WebkitTransitionDuration:d,MozTransitionDuration:d,MsTransitionDuration:d,OTransitionDuration:d,transitionDuration:d,msTransitionDuration:d}));var h=this.renderItems(!0),m=h.shift(),v=h.pop(),y={selectedItem:this.state.selectedItem,className:c.default.SLIDER(!0,this.state.swiping),onSwipeMove:this.onSwipeMove,onSwipeStart:this.onSwipeStart,onSwipeEnd:this.onSwipeEnd,style:s,tolerance:this.props.swipeScrollTolerance},b={};if(e){if(y.onSwipeLeft=this.onSwipeBackwards,y.onSwipeRight=this.onSwipeForward,this.props.dynamicHeight){var g=this.getVariableImageHeight(this.state.selectedItem);y.style.height=g||"auto",b.height=g||"auto"}}else y.onSwipeUp="natural"===this.props.verticalSwipe?this.onSwipeForward:this.onSwipeBackwards,y.onSwipeDown="natural"===this.props.verticalSwipe?this.onSwipeBackwards:this.onSwipeForward,y.style.height=this.state.itemSize,b.height=this.state.itemSize;return a.default.createElement("div",{className:this.props.className,ref:this.setCarouselWrapperRef},a.default.createElement("div",{className:c.default.CAROUSEL(!0),style:{width:this.props.width}},a.default.createElement("button",{type:"button",className:c.default.ARROW_PREV(!n),onClick:this.onClickPrev}),a.default.createElement("div",{className:c.default.WRAPPER(!0,this.props.axis),style:b,ref:this.setItemsWrapperRef},this.props.swipeable?a.default.createElement(f.default,r({tagName:"ul",ref:this.setListRef},y,{allowMouseEvents:this.props.emulateTouch}),this.props.infiniteLoop&&v,this.renderItems(),this.props.infiniteLoop&&m):a.default.createElement("ul",{className:c.default.SLIDER(!0,this.state.swiping),ref:this.setListRef,style:s},this.props.infiniteLoop&&v,this.renderItems(),this.props.infiniteLoop&&m)),a.default.createElement("button",{type:"button",className:c.default.ARROW_NEXT(!o),onClick:this.onClickNext}),this.renderControls(),this.renderStatus()),this.renderThumbs())}}]),t}();v.displayName="Carousel",v.propTypes={className:l.default.string,children:l.default.node,showArrows:l.default.bool,showStatus:l.default.bool,showIndicators:l.default.bool,infiniteLoop:l.default.bool,showThumbs:l.default.bool,thumbWidth:l.default.number,selectedItem:l.default.number,onClickItem:l.default.func.isRequired,onClickThumb:l.default.func.isRequired,onChange:l.default.func.isRequired,axis:l.default.oneOf(["horizontal","vertical"]),verticalSwipe:l.default.oneOf(["natural","standard"]),width:d.unit,useKeyboardArrows:l.default.bool,autoPlay:l.default.bool,stopOnHover:l.default.bool,interval:l.default.number,transitionTime:l.default.number,swipeScrollTolerance:l.default.number,swipeable:l.default.bool,dynamicHeight:l.default.bool,emulateTouch:l.default.bool,statusFormatter:l.default.func.isRequired,centerMode:l.default.bool,centerSlidePercentage:l.default.number},v.defaultProps={showIndicators:!0,showArrows:!0,showStatus:!0,showThumbs:!0,infiniteLoop:!1,selectedItem:0,axis:"horizontal",verticalSwipe:"standard",width:"100%",useKeyboardArrows:!1,autoPlay:!1,stopOnHover:!0,interval:3e3,transitionTime:350,swipeScrollTolerance:5,swipeable:!0,dynamicHeight:!1,emulateTouch:!1,onClickItem:m,onClickThumb:m,onChange:m,statusFormatter:function(e,t){return e+" of "+t},centerMode:!1,centerSlidePercentage:80};var y=function(){var e=this;this.setThumbsRef=function(t){e.thumbsRef=t},this.setCarouselWrapperRef=function(t){e.carouselWrapperRef=t},this.setListRef=function(t){e.listRef=t},this.setItemsWrapperRef=function(t){e.itemsWrapperRef=t},this.setItemsRef=function(t,n){e.itemsRef||(e.itemsRef=[]),e.itemsRef[n]=t},this.autoPlay=function(){!e.state.autoPlay||i.Children.count(e.props.children)<=1||(clearTimeout(e.timer),e.timer=setTimeout(function(){e.increment()},e.props.interval))},this.clearAutoPlay=function(){e.state.autoPlay&&clearTimeout(e.timer)},this.resetAutoPlay=function(){e.clearAutoPlay(),e.autoPlay()},this.stopOnHover=function(){e.setState({isMouseEntered:!0}),e.clearAutoPlay()},this.startOnLeave=function(){e.setState({isMouseEntered:!1}),e.autoPlay()},this.navigateWithKeyboard=function(t){var n="horizontal"===e.props.axis,r=n?37:38;(n?39:40)===t.keyCode?e.increment():r===t.keyCode&&e.decrement()},this.updateSizes=function(){if(e.state.initialized){var t="horizontal"===e.props.axis,n=e.itemsRef[0],r=t?n.clientWidth:n.clientHeight;e.setState(function(e,n){return{itemSize:r,wrapperSize:t?r*i.Children.count(n.children):r}}),e.thumbsRef&&e.thumbsRef.updateSizes()}},this.setMountState=function(){e.setState({hasMount:!0}),e.updateSizes()},this.handleClickItem=function(t,n){i.Children.count(e.props.children)<=1||(e.state.cancelClick?e.setState({cancelClick:!1}):(e.props.onClickItem(t,n),t!==e.state.selectedItem&&e.setState({selectedItem:t})))},this.handleOnChange=function(t,n){i.Children.count(e.props.children)<=1||e.props.onChange(t,n)},this.handleClickThumb=function(t,n){e.props.onClickThumb(t,n),e.selectItem({selectedItem:t})},this.onSwipeStart=function(){e.setState({swiping:!0}),e.clearAutoPlay()},this.onSwipeEnd=function(){e.setState({swiping:!1}),e.autoPlay()},this.onSwipeMove=function(t){var n="horizontal"===e.props.axis,r=i.Children.count(e.props.children),o=e.getPosition(e.state.selectedItem),a=e.props.infiniteLoop?e.getPosition(r-1)-100:e.getPosition(r-1),s=n?t.x:t.y,l=s;0===o&&s>0&&(l=0),o===a&&s<0&&(l=0);var c=o+100/(e.state.itemSize/l);e.props.infiniteLoop&&(0===e.state.selectedItem&&c>-100?c-=100*r:e.state.selectedItem===r-1&&c<100*-r&&(c+=100*r)),c+="%",e.setPosition(c);var u=Math.abs(s)>e.props.swipeScrollTolerance;return u&&!e.state.cancelClick&&e.setState({cancelClick:!0}),u},this.setPosition=function(t,n){var r=s.default.findDOMNode(e.listRef);["WebkitTransform","MozTransform","MsTransform","OTransform","transform","msTransform"].forEach(function(n){r.style[n]=(0,u.default)(t,e.props.axis)}),n&&r.offsetLeft},this.resetPosition=function(){var t=e.getPosition(e.state.selectedItem)+"%";e.setPosition(t)},this.decrement=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.moveTo(e.state.selectedItem-("number"==typeof t?t:1),n)},this.increment=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.moveTo(e.state.selectedItem+("number"==typeof t?t:1),n)},this.moveTo=function(t,n){var r=i.Children.count(e.props.children)-1,o=e.props.infiniteLoop&&!n&&(t<0||t>r),a=t;t<0&&(t=e.props.infiniteLoop?r:0),t>r&&(t=e.props.infiniteLoop?0:r),o?e.setState({swiping:!0},function(){a<0?e.props.centerMode&&"horizontal"===e.props.axis?e.setPosition("-"+((r+2)*e.props.centerSlidePercentage-(100-e.props.centerSlidePercentage)/2)+"%",!0):e.setPosition("-"+100*(r+2)+"%",!0):a>r&&e.setPosition(0,!0),e.selectItem({selectedItem:t,swiping:!1})}):e.selectItem({selectedItem:t}),e.state.autoPlay&&!1===e.state.isMouseEntered&&e.resetAutoPlay()},this.onClickNext=function(){e.increment(1,!1)},this.onClickPrev=function(){e.decrement(1,!1)},this.onSwipeForward=function(){e.increment(1,!0)},this.onSwipeBackwards=function(){e.decrement(1,!0)},this.changeItem=function(t){if(!t.key||"Enter"===t.key){var n=t.target.value;e.selectItem({selectedItem:n})}},this.selectItem=function(t,n){e.setState(t,n),e.handleOnChange(t.selectedItem,i.Children.toArray(e.props.children)[t.selectedItem])},this.getInitialImage=function(){var t=e.props.selectedItem,n=e.itemsRef&&e.itemsRef[t],r=n&&n.getElementsByTagName("img");return r&&r[t]},this.getVariableImageHeight=function(t){var n=e.itemsRef&&e.itemsRef[t],r=n&&n.getElementsByTagName("img");if(e.state.hasMount&&r.length>0){var o=r[0];if(!o.complete){o.addEventListener("load",function t(){e.forceUpdate(),o.removeEventListener("load",t)})}var i=o.clientHeight;return i>0?i:null}return null}};t.default=v},function(e,t,n){e.exports=n(1)(78)},function(e,t,n){var r,o,i;o=[t,n(0),n(6)],void 0===(i="function"==typeof(r=function(e,t,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setHasSupportToCaptureOption=l;var r=i(t),o=i(n);function i(e){return e&&e.__esModule?e:{default:e}}var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=!1;function l(e){s=e}try{addEventListener("test",null,Object.defineProperty({},"capture",{get:function(){l(!0)}}))}catch(e){}function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{capture:!0};return s?e:e.capture}function u(e){if("touches"in e){var t=e.touches[0],n=t.pageX,r=t.pageY;return{x:n,y:r}}var o=e.screenX,i=e.screenY;return{x:o,y:i}}var f=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i._handleSwipeStart=i._handleSwipeStart.bind(i),i._handleSwipeMove=i._handleSwipeMove.bind(i),i._handleSwipeEnd=i._handleSwipeEnd.bind(i),i._onMouseDown=i._onMouseDown.bind(i),i._onMouseMove=i._onMouseMove.bind(i),i._onMouseUp=i._onMouseUp.bind(i),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.swiper&&this.swiper.addEventListener("touchmove",this._handleSwipeMove,c({capture:!0,passive:!1}))}},{key:"componentWillUnmount",value:function(){this.swiper&&this.swiper.removeEventListener("touchmove",this._handleSwipeMove,c({capture:!0,passive:!1}))}},{key:"_onMouseDown",value:function(e){this.props.allowMouseEvents&&(this.mouseDown=!0,document.addEventListener("mouseup",this._onMouseUp),document.addEventListener("mousemove",this._onMouseMove),this._handleSwipeStart(e))}},{key:"_onMouseMove",value:function(e){this.mouseDown&&this._handleSwipeMove(e)}},{key:"_onMouseUp",value:function(e){this.mouseDown=!1,document.removeEventListener("mouseup",this._onMouseUp),document.removeEventListener("mousemove",this._onMouseMove),this._handleSwipeEnd(e)}},{key:"_handleSwipeStart",value:function(e){var t=u(e),n=t.x,r=t.y;this.moveStart={x:n,y:r},this.props.onSwipeStart(e)}},{key:"_handleSwipeMove",value:function(e){if(this.moveStart){var t=u(e),n=t.x,r=t.y,o=n-this.moveStart.x,i=r-this.moveStart.y;this.moving=!0;var a=this.props.onSwipeMove({x:o,y:i},e);a&&e.preventDefault(),this.movePosition={deltaX:o,deltaY:i}}}},{key:"_handleSwipeEnd",value:function(e){this.props.onSwipeEnd(e);var t=this.props.tolerance;this.moving&&this.movePosition&&(this.movePosition.deltaX<-t?this.props.onSwipeLeft(1,e):this.movePosition.deltaX>t&&this.props.onSwipeRight(1,e),this.movePosition.deltaY<-t?this.props.onSwipeUp(1,e):this.movePosition.deltaY>t&&this.props.onSwipeDown(1,e)),this.moveStart=null,this.moving=!1,this.movePosition=null}},{key:"render",value:function(){var e=this;return r.default.createElement(this.props.tagName,{ref:function(t){return e.swiper=t},onMouseDown:this._onMouseDown,onTouchStart:this._handleSwipeStart,onTouchEnd:this._handleSwipeEnd,className:this.props.className,style:this.props.style},this.props.children)}}]),t}(t.Component);f.displayName="ReactSwipe",f.propTypes={tagName:o.default.string,className:o.default.string,style:o.default.object,children:o.default.node,allowMouseEvents:o.default.bool,onSwipeUp:o.default.func,onSwipeDown:o.default.func,onSwipeLeft:o.default.func,onSwipeRight:o.default.func,onSwipeStart:o.default.func,onSwipeMove:o.default.func,onSwipeEnd:o.default.func,tolerance:o.default.number.isRequired},f.defaultProps={tagName:"div",allowMouseEvents:!1,onSwipeUp:function(){},onSwipeDown:function(){},onSwipeLeft:function(){},onSwipeRight:function(){},onSwipeStart:function(){},onSwipeMove:function(){},onSwipeEnd:function(){},tolerance:0},e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.outerWidth=function(e){var t=e.offsetWidth,n=getComputedStyle(e);return t+=parseInt(n.marginLeft)+parseInt(n.marginRight)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.unit=function(e,t,n){if(!/(pt|px|em|rem|vw|vh|%)$/.test(e[t]))return new Error("Invalid prop `"+t+"` supplied to `"+n+"`. Validation failed. It needs to be a size unit like pt, px, em, rem, vw, %")}},function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(t,"__esModule",{value:!0});var o,i=n(102),a=n(0),s=r(n(103)),l=r(n(104)),c=r(n(108)),u=r(n(110)),f=r(n(111)),p=r(n(112)),d=r(n(113)),h=(o=l({})).Provider,m=o.Consumer;function v(e){var t=function(t){return a.createElement(m,null,function(n){return a.createElement(e,i.__assign({},t,{formik:n}))})};return t.WrappedComponent=e,s(t,e)}function y(e,t,n,r){void 0===r&&(r=0);for(var o=u(t);e&&r<o.length;)e=e[o[r++]];return void 0===e?n:e}function b(e,t,n){for(var r={},o=r,a=0,s=u(t);a<s.length-1;a++){var l=s[a],f=y(e,s.slice(0,a+1));if(o[l])o=o[l];else if(f)o=o[l]=c(f);else{var p=s[a+1];o=o[l]=E(p)&&Number(p)>=0?[]:{}}}if((0===a?e:o)[s[a]]===n)return e;void 0===n?delete o[s[a]]:o[s[a]]=n;var d=i.__assign({},e,r);return 0===a&&void 0===n&&delete d[s[a]],d}function g(e,t,n,r){void 0===n&&(n=new WeakMap),void 0===r&&(r={});for(var o=0,i=Object.keys(e);o<i.length;o++){var a=i[o],s=e[a];w(s)?n.get(s)||(n.set(s,!0),r[a]=Array.isArray(s)?[]:{},g(s,t,n,r[a])):r[a]=t}return r}var _=function(e){return"function"==typeof e},w=function(e){return null!==e&&"object"==typeof e},E=function(e){return String(Math.floor(Number(e)))===e},S=function(e){return"[object String]"===Object.prototype.toString.call(e)},O=function(e){return e!=e},P=function(e){return 0===a.Children.count(e)},k=function(e){return w(e)&&_(e.then)};var R=function(e){function t(t){var n=e.call(this,t)||this;return n.hcCache={},n.hbCache={},n.registerField=function(e,t){n.fields[e]=t},n.unregisterField=function(e){delete n.fields[e]},n.setErrors=function(e){n.setState({errors:e})},n.setTouched=function(e){n.setState({touched:e},function(){n.props.validateOnBlur&&n.runValidations(n.state.values)})},n.setValues=function(e){n.setState({values:e},function(){n.props.validateOnChange&&n.runValidations(e)})},n.setStatus=function(e){n.setState({status:e})},n.setError=function(e){n.setState({error:e})},n.setSubmitting=function(e){n.didMount&&n.setState({isSubmitting:e})},n.validateField=function(e){n.setState({isValidating:!0}),n.runSingleFieldLevelValidation(e,y(n.state.values,e)).then(function(t){n.didMount&&n.setState({errors:b(n.state.errors,e,t),isValidating:!1})})},n.runSingleFieldLevelValidation=function(e,t){return new Promise(function(r){return r(n.fields[e].props.validate(t))}).then(function(e){return e},function(e){return e})},n.runValidationSchema=function(e){return new Promise(function(t){var r=n.props.validationSchema,o=_(r)?r():r;C(e,o).then(function(){t({})},function(e){t(j(e))})})},n.runValidations=function(e){return void 0===e&&(e=n.state.values),n.setState({isValidating:!0}),Promise.all([n.runFieldLevelValidations(e),n.props.validationSchema?n.runValidationSchema(e):{},n.props.validate?n.runValidateHandler(e):{}]).then(function(e){var t=e[0],r=e[1],o=e[2],i=d.all([t,r,o],{arrayMerge:x});return n.didMount&&n.setState({isValidating:!1,errors:i}),i})},n.handleChange=function(e){var t=function(e,t){var r,o=t,a=e;if(!S(e)){e.persist&&e.persist();var s=e.target,l=s.type,c=s.name,u=s.id,f=s.value,p=s.checked;s.outerHTML;o=t||(c||u),a=/number|range/.test(l)?(r=parseFloat(f),O(r)?"":r):/checkbox/.test(l)?p:f}o&&n.setState(function(e){return i.__assign({},e,{values:b(e.values,o,a)})},function(){n.props.validateOnChange&&n.runValidations(b(n.state.values,o,a))})};if(S(e))return _(n.hcCache[e])?n.hcCache[e]:n.hcCache[e]=function(n){return t(n,e)};t(e)},n.setFieldValue=function(e,t,r){void 0===r&&(r=!0),n.didMount&&n.setState(function(n){return i.__assign({},n,{values:b(n.values,e,t)})},function(){n.props.validateOnChange&&r&&n.runValidations(n.state.values)})},n.handleSubmit=function(e){e&&e.preventDefault&&e.preventDefault(),n.submitForm()},n.submitForm=function(){return n.setState(function(e){return{touched:g(e.values,!0),isSubmitting:!0,submitCount:e.submitCount+1}}),n.runValidations().then(function(e){0===Object.keys(e).length?n.executeSubmit():n.didMount&&n.setState({isSubmitting:!1})})},n.executeSubmit=function(){n.props.onSubmit(n.state.values,n.getFormikActions())},n.handleBlur=function(e){var t=function(e,t){e.persist&&e.persist();var r=e.target,o=r.name,i=r.id,a=(r.outerHTML,t||(o||i));n.setState(function(e){return{touched:b(e.touched,a,!0)}}),n.props.validateOnBlur&&n.runValidations(n.state.values)};if(S(e))return _(n.hbCache[e])?n.hbCache[e]:n.hbCache[e]=function(n){return t(n,e)};t(e)},n.setFieldTouched=function(e,t,r){void 0===t&&(t=!0),void 0===r&&(r=!0),n.setState(function(n){return i.__assign({},n,{touched:b(n.touched,e,t)})},function(){n.props.validateOnBlur&&r&&n.runValidations(n.state.values)})},n.setFieldError=function(e,t){n.setState(function(n){return i.__assign({},n,{errors:b(n.errors,e,t)})})},n.resetForm=function(e){var t=e||n.props.initialValues;n.initialValues=t,n.setState({isSubmitting:!1,isValidating:!1,errors:{},touched:{},error:void 0,status:void 0,values:t,submitCount:0})},n.handleReset=function(){if(n.props.onReset){var e=n.props.onReset(n.state.values,n.getFormikActions());k(e)?e.then(n.resetForm):n.resetForm()}else n.resetForm()},n.setFormikState=function(e,t){return n.setState(e,t)},n.getFormikActions=function(){return{resetForm:n.resetForm,submitForm:n.submitForm,validateForm:n.runValidations,validateField:n.validateField,setError:n.setError,setErrors:n.setErrors,setFieldError:n.setFieldError,setFieldTouched:n.setFieldTouched,setFieldValue:n.setFieldValue,setStatus:n.setStatus,setSubmitting:n.setSubmitting,setTouched:n.setTouched,setValues:n.setValues,setFormikState:n.setFormikState}},n.getFormikComputedProps=function(){var e=n.props.isInitialValid,t=!f(n.initialValues,n.state.values);return{dirty:t,isValid:t?n.state.errors&&0===Object.keys(n.state.errors).length:!1!==e&&_(e)?e(n.props):e,initialValues:n.initialValues}},n.getFormikBag=function(){return i.__assign({},n.state,n.getFormikActions(),n.getFormikComputedProps(),{registerField:n.registerField,unregisterField:n.unregisterField,handleBlur:n.handleBlur,handleChange:n.handleChange,handleReset:n.handleReset,handleSubmit:n.handleSubmit,validateOnChange:n.props.validateOnChange,validateOnBlur:n.props.validateOnBlur})},n.getFormikContext=function(){return i.__assign({},n.getFormikBag(),{validationSchema:n.props.validationSchema,validate:n.props.validate,initialValues:n.initialValues})},n.state={values:t.initialValues||{},errors:{},touched:{},isSubmitting:!1,isValidating:!1,submitCount:0},n.didMount=!1,n.fields={},n.initialValues=t.initialValues||{},p(!(t.component&&t.render),"You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored"),p(!(t.component&&t.children&&!P(t.children)),"You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored"),p(!(t.render&&t.children&&!P(t.children)),"You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored"),n}return i.__extends(t,e),t.prototype.componentDidMount=function(){this.didMount=!0},t.prototype.componentWillUnmount=function(){this.didMount=!1},t.prototype.componentDidUpdate=function(e){this.props.enableReinitialize&&!f(e.initialValues,this.props.initialValues)&&(this.initialValues=this.props.initialValues,this.resetForm(this.props.initialValues))},t.prototype.runFieldLevelValidations=function(e){var t=this,n=Object.keys(this.fields).filter(function(e){return t.fields&&t.fields[e]&&t.fields[e].props.validate&&_(t.fields[e].props.validate)}),r=n.length>0?n.map(function(n){return t.runSingleFieldLevelValidation(n,y(e,n))}):[Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];return Promise.all(r).then(function(e){return e.reduce(function(e,t,r){return"DO_NOT_DELETE_YOU_WILL_BE_FIRED"===t?e:(t&&(e=b(e,n[r],t)),e)},{})})},t.prototype.runValidateHandler=function(e){var t=this;return new Promise(function(n){var r=t.props.validate(e);void 0===r?n({}):k(r)?r.then(function(){n({})},function(e){n(e)}):n(r)})},t.prototype.render=function(){var e=this.props,t=e.component,n=e.render,r=e.children,o=this.getFormikBag(),i=this.getFormikContext();return a.createElement(h,{value:i},t?a.createElement(t,o):n?n(o):r?_(r)?r(o):P(r)?null:a.Children.only(r):null)},t.defaultProps={validateOnChange:!0,validateOnBlur:!0,isInitialValid:!1,enableReinitialize:!1},t}(a.Component);function j(e){var t={};if(0===e.inner.length)return b(t,e.path,e.message);for(var n=0,r=e.inner;n<r.length;n++){var o=r[n];t[o.path]||(t=b(t,o.path,o.message))}return t}function C(e,t,n,r){void 0===n&&(n=!1),void 0===r&&(r={});var o={};for(var i in e)if(e.hasOwnProperty(i)){var a=String(i);o[a]=""!==e[a]?e[a]:void 0}return t[n?"validateSync":"validate"](o,{abortEarly:!1,context:r})}function x(e,t,n){var r=e.slice();return t.forEach(function(t,o){if(void 0===r[o]){var i=!1!==n.clone&&n.isMergeableObject(t);r[o]=i?d(Array.isArray(t)?[]:{},t,n):t}else n.isMergeableObject(t)?r[o]=d(e[o],t,n):-1===e.indexOf(t)&&r.push(t)}),r}var T=v(function(e){function t(t){var n=e.call(this,t)||this,r=t.render,o=t.children,i=t.component;return p(!(i&&r),"You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored"),p(!(i&&o&&_(o)),"You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored."),p(!(r&&o&&!P(o)),"You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored"),n}return i.__extends(t,e),t.prototype.componentDidMount=function(){this.props.formik.registerField(this.props.name,this)},t.prototype.componentDidUpdate=function(e){this.props.name!==e.name&&(this.props.formik.unregisterField(e.name),this.props.formik.registerField(this.props.name,this)),this.props.validate!==e.validate&&this.props.formik.registerField(this.props.name,this)},t.prototype.componentWillUnmount=function(){this.props.formik.unregisterField(this.props.name)},t.prototype.render=function(){var e=this.props,t=(e.validate,e.name),n=e.render,r=e.children,o=e.component,s=void 0===o?"input":o,l=e.formik,c=i.__rest(e,["validate","name","render","children","component","formik"]),u=(l.validate,l.validationSchema,i.__rest(l,["validate","validationSchema"])),f={value:"radio"===c.type||"checkbox"===c.type?c.value:y(l.values,t),name:t,onChange:l.handleChange,onBlur:l.handleBlur},p={field:f,form:u};if(n)return n(p);if(_(r))return r(p);if("string"==typeof s){var d=c.innerRef,h=i.__rest(c,["innerRef"]);return a.createElement(s,i.__assign({ref:d},f,h,{children:r}))}return a.createElement(s,i.__assign({},p,c,{children:r}))},t}(a.Component)),L=v(function(e){var t=e.formik,n=t.handleReset,r=t.handleSubmit,o=i.__rest(e,["formik"]);return a.createElement("form",i.__assign({onReset:n,onSubmit:r},o))});L.displayName="Form";var M=function(e,t,n){var r=(e||[]).slice(),o=r[t];return r.splice(t,1),r.splice(n,0,o),r},N=function(e,t,n){var r=(e||[]).slice(),o=r[t];return r[t]=r[n],r[n]=o,r},A=function(e,t,n){var r=(e||[]).slice();return r.splice(t,0,n),r},I=function(e,t,n){var r=(e||[]).slice();return r[t]=n,r},F=v(function(e){function t(t){var n=e.call(this,t)||this;return n.updateArrayField=function(e,t,r){var o=n.props,a=o.name,s=o.validateOnChange,l=o.formik,c=l.setFormikState,u=l.validateForm,f=l.values,p=l.touched,d=l.errors;c(function(n){return i.__assign({},n,{values:b(n.values,a,e(y(f,a))),errors:r?b(n.errors,a,e(y(d,a))):n.errors,touched:t?b(n.touched,a,e(y(p,a))):n.touched})},function(){s&&u()})},n.push=function(e){return n.updateArrayField(function(t){return(t||[]).concat([c(e)])},!1,!1)},n.handlePush=function(e){return function(){return n.push(e)}},n.swap=function(e,t){return n.updateArrayField(function(n){return N(n,e,t)},!0,!0)},n.handleSwap=function(e,t){return function(){return n.swap(e,t)}},n.move=function(e,t){return n.updateArrayField(function(n){return M(n,e,t)},!0,!0)},n.handleMove=function(e,t){return function(){return n.move(e,t)}},n.insert=function(e,t){return n.updateArrayField(function(n){return A(n,e,t)},!0,!0)},n.handleInsert=function(e,t){return function(){return n.insert(e,t)}},n.replace=function(e,t){return n.updateArrayField(function(n){return I(n,e,t)},!1,!1)},n.handleReplace=function(e,t){return function(){return n.replace(e,t)}},n.unshift=function(e){var t=-1;return n.updateArrayField(function(n){var r=n?[e].concat(n):[e];return t<0&&(t=r.length),r},!0,!0),t},n.handleUnshift=function(e){return function(){return n.unshift(e)}},n.handleRemove=function(e){return function(){return n.remove(e)}},n.handlePop=function(){return function(){return n.pop()}},n.remove=n.remove.bind(n),n.pop=n.pop.bind(n),n}return i.__extends(t,e),t.prototype.remove=function(e){var t;return this.updateArrayField(function(n){var r=n?n.slice():[];return t||(t=r[e]),_(r.splice)&&r.splice(e,1),r},!0,!0),t},t.prototype.pop=function(){var e;return this.updateArrayField(function(t){var n=t;return e||(e=n&&n.pop&&n.pop()),n},!0,!0),e},t.prototype.render=function(){var e={push:this.push,pop:this.pop,swap:this.swap,move:this.move,insert:this.insert,replace:this.replace,unshift:this.unshift,remove:this.remove,handlePush:this.handlePush,handlePop:this.handlePop,handleSwap:this.handleSwap,handleMove:this.handleMove,handleInsert:this.handleInsert,handleReplace:this.handleReplace,handleUnshift:this.handleUnshift,handleRemove:this.handleRemove},t=this.props,n=t.component,r=t.render,o=t.children,s=t.name,l=t.formik,c=(l.validate,l.validationSchema,i.__rest(l,["validate","validationSchema"])),u=i.__assign({},e,{form:c,name:s});return n?a.createElement(n,u):r?r(u):o?"function"==typeof o?o(u):P(o)?null:a.Children.only(o):null},t.defaultProps={validateOnChange:!0},t}(a.Component)),W=v(function(e){function t(t){var n=e.call(this,t)||this,r=t.render,o=t.children,i=t.component;return p(!(i&&r),"You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored"),p(!(i&&o&&_(o)),"You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored."),p(!(r&&o&&!P(o)),"You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored"),n}return i.__extends(t,e),t.prototype.shouldComponentUpdate=function(e){return this.props.shouldUpdate?this.props.shouldUpdate(e,this.props):y(this.props.formik.values,this.props.name)!==y(e.formik.values,this.props.name)||y(this.props.formik.errors,this.props.name)!==y(e.formik.errors,this.props.name)||y(this.props.formik.touched,this.props.name)!==y(e.formik.touched,this.props.name)||Object.keys(this.props).length!==Object.keys(e).length||this.props.formik.isSubmitting!==e.formik.isSubmitting},t.prototype.componentDidMount=function(){this.props.formik.registerField(this.props.name,this)},t.prototype.componentDidUpdate=function(e){this.props.name!==e.name&&(this.props.formik.unregisterField(e.name),this.props.formik.registerField(this.props.name,this)),this.props.validate!==e.validate&&this.props.formik.registerField(this.props.name,this)},t.prototype.componentWillUnmount=function(){this.props.formik.unregisterField(this.props.name)},t.prototype.render=function(){var e=this.props,t=(e.validate,e.name),n=e.render,r=e.children,o=e.component,s=void 0===o?"input":o,l=e.formik,c=i.__rest(e,["validate","name","render","children","component","formik"]),u=(l.validate,l.validationSchema,i.__rest(l,["validate","validationSchema"])),f={value:"radio"===c.type||"checkbox"===c.type?c.value:y(l.values,t),name:t,onChange:l.handleChange,onBlur:l.handleBlur},p={field:f,form:u};if(n)return n(p);if(_(r))return r(p);if("string"==typeof s){var d=c.innerRef,h=i.__rest(c,["innerRef"]);return a.createElement(s,i.__assign({ref:d},f,h,{children:r}))}return a.createElement(s,i.__assign({},p,c,{children:r}))},t}(a.Component)),D=v(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i.__extends(t,e),t.prototype.shouldComponentUpdate=function(e){return y(this.props.formik.errors,this.props.name)!==y(e.formik.errors,this.props.name)||y(this.props.formik.touched,this.props.name)!==y(e.formik.touched,this.props.name)||Object.keys(this.props).length!==Object.keys(e).length},t.prototype.render=function(){var e=this.props,t=e.component,n=e.formik,r=e.render,o=e.children,s=e.name,l=i.__rest(e,["component","formik","render","children","name"]),c=y(n.touched,s),u=y(n.errors,s);return c&&u?r?_(r)?r(u):null:o?_(o)?o(u):null:t?a.createElement(t,l,u):u:null},t}(a.Component));t.Formik=R,t.yupToFormErrors=j,t.validateYupSchema=C,t.Field=T,t.Form=L,t.withFormik=function(e){var t=e.mapPropsToValues,n=void 0===t?function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&"function"!=typeof e[n]&&(t[n]=e[n]);return t}:t,r=i.__rest(e,["mapPropsToValues"]);return function(e){var t=e.displayName||e.name||e.constructor&&e.constructor.name||"Component",o=function(o){function s(){var t=null!==o&&o.apply(this,arguments)||this;return t.validate=function(e){return r.validate(e,t.props)},t.validationSchema=function(){return _(r.validationSchema)?r.validationSchema(t.props):r.validationSchema},t.handleSubmit=function(e,n){return r.handleSubmit(e,i.__assign({},n,{props:t.props}))},t.renderFormComponent=function(n){return a.createElement(e,i.__assign({},t.props,n))},t}return i.__extends(s,o),s.prototype.render=function(){var e=this.props,t=(e.children,i.__rest(e,["children"]));return a.createElement(R,i.__assign({},t,r,{validate:r.validate&&this.validate,validationSchema:r.validationSchema&&this.validationSchema,initialValues:n(this.props),onSubmit:this.handleSubmit,render:this.renderFormComponent}))},s.displayName="WithFormik("+t+")",s}(a.Component);return s(o,e)}},t.move=M,t.swap=N,t.insert=A,t.replace=I,t.FieldArray=F,t.getIn=y,t.setIn=b,t.setNestedObjectValues=g,t.isFunction=_,t.isObject=w,t.isInteger=E,t.isString=S,t.isNaN=O,t.isEmptyChildren=P,t.isPromise=k,t.getActiveElement=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}},t.FastField=W,t.FormikProvider=h,t.FormikConsumer=m,t.connect=v,t.ErrorMessage=D},function(e,t,n){var r,o,i,a,s,l,c,u,f,p,d,h,m,v,y,b,g,_,w,E;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */!function(n){var S="object"==typeof global?global:"object"==typeof self?self:"object"==typeof this?this:{};function O(e,t){return e!==S&&("function"==typeof Object.create?Object.defineProperty(e,"__esModule",{value:!0}):e.__esModule=!0),function(n,r){return e[n]=t?t(n,r):r}}void 0===(r=function(e){!function(e){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};o=function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)},i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var o=0,r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]]);return n},s=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},l=function(e,t){return function(n,r){t(n,r,e)}},c=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},u=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},f=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},p=function(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])},d=function(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}},h=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},m=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(h(arguments[t]));return e},v=function(e){return this instanceof v?(this.v=e,this):new v(e)},y=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise(function(n,r){i.push([e,t,n,r])>1||s(e,t)})})}function s(e,t){try{!function(e){e.value instanceof v?Promise.resolve(e.value.v).then(l,c):u(i[0][2],e)}(o[e](t))}catch(e){u(i[0][3],e)}}function l(e){s("next",e)}function c(e){s("throw",e)}function u(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}},b=function(e){var t,n;return t={},r("next"),r("throw",function(e){throw e}),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:v(e[r](t)),done:"return"===r}:o?o(t):t}:o}},g=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e="function"==typeof d?d(e):e[Symbol.iterator](),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise(function(r,o){t=e[n](t),function(e,t,n,r){Promise.resolve(r).then(function(t){e({value:t,done:n})},t)}(r,o,t.done,t.value)})}}},_=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},w=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},E=function(e){return e&&e.__esModule?e:{default:e}},e("__extends",o),e("__assign",i),e("__rest",a),e("__decorate",s),e("__param",l),e("__metadata",c),e("__awaiter",u),e("__generator",f),e("__exportStar",p),e("__values",d),e("__read",h),e("__spread",m),e("__await",v),e("__asyncGenerator",y),e("__asyncDelegator",b),e("__asyncValues",g),e("__makeTemplateObject",_),e("__importStar",w),e("__importDefault",E)}(O(S,O(e)))}.apply(t,[t]))||(e.exports=r)}()},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,u=c&&c(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(u){var p=c(n);p&&p!==u&&e(t,p,f)}var d=a(n);s&&(d=d.concat(s(n)));for(var h=0;h<d.length;++h){var m=d[h];if(!(r[m]||o[m]||f&&f[m])){var v=l(n,m);try{i(t,m,v)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(0)),o=i(n(105));function i(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.createContext||o.default,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0),o=(a(r),a(n(6))),i=a(n(106));a(n(107));function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=1073741823;t.default=function(e,t){var n,a,f="__create-react-context-"+(0,i.default)()+"__",p=function(e){function n(){var t,r;s(this,n);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return t=r=l(this,e.call.apply(e,[this].concat(i))),r.emitter=function(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter(function(t){return t!==e})},get:function(){return e},set:function(n,r){e=n,t.forEach(function(t){return t(e,r)})}}}(r.props.value),l(r,t)}return c(n,e),n.prototype.getChildContext=function(){var e;return(e={})[f]=this.emitter,e},n.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n=this.props.value,r=e.value,o=void 0;!function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,r)?(o="function"==typeof t?t(n,r):u,0!=(o|=0)&&this.emitter.set(e.value,o)):o=0}},n.prototype.render=function(){return this.props.children},n}(r.Component);p.childContextTypes=((n={})[f]=o.default.object.isRequired,n);var d=function(t){function n(){var e,r;s(this,n);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=l(this,t.call.apply(t,[this].concat(i))),r.state={value:r.getValue()},r.onUpdate=function(e,t){0!=((0|r.observedBits)&t)&&r.setState({value:r.getValue()})},l(r,e)}return c(n,t),n.prototype.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=void 0===t||null===t?u:t},n.prototype.componentDidMount=function(){this.context[f]&&this.context[f].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=void 0===e||null===e?u:e},n.prototype.componentWillUnmount=function(){this.context[f]&&this.context[f].off(this.onUpdate)},n.prototype.getValue=function(){return this.context[f]?this.context[f].get():e},n.prototype.render=function(){return function(e){return Array.isArray(e)?e[0]:e}(this.props.children)(this.state.value)},n}(r.Component);return d.contextTypes=((a={})[f]=o.default.object,a),{Provider:p,Consumer:d}},e.exports=t.default},function(e,t,n){"use strict";var r="__global_unique_id__";e.exports=function(){return global[r]=(global[r]||0)+1}},function(e,t,n){"use strict";var r=n(38);e.exports=r},function(e,t,n){(function(e){var n=200,r="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",a="[object Boolean]",s="[object Date]",l="[object Function]",c="[object GeneratorFunction]",u="[object Map]",f="[object Number]",p="[object Object]",d="[object RegExp]",h="[object Set]",m="[object String]",v="[object Symbol]",y="[object ArrayBuffer]",b="[object DataView]",g="[object Float32Array]",_="[object Float64Array]",w="[object Int8Array]",E="[object Int16Array]",S="[object Int32Array]",O="[object Uint8Array]",P="[object Uint8ClampedArray]",k="[object Uint16Array]",R="[object Uint32Array]",j=/\w*$/,C=/^\[object .+?Constructor\]$/,x=/^(?:0|[1-9]\d*)$/,T={};T[i]=T["[object Array]"]=T[y]=T[b]=T[a]=T[s]=T[g]=T[_]=T[w]=T[E]=T[S]=T[u]=T[f]=T[p]=T[d]=T[h]=T[m]=T[v]=T[O]=T[P]=T[k]=T[R]=!0,T["[object Error]"]=T[l]=T["[object WeakMap]"]=!1;var L="object"==typeof global&&global&&global.Object===Object&&global,M="object"==typeof self&&self&&self.Object===Object&&self,N=L||M||Function("return this")(),A=t&&!t.nodeType&&t,I=A&&"object"==typeof e&&e&&!e.nodeType&&e,F=I&&I.exports===A;function W(e,t){return e.set(t[0],t[1]),e}function D(e,t){return e.add(t),e}function U(e,t,n,r){var o=-1,i=e?e.length:0;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function H(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function Y(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function B(e,t){return function(n){return e(t(n))}}function z(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}var X=Array.prototype,V=Function.prototype,q=Object.prototype,G=N["__core-js_shared__"],K=function(){var e=/[^.]+$/.exec(G&&G.keys&&G.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),$=V.toString,J=q.hasOwnProperty,Q=q.toString,Z=RegExp("^"+$.call(J).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ee=F?N.Buffer:void 0,te=N.Symbol,ne=N.Uint8Array,re=B(Object.getPrototypeOf,Object),oe=Object.create,ie=q.propertyIsEnumerable,ae=X.splice,se=Object.getOwnPropertySymbols,le=ee?ee.isBuffer:void 0,ce=B(Object.keys,Object),ue=Ae(N,"DataView"),fe=Ae(N,"Map"),pe=Ae(N,"Promise"),de=Ae(N,"Set"),he=Ae(N,"WeakMap"),me=Ae(Object,"create"),ve=Ue(ue),ye=Ue(fe),be=Ue(pe),ge=Ue(de),_e=Ue(he),we=te?te.prototype:void 0,Ee=we?we.valueOf:void 0;function Se(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Oe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Pe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ke(e){this.__data__=new Oe(e)}function Re(e,t){var n=Ye(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&Be(e)}(e)&&J.call(e,"callee")&&(!ie.call(e,"callee")||Q.call(e)==i)}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,o=!!r;for(var a in e)!t&&!J.call(e,a)||o&&("length"==a||We(a,r))||n.push(a);return n}function je(e,t,n){var r=e[t];J.call(e,t)&&He(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function Ce(e,t){for(var n=e.length;n--;)if(He(e[n][0],t))return n;return-1}function xe(e,t,n,r,o,C,x){var L;if(r&&(L=C?r(e,o,C,x):r(e)),void 0!==L)return L;if(!Ve(e))return e;var M=Ye(e);if(M){if(L=function(e){var t=e.length,n=e.constructor(t);t&&"string"==typeof e[0]&&J.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!t)return function(e,t){var n=-1,r=e.length;t||(t=Array(r));for(;++n<r;)t[n]=e[n];return t}(e,L)}else{var N=Fe(e),A=N==l||N==c;if(ze(e))return function(e,t){if(t)return e.slice();var n=new e.constructor(e.length);return e.copy(n),n}(e,t);if(N==p||N==i||A&&!C){if(H(e))return C?e:{};if(L=function(e){return"function"!=typeof e.constructor||De(e)?{}:function(e){return Ve(e)?oe(e):{}}(re(e))}(A?{}:e),!t)return function(e,t){return Me(e,Ie(e),t)}(e,function(e,t){return e&&Me(t,qe(t),e)}(L,e))}else{if(!T[N])return C?e:{};L=function(e,t,n,r){var o=e.constructor;switch(t){case y:return Le(e);case a:case s:return new o(+e);case b:return function(e,t){var n=t?Le(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,r);case g:case _:case w:case E:case S:case O:case P:case k:case R:return function(e,t){var n=t?Le(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}(e,r);case u:return function(e,t,n){return U(t?n(Y(e),!0):Y(e),W,new e.constructor)}(e,r,n);case f:case m:return new o(e);case d:return function(e){var t=new e.constructor(e.source,j.exec(e));return t.lastIndex=e.lastIndex,t}(e);case h:return function(e,t,n){return U(t?n(z(e),!0):z(e),D,new e.constructor)}(e,r,n);case v:return function(e){return Ee?Object(Ee.call(e)):{}}(e)}}(e,N,xe,t)}}x||(x=new ke);var I=x.get(e);if(I)return I;if(x.set(e,L),!M)var F=n?function(e){return function(e,t,n){var r=t(e);return Ye(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,qe,Ie)}(e):qe(e);return function(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););}(F||e,function(o,i){F&&(o=e[i=o]),je(L,i,xe(o,t,n,r,i,e,x))}),L}function Te(e){return!(!Ve(e)||function(e){return!!K&&K in e}(e))&&(Xe(e)||H(e)?Z:C).test(Ue(e))}function Le(e){var t=new e.constructor(e.byteLength);return new ne(t).set(new ne(e)),t}function Me(e,t,n,r){n||(n={});for(var o=-1,i=t.length;++o<i;){var a=t[o],s=r?r(n[a],e[a],a,n,e):void 0;je(n,a,void 0===s?e[a]:s)}return n}function Ne(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function Ae(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Te(n)?n:void 0}Se.prototype.clear=function(){this.__data__=me?me(null):{}},Se.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},Se.prototype.get=function(e){var t=this.__data__;if(me){var n=t[e];return n===r?void 0:n}return J.call(t,e)?t[e]:void 0},Se.prototype.has=function(e){var t=this.__data__;return me?void 0!==t[e]:J.call(t,e)},Se.prototype.set=function(e,t){return this.__data__[e]=me&&void 0===t?r:t,this},Oe.prototype.clear=function(){this.__data__=[]},Oe.prototype.delete=function(e){var t=this.__data__,n=Ce(t,e);return!(n<0||(n==t.length-1?t.pop():ae.call(t,n,1),0))},Oe.prototype.get=function(e){var t=this.__data__,n=Ce(t,e);return n<0?void 0:t[n][1]},Oe.prototype.has=function(e){return Ce(this.__data__,e)>-1},Oe.prototype.set=function(e,t){var n=this.__data__,r=Ce(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},Pe.prototype.clear=function(){this.__data__={hash:new Se,map:new(fe||Oe),string:new Se}},Pe.prototype.delete=function(e){return Ne(this,e).delete(e)},Pe.prototype.get=function(e){return Ne(this,e).get(e)},Pe.prototype.has=function(e){return Ne(this,e).has(e)},Pe.prototype.set=function(e,t){return Ne(this,e).set(e,t),this},ke.prototype.clear=function(){this.__data__=new Oe},ke.prototype.delete=function(e){return this.__data__.delete(e)},ke.prototype.get=function(e){return this.__data__.get(e)},ke.prototype.has=function(e){return this.__data__.has(e)},ke.prototype.set=function(e,t){var r=this.__data__;if(r instanceof Oe){var o=r.__data__;if(!fe||o.length<n-1)return o.push([e,t]),this;r=this.__data__=new Pe(o)}return r.set(e,t),this};var Ie=se?B(se,Object):function(){return[]},Fe=function(e){return Q.call(e)};function We(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||x.test(e))&&e>-1&&e%1==0&&e<t}function De(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||q)}function Ue(e){if(null!=e){try{return $.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function He(e,t){return e===t||e!=e&&t!=t}(ue&&Fe(new ue(new ArrayBuffer(1)))!=b||fe&&Fe(new fe)!=u||pe&&"[object Promise]"!=Fe(pe.resolve())||de&&Fe(new de)!=h||he&&"[object WeakMap]"!=Fe(new he))&&(Fe=function(e){var t=Q.call(e),n=t==p?e.constructor:void 0,r=n?Ue(n):void 0;if(r)switch(r){case ve:return b;case ye:return u;case be:return"[object Promise]";case ge:return h;case _e:return"[object WeakMap]"}return t});var Ye=Array.isArray;function Be(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}(e.length)&&!Xe(e)}var ze=le||function(){return!1};function Xe(e){var t=Ve(e)?Q.call(e):"";return t==l||t==c}function Ve(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function qe(e){return Be(e)?Re(e):function(e){if(!De(e))return ce(e);var t=[];for(var n in Object(e))J.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)}e.exports=function(e){return xe(e,!0,!0)}}).call(this,n(109)(e))},function(e,t,n){e.exports=n(1)(277)},function(e,t){var n="Expected a function",r="__lodash_hash_undefined__",o=1/0,i="[object Function]",a="[object GeneratorFunction]",s="[object Symbol]",l=/^\./,c=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,u=/\\(\\)?/g,f=/^\[object .+?Constructor\]$/,p="object"==typeof global&&global&&global.Object===Object&&global,d="object"==typeof self&&self&&self.Object===Object&&self,h=p||d||Function("return this")();var m=Array.prototype,v=Function.prototype,y=Object.prototype,b=h["__core-js_shared__"],g=function(){var e=/[^.]+$/.exec(b&&b.keys&&b.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),_=v.toString,w=y.hasOwnProperty,E=y.toString,S=RegExp("^"+_.call(w).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),O=h.Symbol,P=m.splice,k=I(h,"Map"),R=I(Object,"create"),j=O?O.prototype:void 0,C=j?j.toString:void 0;function x(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function T(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function L(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function M(e,t){for(var n=e.length;n--;)if(U(e[n][0],t))return n;return-1}function N(e){return!(!Y(e)||function(e){return!!g&&g in e}(e))&&(function(e){var t=Y(e)?E.call(e):"";return t==i||t==a}(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e)?S:f).test(function(e){if(null!=e){try{return _.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}function A(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function I(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return N(n)?n:void 0}x.prototype.clear=function(){this.__data__=R?R(null):{}},x.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},x.prototype.get=function(e){var t=this.__data__;if(R){var n=t[e];return n===r?void 0:n}return w.call(t,e)?t[e]:void 0},x.prototype.has=function(e){var t=this.__data__;return R?void 0!==t[e]:w.call(t,e)},x.prototype.set=function(e,t){return this.__data__[e]=R&&void 0===t?r:t,this},T.prototype.clear=function(){this.__data__=[]},T.prototype.delete=function(e){var t=this.__data__,n=M(t,e);return!(n<0||(n==t.length-1?t.pop():P.call(t,n,1),0))},T.prototype.get=function(e){var t=this.__data__,n=M(t,e);return n<0?void 0:t[n][1]},T.prototype.has=function(e){return M(this.__data__,e)>-1},T.prototype.set=function(e,t){var n=this.__data__,r=M(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},L.prototype.clear=function(){this.__data__={hash:new x,map:new(k||T),string:new x}},L.prototype.delete=function(e){return A(this,e).delete(e)},L.prototype.get=function(e){return A(this,e).get(e)},L.prototype.has=function(e){return A(this,e).has(e)},L.prototype.set=function(e,t){return A(this,e).set(e,t),this};var F=D(function(e){e=function(e){return null==e?"":function(e){if("string"==typeof e)return e;if(B(e))return C?C.call(e):"";var t=e+"";return"0"==t&&1/e==-o?"-0":t}(e)}(e);var t=[];return l.test(e)&&t.push(""),e.replace(c,function(e,n,r,o){t.push(r?o.replace(u,"$1"):n||e)}),t});function W(e){if("string"==typeof e||B(e))return e;var t=e+"";return"0"==t&&1/e==-o?"-0":t}function D(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError(n);var r=function(){var n=arguments,o=t?t.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var a=e.apply(this,n);return r.cache=i.set(o,a),a};return r.cache=new(D.Cache||L),r}function U(e,t){return e===t||e!=e&&t!=t}D.Cache=L;var H=Array.isArray;function Y(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function B(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&E.call(e)==s}e.exports=function(e){return H(e)?function(e,t){for(var n=-1,r=e?e.length:0,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}(e,W):B(e)?[e]:function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}(F(e))}},function(e,t,n){"use strict";var r=Array.isArray,o=Object.keys,i=Object.prototype.hasOwnProperty;e.exports=function(e,t){try{return function e(t,n){if(t===n)return!0;var a,s,l,c=r(t),u=r(n);if(c&&u){if((s=t.length)!=n.length)return!1;for(a=0;a<s;a++)if(!e(t[a],n[a]))return!1;return!0}if(c!=u)return!1;var f=t instanceof Date,p=n instanceof Date;if(f!=p)return!1;if(f&&p)return t.getTime()==n.getTime();var d=t instanceof RegExp,h=n instanceof RegExp;if(d!=h)return!1;if(d&&h)return t.toString()==n.toString();if(t instanceof Object&&n instanceof Object){var m=o(t);if((s=m.length)!==o(n).length)return!1;for(a=0;a<s;a++)if(!i.call(n,m[a]))return!1;for(a=0;a<s;a++)if(!("_owner"===(l=m[a])&&t.$$typeof&&t._store||e(t[l],n[l])))return!1;return!0}return!1}(e,t)}catch(e){if(e.message&&e.message.match(/stack|recursion/i))return console.warn("Warning: react-fast-compare does not handle circular references.",e.name,e.message),!1;throw e}}},function(e,t,n){e.exports=n(1)(59)},function(e,t,n){e.exports=function(){"use strict";var e=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var n=Object.prototype.toString.call(e);return"[object RegExp]"===n||"[object Date]"===n||function(e){return e.$$typeof===t}(e)}(e)},t="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function n(e,t){return!1!==t.clone&&t.isMergeableObject(e)?o(function(e){return Array.isArray(e)?[]:{}}(e),e,t):e}function r(e,t,r){return e.concat(t).map(function(e){return n(e,r)})}function o(t,i,a){(a=a||{}).arrayMerge=a.arrayMerge||r,a.isMergeableObject=a.isMergeableObject||e;var s=Array.isArray(i),l=Array.isArray(t),c=s===l;return c?s?a.arrayMerge(t,i,a):function(e,t,r){var i={};return r.isMergeableObject(e)&&Object.keys(e).forEach(function(t){i[t]=n(e[t],r)}),Object.keys(t).forEach(function(a){r.isMergeableObject(t[a])&&e[a]?i[a]=o(e[a],t[a],r):i[a]=n(t[a],r)}),i}(t,i,a):n(i,a)}return o.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,n){return o(e,n,t)},{})},o}()},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=void 0,i=void 0,a=void 0,s=[];return function(){var l=function(e){return"function"==typeof e?e():e}(t),c=(new Date).getTime(),u=!o||c-o>l;o=c;for(var f=arguments.length,p=Array(f),d=0;d<f;d++)p[d]=arguments[d];if(u&&n.leading)return n.accumulate?Promise.resolve(e.call(this,[p])).then(function(e){return e[0]}):Promise.resolve(e.call.apply(e,[this].concat(p)));if(i?clearTimeout(a):i=function(){var e={};return e.promise=new Promise(function(t,n){e.resolve=t,e.reject=n}),e}(),s.push(p),a=setTimeout(function(){var t=i;clearTimeout(a),Promise.resolve(n.accumulate?e.call(this,s):e.apply(this,s[s.length-1])).then(t.resolve,t.reject),s=[],i=null}.bind(this),l),n.accumulate){var h=function(){var e=s.length-1;return{v:i.promise.then(function(t){return t[e]})}}();if("object"===(void 0===h?"undefined":r(h)))return h.v}return i.promise}}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n(10),i=n(44),a=n(4),s=n(12),l=n(45),c=n(46),u=n(5),f=n(8),p=function(){function e(){}return e.showErrors=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];e.forEach(function(e){Array.isArray(e)?e.forEach(function(e){return f.toast.error(e)}):f.toast.error(e)})},e.showInfo=function(e){f.toast.info(e)},e}(),d=function(){function e(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.value=e,this.errors=void 0==t[0]||null==t[0]?[]:t}return Object.defineProperty(e.prototype,"hasErrors",{get:function(){return null!=this.errors&&Array.isArray(this.errors)&&this.errors.length>0},enumerable:!0,configurable:!0}),e}(),h=n(7),m=n.n(h),v=n(9),y=n(47),b=n.n(y);function g(e){return JSON.parse(JSON.stringify(e))}function _(){return"object"==typeof process&&process.versions&&!!process.versions.node}var w,E=n(17),S=function(){return(S=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},O=function(){function e(){}return e.reset=function(){this.isInitialized=!1,this.gameReady=!1,this.data={}},e.init=function(e){if(this.isInitialized)throw Error("Globals is already initialized.");this.data=e||{public:{},private:{}},this.isInitialized=!0,E.NSerializeJson.options.useDotSeparatorInPath=!0},e.setGameReady=function(e){this.gameReady=e},e.isGameReady=function(){return this.gameReady},e.throwIfNotInitialized=function(){if(!this.isInitialized)throw Error("Globals is not initialized. You have to call Session.init before.")},e.getData=function(){return this.throwIfNotInitialized(),this.data},e.setData=function(e){this.throwIfNotInitialized();var t=this.data;this.data=S({},t,e)},Object.defineProperty(e,"serviceUser",{get:function(){return this.getData().public.serviceUser},set:function(e){this.setData({public:{serviceUser:e}})},enumerable:!0,configurable:!0}),Object.defineProperty(e,"isAuthenticated",{get:function(){return null!=this.serviceUser},enumerable:!0,configurable:!0}),e.isInitialized=!1,e.gameReady=!1,e.data={},e}(),P=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},k=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},R=function(){function e(){}return e.requestJson=function(e){return P(this,void 0,Promise,function(){var t,n,r,o,i;return k(this,function(a){switch(a.label){case 0:t=null,n=null,e.url=Object(v.transformUrl)(e.url),r=function(e,t){return t?e+"?"+b()(t):e},_()&&(o={headers:{Cookie:O.getData().private.cookie}}),a.label=1;case 1:switch(a.trys.push([1,13,,14]),e.method){case"GET":return[3,2];case"POST":return[3,4];case"PUT":return[3,6];case"PATCH":return[3,8];case"DELETE":return[3,10]}return[3,12];case 2:return[4,m.a.get(r(e.url,e.data),o)];case 3:return t=a.sent(),[3,12];case 4:return[4,m.a.post(e.url,e.data,o)];case 5:return t=a.sent(),[3,12];case 6:return[4,m.a.put(e.url,e.data,o)];case 7:return t=a.sent(),[3,12];case 8:return[4,m.a.patch(e.url,e.data,o)];case 9:return t=a.sent(),[3,12];case 10:return[4,m.a.delete(r(e.url,e.data),o)];case 11:return t=a.sent(),[3,12];case 12:return n=new(d.bind.apply(d,[void 0,t.data.value].concat(t.data.errors))),[3,14];case 13:return i=a.sent(),n=new d(null,i.message),[3,14];case 14:return n.hasErrors&&p.showErrors.apply(p,n.errors),[2,n]}})})},e.sendFormData=function(e){return P(this,void 0,Promise,function(){var t,n,r,o;return k(this,function(i){switch(i.label){case 0:t=null,n=null,e.url=Object(v.transformUrl)(e.url),r={headers:{"Content-Type":"multipart/form-data"}},i.label=1;case 1:switch(i.trys.push([1,9,,10]),e.method){case"POST":return[3,2];case"PUT":return[3,4];case"PATCH":return[3,6]}return[3,8];case 2:return[4,m.a.post(e.url,e.data,r)];case 3:return t=i.sent(),[3,8];case 4:return[4,m.a.put(e.url,e.data,r)];case 5:return t=i.sent(),[3,8];case 6:return[4,m.a.patch(e.url,e.data,r)];case 7:return t=i.sent(),[3,8];case 8:return n=new(d.bind.apply(d,[void 0,t.data.value].concat(t.data.errors))),[3,10];case 9:return o=i.sent(),n=new d(null,o.message),[3,10];case 10:return n.hasErrors&&p.showErrors.apply(p,n.errors),[2,n]}})})},e}(),j=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),C=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},x=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},T=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return j(t,e),t.login=function(e){return C(this,void 0,Promise,function(){var t;return x(this,function(n){switch(n.label){case 0:return[4,this.requestJson({url:"api/Account/Login",method:"POST",data:e})];case 1:return(t=n.sent()).hasErrors||(O.serviceUser=t.value),[2,t]}})})},t.logout=function(){return C(this,void 0,Promise,function(){var e;return x(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"api/Account/Logout",method:"POST"})];case 1:return(e=t.sent()).hasErrors||(O.serviceUser=null),[2,e]}})})},t}(R),L=n(18),M=n(2),N=n.n(M),A=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),I=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},F=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},W=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},D=function(e){function t(t){var n=e.call(this,t)||this;return n.state={logoutAction:!1},n}return A(t,e),t.prototype.onClickSignOut=function(e){return F(this,void 0,void 0,function(){return W(this,function(t){switch(t.label){case 0:return e.preventDefault(),[4,T.logout()];case 1:return t.sent(),this.setState({logoutAction:!0}),[2]}})})},t.prototype.componentDidMount=function(){new L.Dropdown(this.aboutDropdown)},t.prototype.componentDidUpdate=function(){},t.prototype.render=function(){var e=this;return this.state.logoutAction&&window.location.reload(),r.createElement("nav",{className:"navbar navbar-expand-md navbar-light bg-light"},r.createElement(a.NavLink,{exact:!0,to:"/",className:"navbar-brand"},"JG"),r.createElement("button",{className:"navbar-toggler",type:"button","data-toggle":"collapse","data-target":"#navbarNav","aria-controls":"navbarNav","aria-expanded":"false","aria-label":"Toggle navigation"},r.createElement("span",{className:"navbar-toggler-icon"})),r.createElement("div",{className:"collapse navbar-collapse",id:"navbarNav"},r.createElement("ul",{className:"navbar-nav"},r.createElement("li",{className:"nav-item active"},r.createElement(a.NavLink,{exact:!0,to:"/",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Home")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/portfolio",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Portfolio")),r.createElement("li",{className:"dropdown"},r.createElement("a",{href:"#",ref:function(t){return e.aboutDropdown=t},className:"dropdown-toggle nav-link",style:{fontSize:"18px"},"data-toggle":"dropdown",role:"button","aria-haspopup":"true","aria-expanded":"false"},r.createElement("span",{className:""},"About")),r.createElement("ul",{className:"dropdown-menu"},r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/about/me",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"About Me")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/about/music",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Music")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/about/reading",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Reading")))))))},I([N.a],t.prototype,"onClickSignOut",null),t}(r.Component),U=Object(u.withRouter)(D),H=(n(82),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),Y=function(e){function t(t){return e.call(this,t)||this}return H(t,e),t.prototype.render=function(){return r.createElement("footer",{className:"footer text-center"})},t}(r.Component),B=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),z=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return B(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement("div",{id:"authorizedLayout",className:"layout"},r.createElement(U,null),r.createElement("div",{className:"container container-content"},this.props.children),r.createElement(f.ToastContainer,null),r.createElement(Y,null)))},t}(r.Component),X=(n(83),n(16)),V=n.n(X),q=n(23),G=n.n(q),K=n(24),$=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),J=function(e){function t(t){var n=e.call(this,t)||this;return n.eventMatchers={HTMLEvents:/^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,MouseEvents:/^(?:click|dblclick|mouse(?:down|up|over|move|out|wheel))$/},n.getAllElementsFromPoint=function(e,t){for(var n,r=[],o=document.elementFromPoint(e,t);o&&o!==n&&o!==document.body&&o!==document.documentElement;)o.classList&&(r.push(o),o.classList.add("fakehidden"),n=o,o=document.elementFromPoint(e,t));for(var i=0;i<r.length;i++)r[i].classList&&r[i].classList.remove("fakehidden");return r},n.updateDimensions=function(){var e=document.getElementById("#canvas"),t=document.getElementById("react-app");e&&t&&(e.setAttribute("width",t.clientWidth.toString()),e.setAttribute("height",t.clientHeight.toString()),n.JGWGame.send("GameController","UpdateDimensions","{width: "+t.clientWidth.toString()+", height: "+t.clientHeight.toString()+" }"))},n.unlisten=n.props.history.listen(function(e,t){n.JGWGame.send("GameController","LoadPage",e.pathname)}),n}return $(t,e),t.prototype.putontop=function(e){e.classList.add("layeriframe"),Object(K.setTimeout)(function(){e.classList.remove("layeriframe")},2e3)},t.prototype.simulate=function(e,t,n){var r,o=this.extend({pointerX:0,pointerY:0,button:0,ctrlKey:!1,altKey:!1,shiftKey:!1,metaKey:!1,bubbles:!0,cancelable:!0},n||{}),i=null;for(var a in this.eventMatchers)if(this.eventMatchers[a].test(t)){i=a;break}if(!i)throw new SyntaxError("Only HTMLEvents and MouseEvents interfaces are supported");return document.createEvent&&(r=document.createEvent(i),"HTMLEvents"==i?r.initEvent(t,o.bubbles,o.cancelable):r.initMouseEvent(t,o.bubbles,o.cancelable,document.defaultView,o.button,o.pointerX,o.pointerY,o.pointerX,o.pointerY,o.ctrlKey,o.altKey,o.shiftKey,o.metaKey,o.button,e),e.dispatchEvent(r)),e},t.prototype.extend=function(e,t){for(var n in t)e[n]=t[n];return e},t.prototype.componentDidMount=function(){var e=this;window.addEventListener("resize",this.updateDimensions),O.setGameReady(!1),"undefined"!=typeof window&&(this.JGWGame=new q.UnityContent("JayceeGriffithWebsiteGame/Build.json","JayceeGriffithWebsiteGame/UnityLoader.js"),this.JGWGame.on("OnReady",function(){O.setGameReady(!0),document.getElementById("preloader").classList.add("loaded"),Object(K.setTimeout)(function(){document.getElementById("preloader").classList.add("hidden")},500),e.JGWGame.send("GameController","Connected"),e.JGWGame.send("GameController","LoadPage",e.props.location.pathname)}),this.JGWGame.on("SetPage",function(t){t!=e.props.location.pathname&&e.props.history.push(t)}),this.JGWGame.on("GetDimensions",function(t){e.updateDimensions()}),this.JGWGame.on("OpenNewTab",function(e){window.open(e,"_blank").focus()}),this.JGWGame.on("MouseEvent",function(t){var n=JSON.parse(t);if(n)if(n.pointerY=document.getElementById("react-app").clientHeight-n.pointerY,"scroll"==n.type){document.body.scrollTop=0;var r=document.getElementsByClassName("scrollbar-container")[0];r.scrollTop=r.scrollTop-100*n.scroll}else if("mousemove"!=n.type){var o=e.getAllElementsFromPoint(n.pointerX,n.pointerY);if(o.length>0)for(var i=0;i<o.length;i++){"iframe"==o[i].tagName.toLowerCase()&&e.putontop(o[i]),e.simulate(o[i],n.type,n);var a=document.getElementById("mouseTest");a&&(a.style.left=n.pointerX+"px",a.style.top=n.pointerY+"px")}}}),V.a.render(r.createElement(G.a,{unityContent:this.JGWGame}),document.getElementById("unityGame")))},t.prototype.componentDidUpdate=function(e){},t.prototype.componentWillUnmount=function(){this.unlisten(),window.removeEventListener("resize",this.updateDimensions)},t.prototype.render=function(){var e=this.props;e.match,e.location,e.history;return r.createElement("div",null,r.createElement("div",{id:"mouseTest",className:"mouseTest"}),r.createElement("div",{id:"unityGame",className:"unityGame"}))},t}(r.Component),Q=Object(a.withRouter)(J),Z=n(48),ee=n.n(Z),te=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ne=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return te(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement("div",{id:"guestLayout",className:"layout"},r.createElement(U,null),r.createElement("div",{className:"container container-content"},r.createElement("div",{style:{height:"75%;"}},r.createElement(ee.a,{option:{suppressScrollX:"true"}},this.props.children))),r.createElement(f.ToastContainer,null),r.createElement(Q,null)))},t}(r.Component),re=(n(94),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),oe=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},ie=function(e){function t(t){var n=e.call(this,t)||this;return n.renderKey=0,n}return re(t,e),t.prototype.forceUpdate=function(){this.renderKey=Math.random()},oe([N.a],t.prototype,"forceUpdate",null),t}(r.Component),ae=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),se=function(e){function t(t){return e.call(this,t)||this}return ae(t,e),t.prototype.render=function(){var e={display:"none"};return _()||(e={display:this.props.show?"block":"none"}),r.createElement("div",{key:this.renderKey,className:"loader-bg",style:e},r.createElement("div",{className:"sk-circle"},r.createElement("div",{className:"sk-circle1 sk-child"}),r.createElement("div",{className:"sk-circle2 sk-child"}),r.createElement("div",{className:"sk-circle3 sk-child"}),r.createElement("div",{className:"sk-circle4 sk-child"}),r.createElement("div",{className:"sk-circle5 sk-child"}),r.createElement("div",{className:"sk-circle6 sk-child"}),r.createElement("div",{className:"sk-circle7 sk-child"}),r.createElement("div",{className:"sk-circle8 sk-child"}),r.createElement("div",{className:"sk-circle9 sk-child"}),r.createElement("div",{className:"sk-circle10 sk-child"}),r.createElement("div",{className:"sk-circle11 sk-child"}),r.createElement("div",{className:"sk-circle12 sk-child"})))},t}(ie),le=function(){return(le=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ce=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},ue=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};!function(e){var t,n=this;!function(e){e.Init="LOGIN_INIT",e.Request="LOGIN_REQUEST",e.Success="LOGIN_SUCCESS",e.Failure="LOGIN_FAILURE"}(t=e.Actions||(e.Actions={})),e.actionCreators={init:function(){return function(e,r){return ce(n,void 0,void 0,function(){return ue(this,function(n){return e({type:t.Init}),[2]})})}},loginRequest:function(e){return function(r,o){return ce(n,void 0,void 0,function(){var n;return ue(this,function(o){switch(o.label){case 0:return r({type:t.Request}),[4,T.login(e)];case 1:return(n=o.sent()).hasErrors?(r({type:t.Failure}),[2]):(r({type:t.Success,payload:n.value}),[2])}})})}}};var r={indicators:{operationLoading:!1,loginSuccess:!1}};e.reducer=function(e,n){var o=n,i=function(){return g(e.indicators)};switch(o.type){case t.Init:return r;case t.Request:return(a=i()).operationLoading=!0,le({},e,{indicators:a});case t.Success:return(a=i()).operationLoading=!1,a.loginSuccess=!0,le({},e,{indicators:a});case t.Failure:var a;return(a=i()).operationLoading=!1,le({},e,{indicators:a});default:}return e||r}}(w||(w={}));n(39);var fe,pe=n(3),de=n(49),he=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),me=function(){return(me=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ve=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},ye=function(e){function t(t){return e.call(this,t)||this}return he(t,e),t.prototype.isValid=function(){return this.validator.isValid()},t.prototype.emptyForm=function(){!function(e){Array.from(e.querySelectorAll("input, select, textarea")).forEach(function(e){var t=e.getAttribute("type");"checkbox"===t||"radio"===t?e.checked=!1:e.value=""})}(this.elForm)},t.prototype.getData=function(){return E.NSerializeJson.serializeForm(this.elForm)},t.prototype.componentDidMount=function(){this.validator=new de.NValTippy(this.elForm)},t.prototype.render=function(){var e=this;return r.createElement("form",me({},this.props,{ref:function(t){return e.elForm=t}}),this.props.children)},ve([N.a],t.prototype,"isValid",null),ve([N.a],t.prototype,"emptyForm",null),ve([N.a],t.prototype,"getData",null),t}(r.Component),be=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ge=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},_e=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},we=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},Ee=function(e){function t(t){return e.call(this,t)||this}return be(t,e),t.prototype.componentDidMount=function(){this.props.init(),this.elLoader&&this.elLoader.forceUpdate()},t.prototype.onClickSubmitBtn=function(e){return _e(this,void 0,void 0,function(){var t;return we(this,function(n){return e.preventDefault(),this.elForm.isValid()&&(t=this.elForm.getData(),this.props.loginRequest(t)),[2]})})},t.prototype.render=function(){var e=this;return this.props.indicators.loginSuccess?r.createElement(u.Redirect,{to:"/"}):r.createElement("div",{id:"loginPage"},r.createElement(pe.Helmet,null,r.createElement("title",null,"Login page - Jaycee Griffith")),r.createElement(se,{ref:function(t){return e.elLoader=t},show:this.props.indicators.operationLoading}),r.createElement("div",{id:"loginContainer"},r.createElement("p",{className:"text-center"},"Type any login and password to enter."),r.createElement(ye,{ref:function(t){return e.elForm=t}},r.createElement("div",{className:"form-group"},r.createElement("label",{htmlFor:"inputLogin"},"Login"),r.createElement("input",{type:"text",name:"login","data-value-type":"string",className:"form-control",id:"inputLogin","data-val-required":"true","data-msg-required":"Login is required."})),r.createElement("div",{className:"form-group"},r.createElement("label",{htmlFor:"inputLogin"},"Password"),r.createElement("input",{type:"password",name:"password","data-value-type":"string",className:"form-control",id:"inputPassword","data-val-required":"true","data-msg-required":"Password is required."})),r.createElement("div",{className:"form-inline"},r.createElement("button",{className:"btn btn-success",onClick:this.onClickSubmitBtn},"Sign in")))))},ge([N.a],t.prototype,"onClickSubmitBtn",null),t}(r.Component),Se=Object(o.connect)(function(e){return e.login},w.actionCreators)(Ee),Oe=Object(u.withRouter)(Se),Pe=function(){return(Pe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ke=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]])}return n},Re=function(e){var t=e.component,n=e.layout,o=e.path,i=ke(e,["component","layout","path"]),a="/admin"===o,s="/login"===o;return!O.isAuthenticated&&a?r.createElement(u.Redirect,{to:"/login"}):O.isAuthenticated&&s?r.createElement(u.Redirect,{to:"/"}):r.createElement(u.Route,Pe({},i,{render:function(e){return r.createElement(n,null,r.createElement(t,Pe({},e)))}}))},je=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ce=function(e){function t(t){return e.call(this,t)||this}return je(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Home")),r.createElement("div",{className:"jumbotron p-3 p-md-5 rounded bg-white"},r.createElement("div",{className:"mobile-only-content col-md-6 px-0"},r.createElement("h1",{className:"display-4 font-italic"},"Welcome to my Web",r.createElement("del",null,"site")," game."),r.createElement("p",{className:"lead my-3"},"Navigate by ",r.createElement("b",null,"tilting")," your device"),r.createElement("p",{className:"lead mb-0"},r.createElement("span",null,"Make sure to check out my ",r.createElement("a",{href:"https://drive.google.com/open?id=1x_J0KD_UN28wIOzOdzOprr4PpcYHh22x",target:"_blank"},"Resume"),"."))),r.createElement("div",{className:"desktop-only-content col-md-6 px-0"},r.createElement("h1",{className:"display-4 font-italic"},"Welcome to my Web",r.createElement("del",null,"site")," game."),r.createElement("p",{className:"lead my-3"},"Navigate with ",r.createElement("b",null,"wasd")," or the ",r.createElement("b",null,"arrow keys")),r.createElement("p",{className:"lead my-3"},"Jump with ",r.createElement("b",null,"space")),r.createElement("p",{className:"lead mb-0"},r.createElement("span",null,"Too slow? Hold ",r.createElement("b",null,"shift"),".")),r.createElement("p",{className:"lead mb-0"},r.createElement("span",null,"Make sure to check out my ",r.createElement("a",{href:"https://drive.google.com/open?id=1x_J0KD_UN28wIOzOdzOprr4PpcYHh22x",target:"_blank"},"Resume"),".")))))},t}(r.Component),xe=n(25),Te=n.n(xe),Le=n(26),Me=n.n(Le),Ne=n(27),Ae=n.n(Ne),Ie=n(28),Fe=n.n(Ie),We=n(29),De=n.n(We),Ue=n(30),He=n.n(Ue),Ye=n(31),Be=n.n(Ye),ze=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Xe=(n(16),n(95).Carousel),Ve=function(e){function t(t){return e.call(this,t)||this}return ze(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Portfolio")),r.createElement("div",{className:"text-center lead mb-0 mt-5"},r.createElement("h2",null,"Make sure to check out my ",r.createElement("a",{href:"https://drive.google.com/open?id=1x_J0KD_UN28wIOzOdzOprr4PpcYHh22x",target:"_blank"},"Resume"),".")),r.createElement("div",null,r.createElement(Xe,{className:"col-md",showArrows:!0,showThumbs:!1,infiniteLoop:!0,swipeable:!1},r.createElement("div",null,r.createElement("img",{src:Me.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:Me.a,className:"w-75 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Cinema 4D Kitten Fully Rigged "),r.createElement("span",null,"Feel free to download the kitten | "),r.createElement("a",{href:"https://drive.google.com/open?id=1w56ctmWSgPDhRB7fKY-v-waFzBPImjZy",target:"_blank"},"Kitten Red_Final.zip"))),r.createElement("div",null,r.createElement("img",{src:Te.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:Te.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Cinema 4D Kitten Fully Rigged "),r.createElement("span",null,"Feel free to download the kitten | "),r.createElement("a",{href:"https://drive.google.com/open?id=1w56ctmWSgPDhRB7fKY-v-waFzBPImjZy",target:"_blank"},"Kitten Red_Final.zip"))),r.createElement("div",null,r.createElement("img",{src:De.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:De.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Download and play Life of Gooba | "),r.createElement("a",{href:"https://jgriffith3433.itch.io/lifeofgooba",target:"_blank"},"Itch.io game page"))),r.createElement("div",null,r.createElement("img",{src:Ae.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:Ae.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},"Low Poly Character Modeling")),r.createElement("div",null,r.createElement("img",{src:Fe.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:Fe.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},"3ds Max Smiling Boy")),r.createElement("div",null,r.createElement("img",{src:He.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:He.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},"UDK training simulation")),r.createElement("div",null,r.createElement("img",{src:Be.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:Be.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Zelda-style camera | "),r.createElement("span",null,"Feel free to download the project | "),r.createElement("a",{href:"https://drive.google.com/open?id=1RcWA2-y2mBGhg3QYobmNaovrYf3F4TNn",target:"_blank"},"zelda.zip"))))))},t}(r.Component),qe=Object(a.withRouter)(Ve),Ge=n(50),Ke=n.n(Ge),$e=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Je=function(e){function t(t){return e.call(this,t)||this}return $e(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Reading")),r.createElement("br",null),r.createElement("br",null),r.createElement("div",{className:"text-center"},r.createElement("h2",null,"I love the star wars books")),r.createElement("div",{className:"text-center"},r.createElement("p",null,"They are even better than the movies and you can read them chronologically"),r.createElement("img",{src:Ke.a,alt:"Star Wars Books",className:"img-fluid"})),r.createElement("div",{className:"text-center"},r.createElement("h3",null,"Something, something, something... Complete.")),r.createElement("div",{className:"text-center"},r.createElement("ul",null,r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/B00JN8H2TC/ref=cm_sw_em_r_mt_dp_U_MU1uCbF9FCBSZ",target:"_blank"},"Into the Void: Star Wars (Dawn of the Jedi)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345541324/ref=cm_sw_em_r_mt_dp_U_C41uCb9FHQ4BH",target:"_blank"},"Star Wars: Lost Tribe of the Sith - The Collected Stories (Star Wars: Lost Tribe of the Sith - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511352/ref=cm_sw_em_r_mt_dp_U_k51uCbDBCV9PR",target:"_blank"},"Star Wars: The Old Republic - Revan (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511395/ref=cm_sw_em_r_mt_dp_U_P51uCbPA6BPE7",target:"_blank"},"Star Wars: The Old Republic - Deceived (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345518594/ref=cm_sw_em_r_mt_dp_U_A61uCbNSRBSFT",target:"_blank"},"Star Wars: Red Harvest")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511336/ref=cm_sw_em_r_mt_dp_U_s71uCb3T663RH",target:"_blank"},"Fatal Alliance (Star Wars: The Old Republic) (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345529421/ref=cm_sw_em_r_mt_dp_U_Z71uCbW0C197J",target:"_blank"},"Annihilation: Star Wars Legends (The Old Republic) (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345522648/ref=cm_sw_em_r_mt_dp_U_q81uCbKK0TD18",target:"_blank"},"Star Wars: Knight Errant")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345477375/ref=cm_sw_em_r_mt_dp_U_s91uCbRXD4FG9",target:"_blank"},"Path of Destruction (Star Wars: Darth Bane, Book 1)")),r.createElement("span",null," | "),r.createElement("span",null,"Currently Reading")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345477499/ref=cm_sw_em_r_mt_dp_U_u91uCb5930RYF",target:"_blank"},"Rule of Two (Star Wars: Darth Bane, Book 2)")),r.createElement("span",null," | "),r.createElement("span",null,"Queued")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511573/ref=cm_sw_em_r_mt_dp_U_q91uCb786RBNS",target:"_blank"},"Dynasty of Evil (Star Wars: Darth Bane, Book 3)")),r.createElement("span",null," | "),r.createElement("span",null,"Queued")))),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null))},t}(r.Component),Qe=n(51),Ze=n.n(Qe),et=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),tt=function(e){function t(t){return e.call(this,t)||this}return et(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - About Me")),r.createElement("div",{className:"mt-5"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col-md-4"},r.createElement("img",{src:Ze.a,className:"w-100"})),r.createElement("div",{className:"col-md-8"},r.createElement("h1",{className:"display-4 font-italic"},"I enjoy computers, reading, making vidoes and music."),r.createElement("h2",{className:"lead my-3"},"I have lived in ",r.createElement("b",null,"Oklahom City, OK")," and ",r.createElement("b",null,"Albuquerque, NM"),". I currently live in ",r.createElement("b",null,"Reno, NV"),"."))),r.createElement("div",{className:"row"},r.createElement("div",{className:"col-md-12 text-center"},r.createElement("div",{className:"lead mt-5"},r.createElement("div",null,r.createElement("span",null,r.createElement("b",null,"External profile links")),r.createElement("p",null,r.createElement("a",{href:"https://github.com/jgriffith3433",target:"_blank"},"Github")),r.createElement("p",null,r.createElement("a",{href:"https://jgriffith3433.itch.io/lifeofgooba",target:"_blank"},"Itch.io")),r.createElement("p",null,r.createElement("a",{href:"https://www.kickstarter.com/profile/jgriffith3433",target:"_blank"},"Kickstarter")),r.createElement("p",null,r.createElement("a",{href:"https://www.linkedin.com/in/jaycee-griffith-760bb7116/",target:"_blank"},"LinkedIn")),r.createElement("p",null,r.createElement("a",{href:"https://soundcloud.com/jacobsgriffith",target:"_blank"},"Sound Cloud")),r.createElement("p",null,r.createElement("a",{href:"https://stackoverflow.com/users/941632/jacobsgriffith",target:"_blank"},"Stack Overflow")),r.createElement("p",null,r.createElement("a",{href:"https://trello.com/jayceegriffith",target:"_blank"},"Trello"))))))),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null),r.createElement("br",null))},t}(r.Component),nt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),rt=function(e){function t(t){return e.call(this,t)||this}return nt(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Music")),r.createElement("br",null),r.createElement("br",null),r.createElement("div",{className:"text-center"},r.createElement("h2",null,"Listen to some of my sounds")),r.createElement("iframe",{width:"100%",height:"300",scrolling:"no",frameBorder:"no",allow:"autoplay",src:"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/users/47547303&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true"}))},t}(r.Component),ot=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),it=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},at=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},st=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ot(t,e),t.search=function(e){return void 0===e&&(e=null),it(this,void 0,Promise,function(){return at(this,function(t){switch(t.label){case 0:return null==e&&(e=""),[4,this.requestJson({url:"/api/Person/Search?term="+e,method:"GET"})];case 1:return[2,t.sent()]}})})},t.update=function(e){return it(this,void 0,Promise,function(){return at(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person",method:"PATCH",data:e})];case 1:return[2,t.sent()]}})})},t.delete=function(e){return it(this,void 0,Promise,function(){return at(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person/"+e,method:"DELETE"})];case 1:return[2,t.sent()]}})})},t.add=function(e){return it(this,void 0,Promise,function(){return at(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person/Add",method:"POST",data:e})];case 1:return[2,t.sent()]}})})},t}(R),lt=function(){return(lt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ct=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},ut=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};!function(e){var t,n=this;!function(e){e.SearchRequest="PERSON_SEARCH_REQUEST",e.SearchResponse="PERSON_SEARCH_RESPONSE",e.AddRequest="PERSON_ADD_REQUEST",e.AddResponse="PERSON_ADD_RESPONSE",e.UpdateRequest="PERSON_UPDATE_REQUEST",e.UpdateResponse="PERSON_UPDATE_RESPONSE",e.DeleteRequest="PERSON_DELETE_REQUEST",e.DeleteResponse="PERSON_DELETE_RESPONSE"}(t=e.Actions||(e.Actions={})),e.actionCreators={searchRequest:function(e){return function(r,o){return ct(n,void 0,void 0,function(){var n=this;return ut(this,function(o){switch(o.label){case 0:return[4,Object(v.wait)(function(o){return ct(n,void 0,void 0,function(){var n;return ut(this,function(o){switch(o.label){case 0:return r({type:t.SearchRequest}),[4,st.search(e)];case 1:return(n=o.sent()).hasErrors||r({type:t.SearchResponse,payload:n.value}),[2]}})})})];case 1:return o.sent(),[2]}})})}},addRequest:function(e){return function(r,o){return ct(n,void 0,void 0,function(){var n;return ut(this,function(o){switch(o.label){case 0:return r({type:t.AddRequest}),[4,st.add(e)];case 1:return(n=o.sent()).hasErrors||(e.id=n.value,r({type:t.AddResponse,payload:e})),[2]}})})}},updateRequest:function(e){return function(r,o){return ct(n,void 0,void 0,function(){return ut(this,function(n){switch(n.label){case 0:return r({type:t.UpdateRequest}),[4,st.update(e)];case 1:return n.sent().hasErrors||r({type:t.UpdateResponse,payload:e}),[2]}})})}},deleteRequest:function(e){return function(r,o){return ct(n,void 0,void 0,function(){return ut(this,function(n){switch(n.label){case 0:return r({type:t.DeleteRequest}),[4,st.delete(e)];case 1:return n.sent().hasErrors||r({type:t.DeleteResponse,id:e}),[2]}})})}}};var r={people:[],indicators:{operationLoading:!1}};e.reducer=function(e,n){var o=n,i=function(){return g(e.indicators)};switch(o.type){case t.SearchRequest:return(s=i()).operationLoading=!0,lt({},e,{indicators:s});case t.SearchResponse:return(s=i()).operationLoading=!1,lt({},e,{indicators:s,people:o.payload});case t.UpdateRequest:return(s=i()).operationLoading=!0,lt({},e,{indicators:s});case t.UpdateResponse:(s=i()).operationLoading=!1;var a=(l=g(e.people)).filter(function(e){return e.id===o.payload.id})[0];return a.firstName=o.payload.firstName,a.lastName=o.payload.lastName,lt({},e,{indicators:s,people:l});case t.AddRequest:return(s=i()).operationLoading=!0,lt({},e,{indicators:s});case t.AddResponse:return(s=i()).operationLoading=!1,(l=g(e.people)).push(o.payload),lt({},e,{indicators:s,people:l});case t.DeleteRequest:return(s=i()).operationLoading=!0,lt({},e,{indicators:s});case t.DeleteResponse:var s;(s=i()).operationLoading=!1;var l=g(e.people).filter(function(e){return e.id!==o.id});return lt({},e,{indicators:s,people:l});default:}return e||r}}(fe||(fe={}));var ft=n(52),pt=n.n(ft),dt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ht=function(){return(ht=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},mt=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},vt=function(e){function t(t){return e.call(this,t)||this}return dt(t,e),t.prototype.setFirstPage=function(){this.elFirstPageBtn.click()},t.prototype.setLastPage=function(){this.elLastPageBtn.click()},t.prototype.render=function(){var e=this;return r.createElement(pt.a,{total:this.props.totalResults,limit:this.props.limitPerPage,currentPage:this.props.currentPage},function(t){var n=t.pages,o=t.currentPage,i=t.hasNextPage,a=t.hasPreviousPage,s=t.previousPage,l=t.nextPage,c=t.totalPages,u=t.getPageItemProps;return r.createElement("ul",{className:"pagination"},r.createElement("li",null,r.createElement("span",ht({},u({pageValue:1,onPageChange:e.props.onChangePage}),{ref:function(t){return e.elFirstPageBtn=t}}),"first")),a&&r.createElement("li",null,r.createElement("span",ht({},u({pageValue:s,onPageChange:e.props.onChangePage})),"<")),n.map(function(t){return r.createElement("li",{key:t,className:t===o?"active":""},r.createElement("span",ht({},u({pageValue:t,onPageChange:e.props.onChangePage})),t))}),i&&r.createElement("li",null,r.createElement("span",ht({},u({pageValue:l,onPageChange:e.props.onChangePage})),">")),r.createElement("li",null,r.createElement("span",ht({},u({pageValue:c,onPageChange:e.props.onChangePage}),{ref:function(t){return e.elLastPageBtn=t}}),"last")))})},mt([N.a],t.prototype,"setFirstPage",null),mt([N.a],t.prototype,"setLastPage",null),t}(r.Component),yt=n(53),bt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),gt=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},_t=function(e){function t(t){return e.call(this,t)||this}return bt(t,e),t.prototype.emptyForm=function(){this.elForm&&this.elForm.emptyForm()},t.prototype.componentDidMount=function(){},t.prototype.render=function(){var e=this;return r.createElement(yt.Formik,{enableReinitialize:!0,initialValues:{firstName:this.props.data.firstName||"",lastName:this.props.data.lastName||""},onSubmit:function(e,t){t.setSubmitting}},function(t){var n=t.values,o=(t.errors,t.touched,t.handleChange),i=t.handleBlur;t.handleSubmit,t.isSubmitting;return r.createElement(ye,{className:"form",ref:function(t){return e.elForm=t}},r.createElement("input",{type:"hidden",name:"id",defaultValue:(e.props.data.id||0).toString()}),r.createElement("div",{className:"form-group"},r.createElement("label",{className:"control-label required",htmlFor:"person__firstName"},"First name"),r.createElement("input",{type:"text",className:"form-control",id:"person__firstName",name:"firstName","data-value-type":"string","data-val-required":"true","data-msg-required":"First name is required.",value:n.firstName,onChange:o,onBlur:i})),r.createElement("div",{className:"form-group"},r.createElement("label",{className:"control-label required",htmlFor:"person__lastName"},"Last name"),r.createElement("input",{type:"text",className:"form-control",id:"person__lastName",name:"lastName","data-value-type":"string","data-val-required":"true","data-msg-required":"Last name is required.",value:n.lastName,onChange:o,onBlur:i})))})},gt([N.a],t.prototype,"emptyForm",null),t}(r.Component),wt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Et=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},St=function(e){function t(t){return e.call(this,t)||this}return wt(t,e),t.prototype.show=function(){this.modalPlugin.show()},t.prototype.hide=function(){this.modalPlugin.hide()},t.prototype.componentDidMount=function(){var e=this;this.modalPlugin=new L.Modal(this.elModal),this.props.onShow&&this.elModal.addEventListener("show.bs.modal",function(){return e.props.onShow()}),this.props.onHide&&this.elModal.addEventListener("hide.bs.modal",function(){return e.props.onHide()})},t.prototype.componentWillUnmount=function(){this.modalPlugin.hide()},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"modal fade",tabIndex:-1,role:"dialog",ref:function(t){return e.elModal=t}},r.createElement("div",{className:"modal-dialog",role:"document"},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("button",{type:"button",className:"close","data-dismiss":"modal","aria-label":"Close"},r.createElement("span",{"aria-hidden":"true"},"×")),r.createElement("h4",{className:"modal-title"},this.props.title)),r.createElement("div",{className:"modal-body"},this.props.children),r.createElement("div",{className:"modal-footer"},this.props.buttons))))},Et([N.a],t.prototype,"show",null),Et([N.a],t.prototype,"hide",null),t}(r.Component),Ot=n(54),Pt=n.n(Ot),kt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Rt=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},jt=function(e){function t(t){var n=e.call(this,t)||this;return n.state={searchTerm:"",pageNum:1,limitPerPage:5,rowOffset:0,modelForEdit:{}},n.debouncedSearch=Pt()(function(e){t.searchRequest(e)},500),n}return kt(t,e),t.prototype.componentWillMount=function(){this.props.searchRequest()},t.prototype.componentWillUnmount=function(){this.elModalAdd&&this.elModalAdd.hide(),this.elModalEdit&&this.elModalEdit.hide(),this.elModalDelete&&this.elModalDelete.hide()},t.prototype.onChangePage=function(e){var t=Math.ceil((e-1)*this.state.limitPerPage);this.setState({pageNum:e,rowOffset:t})},t.prototype.onClickShowAddModal=function(e){this.elModalAdd.show()},t.prototype.onClickShowEditModal=function(e,t){this.setState({modelForEdit:t}),this.elModalEdit.show()},t.prototype.onClickShowDeleteModal=function(e,t){this.setState({modelForEdit:t}),this.elModalDelete.show()},t.prototype.onClickPersonEditorAdd__saveBtn=function(e){e.preventDefault(),this.personEditorAdd.elForm.isValid()&&(this.props.addRequest(this.personEditorAdd.elForm.getData()),this.pagingBar.setLastPage(),this.elModalAdd.hide())},t.prototype.onClickPersonEditorEdit__saveBtn=function(e){if(this.personEditorEdit.elForm.isValid()){var t=this.personEditorEdit.elForm.getData();this.props.updateRequest(t),this.elModalEdit.hide()}},t.prototype.onClickPersonEditorDelete__saveBtn=function(e){this.props.deleteRequest(this.state.modelForEdit.id),this.elModalDelete.hide()},t.prototype.renderRow=function(e){var t=this;return r.createElement("tr",{key:e.id},r.createElement("td",null,e.firstName),r.createElement("td",null,e.lastName),r.createElement("td",null,r.createElement("button",{className:"btn btn-info",onClick:function(n){return t.onClickShowEditModal(n,e)}},"Edit")," ",r.createElement("button",{className:"btn btn-danger",onClick:function(n){return t.onClickShowDeleteModal(n,e)}},"Delete")))},t.prototype.renderRows=function(e){var t=this;return e.slice(this.state.rowOffset,this.state.rowOffset+this.state.limitPerPage).map(function(e){return t.renderRow(e)})},t.prototype.onChangeSearchInput=function(e){var t=e.currentTarget.value;this.debouncedSearch(t),this.pagingBar.setFirstPage()},t.prototype.render=function(){var e=this;return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Portfolio")),r.createElement(se,{show:this.props.indicators.operationLoading}),r.createElement("div",{className:"panel panel-default"},r.createElement("div",{className:"panel-body row"},r.createElement("div",{className:"col-sm-1"},r.createElement("button",{className:"btn btn-success",onClick:this.onClickShowAddModal},"Add")),r.createElement("div",{className:"col-sm-11"},r.createElement("input",{type:"text",className:"form-control",defaultValue:"",onChange:this.onChangeSearchInput,placeholder:"Search for people..."})))),r.createElement("table",{className:"table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"First name"),r.createElement("th",null,"Last name"),r.createElement("th",null))),r.createElement("tbody",null,this.renderRows(this.props.people))),r.createElement(St,{ref:function(t){return e.elModalAdd=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-primary",onClick:this.onClickPersonEditorAdd__saveBtn},"Save")),title:"Add person",onHide:function(){e.personEditorAdd&&e.personEditorAdd.emptyForm()}},r.createElement(_t,{ref:function(t){return e.personEditorAdd=t},data:{}})),r.createElement(St,{ref:function(t){return e.elModalEdit=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-primary",onClick:this.onClickPersonEditorEdit__saveBtn},"Save")),title:"Edit person: "+this.state.modelForEdit.firstName+" "+this.state.modelForEdit.lastName,onHide:function(){e.personEditorEdit&&e.setState({modelForEdit:{}})}},r.createElement(_t,{ref:function(t){return e.personEditorEdit=t},data:this.state.modelForEdit})),r.createElement(St,{ref:function(t){return e.elModalDelete=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-danger",onClick:this.onClickPersonEditorDelete__saveBtn},"Delete")),title:"Delete person: "+this.state.modelForEdit.firstName+" "+this.state.modelForEdit.lastName},r.createElement("p",null,"Do you really want to delete this person?")),r.createElement(vt,{ref:function(t){return e.pagingBar=t},totalResults:this.props.people.length,limitPerPage:this.state.limitPerPage,currentPage:this.state.pageNum,onChangePage:this.onChangePage}))},Rt([N.a],t.prototype,"onChangePage",null),Rt([N.a],t.prototype,"onClickShowAddModal",null),Rt([N.a],t.prototype,"onClickShowEditModal",null),Rt([N.a],t.prototype,"onClickShowDeleteModal",null),Rt([N.a],t.prototype,"onClickPersonEditorAdd__saveBtn",null),Rt([N.a],t.prototype,"onClickPersonEditorEdit__saveBtn",null),Rt([N.a],t.prototype,"onClickPersonEditorDelete__saveBtn",null),Rt([N.a],t.prototype,"renderRow",null),Rt([N.a],t.prototype,"renderRows",null),Rt([N.a],t.prototype,"onChangeSearchInput",null),t}(r.Component),Ct=Object(o.connect)(function(e){return e.person},fe.actionCreators)(jt),xt=Object(u.withRouter)(Ct),Tt=r.createElement(a.Switch,null,r.createElement(Re,{layout:ne,exact:!0,path:"/login",component:Oe}),r.createElement(Re,{layout:ne,exact:!0,path:"/",component:Ce}),r.createElement(Re,{layout:ne,exact:!0,path:"/portfolio",component:qe}),r.createElement(Re,{layout:ne,exact:!0,path:"/about/me",component:tt}),r.createElement(Re,{layout:ne,exact:!0,path:"/about/music",component:rt}),r.createElement(Re,{layout:ne,exact:!0,path:"/about/reading",component:Je}),r.createElement(Re,{layout:z,exact:!0,path:"/admin",component:xt})),Lt=n(13),Mt=n(55),Nt=n.n(Mt),At={login:w.reducer,person:fe.reducer},It=function(){return(It=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function Ft(e,t){var n="undefined"==typeof window?null:window,r=n&&n.__REDUX_DEVTOOLS_EXTENSION__;return Object(Lt.compose)(Object(Lt.applyMiddleware)(Nt.a,Object(s.routerMiddleware)(e)),r?r():function(e){return e})(Lt.createStore)(function(e,t){return Object(Lt.combineReducers)(It({},e,{router:Wt(t)}))}(At,e),t)}var Wt=function(e){var t={location:e.location,action:e.action};return function(e,n){return void 0===e&&(e=t),void 0===n&&(n={}),n.type===s.LOCATION_CHANGE?It({},e,n.payload):e}};var Dt=function(){var e=pe.Helmet.renderStatic(),t="";for(var n in e)e.hasOwnProperty(n)&&(t+=e[n].toString());return t},Ut=function(e,t,n){return{completedTasks:v.completedTasks,nodeSession:e,initialReduxState:t,helmetStrings:n}};t.default=Object(c.createServerRenderer)(function(e){return O.reset(),O.init(e.data),new Promise(function(t,n){var c=e.baseUrl.substring(0,e.baseUrl.length-1),u=e.url.substring(c.length),f=Ft(Object(l.createMemoryHistory)());f.dispatch(Object(s.replace)(u));var p={},d=r.createElement(o.Provider,{store:f},r.createElement(a.StaticRouter,{basename:c,context:p,location:e.location.path,children:Tt})),h=function(){return Object(i.renderToString)(d)};h(),p.url?t({redirectUrl:p.url,globals:Ut(e.data,f.getState(),Dt())}):e.domainTasks.then(function(){t({html:h(),globals:Ut(e.data,f.getState(),Dt())})},n)})})}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiLi92ZW5kb3JcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmluZC1kZWNvcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1oZWxtZXQvbGliL0hlbG1ldC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC10b2FzdGlmeS9saWIvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvZG9tYWluLXdhaXQvZGlzdC9janMvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbGliL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvaGlzdG9yeS9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2xpYi9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWR1eC9saWIvcmVkdXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9oaXN0b3J5L0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbm9kZV9tb2R1bGVzL2hpc3Rvcnkvbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9uc2VyaWFsaXplanNvbi9kaXN0L2Nqcy9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9ib290c3RyYXAzLW5hdGl2ZS9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbm9kZV9tb2R1bGVzL2hpc3RvcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvaW52YXJpYW50LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXVuaXR5LXdlYmdsL3NvdXJjZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ0aW1lcnNcIiIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvaW1hZ2VzL2tpdHRlbmZhY2UuanBnIiwid2VicGFjazovLy8uL0NsaWVudEFwcC9pbWFnZXMva2l0dGVuZnVsbC5qcGciLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2ltYWdlcy9uaWNjb2xvLmpwZyIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvaW1hZ2VzL2JveS5qcGciLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2ltYWdlcy9nb29iYS5qcGciLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2ltYWdlcy9zd2F0dHJhaW5lci5qcGciLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2ltYWdlcy96ZWxkYS5qcGciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvaGlzdG9yeS9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9MaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL1JvdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC11bml0eS13ZWJnbC9zb3VyY2UvZW51bXMvVW5pdHlWZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2xpYi9jc3NDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2xpYi9DU1NUcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWVhc3ktc3dpcGUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2xpYi9jb21wb25lbnRzL1RodW1icy5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9zZXJ2ZXIuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9hc3BuZXQtcHJlcmVuZGVyaW5nL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL2pzb24tdG8tdXJsL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcGVyZmVjdC1zY3JvbGxiYXIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvbnZhbC10aXBweS9kaXN0L2Nqcy9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2ltYWdlcy9zdGFyd2Fyc2Jvb2tzLmpwZyIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvaW1hZ2VzL3Byb2ZpbGVwaWMuanBnIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3QtcGFnaW5hdGluZy9kaXN0L2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZm9ybWlrL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F3ZXNvbWUtZGVib3VuY2UtcHJvbWlzZS9hd2Vzb21lLWRlYm91bmNlLXByb21pc2UuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9saWIvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL0Jyb3dzZXJSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2Nqcy9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9janMvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvUm91dGVyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9IYXNoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9NZW1vcnlSb3V0ZXIuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL05hdkxpbmsuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvUm91dGUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9Qcm9tcHQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL1JlZGlyZWN0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvU3RhdGljUm91dGVyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvU3dpdGNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9nZW5lcmF0ZVBhdGguanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZ2VuZXJhdGVQYXRoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbWF0Y2hQYXRoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL3dpdGhSb3V0ZXIuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC11bml0eS13ZWJnbC9zb3VyY2UvVW5pdHlDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC11bml0eS13ZWJnbC9zb3VyY2UvY29tcG9uZW50cy9Vbml0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdW5pdHktd2ViZ2wvbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC11bml0eS13ZWJnbC9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXVuaXR5LXdlYmdsL3NvdXJjZS9zZXJ2aWNlcy9Vbml0eUxvYWRlclNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBlcmZlY3Qtc2Nyb2xsYmFyL2xpYi9zY3JvbGxiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BlcmZlY3Qtc2Nyb2xsYmFyL2Rpc3QvcGVyZmVjdC1zY3JvbGxiYXIuY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVzcG9uc2l2ZS1jYXJvdXNlbC9saWIvY29tcG9uZW50cy9DYXJvdXNlbC5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1lYXN5LXN3aXBlL2xpYi9yZWFjdC1zd2lwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVzcG9uc2l2ZS1jYXJvdXNlbC9saWIvZGltZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVzcG9uc2l2ZS1jYXJvdXNlbC9saWIvY3VzdG9tUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mb3JtaWsvZGlzdC9mb3JtaWsuY2pzLnByb2R1Y3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mb3JtaWsvbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY29udGV4dC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jb250ZXh0L2xpYi9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3VkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2guY2xvbmVkZWVwL2luZGV4LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC50b3BhdGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWZhc3QtY29tcGFyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L3VtZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVib3VuY2UtcHJvbWlzZS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL0NsaWVudEFwcC9VaS50cyIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvbW9kZWxzL1Jlc3VsdC50cyIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL3N0b3JlL0xvZ2luU3RvcmUudHMiLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL0dsb2JhbHMudHMiLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL3NlcnZpY2VzL1NlcnZpY2VCYXNlLnRzIiwid2VicGFjazovLy8uL0NsaWVudEFwcC9zZXJ2aWNlcy9BY2NvdW50U2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvY29tcG9uZW50cy9zaGFyZWQvVG9wTWVudS50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2NvbXBvbmVudHMvc2hhcmVkL0Zvb3Rlci50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2xheW91dHMvQXV0aG9yaXplZExheW91dC50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2NvbXBvbmVudHMvc2hhcmVkL1VuaXR5R2FtZS50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2xheW91dHMvR3Vlc3RMYXlvdXQudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9jb21wb25lbnRzL3NoYXJlZC9BcHBDb21wb25lbnQudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9jb21wb25lbnRzL3NoYXJlZC9Mb2FkZXIudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9zdG9yZS9QZXJzb25TdG9yZS50cyIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvY29tcG9uZW50cy9zaGFyZWQvRm9ybS50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL3BhZ2VzL0xvZ2luUGFnZS50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2NvbXBvbmVudHMvc2hhcmVkL0FwcFJvdXRlLnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvcGFnZXMvSG9tZVBhZ2UudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9wYWdlcy9Qb3J0Zm9saW9QYWdlLnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvcGFnZXMvUmVhZGluZ1BhZ2UudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9wYWdlcy9BYm91dE1lUGFnZS50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL3BhZ2VzL011c2ljUGFnZS50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL3NlcnZpY2VzL1BlcnNvblNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2NvbXBvbmVudHMvc2hhcmVkL1BhZ2luZ0Jhci50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2NvbXBvbmVudHMvcGVyc29uL1BlcnNvbkVkaXRvci50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2NvbXBvbmVudHMvc2hhcmVkL01vZGFsQ29tcG9uZW50LnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvcGFnZXMvQWRtaW5QYWdlLnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvcm91dGVzLnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvc3RvcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2NvbmZpZ3VyZVN0b3JlLnRzIiwid2VicGFjazovLy8uL0NsaWVudEFwcC9ib290LXNlcnZlci50c3giXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJyZXF1aXJlIiwiY29uc3RhbnRzIiwidGFyZ2V0IiwicHJvcGVydHlLZXkiLCJkZXNjcmlwdG9yIiwidHlwZU9mRnVuY3Rpb24iLCJUeXBlRXJyb3IiLCJjb25maWd1cmFibGUiLCJib29sVHJ1ZSIsImJvdW5kIiwidGhpcyIsIndyaXRhYmxlIiwiZGVmYXVsdCIsIndpdGhSb3V0ZXIiLCJtYXRjaFBhdGgiLCJnZW5lcmF0ZVBhdGgiLCJTd2l0Y2giLCJTdGF0aWNSb3V0ZXIiLCJSb3V0ZXIiLCJSb3V0ZSIsIlJlZGlyZWN0IiwiUHJvbXB0IiwiTmF2TGluayIsIk1lbW9yeVJvdXRlciIsIkxpbmsiLCJIYXNoUm91dGVyIiwiQnJvd3NlclJvdXRlciIsInVuZGVmaW5lZCIsIl9Ccm93c2VyUm91dGVyMyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfSGFzaFJvdXRlcjMiLCJfTGluazMiLCJfTWVtb3J5Um91dGVyMyIsIl9OYXZMaW5rMyIsIl9Qcm9tcHQzIiwiX1JlZGlyZWN0MyIsIl9Sb3V0ZTMiLCJfUm91dGVyMyIsIl9TdGF0aWNSb3V0ZXIzIiwiX1N3aXRjaDMiLCJfZ2VuZXJhdGVQYXRoMyIsIl9tYXRjaFBhdGgzIiwiX3dpdGhSb3V0ZXIzIiwib2JqIiwiYWRkTGVhZGluZ1NsYXNoIiwicGF0aCIsImNoYXJBdCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3Vic3RyIiwiaGFzQmFzZW5hbWUiLCJwcmVmaXgiLCJSZWdFeHAiLCJ0ZXN0Iiwic3RyaXBCYXNlbmFtZSIsImxlbmd0aCIsInN0cmlwVHJhaWxpbmdTbGFzaCIsInNsaWNlIiwicGFyc2VQYXRoIiwicGF0aG5hbWUiLCJzZWFyY2giLCJoYXNoIiwiaGFzaEluZGV4IiwiaW5kZXhPZiIsInNlYXJjaEluZGV4IiwiY3JlYXRlUGF0aCIsImxvY2F0aW9uIiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVMb2NhdGlvbiIsIl9leHRlbmRzIiwiYXNzaWduIiwiYXJndW1lbnRzIiwic291cmNlIiwiX3Jlc29sdmVQYXRobmFtZTIiLCJfdmFsdWVFcXVhbDIiLCJfUGF0aFV0aWxzIiwic3RhdGUiLCJjdXJyZW50TG9jYXRpb24iLCJkZWNvZGVVUkkiLCJlIiwiVVJJRXJyb3IiLCJhIiwiYiIsIndhcm5pbmciLCJjcmVhdGVNZW1vcnlIaXN0b3J5IiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsIl9Mb2NhdGlvblV0aWxzIiwiX2NyZWF0ZUJyb3dzZXJIaXN0b3J5MyIsIl9jcmVhdGVIYXNoSGlzdG9yeTMiLCJfY3JlYXRlTWVtb3J5SGlzdG9yeTMiLCJfd2FybmluZzIiLCJwcm9tcHQiLCJsaXN0ZW5lcnMiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImFjdGlvbiIsImdldFVzZXJDb25maXJtYXRpb24iLCJjYWxsYmFjayIsInJlc3VsdCIsImFwcGVuZExpc3RlbmVyIiwiZm4iLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwiYXBwbHkiLCJwdXNoIiwiZmlsdGVyIiwiaXRlbSIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiZm9yRWFjaCIsIl9Sb3V0ZXIyIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiVW5pdHlWZXJzaW9uXzEiLCJVbml0eVZlcnNpb24iLCJVbml0eUNvbnRlbnRfMSIsIlVuaXR5Q29udGVudCIsIlVuaXR5XzEiLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwibm9kZSIsImV2ZW50IiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJnZXRDb25maXJtYXRpb24iLCJtZXNzYWdlIiwiY29uZmlybSIsInN1cHBvcnRzSGlzdG9yeSIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UiLCJzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJfcmVhY3QyIiwiX3Byb3BUeXBlczIiLCJfaW52YXJpYW50MiIsIl9oaXN0b3J5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJpc01vZGlmaWVkRXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiX1JlYWN0JENvbXBvbmVudCIsIl90ZW1wIiwiX3RoaXMiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiY29uY2F0IiwiaGFuZGxlQ2xpY2siLCJwcm9wcyIsIm9uQ2xpY2siLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwicHJldmVudERlZmF1bHQiLCJjb250ZXh0Iiwicm91dGVyIiwiX3RoaXMkcHJvcHMiLCJyZXBsYWNlIiwidG8iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwicmVuZGVyIiwiX3Byb3BzIiwiaW5uZXJSZWYiLCJrZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiaHJlZiIsImNyZWF0ZUhyZWYiLCJyZWYiLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJmdW5jIiwic3RyaW5nIiwiYm9vbCIsIm9uZU9mVHlwZSIsImlzUmVxdWlyZWQiLCJkZWZhdWx0UHJvcHMiLCJjb250ZXh0VHlwZXMiLCJzaGFwZSIsIl9Sb3V0ZTIiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImFyZyIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwiX2NsYXNzbmFtZXMyIiwiQ0FST1VTRUwiLCJpc1NsaWRlciIsImNhcm91c2VsIiwiY2Fyb3VzZWwtc2xpZGVyIiwiV1JBUFBFUiIsImF4aXMiLCJ0aHVtYnMtd3JhcHBlciIsInNsaWRlci13cmFwcGVyIiwiYXhpcy1ob3Jpem9udGFsIiwiYXhpcy12ZXJ0aWNhbCIsIlNMSURFUiIsImlzU3dpcGluZyIsInRodW1icyIsInNsaWRlciIsImFuaW1hdGVkIiwiSVRFTSIsInNlbGVjdGVkIiwidGh1bWIiLCJzbGlkZSIsIkFSUk9XX1BSRVYiLCJkaXNhYmxlZCIsImNvbnRyb2wtYXJyb3cgY29udHJvbC1wcmV2IiwiY29udHJvbC1kaXNhYmxlZCIsIkFSUk9XX05FWFQiLCJjb250cm9sLWFycm93IGNvbnRyb2wtbmV4dCIsIkRPVCIsImRvdCIsInBvc2l0aW9uIiwiam9pbiIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsIl9yZWFjdFN3aXBlIiwiX3JlYWN0U3dpcGUyIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9yZWFjdCIsIl9jc3NDbGFzc2VzMiIsIl9kaW1lbnNpb25zIiwiX0NTU1RyYW5zbGF0ZTIiLCJfcmVhY3RFYXN5U3dpcGUyIiwiVGh1bWJzIiwiX0NvbXBvbmVudCIsImdldFByb3RvdHlwZU9mIiwiX2luaXRpYWxpc2VQcm9wcyIsInNlbGVjdGVkSXRlbSIsImhhc01vdW50IiwiZmlyc3RJdGVtIiwiaXRlbVNpemUiLCJ2aXNpYmxlSXRlbXMiLCJsYXN0UG9zaXRpb24iLCJzaG93QXJyb3dzIiwiaW1hZ2VzIiwiZ2V0SW1hZ2VzIiwibmV4dFByb3BzIiwic2V0dXBUaHVtYnMiLCJzZXRTdGF0ZSIsImdldEZpcnN0SXRlbSIsImNoaWxkcmVuIiwicHJldlByb3BzIiwidXBkYXRlU2l6ZXMiLCJkZXN0cm95VGh1bWJzIiwiQ2hpbGRyZW4iLCJtYXAiLCJpbmRleCIsImltZyIsInR5cGUiLCJ0b0FycmF5IiwiaW1hZ2UiLCJjb25zb2xlIiwid2FybiIsIl90aGlzMiIsIml0ZW1DbGFzcyIsInRodW1iUHJvcHMiLCJzZXRUaHVtYnNSZWYiLCJjbGFzc05hbWUiLCJoYW5kbGVDbGlja0l0ZW0iLCJvbktleURvd24iLCJjbG9uZUVsZW1lbnQiLCJvbkxvYWQiLCJzZXRNb3VudFN0YXRlIiwicm9sZSIsInRhYkluZGV4IiwiaXRlbUxpc3RTdHlsZXMiLCJoYXNQcmV2IiwiaGFzTmV4dCIsImN1cnJlbnRQb3NpdGlvbiIsInRyYW5zZm9ybVByb3AiLCJ0cmFuc2l0aW9uVGltZSIsIldlYmtpdFRyYW5zZm9ybSIsIk1velRyYW5zZm9ybSIsIk1zVHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsInRyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwiV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uIiwiTW96VHJhbnNpdGlvbkR1cmF0aW9uIiwiTXNUcmFuc2l0aW9uRHVyYXRpb24iLCJPVHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwibXNUcmFuc2l0aW9uRHVyYXRpb24iLCJzZXRJdGVtc1dyYXBwZXJSZWYiLCJzbGlkZVJpZ2h0IiwidGFnTmFtZSIsInN3aXBpbmciLCJvblN3aXBlTGVmdCIsInNsaWRlTGVmdCIsIm9uU3dpcGVSaWdodCIsIm9uU3dpcGVNb3ZlIiwib25Td2lwZVN0YXJ0Iiwib25Td2lwZUVuZCIsInN0eWxlIiwic2V0SXRlbXNMaXN0UmVmIiwicmVuZGVySXRlbXMiLCJkaXNwbGF5TmFtZSIsInByb3BzVHlwZXMiLCJlbGVtZW50IiwibnVtYmVyIiwidGh1bWJXaWR0aCIsIl90aGlzMyIsIml0ZW1zV3JhcHBlclJlZiIsIml0ZW1zTGlzdFJlZiIsInRodW1ic1JlZiIsInRvdGFsIiwid3JhcHBlclNpemUiLCJjbGllbnRXaWR0aCIsIm91dGVyV2lkdGgiLCJNYXRoIiwiZmxvb3IiLCJfc3RhdGUiLCJrZXlDb2RlIiwiaGFuZGxlciIsIm9uU2VsZWN0SXRlbSIsImRlbHRhWCIsImxhc3RMZWZ0Qm91bmRhcnkiLCJwcm9wIiwicG9zaXRpb25zIiwibW92ZVRvIiwiX3Njcm9sbGJhcjIiLCJEZWJvdW5jZUNhY2hlIiwib25seVJlc29sdmVzTGFzdCIsImRlYm91bmNlIiwiX2RlYm91bmNlUHJvbWlzZTIiLCJ3YWl0Iiwib3B0aW9ucyIsImFzeW5jRnVuY3Rpb24iLCJjYW5jZWxQcmV2aW91cyIsIl9tYWtlQ2FuY2VsYWJsZSIsInByb21pc2UiLCJoYXNDYW5jZWxlZF8iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRoZW4iLCJ2YWwiLCJlcnJvciIsImNhbmNlbCIsIm1ha2VDYW5jZWxhYmxlIiwiZ2V0RGVib3VuY2VkRnVuY3Rpb24iLCJrZXlPcHRpb25zIiwib25seVJlc29sdmVzTGFzdE9wdGlvbiIsIm90aGVyT3B0aW9ucyIsImFyciIsImlzQXJyYXkiLCJhcnIyIiwiZnJvbSIsIl90b0NvbnN1bWFibGVBcnJheSIsImRlYm91bmNlQ2FjaGUiLCJkZWJvdW5jZWRGdW5jIiwiRGVmYXVsdE9wdGlvbnMiLCJmaW5hbE9wdGlvbnMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJiYXNlbmFtZSIsImZvcmNlUmVmcmVzaCIsImtleUxlbmd0aCIsIl90eXBlb2YiLCJpdGVyYXRvciIsIl9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIiLCJfRE9NVXRpbHMiLCJnZXRIaXN0b3J5U3RhdGUiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl9yZWYiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwicmFuZG9tIiwidG9TdHJpbmciLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwicmV2ZXJ0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsImluaXRpYWxMb2NhdGlvbiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJnZXRIYXNoUGF0aCIsInN1YnN0cmluZyIsInJlcGxhY2VIYXNoUGF0aCIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtaW4iLCJtYXgiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsInNwbGljZSIsImNhbkdvIiwib25lT2YiLCJfTWVtb3J5Um91dGVyMiIsIl9MaW5rMiIsImV4YWN0Iiwic3RyaWN0IiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJnZXRJc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwicmVzdCIsImVzY2FwZWRQYXRoIiwiX3JlZjIiLCJtYXRjaCIsImFyaWEtY3VycmVudCIsIl9Qcm9tcHQyIiwiX1JlZGlyZWN0MiIsIl9TdGF0aWNSb3V0ZXIyIiwiX1N3aXRjaDIiLCJfZ2VuZXJhdGVQYXRoMiIsIl9tYXRjaFBhdGgyIiwiX3dpdGhSb3V0ZXIyIiwiYnVpbGRKc29uUGF0aCIsInVuaXR5TG9hZGVySnNQYXRoIiwidW5pdHlDb25maWciLCJfdW5pdHlDb25maWciLCJ1bmlxdWVJRCIsInVuaXR5RXZlbnRzIiwidW5pdHlWZXJzaW9uIiwiVU5JVFlfMjAxOCIsImFkanVzdE9uV2luZG93UmVzaXplIiwiaWQiLCJzZXRDb21wb25lbnRJbnN0YW5jZSIsInVuaXR5Q29tcG9uZW50SW5zdGFuY2UiLCJ1bml0eUNvbXBvbmVudCIsInNldFVuaXR5SW5zdGFuY2UiLCJ1bml0eUluc3RhbmNlIiwic2V0RnVsbHNjcmVlbiIsImZ1bGxzY3JlZW4iLCJTZXRGdWxsc2NyZWVuIiwic2VuZCIsImdhbWVPYmplY3ROYW1lIiwibWV0aG9kTmFtZSIsInBhcmFtZXRlciIsIlNlbmRNZXNzYWdlIiwib24iLCJldmVudE5hbWUiLCJldmVudENhbGxiYWNrIiwiUmVhY3RVbml0eVdlYkdMIiwidHJpZ2dlclVuaXR5RXZlbnQiLCJldmVudFZhbHVlIiwiX2kiLCJfX2V4dGVuZHMiLCJleHRlbmRTdGF0aWNzIiwiX18iLCJfX2ltcG9ydFN0YXIiLCJrIiwiUmVhY3QiLCJVbml0eUxvYWRlclNlcnZpY2VfMSIsIlVuaXR5IiwiX3N1cGVyIiwidW5pdHlMb2FkZXJTZXJ2aWNlIiwib25XaW5kb3dSZXNpemVCaW5kaW5nIiwib25XaW5kb3dSZXNpemUiLCJ1bml0eUNvbnRlbnQiLCJvblByb2dyZXNzIiwicHJvZ3Jlc3Npb24iLCJhZGp1c3RDYW52YXNUb0NvbnRhaW5lciIsIl93aWR0aCIsImh0bWxFbGVtZW50Iiwib2Zmc2V0V2lkdGgiLCJfaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiX2NhbnZhcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaGVpZ2h0Iiwid2lkdGgiLCJjb21wb25lbnREaWRNb3VudCIsImFwcGVuZCIsIlVuaXR5TG9hZGVyIiwiaW5zdGFudGlhdGUiLCJNb2R1bGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInEiLCJmb3IiLCJ1IiwidiIsInciLCJ4IiwieSIsInoiLCJBIiwiQiIsIkMiLCJEIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiRSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJGIiwicmVmcyIsInVwZGF0ZXIiLCJHIiwiSCIsImlzUmVhY3RDb21wb25lbnQiLCJmb3JjZVVwZGF0ZSIsIkkiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkoiLCJjdXJyZW50IiwiSyIsIkwiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJnIiwiaCIsImYiLCIkJHR5cGVvZiIsIl9vd25lciIsIk4iLCJPIiwiUCIsIlEiLCJwb3AiLCJrZXlQcmVmaXgiLCJjb3VudCIsIlIiLCJTIiwiVCIsIm5leHQiLCJkb25lIiwiPSIsIjoiLCJlc2NhcGUiLCJVIiwiViIsIlciLCJYIiwib25seSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2RlZmF1bHRWYWx1ZSIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl9jaGFuZ2VkQml0cyIsIl9jaGFuZ2VkQml0czIiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2NvbnRleHQiLCJmb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwidW5zdGFibGVfQXN5bmNNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJjcmVhdGVGYWN0b3J5IiwiaXNWYWxpZEVsZW1lbnQiLCJ2ZXJzaW9uIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlkiLCJaIiwidmFsaWRhdGVGb3JtYXQiLCJmb3JtYXQiLCJjb25kaXRpb24iLCJFcnJvciIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJVbml0eUxvYWRlclNlcnZpY2UiLCJkb2N1bWVudEhlYWQiLCJ1bml0eUxvYWRlclNjcmlwdCIsImFzeW5jIiwic3JjIiwib25sb2FkIiwiYXBwZW5kQ2hpbGQiLCJfcHJvcFR5cGVzIiwiX3BlcmZlY3RTY3JvbGxiYXIyIiwiaGFuZGxlck5hbWVCeUV2ZW50IiwicHMtc2Nyb2xsLXkiLCJwcy1zY3JvbGwteCIsInBzLXNjcm9sbC11cCIsInBzLXNjcm9sbC1kb3duIiwicHMtc2Nyb2xsLWxlZnQiLCJwcy1zY3JvbGwtcmlnaHQiLCJwcy15LXJlYWNoLXN0YXJ0IiwicHMteS1yZWFjaC1lbmQiLCJwcy14LXJlYWNoLXN0YXJ0IiwicHMteC1yZWFjaC1lbmQiLCJmcmVlemUiLCJTY3JvbGxCYXIiLCJoYW5kbGVSZWYiLCJfaGFuZGxlckJ5RXZlbnQiLCJfcHMiLCJfY29udGFpbmVyIiwib3B0aW9uIiwiX3VwZGF0ZUV2ZW50SG9vayIsInVwZGF0ZSIsImRlc3Ryb3kiLCJwcmV2Q2FsbGJhY2siLCJwcmV2SGFuZGxlciIsImNvbnRhaW5lclJlZiIsImNvbXBvbmVudCIsIkNvbXAiLCJvblNjcm9sbFkiLCJvblNjcm9sbFgiLCJvblNjcm9sbFVwIiwib25TY3JvbGxEb3duIiwib25TY3JvbGxMZWZ0Iiwib25TY3JvbGxSaWdodCIsIm9uWVJlYWNoU3RhcnQiLCJvbllSZWFjaEVuZCIsIm9uWFJlYWNoU3RhcnQiLCJvblhSZWFjaEVuZCIsIlByb3BUeXBlcyIsImdldENvbXB1dGVkU3R5bGUiLCJzZXQiLCJkaXYiLCJlbE1hdGNoZXMiLCJFbGVtZW50IiwibWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwicXVlcnkiLCJyZW1vdmUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJxdWVyeUNoaWxkcmVuIiwic2VsZWN0b3IiLCJjaGlsZCIsImNscyIsIm1haW4iLCJyYWlsIiwiY29uc3VtaW5nIiwiZm9jdXMiLCJjbGlja2luZyIsImFjdGl2ZSIsInNjcm9sbGluZyIsInNjcm9sbGluZ0NsYXNzVGltZW91dCIsImFkZFNjcm9sbGluZ0NsYXNzIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJjbGVhclRpbWVvdXQiLCJhZGQiLCJyZW1vdmVTY3JvbGxpbmdDbGFzcyIsInNldFRpbWVvdXQiLCJpc0FsaXZlIiwic2V0dGluZ3MiLCJzY3JvbGxpbmdUaHJlc2hvbGQiLCJFdmVudEVsZW1lbnQiLCJoYW5kbGVycyIsInByb3RvdHlwZUFjY2Vzc29ycyIsImlzRW1wdHkiLCJ1bmJpbmQiLCJ0aGlzJDEiLCJ1bmJpbmRBbGwiLCJldmVyeSIsIkV2ZW50TWFuYWdlciIsImV2ZW50RWxlbWVudHMiLCJjcmVhdGVFdmVudCIsIkN1c3RvbUV2ZW50IiwiZXZ0IiwiaW5pdEN1c3RvbUV2ZW50IiwiZXZlbnRFbGVtZW50IiwiZWUiLCJvbmNlIiwib25jZUhhbmRsZXIiLCJwcm9jZXNzU2Nyb2xsRGlmZiIsImRpZmYiLCJ1c2VTY3JvbGxpbmdDbGFzcyIsImZvcmNlRmlyZVJlYWNoRXZlbnQiLCJmaWVsZHMiLCJjb250ZW50SGVpZ2h0IiwiY29udGFpbmVySGVpZ2h0Iiwic2Nyb2xsVG9wIiwidXAiLCJkb3duIiwicmVhY2giLCJkaXNwYXRjaEV2ZW50Iiwic2V0U2Nyb2xsaW5nQ2xhc3NJbnN0YW50bHkiLCJwcm9jZXNzU2Nyb2xsRGlmZiQxIiwidG9JbnQiLCJwYXJzZUludCIsImVudiIsImlzV2ViS2l0IiwiZG9jdW1lbnRFbGVtZW50Iiwic3VwcG9ydHNUb3VjaCIsIkRvY3VtZW50VG91Y2giLCJzdXBwb3J0c0llUG9pbnRlciIsIm1zTWF4VG91Y2hQb2ludHMiLCJpc0Nocm9tZSIsInVwZGF0ZUdlb21ldHJ5Iiwicm91bmRlZFNjcm9sbFRvcCIsImNvbnRhaW5lcldpZHRoIiwiY2xpZW50SGVpZ2h0IiwiY29udGVudFdpZHRoIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJzY3JvbGxiYXJYUmFpbCIsImVsIiwic2Nyb2xsYmFyWVJhaWwiLCJzdXBwcmVzc1Njcm9sbFgiLCJzY3JvbGxYTWFyZ2luT2Zmc2V0Iiwic2Nyb2xsYmFyWEFjdGl2ZSIsInJhaWxYV2lkdGgiLCJyYWlsWE1hcmdpbldpZHRoIiwicmFpbFhSYXRpbyIsInNjcm9sbGJhclhXaWR0aCIsImdldFRodW1iU2l6ZSIsInNjcm9sbGJhclhMZWZ0IiwibmVnYXRpdmVTY3JvbGxBZGp1c3RtZW50Iiwic2Nyb2xsTGVmdCIsInN1cHByZXNzU2Nyb2xsWSIsInNjcm9sbFlNYXJnaW5PZmZzZXQiLCJzY3JvbGxiYXJZQWN0aXZlIiwicmFpbFlIZWlnaHQiLCJyYWlsWU1hcmdpbkhlaWdodCIsInJhaWxZUmF0aW8iLCJzY3JvbGxiYXJZSGVpZ2h0Iiwic2Nyb2xsYmFyWVRvcCIsInhSYWlsT2Zmc2V0IiwiaXNSdGwiLCJsZWZ0IiwiaXNTY3JvbGxiYXJYVXNpbmdCb3R0b20iLCJib3R0b20iLCJzY3JvbGxiYXJYQm90dG9tIiwidG9wIiwic2Nyb2xsYmFyWFRvcCIsInlSYWlsT2Zmc2V0IiwiaXNTY3JvbGxiYXJZVXNpbmdSaWdodCIsInJpZ2h0Iiwic2Nyb2xsYmFyWVJpZ2h0Iiwic2Nyb2xsYmFyWU91dGVyV2lkdGgiLCJzY3JvbGxiYXJZTGVmdCIsInNjcm9sbGJhclgiLCJyYWlsQm9yZGVyWFdpZHRoIiwic2Nyb2xsYmFyWSIsInJhaWxCb3JkZXJZV2lkdGgiLCJ1cGRhdGVDc3MiLCJ0aHVtYlNpemUiLCJtaW5TY3JvbGxiYXJMZW5ndGgiLCJtYXhTY3JvbGxiYXJMZW5ndGgiLCJiaW5kTW91c2VTY3JvbGxIYW5kbGVyIiwicGFnZVkiLCJzdGFydGluZ1Njcm9sbFRvcCIsInN0YXJ0aW5nTW91c2VQYWdlWSIsInNjcm9sbEJ5IiwibW91c2VNb3ZlSGFuZGxlciIsInN0b3BQcm9wYWdhdGlvbiIsIm1vdXNlVXBIYW5kbGVyIiwib3duZXJEb2N1bWVudCIsImNsaWNrLXJhaWwiLCJkaXJlY3Rpb24iLCJwYWdlWU9mZnNldCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhZ2VYIiwicGFnZVhPZmZzZXQiLCJkcmFnLXRodW1iIiwia2V5Ym9hcmQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJhY3RpdmVFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwic2hhZG93Um9vdCIsImlzRWRpdGFibGUiLCJkZWx0YVkiLCJ3aGljaCIsIndoZWVsUHJvcGFnYXRpb24iLCJzaG91bGRQcmV2ZW50RGVmYXVsdCIsIndoZWVsIiwibW91c2V3aGVlbEhhbmRsZXIiLCJ3aGVlbERlbHRhWCIsIndoZWVsRGVsdGFZIiwiZGVsdGFNb2RlIiwid2hlZWxEZWx0YSIsImdldERlbHRhRnJvbUV2ZW50IiwicXVlcnlTZWxlY3RvciIsImN1cnNvciIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwibWF4U2Nyb2xsVG9wIiwibWF4U2Nyb2xsTGVmdCIsInNob3VsZEJlQ29uc3VtZWRCeUNoaWxkIiwic2hvdWxkUHJldmVudCIsInVzZUJvdGhXaGVlbEF4ZXMiLCJ3aGVlbFNwZWVkIiwiaXNUb3AiLCJpc0JvdHRvbSIsImlzTGVmdCIsImlzUmlnaHQiLCJhYnMiLCJvbndoZWVsIiwib25tb3VzZXdoZWVsIiwidG91Y2giLCJzdGFydE9mZnNldCIsInN0YXJ0VGltZSIsInNwZWVkIiwiZWFzaW5nTG9vcCIsInRvdWNoU3RhcnQiLCJ0b3VjaE1vdmUiLCJ0b3VjaEVuZCIsIlBvaW50ZXJFdmVudCIsIk1TUG9pbnRlckV2ZW50IiwiYXBwbHlUb3VjaE1vdmUiLCJkaWZmZXJlbmNlWCIsImRpZmZlcmVuY2VZIiwiZ2V0VG91Y2giLCJ0YXJnZXRUb3VjaGVzIiwic2hvdWxkSGFuZGxlIiwicG9pbnRlclR5cGUiLCJidXR0b25zIiwiTVNQT0lOVEVSX1RZUEVfTU9VU0UiLCJEYXRlIiwiZ2V0VGltZSIsImNsZWFySW50ZXJ2YWwiLCJjdXJyZW50T2Zmc2V0IiwiY3VycmVudFRpbWUiLCJ0aW1lR2FwIiwibWFnbml0dWRlWCIsIm1hZ25pdHVkZVkiLCJzY3JvbGxZIiwic3dpcGVFYXNpbmciLCJzZXRJbnRlcnZhbCIsImlzSW5pdGlhbGl6ZWQiLCJQZXJmZWN0U2Nyb2xsYmFyIiwidXNlclNldHRpbmdzIiwibm9kZU5hbWUiLCJibHVyIiwiaXNOZWdhdGl2ZVNjcm9sbCIsIm9yaWdpbmFsU2Nyb2xsTGVmdCIsInNldEF0dHJpYnV0ZSIsInJhaWxYU3R5bGUiLCJpc05hTiIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJkaXNwbGF5IiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwicmFpbFlTdHlsZSIsInN0eWxlcyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImhhbmRsZXJOYW1lIiwibGFzdFNjcm9sbFRvcCIsImxhc3RTY3JvbGxMZWZ0Iiwib25TY3JvbGwiLCJyZW1vdmVQc0NsYXNzZXMiLCJzcGxpdCIsIkNhcm91c2VsIiwiX0Nhcm91c2VsMiIsIl9UaHVtYnMyIiwiX3JlYWN0RG9tMiIsImN1c3RvbVByb3BUeXBlcyIsIm5ld09iaiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwibm9vcCIsImluaXRpYWxpemVkIiwiaXNNb3VzZUVudGVyZWQiLCJhdXRvUGxheSIsInNldHVwQ2Fyb3VzZWwiLCJzZXR1cEF1dG9QbGF5IiwiZGVzdHJveUF1dG9QbGF5IiwicHJldlN0YXRlIiwicmVzZXRQb3NpdGlvbiIsImRlc3Ryb3lDYXJvdXNlbCIsImJpbmRFdmVudHMiLCJpbml0aWFsSW1hZ2UiLCJnZXRJbml0aWFsSW1hZ2UiLCJ1bmJpbmRFdmVudHMiLCJjYXJvdXNlbFdyYXBwZXIiLCJjYXJvdXNlbFdyYXBwZXJSZWYiLCJzdG9wT25Ib3ZlciIsInN0YXJ0T25MZWF2ZSIsImNsZWFyQXV0b1BsYXkiLCJ1c2VLZXlib2FyZEFycm93cyIsIm5hdmlnYXRlV2l0aEtleWJvYXJkIiwiaW5maW5pdGVMb29wIiwiY2hpbGRyZW5MZW5ndGgiLCJjZW50ZXJNb2RlIiwiY2VudGVyU2xpZGVQZXJjZW50YWdlIiwiaXNDbG9uZSIsInNsaWRlUHJvcHMiLCJzZXRJdGVtc1JlZiIsIm1pbldpZHRoIiwiX3RoaXM0Iiwic2hvd0luZGljYXRvcnMiLCJjaGFuZ2VJdGVtIiwic2hvd1N0YXR1cyIsInN0YXR1c0Zvcm1hdHRlciIsInNob3dUaHVtYnMiLCJoYW5kbGVDbGlja1RodW1iIiwiaXNIb3Jpem9udGFsIiwiY2FuU2hvd0Fycm93cyIsImdldFBvc2l0aW9uIiwiaXRlbXNDbG9uZSIsImZpcnN0Q2xvbmUiLCJzaGlmdCIsImxhc3RDbG9uZSIsInN3aXBlclByb3BzIiwidG9sZXJhbmNlIiwic3dpcGVTY3JvbGxUb2xlcmFuY2UiLCJjb250YWluZXJTdHlsZXMiLCJvblN3aXBlQmFja3dhcmRzIiwib25Td2lwZUZvcndhcmQiLCJkeW5hbWljSGVpZ2h0IiwiaXRlbUhlaWdodCIsImdldFZhcmlhYmxlSW1hZ2VIZWlnaHQiLCJvblN3aXBlVXAiLCJ2ZXJ0aWNhbFN3aXBlIiwib25Td2lwZURvd24iLCJzZXRDYXJvdXNlbFdyYXBwZXJSZWYiLCJvbkNsaWNrUHJldiIsInN3aXBlYWJsZSIsInNldExpc3RSZWYiLCJhbGxvd01vdXNlRXZlbnRzIiwiZW11bGF0ZVRvdWNoIiwib25DbGlja05leHQiLCJyZW5kZXJDb250cm9scyIsInJlbmRlclN0YXR1cyIsInJlbmRlclRodW1icyIsIm9uQ2xpY2tJdGVtIiwib25DbGlja1RodW1iIiwib25DaGFuZ2UiLCJ1bml0IiwiaW50ZXJ2YWwiLCJfdGhpczUiLCJsaXN0UmVmIiwiaXRlbXNSZWYiLCJ0aW1lciIsImluY3JlbWVudCIsInJlc2V0QXV0b1BsYXkiLCJwcmV2S2V5IiwiZGVjcmVtZW50IiwiY2FuY2VsQ2xpY2siLCJoYW5kbGVPbkNoYW5nZSIsInNlbGVjdEl0ZW0iLCJmaW5hbEJvdW5kcnkiLCJheGlzRGVsdGEiLCJoYW5kbGVkRGVsdGEiLCJzZXRQb3NpdGlvbiIsImhhc01vdmVkIiwiZm9yY2VSZWZsb3ciLCJsaXN0IiwiZmluZERPTU5vZGUiLCJvZmZzZXRMZWZ0IiwiZnJvbVN3aXBlIiwibmVlZENsb25lZFNsaWRlIiwib2xkUG9zaXRpb24iLCJuZXdJbmRleCIsImNiIiwiY29tcGxldGUiLCJvbkltYWdlTG9hZCIsInNldEhhc1N1cHBvcnRUb0NhcHR1cmVPcHRpb24iLCJzdXBwb3J0c0NhcHR1cmVPcHRpb24iLCJoYXNTdXBwb3J0IiwiZ2V0U2FmZUV2ZW50SGFuZGxlck9wdHMiLCJjYXB0dXJlIiwiX2V2ZW50JHRvdWNoZXMkIiwidG91Y2hlcyIsInNjcmVlblgiLCJzY3JlZW5ZIiwiUmVhY3RTd2lwZSIsIl9oYW5kbGVTd2lwZVN0YXJ0IiwiX2hhbmRsZVN3aXBlTW92ZSIsIl9oYW5kbGVTd2lwZUVuZCIsIl9vbk1vdXNlRG93biIsIl9vbk1vdXNlTW92ZSIsIl9vbk1vdXNlVXAiLCJzd2lwZXIiLCJwYXNzaXZlIiwibW91c2VEb3duIiwiX2dldFBvc2l0aW9uIiwibW92ZVN0YXJ0IiwiX2dldFBvc2l0aW9uMiIsIm1vdmluZyIsIm1vdmVQb3NpdGlvbiIsIm9uTW91c2VEb3duIiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaEVuZCIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsIl9pbnRlcm9wRGVmYXVsdCIsImV4IiwiX2EiLCJ0c2xpYl8xIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJjbG9uZURlZXAiLCJ0b1BhdGgiLCJpc0VxdWFsIiwiZGVlcG1lcmdlIiwiRm9ybWlrUHJvdmlkZXIiLCJGb3JtaWtDb25zdW1lciIsImNvbm5lY3QiLCJmb3JtaWsiLCJfX2Fzc2lnbiIsIldyYXBwZWRDb21wb25lbnQiLCJnZXRJbiIsImRlZiIsInNldEluIiwicmVzIiwicmVzVmFsIiwicGF0aEFycmF5IiwiY3VycmVudFBhdGgiLCJjdXJyZW50T2JqIiwibmV4dFBhdGgiLCJpc0ludGVnZXIiLCJOdW1iZXIiLCJzZXROZXN0ZWRPYmplY3RWYWx1ZXMiLCJ2aXNpdGVkIiwicmVzcG9uc2UiLCJXZWFrTWFwIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwiU3RyaW5nIiwiaXNTdHJpbmciLCJpc0VtcHR5Q2hpbGRyZW4iLCJpc1Byb21pc2UiLCJGb3JtaWsiLCJoY0NhY2hlIiwiaGJDYWNoZSIsInJlZ2lzdGVyRmllbGQiLCJ1bnJlZ2lzdGVyRmllbGQiLCJzZXRFcnJvcnMiLCJlcnJvcnMiLCJzZXRUb3VjaGVkIiwidG91Y2hlZCIsInZhbGlkYXRlT25CbHVyIiwicnVuVmFsaWRhdGlvbnMiLCJ2YWx1ZXMiLCJzZXRWYWx1ZXMiLCJ2YWxpZGF0ZU9uQ2hhbmdlIiwic2V0U3RhdHVzIiwic3RhdHVzIiwic2V0RXJyb3IiLCJzZXRTdWJtaXR0aW5nIiwiaXNTdWJtaXR0aW5nIiwiZGlkTW91bnQiLCJ2YWxpZGF0ZUZpZWxkIiwiZmllbGQiLCJpc1ZhbGlkYXRpbmciLCJydW5TaW5nbGVGaWVsZExldmVsVmFsaWRhdGlvbiIsInZhbGlkYXRlIiwicnVuVmFsaWRhdGlvblNjaGVtYSIsInZhbGlkYXRpb25TY2hlbWEiLCJzY2hlbWEiLCJ2YWxpZGF0ZVl1cFNjaGVtYSIsImVyciIsInl1cFRvRm9ybUVycm9ycyIsImFsbCIsInJ1bkZpZWxkTGV2ZWxWYWxpZGF0aW9ucyIsInJ1blZhbGlkYXRlSGFuZGxlciIsImZpZWxkRXJyb3JzIiwic2NoZW1hRXJyb3JzIiwiaGFuZGxlckVycm9ycyIsImNvbWJpbmVkRXJyb3JzIiwiYXJyYXlNZXJnZSIsImhhbmRsZUNoYW5nZSIsImV2ZW50T3JQYXRoIiwiZXhlY3V0ZUNoYW5nZSIsImV2ZW50T3JUZXh0VmFsdWUiLCJtYXliZVBhdGgiLCJwYXJzZWQiLCJwZXJzaXN0IiwibmFtZV8xIiwiY2hlY2tlZCIsIm91dGVySFRNTCIsInBhcnNlRmxvYXQiLCJzZXRGaWVsZFZhbHVlIiwic2hvdWxkVmFsaWRhdGUiLCJoYW5kbGVTdWJtaXQiLCJzdWJtaXRGb3JtIiwic3VibWl0Q291bnQiLCJleGVjdXRlU3VibWl0Iiwib25TdWJtaXQiLCJnZXRGb3JtaWtBY3Rpb25zIiwiaGFuZGxlQmx1ciIsImV2ZW50T3JTdHJpbmciLCJleGVjdXRlQmx1ciIsInNldEZpZWxkVG91Y2hlZCIsInNldEZpZWxkRXJyb3IiLCJyZXNldEZvcm0iLCJuZXh0VmFsdWVzIiwiaW5pdGlhbFZhbHVlcyIsImhhbmRsZVJlc2V0Iiwib25SZXNldCIsIm1heWJlUHJvbWlzZWRPblJlc2V0Iiwic2V0Rm9ybWlrU3RhdGUiLCJ2YWxpZGF0ZUZvcm0iLCJnZXRGb3JtaWtDb21wdXRlZFByb3BzIiwiaXNJbml0aWFsVmFsaWQiLCJkaXJ0eSIsImlzVmFsaWQiLCJnZXRGb3JtaWtCYWciLCJnZXRGb3JtaWtDb250ZXh0IiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZW5hYmxlUmVpbml0aWFsaXplIiwiZmllbGRLZXlzV2l0aFZhbGlkYXRpb24iLCJmaWVsZFZhbGlkYXRpb25zIiwiZmllbGRFcnJvcnNMaXN0IiwicmVkdWNlIiwicHJldiIsImN1cnIiLCJtYXliZVByb21pc2VkRXJyb3JzIiwiY3R4IiwieXVwRXJyb3IiLCJpbm5lciIsInN5bmMiLCJ2YWxpZGF0ZURhdGEiLCJhYm9ydEVhcmx5IiwiZGVzdGluYXRpb24iLCJzaG91bGRDbG9uZSIsImNsb25lIiwiaXNNZXJnZWFibGVPYmplY3QiLCJGaWVsZCIsIkZpZWxkSW5uZXIiLCJfYiIsIl9fcmVzdCIsInJlc3RPZkZvcm1payIsIm9uQmx1ciIsImJhZyIsImZvcm0iLCJGb3JtIiwibW92ZSIsImFycmF5IiwiY29weSIsInN3YXAiLCJpbmRleEEiLCJpbmRleEIiLCJpbnNlcnQiLCJGaWVsZEFycmF5IiwiRmllbGRBcnJheUlubmVyIiwidXBkYXRlQXJyYXlGaWVsZCIsImFsdGVyVG91Y2hlZCIsImFsdGVyRXJyb3JzIiwiaGFuZGxlUHVzaCIsImhhbmRsZVN3YXAiLCJoYW5kbGVNb3ZlIiwiaGFuZGxlSW5zZXJ0IiwiaGFuZGxlUmVwbGFjZSIsInVuc2hpZnQiLCJoYW5kbGVVbnNoaWZ0IiwiaGFuZGxlUmVtb3ZlIiwidG1wIiwiYXJyYXlIZWxwZXJzIiwiRmFzdEZpZWxkIiwiRmFzdEZpZWxkSW5uZXIiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJzaG91bGRVcGRhdGUiLCJFcnJvck1lc3NhZ2UiLCJFcnJvck1lc3NhZ2VJbXBsIiwid2l0aEZvcm1payIsIm1hcFByb3BzVG9WYWx1ZXMiLCJ2YW5pbGxhUHJvcHMiLCJjb25maWciLCJjb21wb25lbnREaXNwbGF5TmFtZSIsImFjdGlvbnMiLCJyZW5kZXJGb3JtQ29tcG9uZW50IiwiZm9ybWlrUHJvcHMiLCJnZXRBY3RpdmVFbGVtZW50IiwiZG9jIiwiYm9keSIsIl9fZGVjb3JhdGUiLCJfX3BhcmFtIiwiX19tZXRhZGF0YSIsIl9fYXdhaXRlciIsIl9fZ2VuZXJhdG9yIiwiX19leHBvcnRTdGFyIiwiX192YWx1ZXMiLCJfX3JlYWQiLCJfX3NwcmVhZCIsIl9fYXdhaXQiLCJfX2FzeW5jR2VuZXJhdG9yIiwiX19hc3luY0RlbGVnYXRvciIsIl9fYXN5bmNWYWx1ZXMiLCJfX21ha2VUZW1wbGF0ZU9iamVjdCIsImZhY3RvcnkiLCJyb290IiwiZ2xvYmFsIiwiY3JlYXRlRXhwb3J0ZXIiLCJwcmV2aW91cyIsImV4cG9ydGVyIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZGVjb3JhdG9ycyIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwibWV0YWRhdGEiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsInRocm93IiwicmV0dXJuIiwib3AiLCJhciIsImFzeW5jSXRlcmF0b3IiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwiY29va2VkIiwicmF3IiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9iamVjdFByb3RvdHlwZSIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsIl9pbXBsZW1lbnRhdGlvbjIiLCJfZ3VkMiIsIk1BWF9TSUdORURfMzFfQklUX0lOVCIsImRlZmF1bHRWYWx1ZSIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJlbWl0dGVyIiwib2ZmIiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImNyZWF0ZUV2ZW50RW1pdHRlciIsImdldENoaWxkQ29udGV4dCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJvbGRWYWx1ZSIsIm9iamVjdElzIiwiX0NvbXBvbmVudDIiLCJfdGVtcDIiLCJfbGVuMiIsIl9rZXkyIiwiZ2V0VmFsdWUiLCJvblVwZGF0ZSIsIm9ic2VydmVkQml0cyIsIm9ubHlDaGlsZCIsIkxBUkdFX0FSUkFZX1NJWkUiLCJIQVNIX1VOREVGSU5FRCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJhcmdzVGFnIiwiYm9vbFRhZyIsImRhdGVUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInJlRmxhZ3MiLCJyZUlzSG9zdEN0b3IiLCJyZUlzVWludCIsImNsb25lYWJsZVRhZ3MiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJGdW5jdGlvbiIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImFkZE1hcEVudHJ5IiwicGFpciIsImFkZFNldEVudHJ5IiwiYXJyYXlSZWR1Y2UiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiaW5pdEFjY3VtIiwiaXNIb3N0T2JqZWN0IiwibWFwVG9BcnJheSIsInNpemUiLCJvdmVyQXJnIiwic2V0VG9BcnJheSIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJtYXNrU3JjS2V5IiwidWlkIiwiZXhlYyIsIklFX1BST1RPIiwiZnVuY1RvU3RyaW5nIiwib2JqZWN0VG9TdHJpbmciLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiVWludDhBcnJheSIsImdldFByb3RvdHlwZSIsIm9iamVjdENyZWF0ZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwibmF0aXZlR2V0U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVLZXlzIiwiRGF0YVZpZXciLCJnZXROYXRpdmUiLCJNYXAiLCJTZXQiLCJuYXRpdmVDcmVhdGUiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJIYXNoIiwiY2xlYXIiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlN0YWNrIiwiX19kYXRhX18iLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNPYmplY3RMaWtlIiwiaXNBcnJheUxpa2UiLCJpc0FycmF5TGlrZU9iamVjdCIsImlzQXJndW1lbnRzIiwiYmFzZVRpbWVzIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImVxIiwiYXNzb2NJbmRleE9mIiwiYmFzZUNsb25lIiwiaXNEZWVwIiwiaXNGdWxsIiwiY3VzdG9taXplciIsInN0YWNrIiwiaXNBcnIiLCJpbnB1dCIsImluaXRDbG9uZUFycmF5IiwiY29weUFycmF5IiwidGFnIiwiZ2V0VGFnIiwiaXNGdW5jIiwiYnVmZmVyIiwiY2xvbmVCdWZmZXIiLCJpc1Byb3RvdHlwZSIsInByb3RvIiwiYmFzZUNyZWF0ZSIsImluaXRDbG9uZU9iamVjdCIsImNvcHlPYmplY3QiLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJiYXNlQXNzaWduIiwiY2xvbmVGdW5jIiwiQ3RvciIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiY2xvbmVEYXRhVmlldyIsInR5cGVkQXJyYXkiLCJjbG9uZVR5cGVkQXJyYXkiLCJjbG9uZU1hcCIsInJlZ2V4cCIsImxhc3RJbmRleCIsImNsb25lUmVnRXhwIiwiY2xvbmVTZXQiLCJzeW1ib2wiLCJjbG9uZVN5bWJvbCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJvZmZzZXQiLCJhcnJheVB1c2giLCJiYXNlR2V0QWxsS2V5cyIsImdldEFsbEtleXMiLCJhcnJheUVhY2giLCJzdWJWYWx1ZSIsImJhc2VJc05hdGl2ZSIsImlzTWFza2VkIiwiYXJyYXlCdWZmZXIiLCJnZXRNYXBEYXRhIiwiZGF0YSIsImlzS2V5YWJsZSIsImhhcyIsImNhY2hlIiwicGFpcnMiLCJvdGhlciIsIkFycmF5QnVmZmVyIiwiY3RvclN0cmluZyIsImlzTGVuZ3RoIiwiYmFzZUtleXMiLCJGVU5DX0VSUk9SX1RFWFQiLCJJTkZJTklUWSIsInJlTGVhZGluZ0RvdCIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJzeW1ib2xUb1N0cmluZyIsInN0cmluZ1RvUGF0aCIsIm1lbW9pemUiLCJpc1N5bWJvbCIsImJhc2VUb1N0cmluZyIsInF1b3RlIiwidG9LZXkiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJhcnJheU1hcCIsImtleUxpc3QiLCJoYXNQcm9wIiwiZXF1YWwiLCJhcnJBIiwiYXJyQiIsImRhdGVBIiwiZGF0ZUIiLCJyZWdleHBBIiwicmVnZXhwQiIsIl9zdG9yZSIsImlzTm9uTnVsbE9iamVjdCIsInN0cmluZ1ZhbHVlIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiaXNSZWFjdEVsZW1lbnQiLCJpc1NwZWNpYWwiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsImVtcHR5VGFyZ2V0IiwiZGVmYXVsdEFycmF5TWVyZ2UiLCJzb3VyY2VJc0FycmF5IiwidGFyZ2V0SXNBcnJheSIsInNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2giLCJtZXJnZU9iamVjdCIsImxhc3RDYWxsQXQiLCJkZWZlcnJlZCIsInBlbmRpbmdBcmdzIiwiY3VycmVudFdhaXQiLCJnZXRXYWl0IiwiaXNDb2xkIiwibGVhZGluZyIsImFjY3VtdWxhdGUiLCJkZWZlciIsInRoaXNEZWZlcnJlZCIsIl9yZXQiLCJhcmdzSW5kZXgiLCJyZXN1bHRzIiwiVWlfVWkiLCJVaSIsInNob3dFcnJvcnMiLCJtZXNzYWdlcyIsInJlYWN0X3RvYXN0aWZ5X2xpYmZyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3IiLCJzaG93SW5mbyIsImluZm8iLCJSZXN1bHQiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJpc05vZGUiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJMb2dpblN0b3JlX0xvZ2luU3RvcmUiLCJDbGllbnRBcHBfR2xvYmFscyIsIkdsb2JhbHMiLCJyZXNldCIsImdhbWVSZWFkeSIsImluaXQiLCJwdWJsaWMiLCJwcml2YXRlIiwiZGlzdF9janNmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yIiwidXNlRG90U2VwYXJhdG9ySW5QYXRoIiwic2V0R2FtZVJlYWR5IiwiaXNHYW1lUmVhZHkiLCJ0aHJvd0lmTm90SW5pdGlhbGl6ZWQiLCJnZXREYXRhIiwic2V0RGF0YSIsIm9sZERhdGEiLCJzZXJ2aWNlVXNlciIsIlNlcnZpY2VCYXNlX1NlcnZpY2VCYXNlIiwiU2VydmljZUJhc2UiLCJyZXF1ZXN0SnNvbiIsIm9wdHMiLCJheGlvc1Jlc3VsdCIsInVybCIsImNqc2Zyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3IiLCJwcm9jZXNzUXVlcnkiLCJqc29uX3RvX3VybGZyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3JfZGVmYXVsdCIsImF4aW9zUmVxdWVzdENvbmZpZyIsImhlYWRlcnMiLCJDb29raWUiLCJjb29raWUiLCJtZXRob2QiLCJheGlvc2Zyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3JfZGVmYXVsdCIsInBvc3QiLCJwdXQiLCJwYXRjaCIsImRlbGV0ZSIsIm1vZGVsc19SZXN1bHQiLCJlcnJvcl8xIiwiaGFzRXJyb3JzIiwic2VuZEZvcm1EYXRhIiwiYXhpb3NPcHRzIiwiQ29udGVudC1UeXBlIiwiZXJyb3JfMiIsIkFjY291bnRTZXJ2aWNlIiwibG9naW4iLCJsb2dpbk1vZGVsIiwibG9nb3V0IiwiVG9wTWVudV9Ub3BNZW51IiwiVG9wTWVudSIsImxvZ291dEFjdGlvbiIsIlRvcE1lbnVfZXh0ZW5kcyIsIm9uQ2xpY2tTaWduT3V0Iiwic2VydmljZXNfQWNjb3VudFNlcnZpY2UiLCJib290c3RyYXAzX25hdGl2ZWZyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3IiLCJhYm91dERyb3Bkb3duIiwicmVsb2FkIiwicmVhY3Rmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yIiwicmVhY3Rfcm91dGVyX2RvbSIsImRhdGEtdG9nZ2xlIiwiZGF0YS10YXJnZXQiLCJhcmlhLWNvbnRyb2xzIiwiYXJpYS1leHBhbmRlZCIsImFyaWEtbGFiZWwiLCJmb250U2l6ZSIsImFyaWEtaGFzcG9wdXAiLCJiaW5kX2RlY29yYXRvcl9kZWZhdWx0Iiwic2hhcmVkX1RvcE1lbnUiLCJyZWFjdF9yb3V0ZXJmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yIiwiRm9vdGVyIiwiRm9vdGVyX2V4dGVuZHMiLCJBdXRob3JpemVkTGF5b3V0IiwiQXV0aG9yaXplZExheW91dF9leHRlbmRzIiwic2hhcmVkX0Zvb3RlciIsIlVuaXR5R2FtZV9Vbml0eUdhbWUiLCJVbml0eUdhbWUiLCJldmVudE1hdGNoZXJzIiwiSFRNTEV2ZW50cyIsIk1vdXNlRXZlbnRzIiwiZ2V0QWxsRWxlbWVudHNGcm9tUG9pbnQiLCJsYXN0SXRlbSIsImVsZW1lbnRzIiwiZWxlbWVudEZyb21Qb2ludCIsInVwZGF0ZURpbWVuc2lvbnMiLCJjYW52YXMiLCJnZXRFbGVtZW50QnlJZCIsInJlYWN0QXBwIiwiSkdXR2FtZSIsIlVuaXR5R2FtZV9leHRlbmRzIiwicHV0b250b3AiLCJleHRlcm5hbF90aW1lcnNfIiwic2ltdWxhdGUiLCJvRXZlbnQiLCJleHRlbmQiLCJwb2ludGVyWCIsInBvaW50ZXJZIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJldmVudFR5cGUiLCJTeW50YXhFcnJvciIsImluaXRFdmVudCIsImluaXRNb3VzZUV2ZW50IiwiZGVmYXVsdFZpZXciLCJwYWdlIiwib3BlbiIsIm1vdXNlRXZlbnRTdHIiLCJtb3VzZUV2ZW50Iiwic2Nyb2xsYmFyQ29udGFpbmVyIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInNjcm9sbCIsImN1ckVsZW1zIiwidG9Mb3dlckNhc2UiLCJtb3VzZVRlc3QiLCJyZWFjdF9kb21mcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yX2RlZmF1bHQiLCJzb3VyY2VfZGVmYXVsdCIsInNoYXJlZF9Vbml0eUdhbWUiLCJHdWVzdExheW91dCIsIkd1ZXN0TGF5b3V0X2V4dGVuZHMiLCJsaWJfZGVmYXVsdCIsInNoYXJlZF9BcHBDb21wb25lbnQiLCJBcHBDb21wb25lbnQiLCJyZW5kZXJLZXkiLCJBcHBDb21wb25lbnRfZXh0ZW5kcyIsIkFwcENvbXBvbmVudF9kZWNvcmF0ZSIsIkxvYWRlciIsIkxvYWRlcl9leHRlbmRzIiwiY3NzIiwic2hvdyIsIkxvZ2luU3RvcmUiLCJBY3Rpb25zIiwiYWN0aW9uQ3JlYXRvcnMiLCJkaXNwYXRjaCIsImdldFN0YXRlIiwiTG9naW5TdG9yZV9hd2FpdGVyIiwiSW5pdCIsImxvZ2luUmVxdWVzdCIsIm1vZGVsIiwiUmVxdWVzdCIsIkZhaWx1cmUiLCJTdWNjZXNzIiwicGF5bG9hZCIsImluaXRpYWxTdGF0ZSIsImluZGljYXRvcnMiLCJvcGVyYXRpb25Mb2FkaW5nIiwibG9naW5TdWNjZXNzIiwicmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImluY29taW5nQWN0aW9uIiwiY2xvbmVJbmRpY2F0b3JzIiwiTG9naW5TdG9yZV9hc3NpZ24iLCJQZXJzb25TdG9yZV9QZXJzb25TdG9yZSIsIkZvcm1fRm9ybSIsIkZvcm1fZXh0ZW5kcyIsInZhbGlkYXRvciIsImVtcHR5Rm9ybSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dFR5cGUiLCJnZXRBdHRyaWJ1dGUiLCJlbEZvcm0iLCJzZXJpYWxpemVGb3JtIiwibnZhbF90aXBweV9kaXN0X2Nqc2Zyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3IiLCJGb3JtX2Fzc2lnbiIsIkZvcm1fZGVjb3JhdGUiLCJMb2dpblBhZ2VfTG9naW5QYWdlIiwiTG9naW5QYWdlIiwiTG9naW5QYWdlX2V4dGVuZHMiLCJlbExvYWRlciIsIm9uQ2xpY2tTdWJtaXRCdG4iLCJIZWxtZXRmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yIiwic2hhcmVkX0xvYWRlciIsImh0bWxGb3IiLCJkYXRhLXZhbHVlLXR5cGUiLCJkYXRhLXZhbC1yZXF1aXJlZCIsImRhdGEtbXNnLXJlcXVpcmVkIiwiTG9naW5QYWdlX2RlY29yYXRlIiwibGliZnJvbV9kbGxfcmVmZXJlbmNlX3ZlbmRvciIsInBhZ2VzX0xvZ2luUGFnZSIsIkFwcFJvdXRlIiwiTGF5b3V0IiwibGF5b3V0IiwiUGF0aCIsImlzQWRtaW5QYXRoIiwiaXNMb2dpblBhdGgiLCJpc0F1dGhlbnRpY2F0ZWQiLCJBcHBSb3V0ZV9hc3NpZ24iLCJIb21lUGFnZSIsIkhvbWVQYWdlX2V4dGVuZHMiLCJQb3J0Zm9saW9QYWdlX1BvcnRmb2xpb1BhZ2UiLCJQb3J0Zm9saW9QYWdlIiwiUG9ydGZvbGlvUGFnZV9leHRlbmRzIiwia2l0dGVuZnVsbF9kZWZhdWx0Iiwia2l0dGVuZmFjZV9kZWZhdWx0IiwiZ29vYmFfZGVmYXVsdCIsIm5pY2NvbG9fZGVmYXVsdCIsImJveV9kZWZhdWx0Iiwic3dhdHRyYWluZXJfZGVmYXVsdCIsInplbGRhX2RlZmF1bHQiLCJwYWdlc19Qb3J0Zm9saW9QYWdlIiwiUmVhZGluZ1BhZ2UiLCJSZWFkaW5nUGFnZV9leHRlbmRzIiwic3RhcndhcnNib29rc19kZWZhdWx0IiwiYWx0IiwiQWJvdXRNZVBhZ2UiLCJBYm91dE1lUGFnZV9leHRlbmRzIiwicHJvZmlsZXBpY19kZWZhdWx0IiwiTXVzaWNQYWdlIiwiTXVzaWNQYWdlX2V4dGVuZHMiLCJmcmFtZUJvcmRlciIsImFsbG93IiwiUGVyc29uU2VydmljZSIsIlBlcnNvblNlcnZpY2VfZXh0ZW5kcyIsInRlcm0iLCJQZXJzb25TdG9yZSIsInNlYXJjaFJlcXVlc3QiLCJQZXJzb25TdG9yZV9hd2FpdGVyIiwidHJhbnNmb3JtVXJsIiwiU2VhcmNoUmVxdWVzdCIsInNlcnZpY2VzX1BlcnNvblNlcnZpY2UiLCJTZWFyY2hSZXNwb25zZSIsImFkZFJlcXVlc3QiLCJBZGRSZXF1ZXN0IiwiQWRkUmVzcG9uc2UiLCJ1cGRhdGVSZXF1ZXN0IiwiVXBkYXRlUmVxdWVzdCIsIlVwZGF0ZVJlc3BvbnNlIiwiZGVsZXRlUmVxdWVzdCIsIkRlbGV0ZVJlcXVlc3QiLCJEZWxldGVSZXNwb25zZSIsInBlb3BsZSIsIlBlcnNvblN0b3JlX2Fzc2lnbiIsIml0ZW1Ub1VwZGF0ZSIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiUGFnaW5nQmFyX1BhZ2luZ0JhciIsIlBhZ2luZ0JhciIsIlBhZ2luZ0Jhcl9leHRlbmRzIiwic2V0Rmlyc3RQYWdlIiwiZWxGaXJzdFBhZ2VCdG4iLCJjbGljayIsInNldExhc3RQYWdlIiwiZWxMYXN0UGFnZUJ0biIsImRpc3Rmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yX2RlZmF1bHQiLCJ0b3RhbFJlc3VsdHMiLCJsaW1pdCIsImxpbWl0UGVyUGFnZSIsImN1cnJlbnRQYWdlIiwicGFnZXMiLCJoYXNOZXh0UGFnZSIsImhhc1ByZXZpb3VzUGFnZSIsInByZXZpb3VzUGFnZSIsIm5leHRQYWdlIiwidG90YWxQYWdlcyIsImdldFBhZ2VJdGVtUHJvcHMiLCJQYWdpbmdCYXJfYXNzaWduIiwicGFnZVZhbHVlIiwib25QYWdlQ2hhbmdlIiwib25DaGFuZ2VQYWdlIiwiUGFnaW5nQmFyX2RlY29yYXRlIiwicGVyc29uX1BlcnNvbkVkaXRvciIsIlBlcnNvbkVkaXRvciIsIlBlcnNvbkVkaXRvcl9leHRlbmRzIiwiZGlzdCIsIlBlcnNvbkVkaXRvcl9kZWNvcmF0ZSIsIk1vZGFsQ29tcG9uZW50X01vZGFsQ29tcG9uZW50IiwiTW9kYWxDb21wb25lbnQiLCJNb2RhbENvbXBvbmVudF9leHRlbmRzIiwibW9kYWxQbHVnaW4iLCJoaWRlIiwiZWxNb2RhbCIsIm9uU2hvdyIsIm9uSGlkZSIsImRhdGEtZGlzbWlzcyIsImFyaWEtaGlkZGVuIiwidGl0bGUiLCJNb2RhbENvbXBvbmVudF9kZWNvcmF0ZSIsIkFkbWluUGFnZV9BZG1pblBhZ2UiLCJBZG1pblBhZ2UiLCJzZWFyY2hUZXJtIiwicGFnZU51bSIsInJvd09mZnNldCIsIm1vZGVsRm9yRWRpdCIsImRlYm91bmNlZFNlYXJjaCIsImF3ZXNvbWVfZGVib3VuY2VfcHJvbWlzZV9kZWZhdWx0IiwiQWRtaW5QYWdlX2V4dGVuZHMiLCJlbE1vZGFsQWRkIiwiZWxNb2RhbEVkaXQiLCJlbE1vZGFsRGVsZXRlIiwiY2VpbCIsIm9uQ2xpY2tTaG93QWRkTW9kYWwiLCJvbkNsaWNrU2hvd0VkaXRNb2RhbCIsIm9uQ2xpY2tTaG93RGVsZXRlTW9kYWwiLCJvbkNsaWNrUGVyc29uRWRpdG9yQWRkX19zYXZlQnRuIiwicGVyc29uRWRpdG9yQWRkIiwicGFnaW5nQmFyIiwib25DbGlja1BlcnNvbkVkaXRvckVkaXRfX3NhdmVCdG4iLCJwZXJzb25FZGl0b3JFZGl0Iiwib25DbGlja1BlcnNvbkVkaXRvckRlbGV0ZV9fc2F2ZUJ0biIsInJlbmRlclJvdyIsInBlcnNvbiIsInJlbmRlclJvd3MiLCJvbkNoYW5nZVNlYXJjaElucHV0IiwiY3VycmVudFRhcmdldCIsInBsYWNlaG9sZGVyIiwiQWRtaW5QYWdlX2RlY29yYXRlIiwiQWRtaW5QYWdlX2NvbXBvbmVudCIsInBhZ2VzX0FkbWluUGFnZSIsInJvdXRlcyIsImxheW91dHNfR3Vlc3RMYXlvdXQiLCJwYWdlc19Ib21lUGFnZSIsInBhZ2VzX0Fib3V0TWVQYWdlIiwicGFnZXNfTXVzaWNQYWdlIiwicGFnZXNfUmVhZGluZ1BhZ2UiLCJsYXlvdXRzX0F1dGhvcml6ZWRMYXlvdXQiLCJyZWR1Y2VycyIsImNvbmZpZ3VyZVN0b3JlIiwid2luZG93SWZEZWZpbmVkIiwiZGV2VG9vbHNFeHRlbnNpb24iLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwicmVkdXhmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yIiwicmVkdXhfdGh1bmtfbGliZnJvbV9kbGxfcmVmZXJlbmNlX3ZlbmRvcl9kZWZhdWx0IiwiY29ubmVjdGVkX3JlYWN0X3JvdXRlcl9saWJmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yIiwiY3JlYXRlU3RvcmVXaXRoTWlkZGxld2FyZSIsImFsbFJlZHVjZXJzIiwiY29uZmlndXJlU3RvcmVfYXNzaWduIiwicm91dGVyUmVkdWNlciIsImJ1aWxkUm9vdFJlZHVjZXIiLCJyZW5kZXJIZWxtZXQiLCJoZWxtZXREYXRhIiwicmVuZGVyU3RhdGljIiwiaGVsbWV0U3RyaW5ncyIsImNyZWF0ZUdsb2JhbHMiLCJub2RlU2Vzc2lvbiIsImluaXRpYWxSZWR1eFN0YXRlIiwiY29tcGxldGVkVGFza3MiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiYXNwbmV0X3ByZXJlbmRlcmluZ2Zyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3IiLCJwYXJhbXMiLCJiYXNlVXJsIiwidXJsQWZ0ZXJCYXNlbmFtZSIsInN0b3JlIiwiaGlzdG9yeWZyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3IiLCJyb3V0ZXJDb250ZXh0IiwiYXBwIiwicmVuZGVyQXBwIiwic2VydmVyZnJvbV9kbGxfcmVmZXJlbmNlX3ZlbmRvciIsInJlZGlyZWN0VXJsIiwiZ2xvYmFscyIsImRvbWFpblRhc2tzIiwiaHRtbCJdLCJtYXBwaW5ncyI6IjZEQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUEwREEsT0FyREFGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLGFBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixF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Q0FDQUEsRUFBQSx3Q0FFSkEsRUFBQSx3QkFDSUEsRUFBQSwwQkFBTUEsRUFBQSxtQkFBR3I1QyxLQUFLLDRFQUE0RXRMLE9BQU8sVUFBUSxtRkFDekcya0QsRUFBQSxpQ0FDQUEsRUFBQSx3Q0FFSkEsRUFBQSx3QkFDSUEsRUFBQSwwQkFBTUEsRUFBQSxtQkFBR3I1QyxLQUFLLDRFQUE0RXRMLE9BQU8sVUFBUSwyQkFDekcya0QsRUFBQSxpQ0FDQUEsRUFBQSx3Q0FFSkEsRUFBQSx3QkFDSUEsRUFBQSwwQkFBTUEsRUFBQSxtQkFBR3I1QyxLQUFLLDRFQUE0RXRMLE9BQU8sVUFBUSx5RkFDekcya0QsRUFBQSxpQ0FDQUEsRUFBQSx3Q0FFSkEsRUFBQSx3QkFDSUEsRUFBQSwwQkFBTUEsRUFBQSxtQkFBR3I1QyxLQUFLLDRFQUE0RXRMLE9BQU8sVUFBUSwrRkFDekcya0QsRUFBQSxpQ0FDQUEsRUFBQSx3Q0FFSkEsRUFBQSx3QkFDSUEsRUFBQSwwQkFBTUEsRUFBQSxtQkFBR3I1QyxLQUFLLDRFQUE0RXRMLE9BQU8sVUFBUSw2QkFDekcya0QsRUFBQSxpQ0FDQUEsRUFBQSx3Q0FFSkEsRUFBQSx3QkFDSUEsRUFBQSwwQkFBTUEsRUFBQSxtQkFBR3I1QyxLQUFLLDRFQUE0RXRMLE9BQU8sVUFBUSx3REFDekcya0QsRUFBQSxpQ0FDQUEsRUFBQSxnREFFSkEsRUFBQSx3QkFDSUEsRUFBQSwwQkFBTUEsRUFBQSxtQkFBR3I1QyxLQUFLLDRFQUE0RXRMLE9BQU8sVUFBUSxnREFDekcya0QsRUFBQSxpQ0FDQUEsRUFBQSxxQ0FFSkEsRUFBQSx3QkFDSUEsRUFBQSwwQkFBTUEsRUFBQSxtQkFBR3I1QyxLQUFLLDRFQUE0RXRMLE9BQU8sVUFBUSxvREFDekcya0QsRUFBQSxpQ0FDQUEsRUFBQSx1Q0FJWkEsRUFBQSx5QkFDQUEsRUFBQSx5QkFDQUEsRUFBQSx5QkFDQUEsRUFBQSx5QkFDQUEsRUFBQSx5QkFDQUEsRUFBQSx5QkFDQUEsRUFBQSx5QkFDQUEsRUFBQSx5QkFDQUEsRUFBQSx5QkFDQUEsRUFBQSx5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QUExMkQsQ0FBUTQzRCxJQUl2QixJQUFNRyxLQUNBQyxFQUNGN1IsRUFBQSxjQUFDc0gsRUFBQSxVQUFTb0ssTUFBT0EsR0FDYjFSLEVBQUEsY0FBQ0MsRUFBQSxjQUFhaHRDLFNBQVVBLEVBQVV0TixRQUFTaXNELEVBQWV4eUQsU0FBVW15RCxFQUFPbnlELFNBQVNwQixLQUFNK04sU0FBVTBqRCxNQUl0R3FDLEVBQVksV0FDZCxPQUFPajRELE9BQUFrNEQsRUFBQSxlQUFBbDRELENBQWVnNEQsSUFHMUJDLElBR0lGLEVBQWM5VCxJQUNkbHNDLEdBQ0lvZ0QsWUFBYUosRUFBYzlULElBQzNCbVUsUUFBU2hCLEdBQWNNLEVBQU8xWixLQUFNNlosRUFBTS9NLFdBQVlrTSxRQU85RFUsRUFBT1csWUFBWXBnRCxLQUFLLFdBRXBCRixHQUNJdWdELEtBQU1MLElBQ05HLFFBQVNoQixHQUFjTSxFQUFPMVosS0FBTTZaLEVBQU0vTSxXQUFZa00sU0FHM0RoL0MiLCJmaWxlIjoibWFpbi1zZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcImRpc3QvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMTUpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoNCk7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi92ZW5kb3JcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY29uc3RhbnRzO1xuKGZ1bmN0aW9uIChjb25zdGFudHMpIHtcbiAgICBjb25zdGFudHMudHlwZU9mRnVuY3Rpb24gPSAnZnVuY3Rpb24nO1xuICAgIGNvbnN0YW50cy5ib29sVHJ1ZSA9IHRydWU7XG59KShjb25zdGFudHMgfHwgKGNvbnN0YW50cyA9IHt9KSk7XG5mdW5jdGlvbiBiaW5kKHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpIHtcbiAgICBpZiAoIWRlc2NyaXB0b3IgfHwgKHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlICE9PSBjb25zdGFudHMudHlwZU9mRnVuY3Rpb24pKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPbmx5IG1ldGhvZHMgY2FuIGJlIGRlY29yYXRlZCB3aXRoIEBiaW5kLiA8XCIgKyBwcm9wZXJ0eUtleSArIFwiPiBpcyBub3QgYSBtZXRob2QhXCIpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBjb25maWd1cmFibGU6IGNvbnN0YW50cy5ib29sVHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYm91bmQgPSBkZXNjcmlwdG9yLnZhbHVlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAvLyBDcmVkaXRzIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZXlwb3BwL2F1dG9iaW5kLWRlY29yYXRvciBmb3IgbWVtb2l6aW5nIHRoZSByZXN1bHQgb2YgYmluZCBhZ2FpbnN0IGEgc3ltYm9sIG9uIHRoZSBpbnN0YW5jZS5cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eUtleSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBib3VuZCxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGNvbnN0YW50cy5ib29sVHJ1ZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogY29uc3RhbnRzLmJvb2xUcnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBib3VuZDtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLmJpbmQgPSBiaW5kO1xuZXhwb3J0cy5kZWZhdWx0ID0gYmluZDtcbiIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDMwMSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLndpdGhSb3V0ZXIgPSBleHBvcnRzLm1hdGNoUGF0aCA9IGV4cG9ydHMuZ2VuZXJhdGVQYXRoID0gZXhwb3J0cy5Td2l0Y2ggPSBleHBvcnRzLlN0YXRpY1JvdXRlciA9IGV4cG9ydHMuUm91dGVyID0gZXhwb3J0cy5Sb3V0ZSA9IGV4cG9ydHMuUmVkaXJlY3QgPSBleHBvcnRzLlByb21wdCA9IGV4cG9ydHMuTmF2TGluayA9IGV4cG9ydHMuTWVtb3J5Um91dGVyID0gZXhwb3J0cy5MaW5rID0gZXhwb3J0cy5IYXNoUm91dGVyID0gZXhwb3J0cy5Ccm93c2VyUm91dGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX0Jyb3dzZXJSb3V0ZXIyID0gcmVxdWlyZShcIi4vQnJvd3NlclJvdXRlclwiKTtcblxudmFyIF9Ccm93c2VyUm91dGVyMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Jyb3dzZXJSb3V0ZXIyKTtcblxudmFyIF9IYXNoUm91dGVyMiA9IHJlcXVpcmUoXCIuL0hhc2hSb3V0ZXJcIik7XG5cbnZhciBfSGFzaFJvdXRlcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IYXNoUm91dGVyMik7XG5cbnZhciBfTGluazIgPSByZXF1aXJlKFwiLi9MaW5rXCIpO1xuXG52YXIgX0xpbmszID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGluazIpO1xuXG52YXIgX01lbW9yeVJvdXRlcjIgPSByZXF1aXJlKFwiLi9NZW1vcnlSb3V0ZXJcIik7XG5cbnZhciBfTWVtb3J5Um91dGVyMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01lbW9yeVJvdXRlcjIpO1xuXG52YXIgX05hdkxpbmsyID0gcmVxdWlyZShcIi4vTmF2TGlua1wiKTtcblxudmFyIF9OYXZMaW5rMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX05hdkxpbmsyKTtcblxudmFyIF9Qcm9tcHQyID0gcmVxdWlyZShcIi4vUHJvbXB0XCIpO1xuXG52YXIgX1Byb21wdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcm9tcHQyKTtcblxudmFyIF9SZWRpcmVjdDIgPSByZXF1aXJlKFwiLi9SZWRpcmVjdFwiKTtcblxudmFyIF9SZWRpcmVjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZWRpcmVjdDIpO1xuXG52YXIgX1JvdXRlMiA9IHJlcXVpcmUoXCIuL1JvdXRlXCIpO1xuXG52YXIgX1JvdXRlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRlMik7XG5cbnZhciBfUm91dGVyMiA9IHJlcXVpcmUoXCIuL1JvdXRlclwiKTtcblxudmFyIF9Sb3V0ZXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGVyMik7XG5cbnZhciBfU3RhdGljUm91dGVyMiA9IHJlcXVpcmUoXCIuL1N0YXRpY1JvdXRlclwiKTtcblxudmFyIF9TdGF0aWNSb3V0ZXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3RhdGljUm91dGVyMik7XG5cbnZhciBfU3dpdGNoMiA9IHJlcXVpcmUoXCIuL1N3aXRjaFwiKTtcblxudmFyIF9Td2l0Y2gzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3dpdGNoMik7XG5cbnZhciBfZ2VuZXJhdGVQYXRoMiA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlUGF0aFwiKTtcblxudmFyIF9nZW5lcmF0ZVBhdGgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2VuZXJhdGVQYXRoMik7XG5cbnZhciBfbWF0Y2hQYXRoMiA9IHJlcXVpcmUoXCIuL21hdGNoUGF0aFwiKTtcblxudmFyIF9tYXRjaFBhdGgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWF0Y2hQYXRoMik7XG5cbnZhciBfd2l0aFJvdXRlcjIgPSByZXF1aXJlKFwiLi93aXRoUm91dGVyXCIpO1xuXG52YXIgX3dpdGhSb3V0ZXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2l0aFJvdXRlcjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLkJyb3dzZXJSb3V0ZXIgPSBfQnJvd3NlclJvdXRlcjMuZGVmYXVsdDtcbmV4cG9ydHMuSGFzaFJvdXRlciA9IF9IYXNoUm91dGVyMy5kZWZhdWx0O1xuZXhwb3J0cy5MaW5rID0gX0xpbmszLmRlZmF1bHQ7XG5leHBvcnRzLk1lbW9yeVJvdXRlciA9IF9NZW1vcnlSb3V0ZXIzLmRlZmF1bHQ7XG5leHBvcnRzLk5hdkxpbmsgPSBfTmF2TGluazMuZGVmYXVsdDtcbmV4cG9ydHMuUHJvbXB0ID0gX1Byb21wdDMuZGVmYXVsdDtcbmV4cG9ydHMuUmVkaXJlY3QgPSBfUmVkaXJlY3QzLmRlZmF1bHQ7XG5leHBvcnRzLlJvdXRlID0gX1JvdXRlMy5kZWZhdWx0O1xuZXhwb3J0cy5Sb3V0ZXIgPSBfUm91dGVyMy5kZWZhdWx0O1xuZXhwb3J0cy5TdGF0aWNSb3V0ZXIgPSBfU3RhdGljUm91dGVyMy5kZWZhdWx0O1xuZXhwb3J0cy5Td2l0Y2ggPSBfU3dpdGNoMy5kZWZhdWx0O1xuZXhwb3J0cy5nZW5lcmF0ZVBhdGggPSBfZ2VuZXJhdGVQYXRoMy5kZWZhdWx0O1xuZXhwb3J0cy5tYXRjaFBhdGggPSBfbWF0Y2hQYXRoMy5kZWZhdWx0O1xuZXhwb3J0cy53aXRoUm91dGVyID0gX3dpdGhSb3V0ZXIzLmRlZmF1bHQ7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoODQpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDcpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDE5NSk7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMjI5KTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgxODcpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDE0Myk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGFkZExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbnZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxudmFyIGhhc0Jhc2VuYW1lID0gZXhwb3J0cy5oYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGV4cG9ydHMuc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxudmFyIHN0cmlwVHJhaWxpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbnZhciBwYXJzZVBhdGggPSBleHBvcnRzLnBhcnNlUGF0aCA9IGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxudmFyIGNyZWF0ZVBhdGggPSBleHBvcnRzLmNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgyNjQpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDE0OCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGV4cG9ydHMuY3JlYXRlTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lID0gcmVxdWlyZSgncmVzb2x2ZS1wYXRobmFtZScpO1xuXG52YXIgX3Jlc29sdmVQYXRobmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXNvbHZlUGF0aG5hbWUpO1xuXG52YXIgX3ZhbHVlRXF1YWwgPSByZXF1aXJlKCd2YWx1ZS1lcXVhbCcpO1xuXG52YXIgX3ZhbHVlRXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsdWVFcXVhbCk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSAoMCwgX1BhdGhVdGlscy5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICgwLCBfcmVzb2x2ZVBhdGhuYW1lMi5kZWZhdWx0KShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxudmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiAoMCwgX3ZhbHVlRXF1YWwyLmRlZmF1bHQpKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMTMyKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgyNDIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDI1Myk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jcmVhdGVQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGV4cG9ydHMuY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGV4cG9ydHMuY3JlYXRlSGFzaEhpc3RvcnkgPSBleHBvcnRzLmNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gdW5kZWZpbmVkO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjcmVhdGVMb2NhdGlvbicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnbG9jYXRpb25zQXJlRXF1YWwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbDtcbiAgfVxufSk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdwYXJzZVBhdGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGF0aFV0aWxzLnBhcnNlUGF0aDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NyZWF0ZVBhdGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGF0aFV0aWxzLmNyZWF0ZVBhdGg7XG4gIH1cbn0pO1xuXG52YXIgX2NyZWF0ZUJyb3dzZXJIaXN0b3J5MiA9IHJlcXVpcmUoJy4vY3JlYXRlQnJvd3Nlckhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVCcm93c2VySGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVCcm93c2VySGlzdG9yeTIpO1xuXG52YXIgX2NyZWF0ZUhhc2hIaXN0b3J5MiA9IHJlcXVpcmUoJy4vY3JlYXRlSGFzaEhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVIYXNoSGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVIYXNoSGlzdG9yeTIpO1xuXG52YXIgX2NyZWF0ZU1lbW9yeUhpc3RvcnkyID0gcmVxdWlyZSgnLi9jcmVhdGVNZW1vcnlIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNZW1vcnlIaXN0b3J5Mik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBfY3JlYXRlQnJvd3Nlckhpc3RvcnkzLmRlZmF1bHQ7XG5leHBvcnRzLmNyZWF0ZUhhc2hIaXN0b3J5ID0gX2NyZWF0ZUhhc2hIaXN0b3J5My5kZWZhdWx0O1xuZXhwb3J0cy5jcmVhdGVNZW1vcnlIaXN0b3J5ID0gX2NyZWF0ZU1lbW9yeUhpc3RvcnkzLmRlZmF1bHQ7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMTkpOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICB2YXIgc2V0UHJvbXB0ID0gZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKTtcblxuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb25maXJtVHJhbnNpdGlvblRvID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX1JvdXRlciA9IHJlcXVpcmUoXCJyZWFjdC1yb3V0ZXIvUm91dGVyXCIpO1xuXG52YXIgX1JvdXRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfUm91dGVyMi5kZWZhdWx0OyAvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0cyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFVuaXR5VmVyc2lvbl8xID0gcmVxdWlyZShcIi4vZW51bXMvVW5pdHlWZXJzaW9uXCIpO1xuZXhwb3J0cy5Vbml0eVZlcnNpb24gPSBVbml0eVZlcnNpb25fMS5Vbml0eVZlcnNpb247XG52YXIgVW5pdHlDb250ZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVW5pdHlDb250ZW50XCIpKTtcbmV4cG9ydHMuVW5pdHlDb250ZW50ID0gVW5pdHlDb250ZW50XzEuZGVmYXVsdDtcbnZhciBVbml0eV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvVW5pdHlcIikpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVW5pdHlfMS5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidGltZXJzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhNmUxOGQyOTdmNDk5NzI4MjcwNjIzYmFhMDk0MzJiLmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImExZDU4Y2YxOWI3N2ZiNmY2OTE3YmVmYjQ3MmNkYzhkLmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjZiN2RjZmFjMzczMjkzYWE1ZWFkZjZlYjBhMjk0MThlLmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImYyMTViOGFiNTY1YzA5ZTNkYTgzNTc1NDQwNTY5NjEyLmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImYyZjMwZGM3NzA0YjkzY2Q0MTRkYmEyNTMzZjdhMGY3LmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjYyNTRkYTkxMzU3ODQyMWRjNjIwNjVmZWRlMDZmM2U5LmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImUyYjI5ZDcwNWZiMzRiYmZjODhiZTNiZDBkZmQyZTNmLmpwZ1wiOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgY2FuVXNlRE9NID0gZXhwb3J0cy5jYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG52YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBleHBvcnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbnZhciBnZXRDb25maXJtYXRpb24gPSBleHBvcnRzLmdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG52YXIgc3VwcG9ydHNIaXN0b3J5ID0gZXhwb3J0cy5zdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xudmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBleHBvcnRzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG52YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBleHBvcnRzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG52YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGV4cG9ydHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoXCJpbnZhcmlhbnRcIik7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfaGlzdG9yeSA9IHJlcXVpcmUoXCJoaXN0b3J5XCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGlzTW9kaWZpZWRFdmVudCA9IGZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG52YXIgTGluayA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaW5rLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICFfdGhpcy5wcm9wcy50YXJnZXQgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50bztcblxuXG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlcGxhY2UgPSBfcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfcHJvcHMudG8sXG4gICAgICAgIGlubmVyUmVmID0gX3Byb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkodG8gIT09IHVuZGVmaW5lZCwgJ1lvdSBtdXN0IHNwZWNpZnkgdGhlIFwidG9cIiBwcm9wZXJ0eScpO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyAoMCwgX2hpc3RvcnkuY3JlYXRlTG9jYXRpb24pKHRvLCBudWxsLCBudWxsLCBoaXN0b3J5LmxvY2F0aW9uKSA6IHRvO1xuXG4gICAgdmFyIGhyZWYgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IGhyZWYsIHJlZjogaW5uZXJSZWYgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuTGluay5wcm9wVHlwZXMgPSB7XG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgdGFyZ2V0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgcmVwbGFjZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICB0bzogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdF0pLmlzUmVxdWlyZWQsXG4gIGlubmVyUmVmOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY10pXG59O1xuTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlcGxhY2U6IGZhbHNlXG59O1xuTGluay5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgaGlzdG9yeTogX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgICBwdXNoOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY3JlYXRlSHJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBMaW5rOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX1JvdXRlID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci9Sb3V0ZVwiKTtcblxudmFyIF9Sb3V0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9Sb3V0ZTIuZGVmYXVsdDsgLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHMiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBVbml0eVZlcnNpb247XG4oZnVuY3Rpb24gKFVuaXR5VmVyc2lvbikge1xuICAgIC8qKlxuICAgICAqIFVuaXR5IDUuNi54XG4gICAgICovXG4gICAgVW5pdHlWZXJzaW9uW1VuaXR5VmVyc2lvbltcIlVOSVRZXzVfNlwiXSA9IDBdID0gXCJVTklUWV81XzZcIjtcbiAgICAvKipcbiAgICAgKiBVbml0eSAyMDE3XG4gICAgICovXG4gICAgVW5pdHlWZXJzaW9uW1VuaXR5VmVyc2lvbltcIlVOSVRZXzIwMTdcIl0gPSAxXSA9IFwiVU5JVFlfMjAxN1wiO1xuICAgIC8qKlxuICAgICAqIFVuaXR5IDIwMThcbiAgICAgKi9cbiAgICBVbml0eVZlcnNpb25bVW5pdHlWZXJzaW9uW1wiVU5JVFlfMjAxOFwiXSA9IDJdID0gXCJVTklUWV8yMDE4XCI7XG59KShVbml0eVZlcnNpb24gPSBleHBvcnRzLlVuaXR5VmVyc2lvbiB8fCAoZXhwb3J0cy5Vbml0eVZlcnNpb24gPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5pdHlWZXJzaW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgICBDQVJPVVNFTDogZnVuY3Rpb24gQ0FST1VTRUwoaXNTbGlkZXIpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgXCJjYXJvdXNlbFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJjYXJvdXNlbC1zbGlkZXJcIjogaXNTbGlkZXJcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIFdSQVBQRVI6IGZ1bmN0aW9uIFdSQVBQRVIoaXNTbGlkZXIsIGF4aXMpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgXCJ0aHVtYnMtd3JhcHBlclwiOiAhaXNTbGlkZXIsXG4gICAgICAgICAgICBcInNsaWRlci13cmFwcGVyXCI6IGlzU2xpZGVyLFxuICAgICAgICAgICAgXCJheGlzLWhvcml6b250YWxcIjogYXhpcyA9PT0gXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICBcImF4aXMtdmVydGljYWxcIjogYXhpcyAhPT0gXCJob3Jpem9udGFsXCJcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIFNMSURFUjogZnVuY3Rpb24gU0xJREVSKGlzU2xpZGVyLCBpc1N3aXBpbmcpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgXCJ0aHVtYnNcIjogIWlzU2xpZGVyLFxuICAgICAgICAgICAgXCJzbGlkZXJcIjogaXNTbGlkZXIsXG4gICAgICAgICAgICBcImFuaW1hdGVkXCI6ICFpc1N3aXBpbmdcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIElURU06IGZ1bmN0aW9uIElURU0oaXNTbGlkZXIsIHNlbGVjdGVkKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2NsYXNzbmFtZXMyLmRlZmF1bHQpKHtcbiAgICAgICAgICAgIFwidGh1bWJcIjogIWlzU2xpZGVyLFxuICAgICAgICAgICAgXCJzbGlkZVwiOiBpc1NsaWRlcixcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogc2VsZWN0ZWRcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIEFSUk9XX1BSRVY6IGZ1bmN0aW9uIEFSUk9XX1BSRVYoZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgXCJjb250cm9sLWFycm93IGNvbnRyb2wtcHJldlwiOiB0cnVlLFxuICAgICAgICAgICAgXCJjb250cm9sLWRpc2FibGVkXCI6IGRpc2FibGVkXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBBUlJPV19ORVhUOiBmdW5jdGlvbiBBUlJPV19ORVhUKGRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2NsYXNzbmFtZXMyLmRlZmF1bHQpKHtcbiAgICAgICAgICAgIFwiY29udHJvbC1hcnJvdyBjb250cm9sLW5leHRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiY29udHJvbC1kaXNhYmxlZFwiOiBkaXNhYmxlZFxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgRE9UOiBmdW5jdGlvbiBET1Qoc2VsZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgXCJkb3RcIjogdHJ1ZSxcbiAgICAgICAgICAgICdzZWxlY3RlZCc6IHNlbGVjdGVkXG4gICAgICAgIH0pO1xuICAgIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgYXhpcykge1xuICAgIHZhciBwb3NpdGlvbkNzcyA9IGF4aXMgPT09ICdob3Jpem9udGFsJyA/IFtwb3NpdGlvbiwgMCwgMF0gOiBbMCwgcG9zaXRpb24sIDBdO1xuICAgIHZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2xhdGUzZCc7XG5cbiAgICB2YXIgdHJhbnNsYXRlZFBvc2l0aW9uID0gJygnICsgcG9zaXRpb25Dc3Muam9pbignLCcpICsgJyknO1xuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25Qcm9wICsgdHJhbnNsYXRlZFBvc2l0aW9uO1xufTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJy4vcmVhY3Qtc3dpcGUnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJy4vcmVhY3Qtc3dpcGUnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3RTd2lwZSk7XG4gICAgZ2xvYmFsLmluZGV4ID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3RTd2lwZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdFN3aXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0U3dpcGUpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBleHBvcnRzLmRlZmF1bHQgPSBfcmVhY3RTd2lwZTIuZGVmYXVsdDtcbn0pOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2Nzc0NsYXNzZXMgPSByZXF1aXJlKCcuLi9jc3NDbGFzc2VzJyk7XG5cbnZhciBfY3NzQ2xhc3NlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jc3NDbGFzc2VzKTtcblxudmFyIF9kaW1lbnNpb25zID0gcmVxdWlyZSgnLi4vZGltZW5zaW9ucycpO1xuXG52YXIgX0NTU1RyYW5zbGF0ZSA9IHJlcXVpcmUoJy4uL0NTU1RyYW5zbGF0ZScpO1xuXG52YXIgX0NTU1RyYW5zbGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DU1NUcmFuc2xhdGUpO1xuXG52YXIgX3JlYWN0RWFzeVN3aXBlID0gcmVxdWlyZSgncmVhY3QtZWFzeS1zd2lwZScpO1xuXG52YXIgX3JlYWN0RWFzeVN3aXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RWFzeVN3aXBlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVGh1bWJzID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoVGh1bWJzLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFRodW1icyhwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGh1bWJzKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVGh1bWJzLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGh1bWJzKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyk7XG5cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzZWxlY3RlZEl0ZW06IHByb3BzLnNlbGVjdGVkSXRlbSxcbiAgICAgICAgICAgIGhhc01vdW50OiBmYWxzZSxcbiAgICAgICAgICAgIGZpcnN0SXRlbTogMCxcbiAgICAgICAgICAgIGl0ZW1TaXplOiBudWxsLFxuICAgICAgICAgICAgdmlzaWJsZUl0ZW1zOiAwLFxuICAgICAgICAgICAgbGFzdFBvc2l0aW9uOiAwLFxuICAgICAgICAgICAgc2hvd0Fycm93czogZmFsc2UsXG4gICAgICAgICAgICBpbWFnZXM6IF90aGlzLmdldEltYWdlcygpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGh1bWJzLCBbe1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudChuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBUaHVtYnMoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHByb3BzLnNlbGVjdGVkSXRlbSAhPT0gdGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtOiBwcm9wcy5zZWxlY3RlZEl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0SXRlbTogdGhpcy5nZXRGaXJzdEl0ZW0ocHJvcHMuc2VsZWN0ZWRJdGVtKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3BzLmNoaWxkcmVuICE9PSB0aGlzLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlczogdGhpcy5nZXRJbWFnZXMoKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuY2hpbGRyZW4gPT09IHByZXZQcm9wcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGhpcyB3aWxsIGNhcHR1cmUgYW55IHNpemUgY2hhbmdlcyBmb3IgYXJyb3cgYWRqdXN0bWVudHMgZXRjLlxuICAgICAgICAgICAgLy8gdXN1YWxseSBpbiB0aGUgc2FtZSByZW5kZXIgY3ljbGUgc28gd2UgZG9uJ3Qgc2VlIGFueSBmbGlja2Vyc1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTaXplcygpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveVRodW1icygpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZXR1cFRodW1icycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cFRodW1icygpIHtcbiAgICAgICAgICAgIC8vIGFzIHRoZSB3aWR0aHMgYXJlIGNhbGN1bGF0ZWQsIHdlIG5lZWQgdG8gcmVzaXplXG4gICAgICAgICAgICAvLyB0aGUgY2Fyb3VzZWwgd2hlbiB0aGUgd2luZG93IGlzIHJlc2l6ZWRcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMudXBkYXRlU2l6ZXMpO1xuICAgICAgICAgICAgLy8gaXNzdWUgIzIgLSBpbWFnZSBsb2FkaW5nIHNtYWxsZXJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCB0aGlzLnVwZGF0ZVNpemVzKTtcblxuICAgICAgICAgICAgLy8gd2hlbiB0aGUgY29tcG9uZW50IGlzIHJlbmRlcmVkIHdlIG5lZWQgdG8gY2FsY3VsYXRlXG4gICAgICAgICAgICAvLyB0aGUgY29udGFpbmVyIHNpemUgdG8gYWRqdXN0IHRoZSByZXNwb25zaXZlIGJlaGF2aW91clxuICAgICAgICAgICAgdGhpcy51cGRhdGVTaXplcygpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZXN0cm95VGh1bWJzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lUaHVtYnMoKSB7XG4gICAgICAgICAgICAvLyByZW1vdmluZyBsaXN0ZW5lcnNcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMudXBkYXRlU2l6ZXMpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIHRoaXMudXBkYXRlU2l6ZXMpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRJbWFnZXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW1hZ2VzKCkge1xuICAgICAgICAgICAgdmFyIGltYWdlcyA9IF9yZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGltZyA9IGl0ZW07XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgaXRlbSBpcyBub3QgYW4gaW1hZ2UsIHRyeSB0byBmaW5kIHRoZSBmaXJzdCBpbWFnZSBpbiB0aGUgaXRlbSdzIGNoaWxkcmVuLlxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgIT09IFwiaW1nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1nID0gX3JlYWN0LkNoaWxkcmVuLnRvQXJyYXkoaXRlbS5wcm9wcy5jaGlsZHJlbikuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuLnR5cGUgPT09IFwiaW1nXCI7XG4gICAgICAgICAgICAgICAgICAgIH0pWzBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghaW1nIHx8IGltZy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGltZztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoaW1hZ2VzLmZpbHRlcihmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW1hZ2UgIT09IG51bGw7XG4gICAgICAgICAgICB9KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ05vIGltYWdlcyBmb3VuZCEgQ2FuXFwndCBidWlsZCB0aGUgdGh1bWIgbGlzdCB3aXRob3V0IGltYWdlcy4gSWYgeW91IGRvblxcJ3QgbmVlZCB0aHVtYnMsIHNldCBzaG93VGh1bWJzPXtmYWxzZX0gaW4gdGhlIENhcm91c2VsLiBOb3RlIHRoYXQgaXRcXCdzIG5vdCBwb3NzaWJsZSB0byBnZXQgaW1hZ2VzIHJlbmRlcmVkIGluc2lkZSBjdXN0b20gY29tcG9uZW50cy4gTW9yZSBpbmZvIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9sZWFuZHJvd2QvcmVhY3QtcmVzcG9uc2l2ZS1jYXJvdXNlbC9ibG9iL21hc3Rlci9UUk9VQkxFU0hPT1RJTkcubWQnKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gaW1hZ2VzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRGaXJzdEl0ZW0nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rmlyc3RJdGVtKHNlbGVjdGVkSXRlbSkge1xuICAgICAgICAgICAgdmFyIGZpcnN0SXRlbSA9IHNlbGVjdGVkSXRlbTtcblxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkSXRlbSA+PSB0aGlzLnN0YXRlLmxhc3RQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGZpcnN0SXRlbSA9IHRoaXMuc3RhdGUubGFzdFBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRJdGVtIDwgdGhpcy5zdGF0ZS5maXJzdEl0ZW0gKyB0aGlzLnN0YXRlLnZpc2libGVJdGVtcykge1xuICAgICAgICAgICAgICAgIGZpcnN0SXRlbSA9IHRoaXMuc3RhdGUuZmlyc3RJdGVtO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRJdGVtIDwgdGhpcy5zdGF0ZS5maXJzdEl0ZW0pIHtcbiAgICAgICAgICAgICAgICBmaXJzdEl0ZW0gPSBzZWxlY3RlZEl0ZW07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmaXJzdEl0ZW07XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlckl0ZW1zJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckl0ZW1zKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmltYWdlcy5tYXAoZnVuY3Rpb24gKGltZywgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbUNsYXNzID0gX2Nzc0NsYXNzZXMyLmRlZmF1bHQuSVRFTShmYWxzZSwgaW5kZXggPT09IF90aGlzMi5zdGF0ZS5zZWxlY3RlZEl0ZW0gJiYgX3RoaXMyLnN0YXRlLmhhc01vdW50KTtcblxuICAgICAgICAgICAgICAgIHZhciB0aHVtYlByb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgICAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnNldFRodW1ic1JlZihlLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogaXRlbUNsYXNzLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfdGhpczIuaGFuZGxlQ2xpY2tJdGVtLmJpbmQoX3RoaXMyLCBpbmRleCwgX3RoaXMyLnByb3BzLmNoaWxkcmVuW2luZGV4XSksXG4gICAgICAgICAgICAgICAgICAgIG9uS2V5RG93bjogX3RoaXMyLmhhbmRsZUNsaWNrSXRlbS5iaW5kKF90aGlzMiwgaW5kZXgsIF90aGlzMi5wcm9wcy5jaGlsZHJlbltpbmRleF0pXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpbWcgPSBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGltZywge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25Mb2FkOiBfdGhpczIuc2V0TW91bnRTdGF0ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgIF9leHRlbmRzKHt9LCB0aHVtYlByb3BzLCB7IHJvbGU6ICdidXR0b24nLCB0YWJJbmRleDogMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgaW1nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNob3cgbGVmdCBhcnJvdz9cbiAgICAgICAgICAgIHZhciBoYXNQcmV2ID0gdGhpcy5zdGF0ZS5zaG93QXJyb3dzICYmIHRoaXMuc3RhdGUuZmlyc3RJdGVtID4gMDtcbiAgICAgICAgICAgIC8vIHNob3cgcmlnaHQgYXJyb3dcbiAgICAgICAgICAgIHZhciBoYXNOZXh0ID0gdGhpcy5zdGF0ZS5zaG93QXJyb3dzICYmIHRoaXMuc3RhdGUuZmlyc3RJdGVtIDwgdGhpcy5zdGF0ZS5sYXN0UG9zaXRpb247XG4gICAgICAgICAgICAvLyBvYmogdG8gaG9sZCB0aGUgdHJhbnNmb3JtYXRpb25zIGFuZCBzdHlsZXNcbiAgICAgICAgICAgIHZhciBpdGVtTGlzdFN0eWxlcyA9IHt9O1xuXG4gICAgICAgICAgICB2YXIgY3VycmVudFBvc2l0aW9uID0gLXRoaXMuc3RhdGUuZmlyc3RJdGVtICogdGhpcy5zdGF0ZS5pdGVtU2l6ZSArICdweCc7XG5cbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1Qcm9wID0gKDAsIF9DU1NUcmFuc2xhdGUyLmRlZmF1bHQpKGN1cnJlbnRQb3NpdGlvbiwgdGhpcy5wcm9wcy5heGlzKTtcblxuICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25UaW1lID0gdGhpcy5wcm9wcy50cmFuc2l0aW9uVGltZSArICdtcyc7XG5cbiAgICAgICAgICAgIGl0ZW1MaXN0U3R5bGVzID0ge1xuICAgICAgICAgICAgICAgICdXZWJraXRUcmFuc2Zvcm0nOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICAgICAgICAgICdNb3pUcmFuc2Zvcm0nOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICAgICAgICAgICdNc1RyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3AsXG4gICAgICAgICAgICAgICAgJ09UcmFuc2Zvcm0nOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICAgICAgICAgICdtc1RyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3AsXG4gICAgICAgICAgICAgICAgJ1dlYmtpdFRyYW5zaXRpb25EdXJhdGlvbic6IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICAgICAgICAgICdNb3pUcmFuc2l0aW9uRHVyYXRpb24nOiB0cmFuc2l0aW9uVGltZSxcbiAgICAgICAgICAgICAgICAnTXNUcmFuc2l0aW9uRHVyYXRpb24nOiB0cmFuc2l0aW9uVGltZSxcbiAgICAgICAgICAgICAgICAnT1RyYW5zaXRpb25EdXJhdGlvbic6IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICAgICAgICAgICd0cmFuc2l0aW9uRHVyYXRpb24nOiB0cmFuc2l0aW9uVGltZSxcbiAgICAgICAgICAgICAgICAnbXNUcmFuc2l0aW9uRHVyYXRpb24nOiB0cmFuc2l0aW9uVGltZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5DQVJPVVNFTChmYWxzZSkgfSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5XUkFQUEVSKGZhbHNlKSwgcmVmOiB0aGlzLnNldEl0ZW1zV3JhcHBlclJlZiB9LFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgeyB0eXBlOiAnYnV0dG9uJywgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5BUlJPV19QUkVWKCFoYXNQcmV2KSwgb25DbGljazogdGhpcy5zbGlkZVJpZ2h0IH0pLFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdEVhc3lTd2lwZTIuZGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgdGFnTmFtZTogJ3VsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW06IHRoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMyLmRlZmF1bHQuU0xJREVSKGZhbHNlLCB0aGlzLnN0YXRlLnN3aXBpbmcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU3dpcGVMZWZ0OiB0aGlzLnNsaWRlTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblN3aXBlUmlnaHQ6IHRoaXMuc2xpZGVSaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblN3aXBlTW92ZTogdGhpcy5vblN3aXBlTW92ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblN3aXBlU3RhcnQ6IHRoaXMub25Td2lwZVN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU3dpcGVFbmQ6IHRoaXMub25Td2lwZUVuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogaXRlbUxpc3RTdHlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiB0aGlzLnNldEl0ZW1zTGlzdFJlZiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJJdGVtcygpXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7IHR5cGU6ICdidXR0b24nLCBjbGFzc05hbWU6IF9jc3NDbGFzc2VzMi5kZWZhdWx0LkFSUk9XX05FWFQoIWhhc05leHQpLCBvbkNsaWNrOiB0aGlzLnNsaWRlTGVmdCB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGh1bWJzO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuVGh1bWJzLmRpc3BsYXlOYW1lID0gJ1RodW1icyc7XG5UaHVtYnMucHJvcHNUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LmlzUmVxdWlyZWQsXG4gICAgdHJhbnNpdGlvblRpbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIHNlbGVjdGVkSXRlbTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgdGh1bWJXaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbn07XG5UaHVtYnMuZGVmYXVsdFByb3BzID0ge1xuICAgIHNlbGVjdGVkSXRlbTogMCxcbiAgICB0cmFuc2l0aW9uVGltZTogMzUwLFxuICAgIGF4aXM6ICdob3Jpem9udGFsJ1xufTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdGhpcy5zZXRJdGVtc1dyYXBwZXJSZWYgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBfdGhpczMuaXRlbXNXcmFwcGVyUmVmID0gbm9kZTtcbiAgICB9O1xuXG4gICAgdGhpcy5zZXRJdGVtc0xpc3RSZWYgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBfdGhpczMuaXRlbXNMaXN0UmVmID0gbm9kZTtcbiAgICB9O1xuXG4gICAgdGhpcy5zZXRUaHVtYnNSZWYgPSBmdW5jdGlvbiAobm9kZSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKCFfdGhpczMudGh1bWJzUmVmKSB7XG4gICAgICAgICAgICBfdGhpczMudGh1bWJzUmVmID0gW107XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMzLnRodW1ic1JlZltpbmRleF0gPSBub2RlO1xuICAgIH07XG5cbiAgICB0aGlzLnVwZGF0ZVNpemVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzMy5wcm9wcy5jaGlsZHJlbiB8fCAhX3RoaXMzLml0ZW1zV3JhcHBlclJlZikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdGFsID0gX3RoaXMzLnByb3BzLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgdmFyIHdyYXBwZXJTaXplID0gX3RoaXMzLml0ZW1zV3JhcHBlclJlZi5jbGllbnRXaWR0aDtcbiAgICAgICAgdmFyIGl0ZW1TaXplID0gX3RoaXMzLnByb3BzLnRodW1iV2lkdGggPyBfdGhpczMucHJvcHMudGh1bWJXaWR0aCA6ICgwLCBfZGltZW5zaW9ucy5vdXRlcldpZHRoKShfdGhpczMudGh1bWJzUmVmWzBdKTtcbiAgICAgICAgdmFyIHZpc2libGVJdGVtcyA9IE1hdGguZmxvb3Iod3JhcHBlclNpemUgLyBpdGVtU2l6ZSk7XG4gICAgICAgIHZhciBsYXN0UG9zaXRpb24gPSB0b3RhbCAtIHZpc2libGVJdGVtcztcbiAgICAgICAgdmFyIHNob3dBcnJvd3MgPSB2aXNpYmxlSXRlbXMgPCB0b3RhbDtcbiAgICAgICAgX3RoaXMzLnNldFN0YXRlKGZ1bmN0aW9uIChfc3RhdGUsIHByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGl0ZW1TaXplOiBpdGVtU2l6ZSxcbiAgICAgICAgICAgICAgICB2aXNpYmxlSXRlbXM6IHZpc2libGVJdGVtcyxcbiAgICAgICAgICAgICAgICBmaXJzdEl0ZW06IHNob3dBcnJvd3MgPyBfdGhpczMuZ2V0Rmlyc3RJdGVtKHByb3BzLnNlbGVjdGVkSXRlbSkgOiAwLFxuICAgICAgICAgICAgICAgIGxhc3RQb3NpdGlvbjogbGFzdFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIHNob3dBcnJvd3M6IHNob3dBcnJvd3NcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICB0aGlzLnNldE1vdW50U3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7IGhhc01vdW50OiB0cnVlIH0pO1xuICAgICAgICBfdGhpczMudXBkYXRlU2l6ZXMoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5oYW5kbGVDbGlja0l0ZW0gPSBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0sIGUpIHtcbiAgICAgICAgaWYgKCFlLmtleUNvZGUgfHwgZS5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gX3RoaXMzLnByb3BzLm9uU2VsZWN0SXRlbTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcihpbmRleCwgaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5vblN3aXBlU3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzd2lwaW5nOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICB0aGlzLm9uU3dpcGVFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzd2lwaW5nOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5vblN3aXBlTW92ZSA9IGZ1bmN0aW9uIChkZWx0YVgpIHtcbiAgICAgICAgdmFyIGxlZnRCb3VuZGFyeSA9IDA7XG5cbiAgICAgICAgdmFyIGN1cnJlbnRQb3NpdGlvbiA9IC1fdGhpczMuc3RhdGUuZmlyc3RJdGVtICogX3RoaXMzLnN0YXRlLml0ZW1TaXplO1xuICAgICAgICB2YXIgbGFzdExlZnRCb3VuZGFyeSA9IC1fdGhpczMuc3RhdGUudmlzaWJsZUl0ZW1zICogX3RoaXMzLnN0YXRlLml0ZW1TaXplO1xuXG4gICAgICAgIC8vIHByZXZlbnQgdXNlciBmcm9tIHN3aXBpbmcgbGVmdCBvdXQgb2YgYm91bmRhcmllc1xuICAgICAgICBpZiAoY3VycmVudFBvc2l0aW9uID09PSBsZWZ0Qm91bmRhcnkgJiYgZGVsdGFYID4gMCkge1xuICAgICAgICAgICAgZGVsdGFYID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByZXZlbnQgdXNlciBmcm9tIHN3aXBpbmcgcmlnaHQgb3V0IG9mIGJvdW5kYXJpZXNcbiAgICAgICAgaWYgKGN1cnJlbnRQb3NpdGlvbiA9PT0gbGFzdExlZnRCb3VuZGFyeSAmJiBkZWx0YVggPCAwKSB7XG4gICAgICAgICAgICBkZWx0YVggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdyYXBwZXJTaXplID0gX3RoaXMzLml0ZW1zV3JhcHBlclJlZi5jbGllbnRXaWR0aDtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gY3VycmVudFBvc2l0aW9uICsgMTAwIC8gKHdyYXBwZXJTaXplIC8gZGVsdGFYKSArICclJztcblxuICAgICAgICAvLyBpZiAzZCBpc24ndCBhdmFpbGFibGUgd2Ugd2lsbCB1c2UgbGVmdCB0byBtb3ZlXG4gICAgICAgIGlmIChfdGhpczMuaXRlbXNMaXN0UmVmKSB7XG4gICAgICAgICAgICBbJ1dlYmtpdFRyYW5zZm9ybScsICdNb3pUcmFuc2Zvcm0nLCAnTXNUcmFuc2Zvcm0nLCAnT1RyYW5zZm9ybScsICd0cmFuc2Zvcm0nLCAnbXNUcmFuc2Zvcm0nXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMzLml0ZW1zTGlzdFJlZi5zdHlsZVtwcm9wXSA9ICgwLCBfQ1NTVHJhbnNsYXRlMi5kZWZhdWx0KShwb3NpdGlvbiwgX3RoaXMzLnByb3BzLmF4aXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zbGlkZVJpZ2h0ID0gZnVuY3Rpb24gKHBvc2l0aW9ucykge1xuICAgICAgICBfdGhpczMubW92ZVRvKF90aGlzMy5zdGF0ZS5maXJzdEl0ZW0gLSAodHlwZW9mIHBvc2l0aW9ucyA9PT0gJ251bWJlcicgPyBwb3NpdGlvbnMgOiAxKSk7XG4gICAgfTtcblxuICAgIHRoaXMuc2xpZGVMZWZ0ID0gZnVuY3Rpb24gKHBvc2l0aW9ucykge1xuICAgICAgICBfdGhpczMubW92ZVRvKF90aGlzMy5zdGF0ZS5maXJzdEl0ZW0gKyAodHlwZW9mIHBvc2l0aW9ucyA9PT0gJ251bWJlcicgPyBwb3NpdGlvbnMgOiAxKSk7XG4gICAgfTtcblxuICAgIHRoaXMubW92ZVRvID0gZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICAgIC8vIHBvc2l0aW9uIGNhbid0IGJlIGxvd2VyIHRoYW4gMFxuICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uIDwgMCA/IDAgOiBwb3NpdGlvbjtcbiAgICAgICAgLy8gcG9zaXRpb24gY2FuJ3QgYmUgaGlnaGVyIHRoYW4gbGFzdCBwb3N0aW9uXG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPj0gX3RoaXMzLmxhc3RQb3NpdGlvbiA/IF90aGlzMy5sYXN0UG9zaXRpb24gOiBwb3NpdGlvbjtcblxuICAgICAgICBfdGhpczMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZmlyc3RJdGVtOiBwb3NpdGlvbixcbiAgICAgICAgICAgIC8vIGlmIGl0J3Mgbm90IGEgc2xpZGVyLCB3ZSBkb24ndCBuZWVkIHRvIHNldCBwb3NpdGlvbiBoZXJlXG4gICAgICAgICAgICBzZWxlY3RlZEl0ZW06IF90aGlzMy5zdGF0ZS5zZWxlY3RlZEl0ZW1cbiAgICAgICAgfSk7XG4gICAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRodW1iczsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg0ODEpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDI2MCk7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoNDc4KTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgxODYpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zY3JvbGxiYXIgPSByZXF1aXJlKCcuL3Njcm9sbGJhcicpO1xuXG52YXIgX3Njcm9sbGJhcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zY3JvbGxiYXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfc2Nyb2xsYmFyMi5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMjQ2KTsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI2YTUwY2IzMGU2ZDA0NjRhYmE0NWVjMTQyNjMwNThkMi5qcGdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkMWMzN2VjOThlNjk1MDhjYjMwMmFjZGQ0ZTIwODI0MC5qcGdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgxODkpOyIsIid1c2Ugc3RyaWN0J1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZm9ybWlrLmNqcy5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZm9ybWlrLmNqcy5kZXZlbG9wbWVudC5qcycpO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRGVib3VuY2VDYWNoZSA9IGV4cG9ydHMub25seVJlc29sdmVzTGFzdCA9IGV4cG9ydHMuZGVib3VuY2UgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfZGVib3VuY2VQcm9taXNlID0gcmVxdWlyZSgnZGVib3VuY2UtcHJvbWlzZScpO1xuXG52YXIgX2RlYm91bmNlUHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJvdW5jZVByb21pc2UpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vLyBXZSB1c2UgRGVib3VuY2VQcm9taXNlIGFzIGEgZGVwZW5kZW5jeSBhcyBpdCBkb2VzIGEgZ3JlYXQgbG93LWxldmVsIGpvYlxuLy8gVGhlIGJlaGF2aW9yIG9mIHRoZSBsaWIgaXMgdG8gcmV0dXJuIHRoZSBzYW1lIHByb21pc2UgZm9yIGFsbCBmdW5jdGlvbiBjYWxsc1xudmFyIGRlYm91bmNlID0gZXhwb3J0cy5kZWJvdW5jZSA9IGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuICgwLCBfZGVib3VuY2VQcm9taXNlMi5kZWZhdWx0KShmdW5jLCB3YWl0LCBvcHRpb25zKTtcbn07XG5cbi8vIEdpdmVuIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHByb21pc2VzLCB3cmFwIGl0IHNvIHRoYXQgb25seSB0aGUgcHJvbWlzZSByZXR1cm5lZCBmcm9tIGxhc3QgY2FsbCB3aWxsIGFjdHVhbGx5IHJlc29sdmVcbi8vIFRoaXMgaXMgdXNlZnVsIHRvIGlnbm9yZSBmb3JtZXIgYXN5bmMgcmVzdWx0cyBhbmQgaGFuZGxlIGNvbmN1cnJlbmN5IGlzc3Vlc1xudmFyIG9ubHlSZXNvbHZlc0xhc3QgPSBleHBvcnRzLm9ubHlSZXNvbHZlc0xhc3QgPSBmdW5jdGlvbiBvbmx5UmVzb2x2ZXNMYXN0KGFzeW5jRnVuY3Rpb24pIHtcbiAgLy8gSW5zcGlyZWQgZnJvbSBodHRwczovL3JlYWN0anMub3JnL2Jsb2cvMjAxNS8xMi8xNi9pc21vdW50ZWQtYW50aXBhdHRlcm4uaHRtbFxuICB2YXIgbWFrZUNhbmNlbGFibGUgPSBmdW5jdGlvbiBtYWtlQ2FuY2VsYWJsZShwcm9taXNlKSB7XG4gICAgdmFyIGhhc0NhbmNlbGVkXyA9IGZhbHNlO1xuICAgIHZhciB3cmFwcGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiBoYXNDYW5jZWxlZF8gPyB1bmRlZmluZWQgOiByZXNvbHZlKHZhbCk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGhhc0NhbmNlbGVkXyA/IHVuZGVmaW5lZCA6IHJlamVjdChlcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvbWlzZTogd3JhcHBlZFByb21pc2UsXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaGFzQ2FuY2VsZWRfID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBjYW5jZWxQcmV2aW91cyA9IHZvaWQgMDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjYW5jZWxQcmV2aW91cyAmJiBjYW5jZWxQcmV2aW91cygpO1xuXG4gICAgdmFyIF9tYWtlQ2FuY2VsYWJsZSA9IG1ha2VDYW5jZWxhYmxlKGFzeW5jRnVuY3Rpb24uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKSxcbiAgICAgICAgcHJvbWlzZSA9IF9tYWtlQ2FuY2VsYWJsZS5wcm9taXNlLFxuICAgICAgICBjYW5jZWwgPSBfbWFrZUNhbmNlbGFibGUuY2FuY2VsO1xuXG4gICAgY2FuY2VsUHJldmlvdXMgPSBjYW5jZWw7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG59O1xuXG4vLyBXZSBjcmVhdGUgYSBkZWJvdW5jaW5nIGZ1bmN0aW9uIGNhY2hlLCBiZWNhdXNlIHdoZW4gd3JhcHBpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLFxuLy8gd2UgbWF5IGFjdHVhbGx5IHdhbnQgdG8gcm91dGUgdGhlIGZ1bmN0aW9uIGNhbGwgdG8gZGlmZmVyZW50IGRlYm91bmNlZCBmdW5jdGlvbnMgZGVwZW5kaW5nIGZ1bmN0aW9uIHBhYW1ldGVyc1xuXG52YXIgRGVib3VuY2VDYWNoZSA9IGV4cG9ydHMuRGVib3VuY2VDYWNoZSA9IGZ1bmN0aW9uIERlYm91bmNlQ2FjaGUoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlYm91bmNlQ2FjaGUpO1xuXG4gIHRoaXMuZ2V0RGVib3VuY2VkRnVuY3Rpb24gPSBmdW5jdGlvbiAoZnVuYywgd2FpdCwgb3B0aW9ucywgYXJncykge1xuICAgIHZhciBrZXlPcHRpb25zID0gb3B0aW9ucy5rZXksXG4gICAgICAgIG9ubHlSZXNvbHZlc0xhc3RPcHRpb24gPSBvcHRpb25zLm9ubHlSZXNvbHZlc0xhc3QsXG4gICAgICAgIG90aGVyT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbJ2tleScsICdvbmx5UmVzb2x2ZXNMYXN0J10pO1xuXG4gICAgdmFyIGtleSA9IGtleU9wdGlvbnMuYXBwbHkodW5kZWZpbmVkLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICAgIC8vIElmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gZG9lcyBub3QgZXhpc3QgZm9yIHRoaXMga2V5LCB3ZSBjcmVhdGUgb25lIG9uIHRoZSBmbHkgYW5kIHJldHVybiBpdFxuICAgIGlmICghX3RoaXMuZGVib3VuY2VDYWNoZVtrZXldKSB7XG4gICAgICB2YXIgZGVib3VuY2VkRnVuYyA9IGRlYm91bmNlKGZ1bmMsIHdhaXQsIG90aGVyT3B0aW9ucyk7XG4gICAgICBpZiAob25seVJlc29sdmVzTGFzdE9wdGlvbikge1xuICAgICAgICBkZWJvdW5jZWRGdW5jID0gb25seVJlc29sdmVzTGFzdChkZWJvdW5jZWRGdW5jKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLmRlYm91bmNlQ2FjaGVba2V5XSA9IGRlYm91bmNlZEZ1bmM7XG4gICAgfVxuICAgIHJldHVybiBfdGhpcy5kZWJvdW5jZUNhY2hlW2tleV07XG4gIH07XG5cbiAgdGhpcy5kZWJvdW5jZUNhY2hlID0ge307XG59O1xuXG52YXIgRGVmYXVsdE9wdGlvbnMgPSB7XG4gIC8vIEJ5IGRlZmF1bHQsIHRoZSBrZXkgaXMgbnVsbCwgd2hpY2ggbWVhbnMgdGhhdCBhbGwgdGhlIGZ1bmN0aW9uIGNhbGxzXG4gIC8vIHdpbGwgc2hhcmUgdGhlIHNhbWUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gIC8vIFByb3ZpZGluZyBhIGtleSBmdW5jdGlvbiBwZXJtaXQgdG8gdXNlIHRoZSBjYWxsIGFyZ3VtZW50c1xuICAvLyBhbmQgcm91dGUgdG8gYSBkaXN0aW5jdCBkZWJvdW5jZWQgZnVuY3Rpb25cbiAga2V5OiBmdW5jdGlvbiBrZXkoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLy8gQnkgZGVmYXVsdCwgYSBkZWJvdW5jZWQgZnVuY3Rpb24gd2lsbCBvbmx5IHJlc29sdmVcbiAgLy8gdGhlIGxhc3QgcHJvbWlzZSBpdCByZXR1cm5lZFxuICAvLyBGb3JtZXIgY2FsbHMgd2lsbCBzdGF5IHVucmVzb2x2ZWQsIHNvIHRoYXQgeW91IGRvbid0IGhhdmVcbiAgLy8gdG8gaGFuZGxlIGNvbmN1cnJlbmN5IGlzc3VlcyBpbiB5b3VyIGNvZGVcbiAgb25seVJlc29sdmVzTGFzdDogdHJ1ZVxufTtcblxuZnVuY3Rpb24gQXdlc29tZURlYm91bmNlUHJvbWlzZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBmaW5hbE9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgRGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICB2YXIgZGVib3VuY2VDYWNoZSA9IG5ldyBEZWJvdW5jZUNhY2hlKCk7XG4gIHJldHVybiBmdW5jdGlvbiBBd2Vzb21lRGVib3VuY2VQcm9taXNlV3JhcHBlcigpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVib3VuY2VkRm4gPSBkZWJvdW5jZUNhY2hlLmdldERlYm91bmNlZEZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGZpbmFsT3B0aW9ucywgYXJncyk7XG4gICAgcmV0dXJuIGRlYm91bmNlZEZuLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gIH07XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEF3ZXNvbWVEZWJvdW5jZVByb21pc2U7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgzMDkpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKFwid2FybmluZ1wiKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKFwicHJvcC10eXBlc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9oaXN0b3J5ID0gcmVxdWlyZShcImhpc3RvcnlcIik7XG5cbnZhciBfUm91dGVyID0gcmVxdWlyZShcIi4vUm91dGVyXCIpO1xuXG52YXIgX1JvdXRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cbnZhciBCcm93c2VyUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcm93c2VyUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gKDAsIF9oaXN0b3J5LmNyZWF0ZUJyb3dzZXJIaXN0b3J5KShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Sb3V0ZXIyLmRlZmF1bHQsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGZvcmNlUmVmcmVzaDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGtleUxlbmd0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGVcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBCcm93c2VyUm91dGVyOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDE0MCk7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMTQxKTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoX0RPTVV0aWxzLmNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gKDAsIF9ET01VdGlscy5zdXBwb3J0c0hpc3RvcnkpKCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICEoMCwgX0RPTVV0aWxzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UpKCk7XG5cbiAgdmFyIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBwcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gX0RPTVV0aWxzLmdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCFiYXNlbmFtZSB8fCAoMCwgX1BhdGhVdGlscy5oYXNCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLnN0cmlwQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoKDAsIF9ET01VdGlscy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KShldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbnZhciBfRE9NVXRpbHMgPSByZXF1aXJlKCcuL0RPTVV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyAoMCwgX1BhdGhVdGlscy5zdHJpcExlYWRpbmdTbGFzaCkocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKF9ET01VdGlscy5jYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gKDAsIF9ET01VdGlscy5zdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCkoKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBwcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB1bmRlZmluZWQgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gKDAsIF9QYXRoVXRpbHMuc3RyaXBUcmFpbGluZ1NsYXNoKSgoMCwgX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gpKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghYmFzZW5hbWUgfHwgKDAsIF9QYXRoVXRpbHMuaGFzQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcEJhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgKDAsIF9Mb2NhdGlvblV0aWxzLmxvY2F0aW9uc0FyZUVxdWFsKShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaW5pdGlhbExvY2F0aW9uKV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShoaXN0b3J5LmxvY2F0aW9uKSk7XG5cbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlSGFzaEhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikoZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gX1BhdGhVdGlscy5jcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGNhbkdvID0gZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlTWVtb3J5SGlzdG9yeTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg4Nyk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoXCJ3YXJuaW5nXCIpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2hpc3RvcnkgPSByZXF1aXJlKFwiaGlzdG9yeVwiKTtcblxudmFyIF9Sb3V0ZXIgPSByZXF1aXJlKFwiLi9Sb3V0ZXJcIik7XG5cbnZhciBfUm91dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cbnZhciBIYXNoUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIYXNoUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gKDAsIF9oaXN0b3J5LmNyZWF0ZUhhc2hIaXN0b3J5KShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Sb3V0ZXIyLmRlZmF1bHQsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGdldFVzZXJDb25maXJtYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgaGFzaFR5cGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pLFxuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gSGFzaFJvdXRlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9NZW1vcnlSb3V0ZXIgPSByZXF1aXJlKFwicmVhY3Qtcm91dGVyL01lbW9yeVJvdXRlclwiKTtcblxudmFyIF9NZW1vcnlSb3V0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWVtb3J5Um91dGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX01lbW9yeVJvdXRlcjIuZGVmYXVsdDsgLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHMiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgyODQpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX1JvdXRlID0gcmVxdWlyZShcIi4vUm91dGVcIik7XG5cbnZhciBfUm91dGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGUpO1xuXG52YXIgX0xpbmsgPSByZXF1aXJlKFwiLi9MaW5rXCIpO1xuXG52YXIgX0xpbmsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGluayk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xudmFyIE5hdkxpbmsgPSBmdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIHRvID0gX3JlZi50byxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGdldElzQWN0aXZlID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1widG9cIiwgXCJleGFjdFwiLCBcInN0cmljdFwiLCBcImxvY2F0aW9uXCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiY2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJzdHlsZVwiLCBcImlzQWN0aXZlXCIsIFwiYXJpYS1jdXJyZW50XCJdKTtcblxuICB2YXIgcGF0aCA9ICh0eXBlb2YgdG8gPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0bykpID09PSBcIm9iamVjdFwiID8gdG8ucGF0aG5hbWUgOiB0bztcblxuICAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUm91dGUyLmRlZmF1bHQsIHtcbiAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICBleGFjdDogZXhhY3QsXG4gICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihfcmVmMikge1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3JlZjIubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2ggPSBfcmVmMi5tYXRjaDtcblxuICAgICAgdmFyIGlzQWN0aXZlID0gISEoZ2V0SXNBY3RpdmUgPyBnZXRJc0FjdGl2ZShtYXRjaCwgbG9jYXRpb24pIDogbWF0Y2gpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xpbmsyLmRlZmF1bHQsIF9leHRlbmRzKHtcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBjbGFzc05hbWU6IGlzQWN0aXZlID8gW2NsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lXS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkuam9pbihcIiBcIikgOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZSwgYWN0aXZlU3R5bGUpIDogc3R5bGUsXG4gICAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGxcbiAgICAgIH0sIHJlc3QpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gIHRvOiBfTGluazIuZGVmYXVsdC5wcm9wVHlwZXMudG8sXG4gIGV4YWN0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHN0cmljdDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBsb2NhdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIGFjdGl2ZUNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGFjdGl2ZVN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICBpc0FjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBcImFyaWEtY3VycmVudFwiOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIl0pXG59O1xuXG5OYXZMaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlQ2xhc3NOYW1lOiBcImFjdGl2ZVwiLFxuICBcImFyaWEtY3VycmVudFwiOiBcInBhZ2VcIlxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTmF2TGluazsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgxNTQpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX1Byb21wdCA9IHJlcXVpcmUoXCJyZWFjdC1yb3V0ZXIvUHJvbXB0XCIpO1xuXG52YXIgX1Byb21wdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcm9tcHQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfUHJvbXB0Mi5kZWZhdWx0OyAvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0cyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDI4OCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfUmVkaXJlY3QgPSByZXF1aXJlKFwicmVhY3Qtcm91dGVyL1JlZGlyZWN0XCIpO1xuXG52YXIgX1JlZGlyZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlZGlyZWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX1JlZGlyZWN0Mi5kZWZhdWx0OyAvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0cyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDI4OSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfU3RhdGljUm91dGVyID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci9TdGF0aWNSb3V0ZXJcIik7XG5cbnZhciBfU3RhdGljUm91dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0YXRpY1JvdXRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9TdGF0aWNSb3V0ZXIyLmRlZmF1bHQ7IC8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMjkxKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9Td2l0Y2ggPSByZXF1aXJlKFwicmVhY3Qtcm91dGVyL1N3aXRjaFwiKTtcblxudmFyIF9Td2l0Y2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3dpdGNoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX1N3aXRjaDIuZGVmYXVsdDsgLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHMiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgyOTIpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2dlbmVyYXRlUGF0aCA9IHJlcXVpcmUoXCJyZWFjdC1yb3V0ZXIvZ2VuZXJhdGVQYXRoXCIpO1xuXG52YXIgX2dlbmVyYXRlUGF0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZW5lcmF0ZVBhdGgpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfZ2VuZXJhdGVQYXRoMi5kZWZhdWx0OyAvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0cyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDE1Mik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfbWF0Y2hQYXRoID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci9tYXRjaFBhdGhcIik7XG5cbnZhciBfbWF0Y2hQYXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hdGNoUGF0aCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9tYXRjaFBhdGgyLmRlZmF1bHQ7IC8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoODgpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3dpdGhSb3V0ZXIgPSByZXF1aXJlKFwicmVhY3Qtcm91dGVyL3dpdGhSb3V0ZXJcIik7XG5cbnZhciBfd2l0aFJvdXRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aXRoUm91dGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX3dpdGhSb3V0ZXIyLmRlZmF1bHQ7IC8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMjkzKTsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBVbml0eVZlcnNpb25fMSA9IHJlcXVpcmUoXCIuL2VudW1zL1VuaXR5VmVyc2lvblwiKTtcbnJlcXVpcmUoXCIuL1R5cGVzXCIpO1xudmFyIFVuaXR5Q29udGVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFVuaXR5IGNvbnRlbnQgb2JqZWN0LiBUaGlzIG9iamVjdCBjYW4gYmUgdXNlZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZEpzb25QYXRoIHRoZSByZWxhdGl2ZSBwYXRoIHRvIHRoZSBidWlsZCBqc29uIGZpbGUgZ2VuZXJhdGVkIGJ5IFVuaXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0eUxvYWRlckpzUGF0aCB0aGUgcmVsYXRpdmUgcGF0aCB0byB0aGUgdW5pdHkgbG9hZGVyIGphdmFzY3JpcHQgZmlsZS5cbiAgICAgKiBAcGFyYW0ge0lVbml0eUNvbmZpZ30gdW5pdHlDb25maWcgdGhlIFVuaXR5IGNvbmZpZ3VyYXRpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gc3RhcnQgdGhlIHBsYXllci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBVbml0eUNvbnRlbnQoYnVpbGRKc29uUGF0aCwgdW5pdHlMb2FkZXJKc1BhdGgsIHVuaXR5Q29uZmlnKSB7XG4gICAgICAgIHZhciBfdW5pdHlDb25maWcgPSB1bml0eUNvbmZpZyB8fCB7fTtcbiAgICAgICAgdGhpcy5idWlsZEpzb25QYXRoID0gYnVpbGRKc29uUGF0aDtcbiAgICAgICAgdGhpcy51bml0eUxvYWRlckpzUGF0aCA9IHVuaXR5TG9hZGVySnNQYXRoO1xuICAgICAgICB0aGlzLnVuaXF1ZUlEID0gKytVbml0eUNvbnRlbnQudW5pcXVlSUQ7XG4gICAgICAgIHRoaXMudW5pdHlFdmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy51bml0eUNvbmZpZyA9IHtcbiAgICAgICAgICAgIG1vZHVsZXM6IF91bml0eUNvbmZpZy5tb2R1bGVzIHx8IHt9LFxuICAgICAgICAgICAgdW5pdHlWZXJzaW9uOiBfdW5pdHlDb25maWcudW5pdHlWZXJzaW9uIHx8IFVuaXR5VmVyc2lvbl8xLlVuaXR5VmVyc2lvbi5VTklUWV8yMDE4LFxuICAgICAgICAgICAgYWRqdXN0T25XaW5kb3dSZXNpemU6IF91bml0eUNvbmZpZy5hZGp1c3RPbldpbmRvd1Jlc2l6ZSxcbiAgICAgICAgICAgIGlkOiBfdW5pdHlDb25maWcuaWQgfHwgXCJuaWxsXCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQmluZHMgYSB1bml0eSBjb21wb25lbnQgdG8gdGhpcyBjb250ZW50LlxuICAgICAqIEBwYXJhbSB1bml0eUNvbXBvbmVudEluc3RhbmNlIHRoZSB1bml0eSBjb21wb25lbnQgdGhhdCB3aWxsIGJlIGJpbmRlZCB0byB0aGlzIGNvbnRlbnQuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIFVuaXR5Q29udGVudC5wcm90b3R5cGUuc2V0Q29tcG9uZW50SW5zdGFuY2UgPSBmdW5jdGlvbiAodW5pdHlDb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgICB0aGlzLnVuaXR5Q29tcG9uZW50ID0gdW5pdHlDb21wb25lbnRJbnN0YW5jZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEJpbmRzIGEgdW5pdHkgcGxheWVyIHRvIHRoaXMgY29udGVudC5cbiAgICAgKiBAcGFyYW0gdW5pdHlQbGF5ZXJJbnN0YW5jZSB0aGUgdW5pdHkgY29tcG9uZW50IHRoYXQgd2lsbCBiZSBiaW5kZWQgdG8gdGhpcyBjb250ZW50LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBVbml0eUNvbnRlbnQucHJvdG90eXBlLnNldFVuaXR5SW5zdGFuY2UgPSBmdW5jdGlvbiAodW5pdHlJbnN0YW5jZSkge1xuICAgICAgICB0aGlzLnVuaXR5SW5zdGFuY2UgPSB1bml0eUluc3RhbmNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdW5pdHkgcGxheWVycyBmdWxsc2NyZWVuIG1vZGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmdWxsc2NyZWVuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIFVuaXR5Q29udGVudC5wcm90b3R5cGUuc2V0RnVsbHNjcmVlbiA9IGZ1bmN0aW9uIChmdWxsc2NyZWVuKSB7XG4gICAgICAgIGlmICh0aGlzLnVuaXR5SW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51bml0eUluc3RhbmNlLlNldEZ1bGxzY3JlZW4oZnVsbHNjcmVlbiA9PT0gdHJ1ZSA/IDEgOiAwKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VuZHMgYW4gZXZlbnQgdG8gdGhlIFVuaXR5IHBsYXllciB0aGF0IHdpbGwgdHJpZ2dlciBhIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBnYW1lT2JqZWN0TmFtZSB0aGUgbmFtZSBvZiB0aGUgZ2FtZSBvYmplY3QgaW4geW91ciBVbml0eSBzY2VuZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSB0aGUgbmFtZSBvZiB0aGUgcHVibGljIG1ldGhvZCBvbiB0aGUgZ2FtZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHthbnl9IHBhcmFtZXRlciBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgdG8gcGFzcyBhbG9uZyB0byB0aGUgbWV0aG9kLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBVbml0eUNvbnRlbnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZ2FtZU9iamVjdE5hbWUsIG1ldGhvZE5hbWUsIHBhcmFtZXRlcikge1xuICAgICAgICBpZiAodGhpcy51bml0eUluc3RhbmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1ldGVyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bml0eUluc3RhbmNlLlNlbmRNZXNzYWdlKGdhbWVPYmplY3ROYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudW5pdHlJbnN0YW5jZS5TZW5kTWVzc2FnZShnYW1lT2JqZWN0TmFtZSwgbWV0aG9kTmFtZSwgcGFyYW1ldGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGFuIGV2ZW50IGxpc3RlbmVyIGZvciB0aGUgVW5pdHkgcGxheWVyLiBUaGVzZSBjYW4gYmVcbiAgICAgKiBzeXN0ZW0gZXZlbnRzIGxpa2Ugd2hlbiB0aGUgcGxheWVyIGlzIGluaXRpYWxpemVkIG9yIGxvYWRlciBhbmRcbiAgICAgKiB5b3VyIGN1c3RvbSBldmVudHMgZnJvbSBVbml0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIHRoZSBldmVudCBuYW1lXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXZlbnRDYWxsYmFjayB0aGUgZXZlbnQgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7YW55fSBUaGUgRnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgVW5pdHlDb250ZW50LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGV2ZW50Q2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy51bml0eUV2ZW50cy5wdXNoKHtcbiAgICAgICAgICAgIGV2ZW50TmFtZTogZXZlbnROYW1lLFxuICAgICAgICAgICAgZXZlbnRDYWxsYmFjazogZXZlbnRDYWxsYmFja1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuUmVhY3RVbml0eVdlYkdMID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgd2luZG93LlJlYWN0VW5pdHlXZWJHTCA9IHt9O1xuICAgICAgICB3aW5kb3cuUmVhY3RVbml0eVdlYkdMW2V2ZW50TmFtZV0gPSBmdW5jdGlvbiAocGFyYW1ldGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRDYWxsYmFjayhwYXJhbWV0ZXIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgYW4gZXZlbnQgdGhhdCBoYXMgYmVlbiByZWdpc3RlcmVkIGJ5IHRoZSBvblxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgdGhlIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBldmVudFZhbHVlIHRoZSBldmVudCB2YWx1ZVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBVbml0eUNvbnRlbnQucHJvdG90eXBlLnRyaWdnZXJVbml0eUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZXZlbnRWYWx1ZSkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdGhpcy51bml0eUV2ZW50cy5sZW5ndGg7IF9pKyspXG4gICAgICAgICAgICBpZiAodGhpcy51bml0eUV2ZW50c1tfaV0uZXZlbnROYW1lID09PSBldmVudE5hbWUpXG4gICAgICAgICAgICAgICAgdGhpcy51bml0eUV2ZW50c1tfaV0uZXZlbnRDYWxsYmFjayhldmVudFZhbHVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHRoZSBzdGF0aXMgdW5pcXVlIElEIGtlZXBzIHRyYWNrIG9mIHRoZVxuICAgICAqIHVuaXF1ZSBJRCdzIG1hZGUgYnkgb3RoZXIgaW5zdGFuY2VzLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBVbml0eUNvbnRlbnQudW5pcXVlSUQgPSAwO1xuICAgIHJldHVybiBVbml0eUNvbnRlbnQ7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVW5pdHlDb250ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5pdHlDb250ZW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XG4gICAgcmVzdWx0W1wiZGVmYXVsdFwiXSA9IG1vZDtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBSZWFjdCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIFVuaXR5TG9hZGVyU2VydmljZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zZXJ2aWNlcy9Vbml0eUxvYWRlclNlcnZpY2VcIikpO1xucmVxdWlyZShcIi4uL1R5cGVzXCIpO1xudmFyIFVuaXR5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhVbml0eSwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplZCB0aGUgY29tcG9uZW50LlxuICAgICAqIEBwYXJhbSB7SVVuaXR5UHJvcHN9IHByb3BzXG4gICAgICovXG4gICAgZnVuY3Rpb24gVW5pdHkocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY29tcG9uZW50IHN0YXRlLlxuICAgICAgICAgKiBAdHlwZSB7SVVuaXR5U3RhdGV9XG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLnN0YXRlID0ge307XG4gICAgICAgIF90aGlzLnVuaXR5TG9hZGVyU2VydmljZSA9IG5ldyBVbml0eUxvYWRlclNlcnZpY2VfMS5kZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLm9uV2luZG93UmVzaXplQmluZGluZyA9IF90aGlzLm9uV2luZG93UmVzaXplLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy51bml0eUNvbnRlbnQgPSBfdGhpcy5wcm9wcy51bml0eUNvbnRlbnQ7XG4gICAgICAgIF90aGlzLnVuaXR5Q29udGVudC5zZXRDb21wb25lbnRJbnN0YW5jZShfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgdGhhdCBpcyB0cmlnZ2VyZWQgYnkgdGhlIFVuaXR5IHBsYXllci4gVGhpcyB0cmFja3NcbiAgICAgKiB0aGUgbG9hZGluZyBwcm9ncmVzc2lvbiBvZiB0aGUgcGxheWVyLiBJdCB3aWxsIHNlbmQgJzEnIHdoZW5cbiAgICAgKiB0aGUgbG9hZGluZyBpcyBjb21wbGV0ZWQuXG4gICAgICogQHBhcmFtIHtVbml0eUluc3RhbmNlfSB1bml0eUluc3RhbmNlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHByb2dyZXNzaW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBVbml0eS5wcm90b3R5cGUub25Qcm9ncmVzcyA9IGZ1bmN0aW9uICh1bml0eUluc3RhbmNlLCBwcm9ncmVzc2lvbikge1xuICAgICAgICB0aGlzLnVuaXR5Q29udGVudC50cmlnZ2VyVW5pdHlFdmVudChcInByb2dyZXNzXCIsIHByb2dyZXNzaW9uKTtcbiAgICAgICAgaWYgKHByb2dyZXNzaW9uID09PSAxKVxuICAgICAgICAgICAgdGhpcy51bml0eUNvbnRlbnQudHJpZ2dlclVuaXR5RXZlbnQoXCJsb2FkZWRcIik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSB3aW5kb3cgaXMgcmVzaXplZC5cbiAgICAgKi9cbiAgICBVbml0eS5wcm90b3R5cGUub25XaW5kb3dSZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnVuaXR5Q29udGVudC51bml0eUNvbmZpZy5hZGp1c3RPbldpbmRvd1Jlc2l6ZSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHRoaXMuYWRqdXN0Q2FudmFzVG9Db250YWluZXIoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNpbmNlIHRoZSBVbml0eSBjYW52YXMgaXRzZWxmIGRvZXMgbm90IHJlc3BvbmQgdG8gdGhlIHJlc2l6aW5nXG4gICAgICogb2YgaXQncyBjb250YWluZXIgd2UgaGF2ZSB0byBtYW51YWxseSBkbyB0aGlzLiBBIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgKiBvZiAxMDAlIGRvZXMgbm90IHNlZW0gdG8gd29yaywgc28gd2UgaGF2ZSB0byBmZXRjaCBpdCdzIHBhcmVudCdzXG4gICAgICogc2l6ZSB0byBhZGplY3QgdGhlIGNhbnZhcy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFVuaXR5LnByb3RvdHlwZS5hZGp1c3RDYW52YXNUb0NvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF93aWR0aCA9IHRoaXMuaHRtbEVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgIHZhciBfaGVpZ2h0ID0gdGhpcy5odG1sRWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHZhciBfY2FudmFzID0gdGhpcy5odG1sRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImNhbnZhc1wiKVswXTtcbiAgICAgICAgaWYgKF9jYW52YXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChfY2FudmFzLmhlaWdodCAhPT0gX2hlaWdodCkge1xuICAgICAgICAgICAgICAgIF9jYW52YXMuaGVpZ2h0ID0gX2hlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfY2FudmFzLndpZHRoICE9PSBfd2lkdGgpIHtcbiAgICAgICAgICAgICAgICBfY2FudmFzLndpZHRoID0gX3dpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsemllZCB0aGUgVW5pdHkgcGxheWVyIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBVbml0eS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMub25XaW5kb3dSZXNpemVCaW5kaW5nKTtcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIHRoaXMudW5pdHlMb2FkZXJTZXJ2aWNlLmFwcGVuZCh0aGlzLnByb3BzLnVuaXR5Q29udGVudC51bml0eUxvYWRlckpzUGF0aCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMudW5pdHlDb250ZW50LnNldFVuaXR5SW5zdGFuY2UoVW5pdHlMb2FkZXIuaW5zdGFudGlhdGUoXCJfX1JlYWN0VW5pdHlXZWJHTF9cIiArIF90aGlzLnByb3BzLnVuaXR5Q29udGVudC51bmlxdWVJRCArIFwiX19cIiwgX3RoaXMucHJvcHMudW5pdHlDb250ZW50LmJ1aWxkSnNvblBhdGgsIHtcbiAgICAgICAgICAgICAgICBvblByb2dyZXNzOiBfdGhpcy5vblByb2dyZXNzLmJpbmQoX3RoaXMpLFxuICAgICAgICAgICAgICAgIE1vZHVsZTogX3RoaXMucHJvcHMudW5pdHlDb250ZW50LnVuaXR5Q29uZmlnLm1vZHVsZXMsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCJcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXaWxsIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgYW5kIGNsZWFuIHVwIHN5c3RlbXMgd2hlbiB0aGVcbiAgICAgKiBjb21wb25lbnQgaXMgYWJvdXQgdG8gdW5tb3VudC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgVW5pdHkucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uV2luZG93UmVzaXplQmluZGluZyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIHRoZSB1bml0eSB3cmFwcGVyIGFuZCBwbGF5ZXIuXG4gICAgICogQHJldHVybnMge1JlYWN0LlJlYWN0Tm9kZX0gZWxlbWVudFxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBVbml0eS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lIHx8IFwiXCIsXG4gICAgICAgICAgICByZWY6IGZ1bmN0aW9uIChyZWYpIHsgcmV0dXJuIChfdGhpcy5odG1sRWxlbWVudCA9IHJlZik7IH0sXG4gICAgICAgICAgICBpZDogXCJfX1JlYWN0VW5pdHlXZWJHTF9cIiArIHRoaXMucHJvcHMudW5pdHlDb250ZW50LnVuaXF1ZUlEICsgXCJfX1wiLFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5wcm9wcy53aWR0aCB8fCBcIjgwMHB4XCIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnByb3BzLmhlaWdodCB8fCBcIjYwMHB4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gVW5pdHk7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVW5pdHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Vbml0eS5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNC4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaz1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIikscD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIikscT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsdD1yP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHU9cj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHY9cj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdz1yP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx4PXI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHk9cj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksej1yP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLEE9cj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxCPVxucj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTI7ciYmU3ltYm9sLmZvcihcInJlYWN0LnRpbWVvdXRcIik7dmFyIEM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxlPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTA7YzxiO2MrKyllKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtuKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9XG52YXIgRT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX07ZnVuY3Rpb24gRihhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxFfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0QoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBHKCl7fVxuRy5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxFfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtrKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXR9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZSxjKXtpZihQLmxlbmd0aCl7dmFyIGQ9UC5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fWZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgdDpjYXNlIHU6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitUKGQsaCk7Zys9UyhkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPUMmJmFbQ118fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksXG5oPTA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1QoZCxoKyspLGcrPVMoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsRChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBWKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1coYSxjLGUscS50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoTihhKSYmKGI9ZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrZSxhPXskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn0pLGMucHVzaChhKSl9ZnVuY3Rpb24gVyhhLGIsZSxjLGQpe3ZhciBnPVwiXCI7bnVsbCE9ZSYmKGc9KFwiXCIrZSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGMsZCk7bnVsbD09YXx8UyhhLFwiXCIsVixiKTtSKGIpfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VyhhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixlKTtudWxsPT1hfHxTKGEsXCJcIixVLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIscS50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VyhhLGIsbnVsbCxxLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe04oYSk/dm9pZCAwOkQoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkYsUHVyZUNvbXBvbmVudDpILGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp6LFxuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2RlZmF1bHRWYWx1ZTphLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF9jaGFuZ2VkQml0czowLF9jaGFuZ2VkQml0czI6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnksX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QixyZW5kZXI6YX19LEZyYWdtZW50OnYsU3RyaWN0TW9kZTp3LHVuc3RhYmxlX0FzeW5jTW9kZTpBLHVuc3RhYmxlX1Byb2ZpbGVyOngsY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7bnVsbD09PWF8fHZvaWQgMD09PWE/RChcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZD1rKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUouY3VycmVudCk7dm9pZCAwIT09XG5iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YylkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuNC4xXCIsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudE93bmVyOkosXG5hc3NpZ246a319LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdD9aLmRlZmF1bHQ6WjtcbiIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDU2KTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVW5pdHlMb2FkZXJTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFVuaXR5TG9hZGVyU2VydmljZSgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZmVyZW5jZSB0byB0aGUgZG9jdW1lbnQgaGVhZC5cbiAgICAgICAgICogQHR5cGUge0hUTUxIZWFkRWxlbWVudH1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZG9jdW1lbnRIZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIHRoZSBVbml0eSBsb2FkZXIgc2NyaXB0IHRvIHRoZSB3aW5kb3cuIFdoZW4gaXQncyBsb2FkZWQgYSBjYWxsYmFjayB3aWxsXG4gICAgICogYmUgdHJpZ2dlcmVkLiBOT1RFOiBUaGlzIGNhbid0IGJlIGEgcHJvbWlzc2UgZHVlIHRvIEphdmFTY3JpcHQgY29tcGF0aWJpbHR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgdGhlIHBhdGggdG8gdGhlIFVuaXR5IGxvYWRlciBmaWxlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb25Mb2FkIHdoZW4gdGhlIHNjcmlwdCBpcyBsb2FkZWRcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgVW5pdHlMb2FkZXJTZXJ2aWNlLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoc291cmNlLCBvbkxvYWQpIHtcbiAgICAgICAgdGhpcy51bml0eUxvYWRlclNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgIHRoaXMudW5pdHlMb2FkZXJTY3JpcHQudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG4gICAgICAgIHRoaXMudW5pdHlMb2FkZXJTY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgICB0aGlzLnVuaXR5TG9hZGVyU2NyaXB0LnNyYyA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy51bml0eUxvYWRlclNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvbkxvYWQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kb2N1bWVudEhlYWQuYXBwZW5kQ2hpbGQodGhpcy51bml0eUxvYWRlclNjcmlwdCk7XG4gICAgfTtcbiAgICByZXR1cm4gVW5pdHlMb2FkZXJTZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFVuaXR5TG9hZGVyU2VydmljZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuaXR5TG9hZGVyU2VydmljZS5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcGVyZmVjdFNjcm9sbGJhciA9IHJlcXVpcmUoJ3BlcmZlY3Qtc2Nyb2xsYmFyJyk7XG5cbnZhciBfcGVyZmVjdFNjcm9sbGJhcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wZXJmZWN0U2Nyb2xsYmFyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgaGFuZGxlck5hbWVCeUV2ZW50ID0ge1xuICAncHMtc2Nyb2xsLXknOiAnb25TY3JvbGxZJyxcbiAgJ3BzLXNjcm9sbC14JzogJ29uU2Nyb2xsWCcsXG4gICdwcy1zY3JvbGwtdXAnOiAnb25TY3JvbGxVcCcsXG4gICdwcy1zY3JvbGwtZG93bic6ICdvblNjcm9sbERvd24nLFxuICAncHMtc2Nyb2xsLWxlZnQnOiAnb25TY3JvbGxMZWZ0JyxcbiAgJ3BzLXNjcm9sbC1yaWdodCc6ICdvblNjcm9sbFJpZ2h0JyxcbiAgJ3BzLXktcmVhY2gtc3RhcnQnOiAnb25ZUmVhY2hTdGFydCcsXG4gICdwcy15LXJlYWNoLWVuZCc6ICdvbllSZWFjaEVuZCcsXG4gICdwcy14LXJlYWNoLXN0YXJ0JzogJ29uWFJlYWNoU3RhcnQnLFxuICAncHMteC1yZWFjaC1lbmQnOiAnb25YUmVhY2hFbmQnXG59O1xuT2JqZWN0LmZyZWV6ZShoYW5kbGVyTmFtZUJ5RXZlbnQpO1xuXG52YXIgU2Nyb2xsQmFyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNjcm9sbEJhciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2Nyb2xsQmFyKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbEJhcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2Nyb2xsQmFyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsQmFyKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuaGFuZGxlUmVmID0gX3RoaXMuaGFuZGxlUmVmLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLl9oYW5kbGVyQnlFdmVudCA9IHt9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTY3JvbGxCYXIsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuX3BzID0gbmV3IF9wZXJmZWN0U2Nyb2xsYmFyMi5kZWZhdWx0KHRoaXMuX2NvbnRhaW5lciwgdGhpcy5wcm9wcy5vcHRpb24pO1xuICAgICAgLy8gaG9vayB1cCBldmVudHNcbiAgICAgIHRoaXMuX3VwZGF0ZUV2ZW50SG9vaygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZUV2ZW50SG9vayhwcmV2UHJvcHMpO1xuICAgICAgdGhpcy5fcHMudXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAvLyB1bmhvb2sgdXAgZXZlbnNcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2hhbmRsZXJCeUV2ZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gX3RoaXMyLl9oYW5kbGVyQnlFdmVudFtrZXldO1xuXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIF90aGlzMi5fY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoa2V5LCB2YWx1ZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2hhbmRsZXJCeUV2ZW50ID0ge307XG4gICAgICB0aGlzLl9wcy5kZXN0cm95KCk7XG4gICAgICB0aGlzLl9wcyA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3VwZGF0ZUV2ZW50SG9vaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVFdmVudEhvb2soKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHByZXZQcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgIC8vIGhvb2sgdXAgZXZlbnRzXG4gICAgICBPYmplY3Qua2V5cyhoYW5kbGVyTmFtZUJ5RXZlbnQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBfdGhpczMucHJvcHNbaGFuZGxlck5hbWVCeUV2ZW50W2tleV1dO1xuICAgICAgICB2YXIgcHJldkNhbGxiYWNrID0gcHJldlByb3BzW2hhbmRsZXJOYW1lQnlFdmVudFtrZXldXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrICE9PSBwcmV2Q2FsbGJhY2spIHtcbiAgICAgICAgICBpZiAocHJldkNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgcHJldkhhbmRsZXIgPSBfdGhpczMuX2hhbmRsZXJCeUV2ZW50W2tleV07XG4gICAgICAgICAgICBfdGhpczMuX2NvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKGtleSwgcHJldkhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIF90aGlzMy5faGFuZGxlckJ5RXZlbnRba2V5XSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soX3RoaXMzLl9jb250YWluZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzMy5fY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoa2V5LCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICBfdGhpczMuX2hhbmRsZXJCeUV2ZW50W2tleV0gPSBoYW5kbGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlU2Nyb2xsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU2Nyb2xsKCkge1xuICAgICAgdGhpcy5fcHMudXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlUmVmJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlUmVmKHJlZikge1xuICAgICAgdGhpcy5fY29udGFpbmVyID0gcmVmO1xuICAgICAgdGhpcy5wcm9wcy5jb250YWluZXJSZWYocmVmKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICAgIHZhciBDb21wID0gY29tcG9uZW50O1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIENvbXAsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlLCBjbGFzc05hbWU6ICdzY3JvbGxiYXItY29udGFpbmVyICcgKyBjbGFzc05hbWUsIHJlZjogdGhpcy5oYW5kbGVSZWYgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcm9sbEJhcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNjcm9sbEJhcjtcblxuXG5TY3JvbGxCYXIuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnLFxuICBzdHlsZTogdW5kZWZpbmVkLFxuICBvcHRpb246IHVuZGVmaW5lZCxcbiAgY29udGFpbmVyUmVmOiBmdW5jdGlvbiBjb250YWluZXJSZWYoKSB7fSxcbiAgb25TY3JvbGxZOiB1bmRlZmluZWQsXG4gIG9uU2Nyb2xsWDogdW5kZWZpbmVkLFxuICBvblNjcm9sbFVwOiB1bmRlZmluZWQsXG4gIG9uU2Nyb2xsRG93bjogdW5kZWZpbmVkLFxuICBvblNjcm9sbExlZnQ6IHVuZGVmaW5lZCxcbiAgb25TY3JvbGxSaWdodDogdW5kZWZpbmVkLFxuICBvbllSZWFjaFN0YXJ0OiB1bmRlZmluZWQsXG4gIG9uWVJlYWNoRW5kOiB1bmRlZmluZWQsXG4gIG9uWFJlYWNoU3RhcnQ6IHVuZGVmaW5lZCxcbiAgb25YUmVhY2hFbmQ6IHVuZGVmaW5lZCxcbiAgY29tcG9uZW50OiAnZGl2J1xufTtcblxuU2Nyb2xsQmFyLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLlByb3BUeXBlcy5zdHJpbmcsXG4gIHN0eWxlOiBfcHJvcFR5cGVzLlByb3BUeXBlcy5vYmplY3QsXG4gIG9wdGlvbjogX3Byb3BUeXBlcy5Qcm9wVHlwZXMub2JqZWN0LFxuICBjb250YWluZXJSZWY6IF9wcm9wVHlwZXMuUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2Nyb2xsWTogX3Byb3BUeXBlcy5Qcm9wVHlwZXMuZnVuYyxcbiAgb25TY3JvbGxYOiBfcHJvcFR5cGVzLlByb3BUeXBlcy5mdW5jLFxuICBvblNjcm9sbFVwOiBfcHJvcFR5cGVzLlByb3BUeXBlcy5mdW5jLFxuICBvblNjcm9sbERvd246IF9wcm9wVHlwZXMuUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2Nyb2xsTGVmdDogX3Byb3BUeXBlcy5Qcm9wVHlwZXMuZnVuYyxcbiAgb25TY3JvbGxSaWdodDogX3Byb3BUeXBlcy5Qcm9wVHlwZXMuZnVuYyxcbiAgb25ZUmVhY2hTdGFydDogX3Byb3BUeXBlcy5Qcm9wVHlwZXMuZnVuYyxcbiAgb25ZUmVhY2hFbmQ6IF9wcm9wVHlwZXMuUHJvcFR5cGVzLmZ1bmMsXG4gIG9uWFJlYWNoU3RhcnQ6IF9wcm9wVHlwZXMuUHJvcFR5cGVzLmZ1bmMsXG4gIG9uWFJlYWNoRW5kOiBfcHJvcFR5cGVzLlByb3BUeXBlcy5mdW5jLFxuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuUHJvcFR5cGVzLnN0cmluZ1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8qIVxuICogcGVyZmVjdC1zY3JvbGxiYXIgdjEuNC4wXG4gKiAoYykgMjAxOCBIeXVuamUgSnVuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBnZXQoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gc2V0KGVsZW1lbnQsIG9iaikge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgdmFyIHZhbCA9IG9ialtrZXldO1xuICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgICAgdmFsID0gdmFsICsgXCJweFwiO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW2tleV0gPSB2YWw7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGRpdihjbGFzc05hbWUpIHtcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICByZXR1cm4gZGl2O1xufVxuXG52YXIgZWxNYXRjaGVzID1cbiAgdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmXG4gIChFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzIHx8XG4gICAgRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgRWxlbWVudC5wcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IpO1xuXG5mdW5jdGlvbiBtYXRjaGVzKGVsZW1lbnQsIHF1ZXJ5KSB7XG4gIGlmICghZWxNYXRjaGVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBlbGVtZW50IG1hdGNoaW5nIG1ldGhvZCBzdXBwb3J0ZWQnKTtcbiAgfVxuXG4gIHJldHVybiBlbE1hdGNoZXMuY2FsbChlbGVtZW50LCBxdWVyeSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnJlbW92ZSkge1xuICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBxdWVyeUNoaWxkcmVuKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZWxlbWVudC5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBtYXRjaGVzKGNoaWxkLCBzZWxlY3Rvcik7IH1cbiAgKTtcbn1cblxudmFyIGNscyA9IHtcbiAgbWFpbjogJ3BzJyxcbiAgZWxlbWVudDoge1xuICAgIHRodW1iOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gKFwicHNfX3RodW1iLVwiICsgeCk7IH0sXG4gICAgcmFpbDogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIChcInBzX19yYWlsLVwiICsgeCk7IH0sXG4gICAgY29uc3VtaW5nOiAncHNfX2NoaWxkLS1jb25zdW1lJyxcbiAgfSxcbiAgc3RhdGU6IHtcbiAgICBmb2N1czogJ3BzLS1mb2N1cycsXG4gICAgY2xpY2tpbmc6ICdwcy0tY2xpY2tpbmcnLFxuICAgIGFjdGl2ZTogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIChcInBzLS1hY3RpdmUtXCIgKyB4KTsgfSxcbiAgICBzY3JvbGxpbmc6IGZ1bmN0aW9uICh4KSB7IHJldHVybiAoXCJwcy0tc2Nyb2xsaW5nLVwiICsgeCk7IH0sXG4gIH0sXG59O1xuXG4vKlxuICogSGVscGVyIG1ldGhvZHNcbiAqL1xudmFyIHNjcm9sbGluZ0NsYXNzVGltZW91dCA9IHsgeDogbnVsbCwgeTogbnVsbCB9O1xuXG5mdW5jdGlvbiBhZGRTY3JvbGxpbmdDbGFzcyhpLCB4KSB7XG4gIHZhciBjbGFzc0xpc3QgPSBpLmVsZW1lbnQuY2xhc3NMaXN0O1xuICB2YXIgY2xhc3NOYW1lID0gY2xzLnN0YXRlLnNjcm9sbGluZyh4KTtcblxuICBpZiAoY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICBjbGVhclRpbWVvdXQoc2Nyb2xsaW5nQ2xhc3NUaW1lb3V0W3hdKTtcbiAgfSBlbHNlIHtcbiAgICBjbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU2Nyb2xsaW5nQ2xhc3MoaSwgeCkge1xuICBzY3JvbGxpbmdDbGFzc1RpbWVvdXRbeF0gPSBzZXRUaW1lb3V0KFxuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGkuaXNBbGl2ZSAmJiBpLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbHMuc3RhdGUuc2Nyb2xsaW5nKHgpKTsgfSxcbiAgICBpLnNldHRpbmdzLnNjcm9sbGluZ1RocmVzaG9sZFxuICApO1xufVxuXG5mdW5jdGlvbiBzZXRTY3JvbGxpbmdDbGFzc0luc3RhbnRseShpLCB4KSB7XG4gIGFkZFNjcm9sbGluZ0NsYXNzKGksIHgpO1xuICByZW1vdmVTY3JvbGxpbmdDbGFzcyhpLCB4KTtcbn1cblxudmFyIEV2ZW50RWxlbWVudCA9IGZ1bmN0aW9uIEV2ZW50RWxlbWVudChlbGVtZW50KSB7XG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIHRoaXMuaGFuZGxlcnMgPSB7fTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGlzRW1wdHk6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuRXZlbnRFbGVtZW50LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCAoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gIGlmICh0eXBlb2YgdGhpcy5oYW5kbGVyc1tldmVudE5hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuaGFuZGxlcnNbZXZlbnROYW1lXSA9IFtdO1xuICB9XG4gIHRoaXMuaGFuZGxlcnNbZXZlbnROYW1lXS5wdXNoKGhhbmRsZXIpO1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RWxlbWVudC5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kIChldmVudE5hbWUsIHRhcmdldCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMuaGFuZGxlcnNbZXZlbnROYW1lXSA9IHRoaXMuaGFuZGxlcnNbZXZlbnROYW1lXS5maWx0ZXIoZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICBpZiAodGFyZ2V0ICYmIGhhbmRsZXIgIT09IHRhcmdldCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHRoaXMkMS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbn07XG5cbkV2ZW50RWxlbWVudC5wcm90b3R5cGUudW5iaW5kQWxsID0gZnVuY3Rpb24gdW5iaW5kQWxsICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBmb3IgKHZhciBuYW1lIGluIHRoaXMkMS5oYW5kbGVycykge1xuICAgIHRoaXMkMS51bmJpbmQobmFtZSk7XG4gIH1cbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5pc0VtcHR5LmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5oYW5kbGVycykuZXZlcnkoXG4gICAgZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gdGhpcyQxLmhhbmRsZXJzW2tleV0ubGVuZ3RoID09PSAwOyB9XG4gICk7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggRXZlbnRFbGVtZW50LnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBFdmVudE1hbmFnZXIgPSBmdW5jdGlvbiBFdmVudE1hbmFnZXIoKSB7XG4gIHRoaXMuZXZlbnRFbGVtZW50cyA9IFtdO1xufTtcblxuRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5ldmVudEVsZW1lbnQgPSBmdW5jdGlvbiBldmVudEVsZW1lbnQgKGVsZW1lbnQpIHtcbiAgdmFyIGVlID0gdGhpcy5ldmVudEVsZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAoZWUpIHsgcmV0dXJuIGVlLmVsZW1lbnQgPT09IGVsZW1lbnQ7IH0pWzBdO1xuICBpZiAoIWVlKSB7XG4gICAgZWUgPSBuZXcgRXZlbnRFbGVtZW50KGVsZW1lbnQpO1xuICAgIHRoaXMuZXZlbnRFbGVtZW50cy5wdXNoKGVlKTtcbiAgfVxuICByZXR1cm4gZWU7XG59O1xuXG5FdmVudE1hbmFnZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kIChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgdGhpcy5ldmVudEVsZW1lbnQoZWxlbWVudCkuYmluZChldmVudE5hbWUsIGhhbmRsZXIpO1xufTtcblxuRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQgKGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICB2YXIgZWUgPSB0aGlzLmV2ZW50RWxlbWVudChlbGVtZW50KTtcbiAgZWUudW5iaW5kKGV2ZW50TmFtZSwgaGFuZGxlcik7XG5cbiAgaWYgKGVlLmlzRW1wdHkpIHtcbiAgICAvLyByZW1vdmVcbiAgICB0aGlzLmV2ZW50RWxlbWVudHMuc3BsaWNlKHRoaXMuZXZlbnRFbGVtZW50cy5pbmRleE9mKGVlKSwgMSk7XG4gIH1cbn07XG5cbkV2ZW50TWFuYWdlci5wcm90b3R5cGUudW5iaW5kQWxsID0gZnVuY3Rpb24gdW5iaW5kQWxsICgpIHtcbiAgdGhpcy5ldmVudEVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUudW5iaW5kQWxsKCk7IH0pO1xuICB0aGlzLmV2ZW50RWxlbWVudHMgPSBbXTtcbn07XG5cbkV2ZW50TWFuYWdlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UgKGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICB2YXIgZWUgPSB0aGlzLmV2ZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIG9uY2VIYW5kbGVyID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIGVlLnVuYmluZChldmVudE5hbWUsIG9uY2VIYW5kbGVyKTtcbiAgICBoYW5kbGVyKGV2dCk7XG4gIH07XG4gIGVlLmJpbmQoZXZlbnROYW1lLCBvbmNlSGFuZGxlcik7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVFdmVudChuYW1lKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG5ldyBDdXN0b21FdmVudChuYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgZXZ0LmluaXRDdXN0b21FdmVudChuYW1lLCBmYWxzZSwgZmFsc2UsIHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIGV2dDtcbiAgfVxufVxuXG52YXIgcHJvY2Vzc1Njcm9sbERpZmYgPSBmdW5jdGlvbihcbiAgaSxcbiAgYXhpcyxcbiAgZGlmZixcbiAgdXNlU2Nyb2xsaW5nQ2xhc3MsXG4gIGZvcmNlRmlyZVJlYWNoRXZlbnRcbikge1xuICBpZiAoIHVzZVNjcm9sbGluZ0NsYXNzID09PSB2b2lkIDAgKSB1c2VTY3JvbGxpbmdDbGFzcyA9IHRydWU7XG4gIGlmICggZm9yY2VGaXJlUmVhY2hFdmVudCA9PT0gdm9pZCAwICkgZm9yY2VGaXJlUmVhY2hFdmVudCA9IGZhbHNlO1xuXG4gIHZhciBmaWVsZHM7XG4gIGlmIChheGlzID09PSAndG9wJykge1xuICAgIGZpZWxkcyA9IFtcbiAgICAgICdjb250ZW50SGVpZ2h0JyxcbiAgICAgICdjb250YWluZXJIZWlnaHQnLFxuICAgICAgJ3Njcm9sbFRvcCcsXG4gICAgICAneScsXG4gICAgICAndXAnLFxuICAgICAgJ2Rvd24nIF07XG4gIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ2xlZnQnKSB7XG4gICAgZmllbGRzID0gW1xuICAgICAgJ2NvbnRlbnRXaWR0aCcsXG4gICAgICAnY29udGFpbmVyV2lkdGgnLFxuICAgICAgJ3Njcm9sbExlZnQnLFxuICAgICAgJ3gnLFxuICAgICAgJ2xlZnQnLFxuICAgICAgJ3JpZ2h0JyBdO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQSBwcm9wZXIgYXhpcyBzaG91bGQgYmUgcHJvdmlkZWQnKTtcbiAgfVxuXG4gIHByb2Nlc3NTY3JvbGxEaWZmJDEoaSwgZGlmZiwgZmllbGRzLCB1c2VTY3JvbGxpbmdDbGFzcywgZm9yY2VGaXJlUmVhY2hFdmVudCk7XG59O1xuXG5mdW5jdGlvbiBwcm9jZXNzU2Nyb2xsRGlmZiQxKFxuICBpLFxuICBkaWZmLFxuICByZWYsXG4gIHVzZVNjcm9sbGluZ0NsYXNzLFxuICBmb3JjZUZpcmVSZWFjaEV2ZW50XG4pIHtcbiAgdmFyIGNvbnRlbnRIZWlnaHQgPSByZWZbMF07XG4gIHZhciBjb250YWluZXJIZWlnaHQgPSByZWZbMV07XG4gIHZhciBzY3JvbGxUb3AgPSByZWZbMl07XG4gIHZhciB5ID0gcmVmWzNdO1xuICB2YXIgdXAgPSByZWZbNF07XG4gIHZhciBkb3duID0gcmVmWzVdO1xuICBpZiAoIHVzZVNjcm9sbGluZ0NsYXNzID09PSB2b2lkIDAgKSB1c2VTY3JvbGxpbmdDbGFzcyA9IHRydWU7XG4gIGlmICggZm9yY2VGaXJlUmVhY2hFdmVudCA9PT0gdm9pZCAwICkgZm9yY2VGaXJlUmVhY2hFdmVudCA9IGZhbHNlO1xuXG4gIHZhciBlbGVtZW50ID0gaS5lbGVtZW50O1xuXG4gIC8vIHJlc2V0IHJlYWNoXG4gIGkucmVhY2hbeV0gPSBudWxsO1xuXG4gIC8vIDEgZm9yIHN1YnBpeGVsIHJvdW5kaW5nXG4gIGlmIChlbGVtZW50W3Njcm9sbFRvcF0gPCAxKSB7XG4gICAgaS5yZWFjaFt5XSA9ICdzdGFydCc7XG4gIH1cblxuICAvLyAxIGZvciBzdWJwaXhlbCByb3VuZGluZ1xuICBpZiAoZWxlbWVudFtzY3JvbGxUb3BdID4gaVtjb250ZW50SGVpZ2h0XSAtIGlbY29udGFpbmVySGVpZ2h0XSAtIDEpIHtcbiAgICBpLnJlYWNoW3ldID0gJ2VuZCc7XG4gIH1cblxuICBpZiAoZGlmZikge1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudCgoXCJwcy1zY3JvbGwtXCIgKyB5KSkpO1xuXG4gICAgaWYgKGRpZmYgPCAwKSB7XG4gICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoKFwicHMtc2Nyb2xsLVwiICsgdXApKSk7XG4gICAgfSBlbHNlIGlmIChkaWZmID4gMCkge1xuICAgICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUV2ZW50KChcInBzLXNjcm9sbC1cIiArIGRvd24pKSk7XG4gICAgfVxuXG4gICAgaWYgKHVzZVNjcm9sbGluZ0NsYXNzKSB7XG4gICAgICBzZXRTY3JvbGxpbmdDbGFzc0luc3RhbnRseShpLCB5KTtcbiAgICB9XG4gIH1cblxuICBpZiAoaS5yZWFjaFt5XSAmJiAoZGlmZiB8fCBmb3JjZUZpcmVSZWFjaEV2ZW50KSkge1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudCgoXCJwcy1cIiArIHkgKyBcIi1yZWFjaC1cIiArIChpLnJlYWNoW3ldKSkpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0ludCh4KSB7XG4gIHJldHVybiBwYXJzZUludCh4LCAxMCkgfHwgMDtcbn1cblxuZnVuY3Rpb24gaXNFZGl0YWJsZShlbCkge1xuICByZXR1cm4gKFxuICAgIG1hdGNoZXMoZWwsICdpbnB1dCxbY29udGVudGVkaXRhYmxlXScpIHx8XG4gICAgbWF0Y2hlcyhlbCwgJ3NlbGVjdCxbY29udGVudGVkaXRhYmxlXScpIHx8XG4gICAgbWF0Y2hlcyhlbCwgJ3RleHRhcmVhLFtjb250ZW50ZWRpdGFibGVdJykgfHxcbiAgICBtYXRjaGVzKGVsLCAnYnV0dG9uLFtjb250ZW50ZWRpdGFibGVdJylcbiAgKTtcbn1cblxuZnVuY3Rpb24gb3V0ZXJXaWR0aChlbGVtZW50KSB7XG4gIHZhciBzdHlsZXMgPSBnZXQoZWxlbWVudCk7XG4gIHJldHVybiAoXG4gICAgdG9JbnQoc3R5bGVzLndpZHRoKSArXG4gICAgdG9JbnQoc3R5bGVzLnBhZGRpbmdMZWZ0KSArXG4gICAgdG9JbnQoc3R5bGVzLnBhZGRpbmdSaWdodCkgK1xuICAgIHRvSW50KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgpICtcbiAgICB0b0ludChzdHlsZXMuYm9yZGVyUmlnaHRXaWR0aClcbiAgKTtcbn1cblxudmFyIGVudiA9IHtcbiAgaXNXZWJLaXQ6XG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICdXZWJraXRBcHBlYXJhbmNlJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUsXG4gIHN1cHBvcnRzVG91Y2g6XG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8XG4gICAgICAod2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaCkpLFxuICBzdXBwb3J0c0llUG9pbnRlcjpcbiAgICB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyxcbiAgaXNDaHJvbWU6XG4gICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvQ2hyb21lL2kudGVzdChuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCksXG59O1xuXG52YXIgdXBkYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihpKSB7XG4gIHZhciBlbGVtZW50ID0gaS5lbGVtZW50O1xuICB2YXIgcm91bmRlZFNjcm9sbFRvcCA9IE1hdGguZmxvb3IoZWxlbWVudC5zY3JvbGxUb3ApO1xuXG4gIGkuY29udGFpbmVyV2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoO1xuICBpLmNvbnRhaW5lckhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICBpLmNvbnRlbnRXaWR0aCA9IGVsZW1lbnQuc2Nyb2xsV2lkdGg7XG4gIGkuY29udGVudEhlaWdodCA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuXG4gIGlmICghZWxlbWVudC5jb250YWlucyhpLnNjcm9sbGJhclhSYWlsKSkge1xuICAgIC8vIGNsZWFuIHVwIGFuZCBhcHBlbmRcbiAgICBxdWVyeUNoaWxkcmVuKGVsZW1lbnQsIGNscy5lbGVtZW50LnJhaWwoJ3gnKSkuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHJlbW92ZShlbCk7IH1cbiAgICApO1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoaS5zY3JvbGxiYXJYUmFpbCk7XG4gIH1cbiAgaWYgKCFlbGVtZW50LmNvbnRhaW5zKGkuc2Nyb2xsYmFyWVJhaWwpKSB7XG4gICAgLy8gY2xlYW4gdXAgYW5kIGFwcGVuZFxuICAgIHF1ZXJ5Q2hpbGRyZW4oZWxlbWVudCwgY2xzLmVsZW1lbnQucmFpbCgneScpKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gcmVtb3ZlKGVsKTsgfVxuICAgICk7XG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZChpLnNjcm9sbGJhcllSYWlsKTtcbiAgfVxuXG4gIGlmIChcbiAgICAhaS5zZXR0aW5ncy5zdXBwcmVzc1Njcm9sbFggJiZcbiAgICBpLmNvbnRhaW5lcldpZHRoICsgaS5zZXR0aW5ncy5zY3JvbGxYTWFyZ2luT2Zmc2V0IDwgaS5jb250ZW50V2lkdGhcbiAgKSB7XG4gICAgaS5zY3JvbGxiYXJYQWN0aXZlID0gdHJ1ZTtcbiAgICBpLnJhaWxYV2lkdGggPSBpLmNvbnRhaW5lcldpZHRoIC0gaS5yYWlsWE1hcmdpbldpZHRoO1xuICAgIGkucmFpbFhSYXRpbyA9IGkuY29udGFpbmVyV2lkdGggLyBpLnJhaWxYV2lkdGg7XG4gICAgaS5zY3JvbGxiYXJYV2lkdGggPSBnZXRUaHVtYlNpemUoXG4gICAgICBpLFxuICAgICAgdG9JbnQoaS5yYWlsWFdpZHRoICogaS5jb250YWluZXJXaWR0aCAvIGkuY29udGVudFdpZHRoKVxuICAgICk7XG4gICAgaS5zY3JvbGxiYXJYTGVmdCA9IHRvSW50KFxuICAgICAgKGkubmVnYXRpdmVTY3JvbGxBZGp1c3RtZW50ICsgZWxlbWVudC5zY3JvbGxMZWZ0KSAqXG4gICAgICAgIChpLnJhaWxYV2lkdGggLSBpLnNjcm9sbGJhclhXaWR0aCkgL1xuICAgICAgICAoaS5jb250ZW50V2lkdGggLSBpLmNvbnRhaW5lcldpZHRoKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgaS5zY3JvbGxiYXJYQWN0aXZlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoXG4gICAgIWkuc2V0dGluZ3Muc3VwcHJlc3NTY3JvbGxZICYmXG4gICAgaS5jb250YWluZXJIZWlnaHQgKyBpLnNldHRpbmdzLnNjcm9sbFlNYXJnaW5PZmZzZXQgPCBpLmNvbnRlbnRIZWlnaHRcbiAgKSB7XG4gICAgaS5zY3JvbGxiYXJZQWN0aXZlID0gdHJ1ZTtcbiAgICBpLnJhaWxZSGVpZ2h0ID0gaS5jb250YWluZXJIZWlnaHQgLSBpLnJhaWxZTWFyZ2luSGVpZ2h0O1xuICAgIGkucmFpbFlSYXRpbyA9IGkuY29udGFpbmVySGVpZ2h0IC8gaS5yYWlsWUhlaWdodDtcbiAgICBpLnNjcm9sbGJhcllIZWlnaHQgPSBnZXRUaHVtYlNpemUoXG4gICAgICBpLFxuICAgICAgdG9JbnQoaS5yYWlsWUhlaWdodCAqIGkuY29udGFpbmVySGVpZ2h0IC8gaS5jb250ZW50SGVpZ2h0KVxuICAgICk7XG4gICAgaS5zY3JvbGxiYXJZVG9wID0gdG9JbnQoXG4gICAgICByb3VuZGVkU2Nyb2xsVG9wICpcbiAgICAgICAgKGkucmFpbFlIZWlnaHQgLSBpLnNjcm9sbGJhcllIZWlnaHQpIC9cbiAgICAgICAgKGkuY29udGVudEhlaWdodCAtIGkuY29udGFpbmVySGVpZ2h0KVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgaS5zY3JvbGxiYXJZQWN0aXZlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoaS5zY3JvbGxiYXJYTGVmdCA+PSBpLnJhaWxYV2lkdGggLSBpLnNjcm9sbGJhclhXaWR0aCkge1xuICAgIGkuc2Nyb2xsYmFyWExlZnQgPSBpLnJhaWxYV2lkdGggLSBpLnNjcm9sbGJhclhXaWR0aDtcbiAgfVxuICBpZiAoaS5zY3JvbGxiYXJZVG9wID49IGkucmFpbFlIZWlnaHQgLSBpLnNjcm9sbGJhcllIZWlnaHQpIHtcbiAgICBpLnNjcm9sbGJhcllUb3AgPSBpLnJhaWxZSGVpZ2h0IC0gaS5zY3JvbGxiYXJZSGVpZ2h0O1xuICB9XG5cbiAgdXBkYXRlQ3NzKGVsZW1lbnQsIGkpO1xuXG4gIGlmIChpLnNjcm9sbGJhclhBY3RpdmUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xzLnN0YXRlLmFjdGl2ZSgneCcpKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xzLnN0YXRlLmFjdGl2ZSgneCcpKTtcbiAgICBpLnNjcm9sbGJhclhXaWR0aCA9IDA7XG4gICAgaS5zY3JvbGxiYXJYTGVmdCA9IDA7XG4gICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gMDtcbiAgfVxuICBpZiAoaS5zY3JvbGxiYXJZQWN0aXZlKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNscy5zdGF0ZS5hY3RpdmUoJ3knKSk7XG4gIH0gZWxzZSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNscy5zdGF0ZS5hY3RpdmUoJ3knKSk7XG4gICAgaS5zY3JvbGxiYXJZSGVpZ2h0ID0gMDtcbiAgICBpLnNjcm9sbGJhcllUb3AgPSAwO1xuICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0VGh1bWJTaXplKGksIHRodW1iU2l6ZSkge1xuICBpZiAoaS5zZXR0aW5ncy5taW5TY3JvbGxiYXJMZW5ndGgpIHtcbiAgICB0aHVtYlNpemUgPSBNYXRoLm1heCh0aHVtYlNpemUsIGkuc2V0dGluZ3MubWluU2Nyb2xsYmFyTGVuZ3RoKTtcbiAgfVxuICBpZiAoaS5zZXR0aW5ncy5tYXhTY3JvbGxiYXJMZW5ndGgpIHtcbiAgICB0aHVtYlNpemUgPSBNYXRoLm1pbih0aHVtYlNpemUsIGkuc2V0dGluZ3MubWF4U2Nyb2xsYmFyTGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gdGh1bWJTaXplO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDc3MoZWxlbWVudCwgaSkge1xuICB2YXIgeFJhaWxPZmZzZXQgPSB7IHdpZHRoOiBpLnJhaWxYV2lkdGggfTtcbiAgdmFyIHJvdW5kZWRTY3JvbGxUb3AgPSBNYXRoLmZsb29yKGVsZW1lbnQuc2Nyb2xsVG9wKTtcblxuICBpZiAoaS5pc1J0bCkge1xuICAgIHhSYWlsT2Zmc2V0LmxlZnQgPVxuICAgICAgaS5uZWdhdGl2ZVNjcm9sbEFkanVzdG1lbnQgK1xuICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ICtcbiAgICAgIGkuY29udGFpbmVyV2lkdGggLVxuICAgICAgaS5jb250ZW50V2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgeFJhaWxPZmZzZXQubGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgfVxuICBpZiAoaS5pc1Njcm9sbGJhclhVc2luZ0JvdHRvbSkge1xuICAgIHhSYWlsT2Zmc2V0LmJvdHRvbSA9IGkuc2Nyb2xsYmFyWEJvdHRvbSAtIHJvdW5kZWRTY3JvbGxUb3A7XG4gIH0gZWxzZSB7XG4gICAgeFJhaWxPZmZzZXQudG9wID0gaS5zY3JvbGxiYXJYVG9wICsgcm91bmRlZFNjcm9sbFRvcDtcbiAgfVxuICBzZXQoaS5zY3JvbGxiYXJYUmFpbCwgeFJhaWxPZmZzZXQpO1xuXG4gIHZhciB5UmFpbE9mZnNldCA9IHsgdG9wOiByb3VuZGVkU2Nyb2xsVG9wLCBoZWlnaHQ6IGkucmFpbFlIZWlnaHQgfTtcbiAgaWYgKGkuaXNTY3JvbGxiYXJZVXNpbmdSaWdodCkge1xuICAgIGlmIChpLmlzUnRsKSB7XG4gICAgICB5UmFpbE9mZnNldC5yaWdodCA9XG4gICAgICAgIGkuY29udGVudFdpZHRoIC1cbiAgICAgICAgKGkubmVnYXRpdmVTY3JvbGxBZGp1c3RtZW50ICsgZWxlbWVudC5zY3JvbGxMZWZ0KSAtXG4gICAgICAgIGkuc2Nyb2xsYmFyWVJpZ2h0IC1cbiAgICAgICAgaS5zY3JvbGxiYXJZT3V0ZXJXaWR0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgeVJhaWxPZmZzZXQucmlnaHQgPSBpLnNjcm9sbGJhcllSaWdodCAtIGVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGkuaXNSdGwpIHtcbiAgICAgIHlSYWlsT2Zmc2V0LmxlZnQgPVxuICAgICAgICBpLm5lZ2F0aXZlU2Nyb2xsQWRqdXN0bWVudCArXG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCArXG4gICAgICAgIGkuY29udGFpbmVyV2lkdGggKiAyIC1cbiAgICAgICAgaS5jb250ZW50V2lkdGggLVxuICAgICAgICBpLnNjcm9sbGJhcllMZWZ0IC1cbiAgICAgICAgaS5zY3JvbGxiYXJZT3V0ZXJXaWR0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgeVJhaWxPZmZzZXQubGVmdCA9IGkuc2Nyb2xsYmFyWUxlZnQgKyBlbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgfVxuICB9XG4gIHNldChpLnNjcm9sbGJhcllSYWlsLCB5UmFpbE9mZnNldCk7XG5cbiAgc2V0KGkuc2Nyb2xsYmFyWCwge1xuICAgIGxlZnQ6IGkuc2Nyb2xsYmFyWExlZnQsXG4gICAgd2lkdGg6IGkuc2Nyb2xsYmFyWFdpZHRoIC0gaS5yYWlsQm9yZGVyWFdpZHRoLFxuICB9KTtcbiAgc2V0KGkuc2Nyb2xsYmFyWSwge1xuICAgIHRvcDogaS5zY3JvbGxiYXJZVG9wLFxuICAgIGhlaWdodDogaS5zY3JvbGxiYXJZSGVpZ2h0IC0gaS5yYWlsQm9yZGVyWVdpZHRoLFxuICB9KTtcbn1cblxudmFyIGNsaWNrUmFpbCA9IGZ1bmN0aW9uKGkpIHtcbiAgaS5ldmVudC5iaW5kKGkuc2Nyb2xsYmFyWSwgJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnN0b3BQcm9wYWdhdGlvbigpOyB9KTtcbiAgaS5ldmVudC5iaW5kKGkuc2Nyb2xsYmFyWVJhaWwsICdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBwb3NpdGlvblRvcCA9XG4gICAgICBlLnBhZ2VZIC1cbiAgICAgIHdpbmRvdy5wYWdlWU9mZnNldCAtXG4gICAgICBpLnNjcm9sbGJhcllSYWlsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICB2YXIgZGlyZWN0aW9uID0gcG9zaXRpb25Ub3AgPiBpLnNjcm9sbGJhcllUb3AgPyAxIDogLTE7XG5cbiAgICBpLmVsZW1lbnQuc2Nyb2xsVG9wICs9IGRpcmVjdGlvbiAqIGkuY29udGFpbmVySGVpZ2h0O1xuICAgIHVwZGF0ZUdlb21ldHJ5KGkpO1xuXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSk7XG5cbiAgaS5ldmVudC5iaW5kKGkuc2Nyb2xsYmFyWCwgJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnN0b3BQcm9wYWdhdGlvbigpOyB9KTtcbiAgaS5ldmVudC5iaW5kKGkuc2Nyb2xsYmFyWFJhaWwsICdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBwb3NpdGlvbkxlZnQgPVxuICAgICAgZS5wYWdlWCAtXG4gICAgICB3aW5kb3cucGFnZVhPZmZzZXQgLVxuICAgICAgaS5zY3JvbGxiYXJYUmFpbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgIHZhciBkaXJlY3Rpb24gPSBwb3NpdGlvbkxlZnQgPiBpLnNjcm9sbGJhclhMZWZ0ID8gMSA6IC0xO1xuXG4gICAgaS5lbGVtZW50LnNjcm9sbExlZnQgKz0gZGlyZWN0aW9uICogaS5jb250YWluZXJXaWR0aDtcbiAgICB1cGRhdGVHZW9tZXRyeShpKTtcblxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0pO1xufTtcblxudmFyIGRyYWdUaHVtYiA9IGZ1bmN0aW9uKGkpIHtcbiAgYmluZE1vdXNlU2Nyb2xsSGFuZGxlcihpLCBbXG4gICAgJ2NvbnRhaW5lcldpZHRoJyxcbiAgICAnY29udGVudFdpZHRoJyxcbiAgICAncGFnZVgnLFxuICAgICdyYWlsWFdpZHRoJyxcbiAgICAnc2Nyb2xsYmFyWCcsXG4gICAgJ3Njcm9sbGJhclhXaWR0aCcsXG4gICAgJ3Njcm9sbExlZnQnLFxuICAgICd4JyxcbiAgICAnc2Nyb2xsYmFyWFJhaWwnIF0pO1xuICBiaW5kTW91c2VTY3JvbGxIYW5kbGVyKGksIFtcbiAgICAnY29udGFpbmVySGVpZ2h0JyxcbiAgICAnY29udGVudEhlaWdodCcsXG4gICAgJ3BhZ2VZJyxcbiAgICAncmFpbFlIZWlnaHQnLFxuICAgICdzY3JvbGxiYXJZJyxcbiAgICAnc2Nyb2xsYmFyWUhlaWdodCcsXG4gICAgJ3Njcm9sbFRvcCcsXG4gICAgJ3knLFxuICAgICdzY3JvbGxiYXJZUmFpbCcgXSk7XG59O1xuXG5mdW5jdGlvbiBiaW5kTW91c2VTY3JvbGxIYW5kbGVyKFxuICBpLFxuICByZWZcbikge1xuICB2YXIgY29udGFpbmVySGVpZ2h0ID0gcmVmWzBdO1xuICB2YXIgY29udGVudEhlaWdodCA9IHJlZlsxXTtcbiAgdmFyIHBhZ2VZID0gcmVmWzJdO1xuICB2YXIgcmFpbFlIZWlnaHQgPSByZWZbM107XG4gIHZhciBzY3JvbGxiYXJZID0gcmVmWzRdO1xuICB2YXIgc2Nyb2xsYmFyWUhlaWdodCA9IHJlZls1XTtcbiAgdmFyIHNjcm9sbFRvcCA9IHJlZls2XTtcbiAgdmFyIHkgPSByZWZbN107XG4gIHZhciBzY3JvbGxiYXJZUmFpbCA9IHJlZls4XTtcblxuICB2YXIgZWxlbWVudCA9IGkuZWxlbWVudDtcblxuICB2YXIgc3RhcnRpbmdTY3JvbGxUb3AgPSBudWxsO1xuICB2YXIgc3RhcnRpbmdNb3VzZVBhZ2VZID0gbnVsbDtcbiAgdmFyIHNjcm9sbEJ5ID0gbnVsbDtcblxuICBmdW5jdGlvbiBtb3VzZU1vdmVIYW5kbGVyKGUpIHtcbiAgICBlbGVtZW50W3Njcm9sbFRvcF0gPVxuICAgICAgc3RhcnRpbmdTY3JvbGxUb3AgKyBzY3JvbGxCeSAqIChlW3BhZ2VZXSAtIHN0YXJ0aW5nTW91c2VQYWdlWSk7XG4gICAgYWRkU2Nyb2xsaW5nQ2xhc3MoaSwgeSk7XG4gICAgdXBkYXRlR2VvbWV0cnkoaSk7XG5cbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlVXBIYW5kbGVyKCkge1xuICAgIHJlbW92ZVNjcm9sbGluZ0NsYXNzKGksIHkpO1xuICAgIGlbc2Nyb2xsYmFyWVJhaWxdLmNsYXNzTGlzdC5yZW1vdmUoY2xzLnN0YXRlLmNsaWNraW5nKTtcbiAgICBpLmV2ZW50LnVuYmluZChpLm93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBtb3VzZU1vdmVIYW5kbGVyKTtcbiAgfVxuXG4gIGkuZXZlbnQuYmluZChpW3Njcm9sbGJhclldLCAnbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzdGFydGluZ1Njcm9sbFRvcCA9IGVsZW1lbnRbc2Nyb2xsVG9wXTtcbiAgICBzdGFydGluZ01vdXNlUGFnZVkgPSBlW3BhZ2VZXTtcbiAgICBzY3JvbGxCeSA9XG4gICAgICAoaVtjb250ZW50SGVpZ2h0XSAtIGlbY29udGFpbmVySGVpZ2h0XSkgL1xuICAgICAgKGlbcmFpbFlIZWlnaHRdIC0gaVtzY3JvbGxiYXJZSGVpZ2h0XSk7XG5cbiAgICBpLmV2ZW50LmJpbmQoaS5vd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgbW91c2VNb3ZlSGFuZGxlcik7XG4gICAgaS5ldmVudC5vbmNlKGkub3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XG5cbiAgICBpW3Njcm9sbGJhcllSYWlsXS5jbGFzc0xpc3QuYWRkKGNscy5zdGF0ZS5jbGlja2luZyk7XG5cbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfSk7XG59XG5cbnZhciBrZXlib2FyZCA9IGZ1bmN0aW9uKGkpIHtcbiAgdmFyIGVsZW1lbnQgPSBpLmVsZW1lbnQ7XG5cbiAgdmFyIGVsZW1lbnRIb3ZlcmVkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbWF0Y2hlcyhlbGVtZW50LCAnOmhvdmVyJyk7IH07XG4gIHZhciBzY3JvbGxiYXJGb2N1c2VkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbWF0Y2hlcyhpLnNjcm9sbGJhclgsICc6Zm9jdXMnKSB8fCBtYXRjaGVzKGkuc2Nyb2xsYmFyWSwgJzpmb2N1cycpOyB9O1xuXG4gIGZ1bmN0aW9uIHNob3VsZFByZXZlbnREZWZhdWx0KGRlbHRhWCwgZGVsdGFZKSB7XG4gICAgdmFyIHNjcm9sbFRvcCA9IE1hdGguZmxvb3IoZWxlbWVudC5zY3JvbGxUb3ApO1xuICAgIGlmIChkZWx0YVggPT09IDApIHtcbiAgICAgIGlmICghaS5zY3JvbGxiYXJZQWN0aXZlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgKHNjcm9sbFRvcCA9PT0gMCAmJiBkZWx0YVkgPiAwKSB8fFxuICAgICAgICAoc2Nyb2xsVG9wID49IGkuY29udGVudEhlaWdodCAtIGkuY29udGFpbmVySGVpZ2h0ICYmIGRlbHRhWSA8IDApXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuICFpLnNldHRpbmdzLndoZWVsUHJvcGFnYXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbExlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgaWYgKGRlbHRhWSA9PT0gMCkge1xuICAgICAgaWYgKCFpLnNjcm9sbGJhclhBY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAoc2Nyb2xsTGVmdCA9PT0gMCAmJiBkZWx0YVggPCAwKSB8fFxuICAgICAgICAoc2Nyb2xsTGVmdCA+PSBpLmNvbnRlbnRXaWR0aCAtIGkuY29udGFpbmVyV2lkdGggJiYgZGVsdGFYID4gMClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gIWkuc2V0dGluZ3Mud2hlZWxQcm9wYWdhdGlvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpLmV2ZW50LmJpbmQoaS5vd25lckRvY3VtZW50LCAna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKFxuICAgICAgKGUuaXNEZWZhdWx0UHJldmVudGVkICYmIGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHx8XG4gICAgICBlLmRlZmF1bHRQcmV2ZW50ZWRcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWVsZW1lbnRIb3ZlcmVkKCkgJiYgIXNjcm9sbGJhckZvY3VzZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBhY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICAgICAgPyBkb2N1bWVudC5hY3RpdmVFbGVtZW50XG4gICAgICA6IGkub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChhY3RpdmVFbGVtZW50KSB7XG4gICAgICBpZiAoYWN0aXZlRWxlbWVudC50YWdOYW1lID09PSAnSUZSQU1FJykge1xuICAgICAgICBhY3RpdmVFbGVtZW50ID0gYWN0aXZlRWxlbWVudC5jb250ZW50RG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGdvIGRlZXBlciBpZiBlbGVtZW50IGlzIGEgd2ViY29tcG9uZW50XG4gICAgICAgIHdoaWxlIChhY3RpdmVFbGVtZW50LnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50ID0gYWN0aXZlRWxlbWVudC5zaGFkb3dSb290LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0VkaXRhYmxlKGFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVsdGFYID0gMDtcbiAgICB2YXIgZGVsdGFZID0gMDtcblxuICAgIHN3aXRjaCAoZS53aGljaCkge1xuICAgICAgY2FzZSAzNzogLy8gbGVmdFxuICAgICAgICBpZiAoZS5tZXRhS2V5KSB7XG4gICAgICAgICAgZGVsdGFYID0gLWkuY29udGVudFdpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKGUuYWx0S2V5KSB7XG4gICAgICAgICAgZGVsdGFYID0gLWkuY29udGFpbmVyV2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsdGFYID0gLTMwO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzODogLy8gdXBcbiAgICAgICAgaWYgKGUubWV0YUtleSkge1xuICAgICAgICAgIGRlbHRhWSA9IGkuY29udGVudEhlaWdodDtcbiAgICAgICAgfSBlbHNlIGlmIChlLmFsdEtleSkge1xuICAgICAgICAgIGRlbHRhWSA9IGkuY29udGFpbmVySGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbHRhWSA9IDMwO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOTogLy8gcmlnaHRcbiAgICAgICAgaWYgKGUubWV0YUtleSkge1xuICAgICAgICAgIGRlbHRhWCA9IGkuY29udGVudFdpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKGUuYWx0S2V5KSB7XG4gICAgICAgICAgZGVsdGFYID0gaS5jb250YWluZXJXaWR0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWx0YVggPSAzMDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDA6IC8vIGRvd25cbiAgICAgICAgaWYgKGUubWV0YUtleSkge1xuICAgICAgICAgIGRlbHRhWSA9IC1pLmNvbnRlbnRIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5hbHRLZXkpIHtcbiAgICAgICAgICBkZWx0YVkgPSAtaS5jb250YWluZXJIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsdGFZID0gLTMwO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzMjogLy8gc3BhY2UgYmFyXG4gICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgZGVsdGFZID0gaS5jb250YWluZXJIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsdGFZID0gLWkuY29udGFpbmVySGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzMzogLy8gcGFnZSB1cFxuICAgICAgICBkZWx0YVkgPSBpLmNvbnRhaW5lckhlaWdodDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM0OiAvLyBwYWdlIGRvd25cbiAgICAgICAgZGVsdGFZID0gLWkuY29udGFpbmVySGVpZ2h0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzY6IC8vIGhvbWVcbiAgICAgICAgZGVsdGFZID0gaS5jb250ZW50SGVpZ2h0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzU6IC8vIGVuZFxuICAgICAgICBkZWx0YVkgPSAtaS5jb250ZW50SGVpZ2h0O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaS5zZXR0aW5ncy5zdXBwcmVzc1Njcm9sbFggJiYgZGVsdGFYICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpLnNldHRpbmdzLnN1cHByZXNzU2Nyb2xsWSAmJiBkZWx0YVkgIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlbGVtZW50LnNjcm9sbFRvcCAtPSBkZWx0YVk7XG4gICAgZWxlbWVudC5zY3JvbGxMZWZ0ICs9IGRlbHRhWDtcbiAgICB1cGRhdGVHZW9tZXRyeShpKTtcblxuICAgIGlmIChzaG91bGRQcmV2ZW50RGVmYXVsdChkZWx0YVgsIGRlbHRhWSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIHdoZWVsID0gZnVuY3Rpb24oaSkge1xuICB2YXIgZWxlbWVudCA9IGkuZWxlbWVudDtcblxuICBmdW5jdGlvbiBzaG91bGRQcmV2ZW50RGVmYXVsdChkZWx0YVgsIGRlbHRhWSkge1xuICAgIHZhciByb3VuZGVkU2Nyb2xsVG9wID0gTWF0aC5mbG9vcihlbGVtZW50LnNjcm9sbFRvcCk7XG4gICAgdmFyIGlzVG9wID0gZWxlbWVudC5zY3JvbGxUb3AgPT09IDA7XG4gICAgdmFyIGlzQm90dG9tID1cbiAgICAgIHJvdW5kZWRTY3JvbGxUb3AgKyBlbGVtZW50Lm9mZnNldEhlaWdodCA9PT0gZWxlbWVudC5zY3JvbGxIZWlnaHQ7XG4gICAgdmFyIGlzTGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdCA9PT0gMDtcbiAgICB2YXIgaXNSaWdodCA9XG4gICAgICBlbGVtZW50LnNjcm9sbExlZnQgKyBlbGVtZW50Lm9mZnNldFdpZHRoID09PSBlbGVtZW50LnNjcm9sbFdpZHRoO1xuXG4gICAgdmFyIGhpdHNCb3VuZDtcblxuICAgIC8vIHBpY2sgYXhpcyB3aXRoIHByaW1hcnkgZGlyZWN0aW9uXG4gICAgaWYgKE1hdGguYWJzKGRlbHRhWSkgPiBNYXRoLmFicyhkZWx0YVgpKSB7XG4gICAgICBoaXRzQm91bmQgPSBpc1RvcCB8fCBpc0JvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGl0c0JvdW5kID0gaXNMZWZ0IHx8IGlzUmlnaHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhpdHNCb3VuZCA/ICFpLnNldHRpbmdzLndoZWVsUHJvcGFnYXRpb24gOiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGVsdGFGcm9tRXZlbnQoZSkge1xuICAgIHZhciBkZWx0YVggPSBlLmRlbHRhWDtcbiAgICB2YXIgZGVsdGFZID0gLTEgKiBlLmRlbHRhWTtcblxuICAgIGlmICh0eXBlb2YgZGVsdGFYID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZGVsdGFZID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gT1MgWCBTYWZhcmlcbiAgICAgIGRlbHRhWCA9IC0xICogZS53aGVlbERlbHRhWCAvIDY7XG4gICAgICBkZWx0YVkgPSBlLndoZWVsRGVsdGFZIC8gNjtcbiAgICB9XG5cbiAgICBpZiAoZS5kZWx0YU1vZGUgJiYgZS5kZWx0YU1vZGUgPT09IDEpIHtcbiAgICAgIC8vIEZpcmVmb3ggaW4gZGVsdGFNb2RlIDE6IExpbmUgc2Nyb2xsaW5nXG4gICAgICBkZWx0YVggKj0gMTA7XG4gICAgICBkZWx0YVkgKj0gMTA7XG4gICAgfVxuXG4gICAgaWYgKGRlbHRhWCAhPT0gZGVsdGFYICYmIGRlbHRhWSAhPT0gZGVsdGFZIC8qIE5hTiBjaGVja3MgKi8pIHtcbiAgICAgIC8vIElFIGluIHNvbWUgbW91c2UgZHJpdmVyc1xuICAgICAgZGVsdGFYID0gMDtcbiAgICAgIGRlbHRhWSA9IGUud2hlZWxEZWx0YTtcbiAgICB9XG5cbiAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgLy8gcmV2ZXJzZSBheGlzIHdpdGggc2hpZnQga2V5XG4gICAgICByZXR1cm4gWy1kZWx0YVksIC1kZWx0YVhdO1xuICAgIH1cbiAgICByZXR1cm4gW2RlbHRhWCwgZGVsdGFZXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEJlQ29uc3VtZWRCeUNoaWxkKHRhcmdldCwgZGVsdGFYLCBkZWx0YVkpIHtcbiAgICAvLyBGSVhNRTogdGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIDxzZWxlY3Q+IGlzc3VlIGluIEZGIGFuZCBJRSAjNTcxXG4gICAgaWYgKCFlbnYuaXNXZWJLaXQgJiYgZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdzZWxlY3Q6Zm9jdXMnKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFlbGVtZW50LmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgY3Vyc29yID0gdGFyZ2V0O1xuXG4gICAgd2hpbGUgKGN1cnNvciAmJiBjdXJzb3IgIT09IGVsZW1lbnQpIHtcbiAgICAgIGlmIChjdXJzb3IuY2xhc3NMaXN0LmNvbnRhaW5zKGNscy5lbGVtZW50LmNvbnN1bWluZykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdHlsZSA9IGdldChjdXJzb3IpO1xuICAgICAgdmFyIG92ZXJmbG93ID0gW3N0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WV0uam9pbihcbiAgICAgICAgJydcbiAgICAgICk7XG5cbiAgICAgIC8vIGlmIHNjcm9sbGFibGVcbiAgICAgIGlmIChvdmVyZmxvdy5tYXRjaCgvKHNjcm9sbHxhdXRvKS8pKSB7XG4gICAgICAgIHZhciBtYXhTY3JvbGxUb3AgPSBjdXJzb3Iuc2Nyb2xsSGVpZ2h0IC0gY3Vyc29yLmNsaWVudEhlaWdodDtcbiAgICAgICAgaWYgKG1heFNjcm9sbFRvcCA+IDApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhKGN1cnNvci5zY3JvbGxUb3AgPT09IDAgJiYgZGVsdGFZID4gMCkgJiZcbiAgICAgICAgICAgICEoY3Vyc29yLnNjcm9sbFRvcCA9PT0gbWF4U2Nyb2xsVG9wICYmIGRlbHRhWSA8IDApXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1heFNjcm9sbExlZnQgPSBjdXJzb3Iuc2Nyb2xsV2lkdGggLSBjdXJzb3IuY2xpZW50V2lkdGg7XG4gICAgICAgIGlmIChtYXhTY3JvbGxMZWZ0ID4gMCkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICEoY3Vyc29yLnNjcm9sbExlZnQgPT09IDAgJiYgZGVsdGFYIDwgMCkgJiZcbiAgICAgICAgICAgICEoY3Vyc29yLnNjcm9sbExlZnQgPT09IG1heFNjcm9sbExlZnQgJiYgZGVsdGFYID4gMClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjdXJzb3IgPSBjdXJzb3IucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZXdoZWVsSGFuZGxlcihlKSB7XG4gICAgdmFyIHJlZiA9IGdldERlbHRhRnJvbUV2ZW50KGUpO1xuICAgIHZhciBkZWx0YVggPSByZWZbMF07XG4gICAgdmFyIGRlbHRhWSA9IHJlZlsxXTtcblxuICAgIGlmIChzaG91bGRCZUNvbnN1bWVkQnlDaGlsZChlLnRhcmdldCwgZGVsdGFYLCBkZWx0YVkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNob3VsZFByZXZlbnQgPSBmYWxzZTtcbiAgICBpZiAoIWkuc2V0dGluZ3MudXNlQm90aFdoZWVsQXhlcykge1xuICAgICAgLy8gZGVsdGFYIHdpbGwgb25seSBiZSB1c2VkIGZvciBob3Jpem9udGFsIHNjcm9sbGluZyBhbmQgZGVsdGFZIHdpbGxcbiAgICAgIC8vIG9ubHkgYmUgdXNlZCBmb3IgdmVydGljYWwgc2Nyb2xsaW5nIC0gdGhpcyBpcyB0aGUgZGVmYXVsdFxuICAgICAgZWxlbWVudC5zY3JvbGxUb3AgLT0gZGVsdGFZICogaS5zZXR0aW5ncy53aGVlbFNwZWVkO1xuICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ICs9IGRlbHRhWCAqIGkuc2V0dGluZ3Mud2hlZWxTcGVlZDtcbiAgICB9IGVsc2UgaWYgKGkuc2Nyb2xsYmFyWUFjdGl2ZSAmJiAhaS5zY3JvbGxiYXJYQWN0aXZlKSB7XG4gICAgICAvLyBvbmx5IHZlcnRpY2FsIHNjcm9sbGJhciBpcyBhY3RpdmUgYW5kIHVzZUJvdGhXaGVlbEF4ZXMgb3B0aW9uIGlzXG4gICAgICAvLyBhY3RpdmUsIHNvIGxldCdzIHNjcm9sbCB2ZXJ0aWNhbCBiYXIgdXNpbmcgYm90aCBtb3VzZSB3aGVlbCBheGVzXG4gICAgICBpZiAoZGVsdGFZKSB7XG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wIC09IGRlbHRhWSAqIGkuc2V0dGluZ3Mud2hlZWxTcGVlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wICs9IGRlbHRhWCAqIGkuc2V0dGluZ3Mud2hlZWxTcGVlZDtcbiAgICAgIH1cbiAgICAgIHNob3VsZFByZXZlbnQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoaS5zY3JvbGxiYXJYQWN0aXZlICYmICFpLnNjcm9sbGJhcllBY3RpdmUpIHtcbiAgICAgIC8vIHVzZUJvdGhXaGVlbEF4ZXMgYW5kIG9ubHkgaG9yaXpvbnRhbCBiYXIgaXMgYWN0aXZlLCBzbyB1c2UgYm90aFxuICAgICAgLy8gd2hlZWwgYXhlcyBmb3IgaG9yaXpvbnRhbCBiYXJcbiAgICAgIGlmIChkZWx0YVgpIHtcbiAgICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ICs9IGRlbHRhWCAqIGkuc2V0dGluZ3Mud2hlZWxTcGVlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCAtPSBkZWx0YVkgKiBpLnNldHRpbmdzLndoZWVsU3BlZWQ7XG4gICAgICB9XG4gICAgICBzaG91bGRQcmV2ZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB1cGRhdGVHZW9tZXRyeShpKTtcblxuICAgIHNob3VsZFByZXZlbnQgPSBzaG91bGRQcmV2ZW50IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KGRlbHRhWCwgZGVsdGFZKTtcbiAgICBpZiAoc2hvdWxkUHJldmVudCAmJiAhZS5jdHJsS2V5KSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2Ygd2luZG93Lm9ud2hlZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaS5ldmVudC5iaW5kKGVsZW1lbnQsICd3aGVlbCcsIG1vdXNld2hlZWxIYW5kbGVyKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93Lm9ubW91c2V3aGVlbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpLmV2ZW50LmJpbmQoZWxlbWVudCwgJ21vdXNld2hlZWwnLCBtb3VzZXdoZWVsSGFuZGxlcik7XG4gIH1cbn07XG5cbnZhciB0b3VjaCA9IGZ1bmN0aW9uKGkpIHtcbiAgaWYgKCFlbnYuc3VwcG9ydHNUb3VjaCAmJiAhZW52LnN1cHBvcnRzSWVQb2ludGVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGVsZW1lbnQgPSBpLmVsZW1lbnQ7XG5cbiAgZnVuY3Rpb24gc2hvdWxkUHJldmVudChkZWx0YVgsIGRlbHRhWSkge1xuICAgIHZhciBzY3JvbGxUb3AgPSBNYXRoLmZsb29yKGVsZW1lbnQuc2Nyb2xsVG9wKTtcbiAgICB2YXIgc2Nyb2xsTGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICB2YXIgbWFnbml0dWRlWCA9IE1hdGguYWJzKGRlbHRhWCk7XG4gICAgdmFyIG1hZ25pdHVkZVkgPSBNYXRoLmFicyhkZWx0YVkpO1xuXG4gICAgaWYgKG1hZ25pdHVkZVkgPiBtYWduaXR1ZGVYKSB7XG4gICAgICAvLyB1c2VyIGlzIHBlcmhhcHMgdHJ5aW5nIHRvIHN3aXBlIHVwL2Rvd24gdGhlIHBhZ2VcblxuICAgICAgaWYgKFxuICAgICAgICAoZGVsdGFZIDwgMCAmJiBzY3JvbGxUb3AgPT09IGkuY29udGVudEhlaWdodCAtIGkuY29udGFpbmVySGVpZ2h0KSB8fFxuICAgICAgICAoZGVsdGFZID4gMCAmJiBzY3JvbGxUb3AgPT09IDApXG4gICAgICApIHtcbiAgICAgICAgLy8gc2V0IHByZXZlbnQgZm9yIG1vYmlsZSBDaHJvbWUgcmVmcmVzaFxuICAgICAgICByZXR1cm4gd2luZG93LnNjcm9sbFkgPT09IDAgJiYgZGVsdGFZID4gMCAmJiBlbnYuaXNDaHJvbWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChtYWduaXR1ZGVYID4gbWFnbml0dWRlWSkge1xuICAgICAgLy8gdXNlciBpcyBwZXJoYXBzIHRyeWluZyB0byBzd2lwZSBsZWZ0L3JpZ2h0IGFjcm9zcyB0aGUgcGFnZVxuXG4gICAgICBpZiAoXG4gICAgICAgIChkZWx0YVggPCAwICYmIHNjcm9sbExlZnQgPT09IGkuY29udGVudFdpZHRoIC0gaS5jb250YWluZXJXaWR0aCkgfHxcbiAgICAgICAgKGRlbHRhWCA+IDAgJiYgc2Nyb2xsTGVmdCA9PT0gMClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5VG91Y2hNb3ZlKGRpZmZlcmVuY2VYLCBkaWZmZXJlbmNlWSkge1xuICAgIGVsZW1lbnQuc2Nyb2xsVG9wIC09IGRpZmZlcmVuY2VZO1xuICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCAtPSBkaWZmZXJlbmNlWDtcblxuICAgIHVwZGF0ZUdlb21ldHJ5KGkpO1xuICB9XG5cbiAgdmFyIHN0YXJ0T2Zmc2V0ID0ge307XG4gIHZhciBzdGFydFRpbWUgPSAwO1xuICB2YXIgc3BlZWQgPSB7fTtcbiAgdmFyIGVhc2luZ0xvb3AgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGdldFRvdWNoKGUpIHtcbiAgICBpZiAoZS50YXJnZXRUb3VjaGVzKSB7XG4gICAgICByZXR1cm4gZS50YXJnZXRUb3VjaGVzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBNYXliZSBJRSBwb2ludGVyXG4gICAgICByZXR1cm4gZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRIYW5kbGUoZSkge1xuICAgIGlmIChlLnBvaW50ZXJUeXBlICYmIGUucG9pbnRlclR5cGUgPT09ICdwZW4nICYmIGUuYnV0dG9ucyA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBlLnBvaW50ZXJUeXBlICYmXG4gICAgICBlLnBvaW50ZXJUeXBlICE9PSAnbW91c2UnICYmXG4gICAgICBlLnBvaW50ZXJUeXBlICE9PSBlLk1TUE9JTlRFUl9UWVBFX01PVVNFXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hTdGFydChlKSB7XG4gICAgaWYgKCFzaG91bGRIYW5kbGUoZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdG91Y2ggPSBnZXRUb3VjaChlKTtcblxuICAgIHN0YXJ0T2Zmc2V0LnBhZ2VYID0gdG91Y2gucGFnZVg7XG4gICAgc3RhcnRPZmZzZXQucGFnZVkgPSB0b3VjaC5wYWdlWTtcblxuICAgIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgaWYgKGVhc2luZ0xvb3AgIT09IG51bGwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoZWFzaW5nTG9vcCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkQmVDb25zdW1lZEJ5Q2hpbGQodGFyZ2V0LCBkZWx0YVgsIGRlbHRhWSkge1xuICAgIGlmICghZWxlbWVudC5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGN1cnNvciA9IHRhcmdldDtcblxuICAgIHdoaWxlIChjdXJzb3IgJiYgY3Vyc29yICE9PSBlbGVtZW50KSB7XG4gICAgICBpZiAoY3Vyc29yLmNsYXNzTGlzdC5jb250YWlucyhjbHMuZWxlbWVudC5jb25zdW1pbmcpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3R5bGUgPSBnZXQoY3Vyc29yKTtcbiAgICAgIHZhciBvdmVyZmxvdyA9IFtzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1ldLmpvaW4oXG4gICAgICAgICcnXG4gICAgICApO1xuXG4gICAgICAvLyBpZiBzY3JvbGxhYmxlXG4gICAgICBpZiAob3ZlcmZsb3cubWF0Y2goLyhzY3JvbGx8YXV0bykvKSkge1xuICAgICAgICB2YXIgbWF4U2Nyb2xsVG9wID0gY3Vyc29yLnNjcm9sbEhlaWdodCAtIGN1cnNvci5jbGllbnRIZWlnaHQ7XG4gICAgICAgIGlmIChtYXhTY3JvbGxUb3AgPiAwKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIShjdXJzb3Iuc2Nyb2xsVG9wID09PSAwICYmIGRlbHRhWSA+IDApICYmXG4gICAgICAgICAgICAhKGN1cnNvci5zY3JvbGxUb3AgPT09IG1heFNjcm9sbFRvcCAmJiBkZWx0YVkgPCAwKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBtYXhTY3JvbGxMZWZ0ID0gY3Vyc29yLnNjcm9sbExlZnQgLSBjdXJzb3IuY2xpZW50V2lkdGg7XG4gICAgICAgIGlmIChtYXhTY3JvbGxMZWZ0ID4gMCkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICEoY3Vyc29yLnNjcm9sbExlZnQgPT09IDAgJiYgZGVsdGFYIDwgMCkgJiZcbiAgICAgICAgICAgICEoY3Vyc29yLnNjcm9sbExlZnQgPT09IG1heFNjcm9sbExlZnQgJiYgZGVsdGFYID4gMClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjdXJzb3IgPSBjdXJzb3IucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaE1vdmUoZSkge1xuICAgIGlmIChzaG91bGRIYW5kbGUoZSkpIHtcbiAgICAgIHZhciB0b3VjaCA9IGdldFRvdWNoKGUpO1xuXG4gICAgICB2YXIgY3VycmVudE9mZnNldCA9IHsgcGFnZVg6IHRvdWNoLnBhZ2VYLCBwYWdlWTogdG91Y2gucGFnZVkgfTtcblxuICAgICAgdmFyIGRpZmZlcmVuY2VYID0gY3VycmVudE9mZnNldC5wYWdlWCAtIHN0YXJ0T2Zmc2V0LnBhZ2VYO1xuICAgICAgdmFyIGRpZmZlcmVuY2VZID0gY3VycmVudE9mZnNldC5wYWdlWSAtIHN0YXJ0T2Zmc2V0LnBhZ2VZO1xuXG4gICAgICBpZiAoc2hvdWxkQmVDb25zdW1lZEJ5Q2hpbGQoZS50YXJnZXQsIGRpZmZlcmVuY2VYLCBkaWZmZXJlbmNlWSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcHBseVRvdWNoTW92ZShkaWZmZXJlbmNlWCwgZGlmZmVyZW5jZVkpO1xuICAgICAgc3RhcnRPZmZzZXQgPSBjdXJyZW50T2Zmc2V0O1xuXG4gICAgICB2YXIgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgICAgdmFyIHRpbWVHYXAgPSBjdXJyZW50VGltZSAtIHN0YXJ0VGltZTtcbiAgICAgIGlmICh0aW1lR2FwID4gMCkge1xuICAgICAgICBzcGVlZC54ID0gZGlmZmVyZW5jZVggLyB0aW1lR2FwO1xuICAgICAgICBzcGVlZC55ID0gZGlmZmVyZW5jZVkgLyB0aW1lR2FwO1xuICAgICAgICBzdGFydFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNob3VsZFByZXZlbnQoZGlmZmVyZW5jZVgsIGRpZmZlcmVuY2VZKSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHRvdWNoRW5kKCkge1xuICAgIGlmIChpLnNldHRpbmdzLnN3aXBlRWFzaW5nKSB7XG4gICAgICBjbGVhckludGVydmFsKGVhc2luZ0xvb3ApO1xuICAgICAgZWFzaW5nTG9vcCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoaS5pc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChlYXNpbmdMb29wKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNwZWVkLnggJiYgIXNwZWVkLnkpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKGVhc2luZ0xvb3ApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChNYXRoLmFicyhzcGVlZC54KSA8IDAuMDEgJiYgTWF0aC5hYnMoc3BlZWQueSkgPCAwLjAxKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChlYXNpbmdMb29wKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhcHBseVRvdWNoTW92ZShzcGVlZC54ICogMzAsIHNwZWVkLnkgKiAzMCk7XG5cbiAgICAgICAgc3BlZWQueCAqPSAwLjg7XG4gICAgICAgIHNwZWVkLnkgKj0gMC44O1xuICAgICAgfSwgMTApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlbnYuc3VwcG9ydHNUb3VjaCkge1xuICAgIGkuZXZlbnQuYmluZChlbGVtZW50LCAndG91Y2hzdGFydCcsIHRvdWNoU3RhcnQpO1xuICAgIGkuZXZlbnQuYmluZChlbGVtZW50LCAndG91Y2htb3ZlJywgdG91Y2hNb3ZlKTtcbiAgICBpLmV2ZW50LmJpbmQoZWxlbWVudCwgJ3RvdWNoZW5kJywgdG91Y2hFbmQpO1xuICB9IGVsc2UgaWYgKGVudi5zdXBwb3J0c0llUG9pbnRlcikge1xuICAgIGlmICh3aW5kb3cuUG9pbnRlckV2ZW50KSB7XG4gICAgICBpLmV2ZW50LmJpbmQoZWxlbWVudCwgJ3BvaW50ZXJkb3duJywgdG91Y2hTdGFydCk7XG4gICAgICBpLmV2ZW50LmJpbmQoZWxlbWVudCwgJ3BvaW50ZXJtb3ZlJywgdG91Y2hNb3ZlKTtcbiAgICAgIGkuZXZlbnQuYmluZChlbGVtZW50LCAncG9pbnRlcnVwJywgdG91Y2hFbmQpO1xuICAgIH0gZWxzZSBpZiAod2luZG93Lk1TUG9pbnRlckV2ZW50KSB7XG4gICAgICBpLmV2ZW50LmJpbmQoZWxlbWVudCwgJ01TUG9pbnRlckRvd24nLCB0b3VjaFN0YXJ0KTtcbiAgICAgIGkuZXZlbnQuYmluZChlbGVtZW50LCAnTVNQb2ludGVyTW92ZScsIHRvdWNoTW92ZSk7XG4gICAgICBpLmV2ZW50LmJpbmQoZWxlbWVudCwgJ01TUG9pbnRlclVwJywgdG91Y2hFbmQpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIGRlZmF1bHRTZXR0aW5ncyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gIGhhbmRsZXJzOiBbJ2NsaWNrLXJhaWwnLCAnZHJhZy10aHVtYicsICdrZXlib2FyZCcsICd3aGVlbCcsICd0b3VjaCddLFxuICBtYXhTY3JvbGxiYXJMZW5ndGg6IG51bGwsXG4gIG1pblNjcm9sbGJhckxlbmd0aDogbnVsbCxcbiAgc2Nyb2xsaW5nVGhyZXNob2xkOiAxMDAwLFxuICBzY3JvbGxYTWFyZ2luT2Zmc2V0OiAwLFxuICBzY3JvbGxZTWFyZ2luT2Zmc2V0OiAwLFxuICBzdXBwcmVzc1Njcm9sbFg6IGZhbHNlLFxuICBzdXBwcmVzc1Njcm9sbFk6IGZhbHNlLFxuICBzd2lwZUVhc2luZzogdHJ1ZSxcbiAgdXNlQm90aFdoZWVsQXhlczogZmFsc2UsXG4gIHdoZWVsUHJvcGFnYXRpb246IHRydWUsXG4gIHdoZWVsU3BlZWQ6IDEsXG59KTsgfTtcblxudmFyIGhhbmRsZXJzID0ge1xuICAnY2xpY2stcmFpbCc6IGNsaWNrUmFpbCxcbiAgJ2RyYWctdGh1bWInOiBkcmFnVGh1bWIsXG4gIGtleWJvYXJkOiBrZXlib2FyZCxcbiAgd2hlZWw6IHdoZWVsLFxuICB0b3VjaDogdG91Y2gsXG59O1xuXG52YXIgUGVyZmVjdFNjcm9sbGJhciA9IGZ1bmN0aW9uIFBlcmZlY3RTY3JvbGxiYXIoZWxlbWVudCwgdXNlclNldHRpbmdzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuICBpZiAoIHVzZXJTZXR0aW5ncyA9PT0gdm9pZCAwICkgdXNlclNldHRpbmdzID0ge307XG5cbiAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpO1xuICB9XG5cbiAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdubyBlbGVtZW50IGlzIHNwZWNpZmllZCB0byBpbml0aWFsaXplIFBlcmZlY3RTY3JvbGxiYXInKTtcbiAgfVxuXG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNscy5tYWluKTtcblxuICB0aGlzLnNldHRpbmdzID0gZGVmYXVsdFNldHRpbmdzKCk7XG4gIGZvciAodmFyIGtleSBpbiB1c2VyU2V0dGluZ3MpIHtcbiAgICB0aGlzJDEuc2V0dGluZ3Nba2V5XSA9IHVzZXJTZXR0aW5nc1trZXldO1xuICB9XG5cbiAgdGhpcy5jb250YWluZXJXaWR0aCA9IG51bGw7XG4gIHRoaXMuY29udGFpbmVySGVpZ2h0ID0gbnVsbDtcbiAgdGhpcy5jb250ZW50V2lkdGggPSBudWxsO1xuICB0aGlzLmNvbnRlbnRIZWlnaHQgPSBudWxsO1xuXG4gIHZhciBmb2N1cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbHMuc3RhdGUuZm9jdXMpOyB9O1xuICB2YXIgYmx1ciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbHMuc3RhdGUuZm9jdXMpOyB9O1xuXG4gIHRoaXMuaXNSdGwgPSBnZXQoZWxlbWVudCkuZGlyZWN0aW9uID09PSAncnRsJztcbiAgdGhpcy5pc05lZ2F0aXZlU2Nyb2xsID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3JpZ2luYWxTY3JvbGxMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IC0xO1xuICAgIHJlc3VsdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdCA8IDA7XG4gICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gb3JpZ2luYWxTY3JvbGxMZWZ0O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pKCk7XG4gIHRoaXMubmVnYXRpdmVTY3JvbGxBZGp1c3RtZW50ID0gdGhpcy5pc05lZ2F0aXZlU2Nyb2xsXG4gICAgPyBlbGVtZW50LnNjcm9sbFdpZHRoIC0gZWxlbWVudC5jbGllbnRXaWR0aFxuICAgIDogMDtcbiAgdGhpcy5ldmVudCA9IG5ldyBFdmVudE1hbmFnZXIoKTtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xuXG4gIHRoaXMuc2Nyb2xsYmFyWFJhaWwgPSBkaXYoY2xzLmVsZW1lbnQucmFpbCgneCcpKTtcbiAgZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnNjcm9sbGJhclhSYWlsKTtcbiAgdGhpcy5zY3JvbGxiYXJYID0gZGl2KGNscy5lbGVtZW50LnRodW1iKCd4JykpO1xuICB0aGlzLnNjcm9sbGJhclhSYWlsLmFwcGVuZENoaWxkKHRoaXMuc2Nyb2xsYmFyWCk7XG4gIHRoaXMuc2Nyb2xsYmFyWC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMCk7XG4gIHRoaXMuZXZlbnQuYmluZCh0aGlzLnNjcm9sbGJhclgsICdmb2N1cycsIGZvY3VzKTtcbiAgdGhpcy5ldmVudC5iaW5kKHRoaXMuc2Nyb2xsYmFyWCwgJ2JsdXInLCBibHVyKTtcbiAgdGhpcy5zY3JvbGxiYXJYQWN0aXZlID0gbnVsbDtcbiAgdGhpcy5zY3JvbGxiYXJYV2lkdGggPSBudWxsO1xuICB0aGlzLnNjcm9sbGJhclhMZWZ0ID0gbnVsbDtcbiAgdmFyIHJhaWxYU3R5bGUgPSBnZXQodGhpcy5zY3JvbGxiYXJYUmFpbCk7XG4gIHRoaXMuc2Nyb2xsYmFyWEJvdHRvbSA9IHBhcnNlSW50KHJhaWxYU3R5bGUuYm90dG9tLCAxMCk7XG4gIGlmIChpc05hTih0aGlzLnNjcm9sbGJhclhCb3R0b20pKSB7XG4gICAgdGhpcy5pc1Njcm9sbGJhclhVc2luZ0JvdHRvbSA9IGZhbHNlO1xuICAgIHRoaXMuc2Nyb2xsYmFyWFRvcCA9IHRvSW50KHJhaWxYU3R5bGUudG9wKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlzU2Nyb2xsYmFyWFVzaW5nQm90dG9tID0gdHJ1ZTtcbiAgfVxuICB0aGlzLnJhaWxCb3JkZXJYV2lkdGggPVxuICAgIHRvSW50KHJhaWxYU3R5bGUuYm9yZGVyTGVmdFdpZHRoKSArIHRvSW50KHJhaWxYU3R5bGUuYm9yZGVyUmlnaHRXaWR0aCk7XG4gIC8vIFNldCByYWlsIHRvIGRpc3BsYXk6YmxvY2sgdG8gY2FsY3VsYXRlIG1hcmdpbnNcbiAgc2V0KHRoaXMuc2Nyb2xsYmFyWFJhaWwsIHsgZGlzcGxheTogJ2Jsb2NrJyB9KTtcbiAgdGhpcy5yYWlsWE1hcmdpbldpZHRoID1cbiAgICB0b0ludChyYWlsWFN0eWxlLm1hcmdpbkxlZnQpICsgdG9JbnQocmFpbFhTdHlsZS5tYXJnaW5SaWdodCk7XG4gIHNldCh0aGlzLnNjcm9sbGJhclhSYWlsLCB7IGRpc3BsYXk6ICcnIH0pO1xuICB0aGlzLnJhaWxYV2lkdGggPSBudWxsO1xuICB0aGlzLnJhaWxYUmF0aW8gPSBudWxsO1xuXG4gIHRoaXMuc2Nyb2xsYmFyWVJhaWwgPSBkaXYoY2xzLmVsZW1lbnQucmFpbCgneScpKTtcbiAgZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnNjcm9sbGJhcllSYWlsKTtcbiAgdGhpcy5zY3JvbGxiYXJZID0gZGl2KGNscy5lbGVtZW50LnRodW1iKCd5JykpO1xuICB0aGlzLnNjcm9sbGJhcllSYWlsLmFwcGVuZENoaWxkKHRoaXMuc2Nyb2xsYmFyWSk7XG4gIHRoaXMuc2Nyb2xsYmFyWS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMCk7XG4gIHRoaXMuZXZlbnQuYmluZCh0aGlzLnNjcm9sbGJhclksICdmb2N1cycsIGZvY3VzKTtcbiAgdGhpcy5ldmVudC5iaW5kKHRoaXMuc2Nyb2xsYmFyWSwgJ2JsdXInLCBibHVyKTtcbiAgdGhpcy5zY3JvbGxiYXJZQWN0aXZlID0gbnVsbDtcbiAgdGhpcy5zY3JvbGxiYXJZSGVpZ2h0ID0gbnVsbDtcbiAgdGhpcy5zY3JvbGxiYXJZVG9wID0gbnVsbDtcbiAgdmFyIHJhaWxZU3R5bGUgPSBnZXQodGhpcy5zY3JvbGxiYXJZUmFpbCk7XG4gIHRoaXMuc2Nyb2xsYmFyWVJpZ2h0ID0gcGFyc2VJbnQocmFpbFlTdHlsZS5yaWdodCwgMTApO1xuICBpZiAoaXNOYU4odGhpcy5zY3JvbGxiYXJZUmlnaHQpKSB7XG4gICAgdGhpcy5pc1Njcm9sbGJhcllVc2luZ1JpZ2h0ID0gZmFsc2U7XG4gICAgdGhpcy5zY3JvbGxiYXJZTGVmdCA9IHRvSW50KHJhaWxZU3R5bGUubGVmdCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pc1Njcm9sbGJhcllVc2luZ1JpZ2h0ID0gdHJ1ZTtcbiAgfVxuICB0aGlzLnNjcm9sbGJhcllPdXRlcldpZHRoID0gdGhpcy5pc1J0bCA/IG91dGVyV2lkdGgodGhpcy5zY3JvbGxiYXJZKSA6IG51bGw7XG4gIHRoaXMucmFpbEJvcmRlcllXaWR0aCA9XG4gICAgdG9JbnQocmFpbFlTdHlsZS5ib3JkZXJUb3BXaWR0aCkgKyB0b0ludChyYWlsWVN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgc2V0KHRoaXMuc2Nyb2xsYmFyWVJhaWwsIHsgZGlzcGxheTogJ2Jsb2NrJyB9KTtcbiAgdGhpcy5yYWlsWU1hcmdpbkhlaWdodCA9XG4gICAgdG9JbnQocmFpbFlTdHlsZS5tYXJnaW5Ub3ApICsgdG9JbnQocmFpbFlTdHlsZS5tYXJnaW5Cb3R0b20pO1xuICBzZXQodGhpcy5zY3JvbGxiYXJZUmFpbCwgeyBkaXNwbGF5OiAnJyB9KTtcbiAgdGhpcy5yYWlsWUhlaWdodCA9IG51bGw7XG4gIHRoaXMucmFpbFlSYXRpbyA9IG51bGw7XG5cbiAgdGhpcy5yZWFjaCA9IHtcbiAgICB4OlxuICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0IDw9IDBcbiAgICAgICAgPyAnc3RhcnQnXG4gICAgICAgIDogZWxlbWVudC5zY3JvbGxMZWZ0ID49IHRoaXMuY29udGVudFdpZHRoIC0gdGhpcy5jb250YWluZXJXaWR0aFxuICAgICAgICAgID8gJ2VuZCdcbiAgICAgICAgICA6IG51bGwsXG4gICAgeTpcbiAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wIDw9IDBcbiAgICAgICAgPyAnc3RhcnQnXG4gICAgICAgIDogZWxlbWVudC5zY3JvbGxUb3AgPj0gdGhpcy5jb250ZW50SGVpZ2h0IC0gdGhpcy5jb250YWluZXJIZWlnaHRcbiAgICAgICAgICA/ICdlbmQnXG4gICAgICAgICAgOiBudWxsLFxuICB9O1xuXG4gIHRoaXMuaXNBbGl2ZSA9IHRydWU7XG5cbiAgdGhpcy5zZXR0aW5ncy5oYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyTmFtZSkgeyByZXR1cm4gaGFuZGxlcnNbaGFuZGxlck5hbWVdKHRoaXMkMSk7IH0pO1xuXG4gIHRoaXMubGFzdFNjcm9sbFRvcCA9IE1hdGguZmxvb3IoZWxlbWVudC5zY3JvbGxUb3ApOyAvLyBmb3Igb25TY3JvbGwgb25seVxuICB0aGlzLmxhc3RTY3JvbGxMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0OyAvLyBmb3Igb25TY3JvbGwgb25seVxuICB0aGlzLmV2ZW50LmJpbmQodGhpcy5lbGVtZW50LCAnc2Nyb2xsJywgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRoaXMkMS5vblNjcm9sbChlKTsgfSk7XG4gIHVwZGF0ZUdlb21ldHJ5KHRoaXMpO1xufTtcblxuUGVyZmVjdFNjcm9sbGJhci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgaWYgKCF0aGlzLmlzQWxpdmUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBSZWNhbGN1YXRlIG5lZ2F0aXZlIHNjcm9sbExlZnQgYWRqdXN0bWVudFxuICB0aGlzLm5lZ2F0aXZlU2Nyb2xsQWRqdXN0bWVudCA9IHRoaXMuaXNOZWdhdGl2ZVNjcm9sbFxuICAgID8gdGhpcy5lbGVtZW50LnNjcm9sbFdpZHRoIC0gdGhpcy5lbGVtZW50LmNsaWVudFdpZHRoXG4gICAgOiAwO1xuXG4gIC8vIFJlY2FsY3VsYXRlIHJhaWwgbWFyZ2luc1xuICBzZXQodGhpcy5zY3JvbGxiYXJYUmFpbCwgeyBkaXNwbGF5OiAnYmxvY2snIH0pO1xuICBzZXQodGhpcy5zY3JvbGxiYXJZUmFpbCwgeyBkaXNwbGF5OiAnYmxvY2snIH0pO1xuICB0aGlzLnJhaWxYTWFyZ2luV2lkdGggPVxuICAgIHRvSW50KGdldCh0aGlzLnNjcm9sbGJhclhSYWlsKS5tYXJnaW5MZWZ0KSArXG4gICAgdG9JbnQoZ2V0KHRoaXMuc2Nyb2xsYmFyWFJhaWwpLm1hcmdpblJpZ2h0KTtcbiAgdGhpcy5yYWlsWU1hcmdpbkhlaWdodCA9XG4gICAgdG9JbnQoZ2V0KHRoaXMuc2Nyb2xsYmFyWVJhaWwpLm1hcmdpblRvcCkgK1xuICAgIHRvSW50KGdldCh0aGlzLnNjcm9sbGJhcllSYWlsKS5tYXJnaW5Cb3R0b20pO1xuXG4gIC8vIEhpZGUgc2Nyb2xsYmFycyBub3QgdG8gYWZmZWN0IHNjcm9sbFdpZHRoIGFuZCBzY3JvbGxIZWlnaHRcbiAgc2V0KHRoaXMuc2Nyb2xsYmFyWFJhaWwsIHsgZGlzcGxheTogJ25vbmUnIH0pO1xuICBzZXQodGhpcy5zY3JvbGxiYXJZUmFpbCwgeyBkaXNwbGF5OiAnbm9uZScgfSk7XG5cbiAgdXBkYXRlR2VvbWV0cnkodGhpcyk7XG5cbiAgcHJvY2Vzc1Njcm9sbERpZmYodGhpcywgJ3RvcCcsIDAsIGZhbHNlLCB0cnVlKTtcbiAgcHJvY2Vzc1Njcm9sbERpZmYodGhpcywgJ2xlZnQnLCAwLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgc2V0KHRoaXMuc2Nyb2xsYmFyWFJhaWwsIHsgZGlzcGxheTogJycgfSk7XG4gIHNldCh0aGlzLnNjcm9sbGJhcllSYWlsLCB7IGRpc3BsYXk6ICcnIH0pO1xufTtcblxuUGVyZmVjdFNjcm9sbGJhci5wcm90b3R5cGUub25TY3JvbGwgPSBmdW5jdGlvbiBvblNjcm9sbCAoZSkge1xuICBpZiAoIXRoaXMuaXNBbGl2ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHVwZGF0ZUdlb21ldHJ5KHRoaXMpO1xuICBwcm9jZXNzU2Nyb2xsRGlmZih0aGlzLCAndG9wJywgdGhpcy5lbGVtZW50LnNjcm9sbFRvcCAtIHRoaXMubGFzdFNjcm9sbFRvcCk7XG4gIHByb2Nlc3NTY3JvbGxEaWZmKFxuICAgIHRoaXMsXG4gICAgJ2xlZnQnLFxuICAgIHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0IC0gdGhpcy5sYXN0U2Nyb2xsTGVmdFxuICApO1xuXG4gIHRoaXMubGFzdFNjcm9sbFRvcCA9IE1hdGguZmxvb3IodGhpcy5lbGVtZW50LnNjcm9sbFRvcCk7XG4gIHRoaXMubGFzdFNjcm9sbExlZnQgPSB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdDtcbn07XG5cblBlcmZlY3RTY3JvbGxiYXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgaWYgKCF0aGlzLmlzQWxpdmUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmV2ZW50LnVuYmluZEFsbCgpO1xuICByZW1vdmUodGhpcy5zY3JvbGxiYXJYKTtcbiAgcmVtb3ZlKHRoaXMuc2Nyb2xsYmFyWSk7XG4gIHJlbW92ZSh0aGlzLnNjcm9sbGJhclhSYWlsKTtcbiAgcmVtb3ZlKHRoaXMuc2Nyb2xsYmFyWVJhaWwpO1xuICB0aGlzLnJlbW92ZVBzQ2xhc3NlcygpO1xuXG4gIC8vIHVuc2V0IGVsZW1lbnRzXG4gIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gIHRoaXMuc2Nyb2xsYmFyWCA9IG51bGw7XG4gIHRoaXMuc2Nyb2xsYmFyWSA9IG51bGw7XG4gIHRoaXMuc2Nyb2xsYmFyWFJhaWwgPSBudWxsO1xuICB0aGlzLnNjcm9sbGJhcllSYWlsID0gbnVsbDtcblxuICB0aGlzLmlzQWxpdmUgPSBmYWxzZTtcbn07XG5cblBlcmZlY3RTY3JvbGxiYXIucHJvdG90eXBlLnJlbW92ZVBzQ2xhc3NlcyA9IGZ1bmN0aW9uIHJlbW92ZVBzQ2xhc3NlcyAoKSB7XG4gIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lXG4gICAgLnNwbGl0KCcgJylcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbmFtZS5tYXRjaCgvXnBzKFstX10uK3wpJC8pOyB9KVxuICAgIC5qb2luKCcgJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBlcmZlY3RTY3JvbGxiYXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRodW1icyA9IGV4cG9ydHMuQ2Fyb3VzZWwgPSB1bmRlZmluZWQ7XG5cbnZhciBfQ2Fyb3VzZWwgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvQ2Fyb3VzZWwnKTtcblxudmFyIF9DYXJvdXNlbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DYXJvdXNlbCk7XG5cbnZhciBfVGh1bWJzID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL1RodW1icycpO1xuXG52YXIgX1RodW1iczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UaHVtYnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLkNhcm91c2VsID0gX0Nhcm91c2VsMi5kZWZhdWx0O1xuZXhwb3J0cy5UaHVtYnMgPSBfVGh1bWJzMi5kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2Nzc0NsYXNzZXMgPSByZXF1aXJlKCcuLi9jc3NDbGFzc2VzJyk7XG5cbnZhciBfY3NzQ2xhc3NlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jc3NDbGFzc2VzKTtcblxudmFyIF9DU1NUcmFuc2xhdGUgPSByZXF1aXJlKCcuLi9DU1NUcmFuc2xhdGUnKTtcblxudmFyIF9DU1NUcmFuc2xhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ1NTVHJhbnNsYXRlKTtcblxudmFyIF9yZWFjdEVhc3lTd2lwZSA9IHJlcXVpcmUoJ3JlYWN0LWVhc3ktc3dpcGUnKTtcblxudmFyIF9yZWFjdEVhc3lTd2lwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdEVhc3lTd2lwZSk7XG5cbnZhciBfVGh1bWJzID0gcmVxdWlyZSgnLi9UaHVtYnMnKTtcblxudmFyIF9UaHVtYnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGh1bWJzKTtcblxudmFyIF9jdXN0b21Qcm9wVHlwZXMgPSByZXF1aXJlKCcuLi9jdXN0b21Qcm9wVHlwZXMnKTtcblxudmFyIGN1c3RvbVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jdXN0b21Qcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG52YXIgZGVmYXVsdFN0YXR1c0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRlZmF1bHRTdGF0dXNGb3JtYXR0ZXIoY3VycmVudCwgdG90YWwpIHtcbiAgICByZXR1cm4gY3VycmVudCArICcgb2YgJyArIHRvdGFsO1xufTtcblxudmFyIENhcm91c2VsID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQ2Fyb3VzZWwsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gQ2Fyb3VzZWwocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhcm91c2VsKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ2Fyb3VzZWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDYXJvdXNlbCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc2VsZWN0ZWRJdGVtOiBwcm9wcy5zZWxlY3RlZEl0ZW0sXG4gICAgICAgICAgICBoYXNNb3VudDogZmFsc2UsXG4gICAgICAgICAgICBpc01vdXNlRW50ZXJlZDogZmFsc2UsXG4gICAgICAgICAgICBhdXRvUGxheTogcHJvcHMuYXV0b1BsYXlcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDYXJvdXNlbCwgW3tcbiAgICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0dXBDYXJvdXNlbCgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKG5leHRQcm9wcy5zZWxlY3RlZEl0ZW0gIT09IHRoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTaXplcygpO1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZVRvKG5leHRQcm9wcy5zZWxlY3RlZEl0ZW0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmV4dFByb3BzLmF1dG9QbGF5ICE9PSB0aGlzLnN0YXRlLmF1dG9QbGF5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGF1dG9QbGF5OiBuZXh0UHJvcHMuYXV0b1BsYXlcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczIuc3RhdGUuYXV0b1BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5zZXR1cEF1dG9QbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIuZGVzdHJveUF1dG9QbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKCFwcmV2UHJvcHMuY2hpbGRyZW4gJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhdGhpcy5zdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBDYXJvdXNlbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZTdGF0ZS5zd2lwaW5nICYmICF0aGlzLnN0YXRlLnN3aXBpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBzdG9wcGVkIHN3aXBpbmcsIGVuc3VyZSB3ZSBhcmUgaGVhZGluZyB0byB0aGUgbmV3L2N1cnJlbnQgc2xpZGUgYW5kIG5vdCBzdHVja1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveUNhcm91c2VsKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NldHVwQ2Fyb3VzZWwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBDYXJvdXNlbCgpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5hdXRvUGxheSAmJiBfcmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbikgPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR1cEF1dG9QbGF5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGluaXRpYWxpemVkOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGluaXRpYWxJbWFnZSA9IHRoaXMuZ2V0SW5pdGlhbEltYWdlKCk7XG4gICAgICAgICAgICBpZiAoaW5pdGlhbEltYWdlKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgaXQncyBhIGNhcm91c2VsIG9mIGltYWdlcywgd2Ugc2V0IHRoZSBtb3VudCBzdGF0ZSBhZnRlciB0aGUgZmlyc3QgaW1hZ2UgaXMgbG9hZGVkXG4gICAgICAgICAgICAgICAgaW5pdGlhbEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB0aGlzLnNldE1vdW50U3RhdGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1vdW50U3RhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVzdHJveUNhcm91c2VsJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lDYXJvdXNlbCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3lBdXRvUGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZXR1cEF1dG9QbGF5JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwQXV0b1BsYXkoKSB7XG4gICAgICAgICAgICB0aGlzLmF1dG9QbGF5KCk7XG4gICAgICAgICAgICB2YXIgY2Fyb3VzZWxXcmFwcGVyID0gdGhpcy5jYXJvdXNlbFdyYXBwZXJSZWY7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnN0b3BPbkhvdmVyICYmIGNhcm91c2VsV3JhcHBlcikge1xuICAgICAgICAgICAgICAgIGNhcm91c2VsV3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5zdG9wT25Ib3Zlcik7XG4gICAgICAgICAgICAgICAgY2Fyb3VzZWxXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLnN0YXJ0T25MZWF2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3lBdXRvUGxheScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95QXV0b1BsYXkoKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyQXV0b1BsYXkoKTtcbiAgICAgICAgICAgIHZhciBjYXJvdXNlbFdyYXBwZXIgPSB0aGlzLmNhcm91c2VsV3JhcHBlclJlZjtcblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuc3RvcE9uSG92ZXIgJiYgY2Fyb3VzZWxXcmFwcGVyKSB7XG4gICAgICAgICAgICAgICAgY2Fyb3VzZWxXcmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLnN0b3BPbkhvdmVyKTtcbiAgICAgICAgICAgICAgICBjYXJvdXNlbFdyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuc3RhcnRPbkxlYXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYmluZEV2ZW50cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBiaW5kRXZlbnRzKCkge1xuICAgICAgICAgICAgLy8gYXMgdGhlIHdpZHRocyBhcmUgY2FsY3VsYXRlZCwgd2UgbmVlZCB0byByZXNpemVcbiAgICAgICAgICAgIC8vIHRoZSBjYXJvdXNlbCB3aGVuIHRoZSB3aW5kb3cgaXMgcmVzaXplZFxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy51cGRhdGVTaXplcyk7XG4gICAgICAgICAgICAvLyBpc3N1ZSAjMiAtIGltYWdlIGxvYWRpbmcgc21hbGxlclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIHRoaXMudXBkYXRlU2l6ZXMpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy51c2VLZXlib2FyZEFycm93cykge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMubmF2aWdhdGVXaXRoS2V5Ym9hcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICd1bmJpbmRFdmVudHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kRXZlbnRzKCkge1xuICAgICAgICAgICAgLy8gcmVtb3ZpbmcgbGlzdGVuZXJzXG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLnVwZGF0ZVNpemVzKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCB0aGlzLnVwZGF0ZVNpemVzKTtcblxuICAgICAgICAgICAgdmFyIGluaXRpYWxJbWFnZSA9IHRoaXMuZ2V0SW5pdGlhbEltYWdlKCk7XG4gICAgICAgICAgICBpZiAoaW5pdGlhbEltYWdlKSB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbEltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIHRoaXMuc2V0TW91bnRTdGF0ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnVzZUtleWJvYXJkQXJyb3dzKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5uYXZpZ2F0ZVdpdGhLZXlib2FyZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldFBvc2l0aW9uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pbmZpbml0ZUxvb3ApIHtcbiAgICAgICAgICAgICAgICAvLyBpbmRleCBoYXMgdG8gYmUgYWRkZWQgYnkgMSBiZWNhdXNlIG9mIHRoZSBmaXJzdCBjbG9uZWQgc2xpZGVcbiAgICAgICAgICAgICAgICArK2luZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gX3JlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuY2VudGVyTW9kZSAmJiB0aGlzLnByb3BzLmF4aXMgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UG9zaXRpb24gPSAtaW5kZXggKiB0aGlzLnByb3BzLmNlbnRlclNsaWRlUGVyY2VudGFnZTtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFBvc2l0aW9uID0gY2hpbGRyZW5MZW5ndGggLSAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICYmIChpbmRleCAhPT0gbGFzdFBvc2l0aW9uIHx8IHRoaXMucHJvcHMuaW5maW5pdGVMb29wKSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9zaXRpb24gKz0gKDEwMCAtIHRoaXMucHJvcHMuY2VudGVyU2xpZGVQZXJjZW50YWdlKSAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gbGFzdFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb3NpdGlvbiArPSAxMDAgLSB0aGlzLnByb3BzLmNlbnRlclNsaWRlUGVyY2VudGFnZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gLWluZGV4ICogMTAwO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXJJdGVtcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJJdGVtcyhpc0Nsb25lKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlUHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuc2V0SXRlbXNSZWYoZSwgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdpdGVtS2V5JyArIGluZGV4ICsgKGlzQ2xvbmUgPyAnY2xvbmUnIDogJycpLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IF9jc3NDbGFzc2VzMi5kZWZhdWx0LklURU0odHJ1ZSwgaW5kZXggPT09IF90aGlzMy5zdGF0ZS5zZWxlY3RlZEl0ZW0pLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfdGhpczMuaGFuZGxlQ2xpY2tJdGVtLmJpbmQoX3RoaXMzLCBpbmRleCwgaXRlbSlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzMy5wcm9wcy5jZW50ZXJNb2RlICYmIF90aGlzMy5wcm9wcy5heGlzID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVQcm9wcy5zdHlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbldpZHRoOiBfdGhpczMucHJvcHMuY2VudGVyU2xpZGVQZXJjZW50YWdlICsgJyUnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZVByb3BzLFxuICAgICAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXJDb250cm9scycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDb250cm9scygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMuc2hvd0luZGljYXRvcnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICd1bCcsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjb250cm9sLWRvdHMnIH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0LkNoaWxkcmVuLm1hcCh0aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdsaScsIHsgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5ET1QoaW5kZXggPT09IF90aGlzNC5zdGF0ZS5zZWxlY3RlZEl0ZW0pLCBvbkNsaWNrOiBfdGhpczQuY2hhbmdlSXRlbSwgb25LZXlEb3duOiBfdGhpczQuY2hhbmdlSXRlbSwgdmFsdWU6IGluZGV4LCBrZXk6IGluZGV4LCByb2xlOiAnYnV0dG9uJywgdGFiSW5kZXg6IDAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlclN0YXR1cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJTdGF0dXMoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMuc2hvd1N0YXR1cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ3AnLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY2Fyb3VzZWwtc3RhdHVzJyB9LFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc3RhdHVzRm9ybWF0dGVyKHRoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtICsgMSwgX3JlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyVGh1bWJzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclRodW1icygpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5zaG93VGh1bWJzIHx8IF9yZWFjdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgX1RodW1iczIuZGVmYXVsdCxcbiAgICAgICAgICAgICAgICB7IHJlZjogdGhpcy5zZXRUaHVtYnNSZWYsIG9uU2VsZWN0SXRlbTogdGhpcy5oYW5kbGVDbGlja1RodW1iLCBzZWxlY3RlZEl0ZW06IHRoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtLCB0cmFuc2l0aW9uVGltZTogdGhpcy5wcm9wcy50cmFuc2l0aW9uVGltZSwgdGh1bWJXaWR0aDogdGhpcy5wcm9wcy50aHVtYldpZHRoIH0sXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBfcmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbikgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGlzSG9yaXpvbnRhbCA9IHRoaXMucHJvcHMuYXhpcyA9PT0gJ2hvcml6b250YWwnO1xuXG4gICAgICAgICAgICB2YXIgY2FuU2hvd0Fycm93cyA9IHRoaXMucHJvcHMuc2hvd0Fycm93cyAmJiBfcmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbikgPiAxO1xuXG4gICAgICAgICAgICAvLyBzaG93IGxlZnQgYXJyb3c/XG4gICAgICAgICAgICB2YXIgaGFzUHJldiA9IGNhblNob3dBcnJvd3MgJiYgKHRoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtID4gMCB8fCB0aGlzLnByb3BzLmluZmluaXRlTG9vcCk7XG4gICAgICAgICAgICAvLyBzaG93IHJpZ2h0IGFycm93XG4gICAgICAgICAgICB2YXIgaGFzTmV4dCA9IGNhblNob3dBcnJvd3MgJiYgKHRoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtIDwgX3JlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pIC0gMSB8fCB0aGlzLnByb3BzLmluZmluaXRlTG9vcCk7XG4gICAgICAgICAgICAvLyBvYmogdG8gaG9sZCB0aGUgdHJhbnNmb3JtYXRpb25zIGFuZCBzdHlsZXNcbiAgICAgICAgICAgIHZhciBpdGVtTGlzdFN0eWxlcyA9IHt9O1xuXG4gICAgICAgICAgICB2YXIgY3VycmVudFBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbih0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbSk7XG5cbiAgICAgICAgICAgIC8vIGlmIDNkIGlzIGF2YWlsYWJsZSwgbGV0J3MgdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlIHBlcmZvcm1hbmNlIG9mIHRyYW5zZm9ybVxuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybVByb3AgPSAoMCwgX0NTU1RyYW5zbGF0ZTIuZGVmYXVsdCkoY3VycmVudFBvc2l0aW9uICsgJyUnLCB0aGlzLnByb3BzLmF4aXMpO1xuXG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvblRpbWUgPSB0aGlzLnByb3BzLnRyYW5zaXRpb25UaW1lICsgJ21zJztcblxuICAgICAgICAgICAgaXRlbUxpc3RTdHlsZXMgPSB7XG4gICAgICAgICAgICAgICAgJ1dlYmtpdFRyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3AsXG4gICAgICAgICAgICAgICAgJ01velRyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3AsXG4gICAgICAgICAgICAgICAgJ01zVHJhbnNmb3JtJzogdHJhbnNmb3JtUHJvcCxcbiAgICAgICAgICAgICAgICAnT1RyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3AsXG4gICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3AsXG4gICAgICAgICAgICAgICAgJ21zVHJhbnNmb3JtJzogdHJhbnNmb3JtUHJvcFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnN3aXBpbmcpIHtcbiAgICAgICAgICAgICAgICBpdGVtTGlzdFN0eWxlcyA9IF9leHRlbmRzKHt9LCBpdGVtTGlzdFN0eWxlcywge1xuICAgICAgICAgICAgICAgICAgICAnV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uJzogdHJhbnNpdGlvblRpbWUsXG4gICAgICAgICAgICAgICAgICAgICdNb3pUcmFuc2l0aW9uRHVyYXRpb24nOiB0cmFuc2l0aW9uVGltZSxcbiAgICAgICAgICAgICAgICAgICAgJ01zVHJhbnNpdGlvbkR1cmF0aW9uJzogdHJhbnNpdGlvblRpbWUsXG4gICAgICAgICAgICAgICAgICAgICdPVHJhbnNpdGlvbkR1cmF0aW9uJzogdHJhbnNpdGlvblRpbWUsXG4gICAgICAgICAgICAgICAgICAgICd0cmFuc2l0aW9uRHVyYXRpb24nOiB0cmFuc2l0aW9uVGltZSxcbiAgICAgICAgICAgICAgICAgICAgJ21zVHJhbnNpdGlvbkR1cmF0aW9uJzogdHJhbnNpdGlvblRpbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGl0ZW1zQ2xvbmUgPSB0aGlzLnJlbmRlckl0ZW1zKHRydWUpO1xuICAgICAgICAgICAgdmFyIGZpcnN0Q2xvbmUgPSBpdGVtc0Nsb25lLnNoaWZ0KCk7XG4gICAgICAgICAgICB2YXIgbGFzdENsb25lID0gaXRlbXNDbG9uZS5wb3AoKTtcblxuICAgICAgICAgICAgdmFyIHN3aXBlclByb3BzID0ge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbTogdGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW0sXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5TTElERVIodHJ1ZSwgdGhpcy5zdGF0ZS5zd2lwaW5nKSxcbiAgICAgICAgICAgICAgICBvblN3aXBlTW92ZTogdGhpcy5vblN3aXBlTW92ZSxcbiAgICAgICAgICAgICAgICBvblN3aXBlU3RhcnQ6IHRoaXMub25Td2lwZVN0YXJ0LFxuICAgICAgICAgICAgICAgIG9uU3dpcGVFbmQ6IHRoaXMub25Td2lwZUVuZCxcbiAgICAgICAgICAgICAgICBzdHlsZTogaXRlbUxpc3RTdHlsZXMsXG4gICAgICAgICAgICAgICAgdG9sZXJhbmNlOiB0aGlzLnByb3BzLnN3aXBlU2Nyb2xsVG9sZXJhbmNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgY29udGFpbmVyU3R5bGVzID0ge307XG5cbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBzd2lwZXJQcm9wcy5vblN3aXBlTGVmdCA9IHRoaXMub25Td2lwZUJhY2t3YXJkcztcbiAgICAgICAgICAgICAgICBzd2lwZXJQcm9wcy5vblN3aXBlUmlnaHQgPSB0aGlzLm9uU3dpcGVGb3J3YXJkO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZHluYW1pY0hlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbUhlaWdodCA9IHRoaXMuZ2V0VmFyaWFibGVJbWFnZUhlaWdodCh0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXBlclByb3BzLnN0eWxlLmhlaWdodCA9IGl0ZW1IZWlnaHQgfHwgJ2F1dG8nO1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZXMuaGVpZ2h0ID0gaXRlbUhlaWdodCB8fCAnYXV0byc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2lwZXJQcm9wcy5vblN3aXBlVXAgPSB0aGlzLnByb3BzLnZlcnRpY2FsU3dpcGUgPT09ICduYXR1cmFsJyA/IHRoaXMub25Td2lwZUZvcndhcmQgOiB0aGlzLm9uU3dpcGVCYWNrd2FyZHM7XG4gICAgICAgICAgICAgICAgc3dpcGVyUHJvcHMub25Td2lwZURvd24gPSB0aGlzLnByb3BzLnZlcnRpY2FsU3dpcGUgPT09ICduYXR1cmFsJyA/IHRoaXMub25Td2lwZUJhY2t3YXJkcyA6IHRoaXMub25Td2lwZUZvcndhcmQ7XG4gICAgICAgICAgICAgICAgc3dpcGVyUHJvcHMuc3R5bGUuaGVpZ2h0ID0gdGhpcy5zdGF0ZS5pdGVtU2l6ZTtcbiAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZXMuaGVpZ2h0ID0gdGhpcy5zdGF0ZS5pdGVtU2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWUsIHJlZjogdGhpcy5zZXRDYXJvdXNlbFdyYXBwZXJSZWYgfSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5DQVJPVVNFTCh0cnVlKSwgc3R5bGU6IHsgd2lkdGg6IHRoaXMucHJvcHMud2lkdGggfSB9LFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgeyB0eXBlOiAnYnV0dG9uJywgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5BUlJPV19QUkVWKCFoYXNQcmV2KSwgb25DbGljazogdGhpcy5vbkNsaWNrUHJldiB9KSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5XUkFQUEVSKHRydWUsIHRoaXMucHJvcHMuYXhpcyksIHN0eWxlOiBjb250YWluZXJTdHlsZXMsIHJlZjogdGhpcy5zZXRJdGVtc1dyYXBwZXJSZWYgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc3dpcGVhYmxlID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0RWFzeVN3aXBlMi5kZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnTmFtZTogJ3VsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiB0aGlzLnNldExpc3RSZWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBzd2lwZXJQcm9wcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd01vdXNlRXZlbnRzOiB0aGlzLnByb3BzLmVtdWxhdGVUb3VjaCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmluZmluaXRlTG9vcCAmJiBsYXN0Q2xvbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJJdGVtcygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaW5maW5pdGVMb29wICYmIGZpcnN0Q2xvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5TTElERVIodHJ1ZSwgdGhpcy5zdGF0ZS5zd2lwaW5nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiB0aGlzLnNldExpc3RSZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBpdGVtTGlzdFN0eWxlcyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaW5maW5pdGVMb29wICYmIGxhc3RDbG9uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckl0ZW1zKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5pbmZpbml0ZUxvb3AgJiYgZmlyc3RDbG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgeyB0eXBlOiAnYnV0dG9uJywgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5BUlJPV19ORVhUKCFoYXNOZXh0KSwgb25DbGljazogdGhpcy5vbkNsaWNrTmV4dCB9KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJDb250cm9scygpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclN0YXR1cygpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclRodW1icygpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENhcm91c2VsO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuQ2Fyb3VzZWwuZGlzcGxheU5hbWUgPSAnQ2Fyb3VzZWwnO1xuQ2Fyb3VzZWwucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgICBzaG93QXJyb3dzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgc2hvd1N0YXR1czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHNob3dJbmRpY2F0b3JzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgaW5maW5pdGVMb29wOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgc2hvd1RodW1iczogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHRodW1iV2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIHNlbGVjdGVkSXRlbTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgb25DbGlja0l0ZW06IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uQ2xpY2tUaHVtYjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25DaGFuZ2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGF4aXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pLFxuICAgIHZlcnRpY2FsU3dpcGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWyduYXR1cmFsJywgJ3N0YW5kYXJkJ10pLFxuICAgIHdpZHRoOiBjdXN0b21Qcm9wVHlwZXMudW5pdCxcbiAgICB1c2VLZXlib2FyZEFycm93czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGF1dG9QbGF5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgc3RvcE9uSG92ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBpbnRlcnZhbDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgdHJhbnNpdGlvblRpbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIHN3aXBlU2Nyb2xsVG9sZXJhbmNlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBzd2lwZWFibGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBkeW5hbWljSGVpZ2h0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgZW11bGF0ZVRvdWNoOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgc3RhdHVzRm9ybWF0dGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjZW50ZXJNb2RlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY2VudGVyU2xpZGVQZXJjZW50YWdlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxufTtcbkNhcm91c2VsLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBzaG93SW5kaWNhdG9yczogdHJ1ZSxcbiAgICBzaG93QXJyb3dzOiB0cnVlLFxuICAgIHNob3dTdGF0dXM6IHRydWUsXG4gICAgc2hvd1RodW1iczogdHJ1ZSxcbiAgICBpbmZpbml0ZUxvb3A6IGZhbHNlLFxuICAgIHNlbGVjdGVkSXRlbTogMCxcbiAgICBheGlzOiAnaG9yaXpvbnRhbCcsXG4gICAgdmVydGljYWxTd2lwZTogJ3N0YW5kYXJkJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIHVzZUtleWJvYXJkQXJyb3dzOiBmYWxzZSxcbiAgICBhdXRvUGxheTogZmFsc2UsXG4gICAgc3RvcE9uSG92ZXI6IHRydWUsXG4gICAgaW50ZXJ2YWw6IDMwMDAsXG4gICAgdHJhbnNpdGlvblRpbWU6IDM1MCxcbiAgICBzd2lwZVNjcm9sbFRvbGVyYW5jZTogNSxcbiAgICBzd2lwZWFibGU6IHRydWUsXG4gICAgZHluYW1pY0hlaWdodDogZmFsc2UsXG4gICAgZW11bGF0ZVRvdWNoOiBmYWxzZSxcbiAgICBvbkNsaWNrSXRlbTogbm9vcCxcbiAgICBvbkNsaWNrVGh1bWI6IG5vb3AsXG4gICAgb25DaGFuZ2U6IG5vb3AsXG4gICAgc3RhdHVzRm9ybWF0dGVyOiBkZWZhdWx0U3RhdHVzRm9ybWF0dGVyLFxuICAgIGNlbnRlck1vZGU6IGZhbHNlLFxuICAgIGNlbnRlclNsaWRlUGVyY2VudGFnZTogODBcbn07XG5cbnZhciBfaW5pdGlhbGlzZVByb3BzID0gZnVuY3Rpb24gX2luaXRpYWxpc2VQcm9wcygpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHRoaXMuc2V0VGh1bWJzUmVmID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgX3RoaXM1LnRodW1ic1JlZiA9IG5vZGU7XG4gICAgfTtcblxuICAgIHRoaXMuc2V0Q2Fyb3VzZWxXcmFwcGVyUmVmID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgX3RoaXM1LmNhcm91c2VsV3JhcHBlclJlZiA9IG5vZGU7XG4gICAgfTtcblxuICAgIHRoaXMuc2V0TGlzdFJlZiA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIF90aGlzNS5saXN0UmVmID0gbm9kZTtcbiAgICB9O1xuXG4gICAgdGhpcy5zZXRJdGVtc1dyYXBwZXJSZWYgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBfdGhpczUuaXRlbXNXcmFwcGVyUmVmID0gbm9kZTtcbiAgICB9O1xuXG4gICAgdGhpcy5zZXRJdGVtc1JlZiA9IGZ1bmN0aW9uIChub2RlLCBpbmRleCkge1xuICAgICAgICBpZiAoIV90aGlzNS5pdGVtc1JlZikge1xuICAgICAgICAgICAgX3RoaXM1Lml0ZW1zUmVmID0gW107XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXM1Lml0ZW1zUmVmW2luZGV4XSA9IG5vZGU7XG4gICAgfTtcblxuICAgIHRoaXMuYXV0b1BsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX3RoaXM1LnN0YXRlLmF1dG9QbGF5IHx8IF9yZWFjdC5DaGlsZHJlbi5jb3VudChfdGhpczUucHJvcHMuY2hpbGRyZW4pIDw9IDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFyVGltZW91dChfdGhpczUudGltZXIpO1xuICAgICAgICBfdGhpczUudGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzNS5pbmNyZW1lbnQoKTtcbiAgICAgICAgfSwgX3RoaXM1LnByb3BzLmludGVydmFsKTtcbiAgICB9O1xuXG4gICAgdGhpcy5jbGVhckF1dG9QbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzNS5zdGF0ZS5hdXRvUGxheSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzNS50aW1lcik7XG4gICAgfTtcblxuICAgIHRoaXMucmVzZXRBdXRvUGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM1LmNsZWFyQXV0b1BsYXkoKTtcbiAgICAgICAgX3RoaXM1LmF1dG9QbGF5KCk7XG4gICAgfTtcblxuICAgIHRoaXMuc3RvcE9uSG92ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7IGlzTW91c2VFbnRlcmVkOiB0cnVlIH0pO1xuICAgICAgICBfdGhpczUuY2xlYXJBdXRvUGxheSgpO1xuICAgIH07XG5cbiAgICB0aGlzLnN0YXJ0T25MZWF2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM1LnNldFN0YXRlKHsgaXNNb3VzZUVudGVyZWQ6IGZhbHNlIH0pO1xuICAgICAgICBfdGhpczUuYXV0b1BsYXkoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5uYXZpZ2F0ZVdpdGhLZXlib2FyZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBheGlzID0gX3RoaXM1LnByb3BzLmF4aXM7XG5cbiAgICAgICAgdmFyIGlzSG9yaXpvbnRhbCA9IGF4aXMgPT09ICdob3Jpem9udGFsJztcbiAgICAgICAgdmFyIGtleU5hbWVzID0ge1xuICAgICAgICAgICAgQXJyb3dVcDogMzgsXG4gICAgICAgICAgICBBcnJvd1JpZ2h0OiAzOSxcbiAgICAgICAgICAgIEFycm93RG93bjogNDAsXG4gICAgICAgICAgICBBcnJvd0xlZnQ6IDM3XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG5leHRLZXkgPSBpc0hvcml6b250YWwgPyBrZXlOYW1lcy5BcnJvd1JpZ2h0IDoga2V5TmFtZXMuQXJyb3dEb3duO1xuICAgICAgICB2YXIgcHJldktleSA9IGlzSG9yaXpvbnRhbCA/IGtleU5hbWVzLkFycm93TGVmdCA6IGtleU5hbWVzLkFycm93VXA7XG5cbiAgICAgICAgaWYgKG5leHRLZXkgPT09IGUua2V5Q29kZSkge1xuICAgICAgICAgICAgX3RoaXM1LmluY3JlbWVudCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHByZXZLZXkgPT09IGUua2V5Q29kZSkge1xuICAgICAgICAgICAgX3RoaXM1LmRlY3JlbWVudCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMudXBkYXRlU2l6ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX3RoaXM1LnN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNIb3Jpem9udGFsID0gX3RoaXM1LnByb3BzLmF4aXMgPT09ICdob3Jpem9udGFsJztcbiAgICAgICAgdmFyIGZpcnN0SXRlbSA9IF90aGlzNS5pdGVtc1JlZlswXTtcbiAgICAgICAgdmFyIGl0ZW1TaXplID0gaXNIb3Jpem9udGFsID8gZmlyc3RJdGVtLmNsaWVudFdpZHRoIDogZmlyc3RJdGVtLmNsaWVudEhlaWdodDtcblxuICAgICAgICBfdGhpczUuc2V0U3RhdGUoZnVuY3Rpb24gKF9zdGF0ZSwgcHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaXRlbVNpemU6IGl0ZW1TaXplLFxuICAgICAgICAgICAgICAgIHdyYXBwZXJTaXplOiBpc0hvcml6b250YWwgPyBpdGVtU2l6ZSAqIF9yZWFjdC5DaGlsZHJlbi5jb3VudChwcm9wcy5jaGlsZHJlbikgOiBpdGVtU2l6ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF90aGlzNS50aHVtYnNSZWYpIHtcbiAgICAgICAgICAgIF90aGlzNS50aHVtYnNSZWYudXBkYXRlU2l6ZXMoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNldE1vdW50U3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7IGhhc01vdW50OiB0cnVlIH0pO1xuICAgICAgICBfdGhpczUudXBkYXRlU2l6ZXMoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5oYW5kbGVDbGlja0l0ZW0gPSBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgaWYgKF9yZWFjdC5DaGlsZHJlbi5jb3VudChfdGhpczUucHJvcHMuY2hpbGRyZW4pIDw9IDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfdGhpczUuc3RhdGUuY2FuY2VsQ2xpY2spIHtcbiAgICAgICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY2FuY2VsQ2xpY2s6IGZhbHNlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM1LnByb3BzLm9uQ2xpY2tJdGVtKGluZGV4LCBpdGVtKTtcblxuICAgICAgICBpZiAoaW5kZXggIT09IF90aGlzNS5zdGF0ZS5zZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtOiBpbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5oYW5kbGVPbkNoYW5nZSA9IGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICBpZiAoX3JlYWN0LkNoaWxkcmVuLmNvdW50KF90aGlzNS5wcm9wcy5jaGlsZHJlbikgPD0gMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM1LnByb3BzLm9uQ2hhbmdlKGluZGV4LCBpdGVtKTtcbiAgICB9O1xuXG4gICAgdGhpcy5oYW5kbGVDbGlja1RodW1iID0gZnVuY3Rpb24gKGluZGV4LCBpdGVtKSB7XG4gICAgICAgIF90aGlzNS5wcm9wcy5vbkNsaWNrVGh1bWIoaW5kZXgsIGl0ZW0pO1xuXG4gICAgICAgIF90aGlzNS5zZWxlY3RJdGVtKHtcbiAgICAgICAgICAgIHNlbGVjdGVkSXRlbTogaW5kZXhcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMub25Td2lwZVN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc3dpcGluZzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXM1LmNsZWFyQXV0b1BsYXkoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5vblN3aXBlRW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc3dpcGluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzNS5hdXRvUGxheSgpO1xuICAgIH07XG5cbiAgICB0aGlzLm9uU3dpcGVNb3ZlID0gZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgICAgIHZhciBpc0hvcml6b250YWwgPSBfdGhpczUucHJvcHMuYXhpcyA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgICB2YXIgY2hpbGRyZW5MZW5ndGggPSBfcmVhY3QuQ2hpbGRyZW4uY291bnQoX3RoaXM1LnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgICB2YXIgaW5pdGlhbEJvdW5kcnkgPSAwO1xuXG4gICAgICAgIHZhciBjdXJyZW50UG9zaXRpb24gPSBfdGhpczUuZ2V0UG9zaXRpb24oX3RoaXM1LnN0YXRlLnNlbGVjdGVkSXRlbSk7XG4gICAgICAgIHZhciBmaW5hbEJvdW5kcnkgPSBfdGhpczUucHJvcHMuaW5maW5pdGVMb29wID8gX3RoaXM1LmdldFBvc2l0aW9uKGNoaWxkcmVuTGVuZ3RoIC0gMSkgLSAxMDAgOiBfdGhpczUuZ2V0UG9zaXRpb24oY2hpbGRyZW5MZW5ndGggLSAxKTtcblxuICAgICAgICB2YXIgYXhpc0RlbHRhID0gaXNIb3Jpem9udGFsID8gZGVsdGEueCA6IGRlbHRhLnk7XG4gICAgICAgIHZhciBoYW5kbGVkRGVsdGEgPSBheGlzRGVsdGE7XG5cbiAgICAgICAgLy8gcHJldmVudCB1c2VyIGZyb20gc3dpcGluZyBsZWZ0IG91dCBvZiBib3VuZGFyaWVzXG4gICAgICAgIGlmIChjdXJyZW50UG9zaXRpb24gPT09IGluaXRpYWxCb3VuZHJ5ICYmIGF4aXNEZWx0YSA+IDApIHtcbiAgICAgICAgICAgIGhhbmRsZWREZWx0YSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwcmV2ZW50IHVzZXIgZnJvbSBzd2lwaW5nIHJpZ2h0IG91dCBvZiBib3VuZGFyaWVzXG4gICAgICAgIGlmIChjdXJyZW50UG9zaXRpb24gPT09IGZpbmFsQm91bmRyeSAmJiBheGlzRGVsdGEgPCAwKSB7XG4gICAgICAgICAgICBoYW5kbGVkRGVsdGEgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvc2l0aW9uID0gY3VycmVudFBvc2l0aW9uICsgMTAwIC8gKF90aGlzNS5zdGF0ZS5pdGVtU2l6ZSAvIGhhbmRsZWREZWx0YSk7XG4gICAgICAgIGlmIChfdGhpczUucHJvcHMuaW5maW5pdGVMb29wKSB7XG4gICAgICAgICAgICAvLyBXaGVuIGFsbG93aW5nIGluZmluaXRlIGxvb3AsIGlmIHdlIHNsaWRlIGxlZnQgZnJvbSBwb3NpdGlvbiAwIHdlIHJldmVhbCB0aGUgY2xvbmVkIGxhc3Qgc2xpZGUgdGhhdCBhcHBlYXJzIGJlZm9yZSBpdFxuICAgICAgICAgICAgLy8gaWYgd2Ugc2xpZGUgZXZlbiBmdXJ0aGVyIHdlIG5lZWQgdG8ganVtcCB0byBvdGhlciBzaWRlIHNvIGl0IGNhbiBjb250aW51ZSAtIGFuZCB2aWNlIHZlcnNhIGZvciB0aGUgbGFzdCBzbGlkZVxuICAgICAgICAgICAgaWYgKF90aGlzNS5zdGF0ZS5zZWxlY3RlZEl0ZW0gPT09IDAgJiYgcG9zaXRpb24gPiAtMTAwKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gLT0gY2hpbGRyZW5MZW5ndGggKiAxMDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzNS5zdGF0ZS5zZWxlY3RlZEl0ZW0gPT09IGNoaWxkcmVuTGVuZ3RoIC0gMSAmJiBwb3NpdGlvbiA8IC1jaGlsZHJlbkxlbmd0aCAqIDEwMCkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IGNoaWxkcmVuTGVuZ3RoICogMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBvc2l0aW9uICs9ICclJztcbiAgICAgICAgX3RoaXM1LnNldFBvc2l0aW9uKHBvc2l0aW9uKTtcblxuICAgICAgICAvLyBhbGxvd3Mgc2Nyb2xsIGlmIHRoZSBzd2lwZSB3YXMgd2l0aGluIHRoZSB0b2xlcmFuY2VcbiAgICAgICAgdmFyIGhhc01vdmVkID0gTWF0aC5hYnMoYXhpc0RlbHRhKSA+IF90aGlzNS5wcm9wcy5zd2lwZVNjcm9sbFRvbGVyYW5jZTtcblxuICAgICAgICBpZiAoaGFzTW92ZWQgJiYgIV90aGlzNS5zdGF0ZS5jYW5jZWxDbGljaykge1xuICAgICAgICAgICAgX3RoaXM1LnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjYW5jZWxDbGljazogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFzTW92ZWQ7XG4gICAgfTtcblxuICAgIHRoaXMuc2V0UG9zaXRpb24gPSBmdW5jdGlvbiAocG9zaXRpb24sIGZvcmNlUmVmbG93KSB7XG4gICAgICAgIHZhciBsaXN0ID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKF90aGlzNS5saXN0UmVmKTtcbiAgICAgICAgWydXZWJraXRUcmFuc2Zvcm0nLCAnTW96VHJhbnNmb3JtJywgJ01zVHJhbnNmb3JtJywgJ09UcmFuc2Zvcm0nLCAndHJhbnNmb3JtJywgJ21zVHJhbnNmb3JtJ10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgbGlzdC5zdHlsZVtwcm9wXSA9ICgwLCBfQ1NTVHJhbnNsYXRlMi5kZWZhdWx0KShwb3NpdGlvbiwgX3RoaXM1LnByb3BzLmF4aXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZvcmNlUmVmbG93KSB7XG4gICAgICAgICAgICBsaXN0Lm9mZnNldExlZnQ7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5yZXNldFBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3VycmVudFBvc2l0aW9uID0gX3RoaXM1LmdldFBvc2l0aW9uKF90aGlzNS5zdGF0ZS5zZWxlY3RlZEl0ZW0pICsgJyUnO1xuICAgICAgICBfdGhpczUuc2V0UG9zaXRpb24oY3VycmVudFBvc2l0aW9uKTtcbiAgICB9O1xuXG4gICAgdGhpcy5kZWNyZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb3NpdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDE7XG4gICAgICAgIHZhciBmcm9tU3dpcGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICAgIF90aGlzNS5tb3ZlVG8oX3RoaXM1LnN0YXRlLnNlbGVjdGVkSXRlbSAtICh0eXBlb2YgcG9zaXRpb25zID09PSAnbnVtYmVyJyA/IHBvc2l0aW9ucyA6IDEpLCBmcm9tU3dpcGUpO1xuICAgIH07XG5cbiAgICB0aGlzLmluY3JlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTtcbiAgICAgICAgdmFyIGZyb21Td2lwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgICAgX3RoaXM1Lm1vdmVUbyhfdGhpczUuc3RhdGUuc2VsZWN0ZWRJdGVtICsgKHR5cGVvZiBwb3NpdGlvbnMgPT09ICdudW1iZXInID8gcG9zaXRpb25zIDogMSksIGZyb21Td2lwZSk7XG4gICAgfTtcblxuICAgIHRoaXMubW92ZVRvID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBmcm9tU3dpcGUpIHtcbiAgICAgICAgdmFyIGxhc3RQb3NpdGlvbiA9IF9yZWFjdC5DaGlsZHJlbi5jb3VudChfdGhpczUucHJvcHMuY2hpbGRyZW4pIC0gMTtcbiAgICAgICAgdmFyIG5lZWRDbG9uZWRTbGlkZSA9IF90aGlzNS5wcm9wcy5pbmZpbml0ZUxvb3AgJiYgIWZyb21Td2lwZSAmJiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID4gbGFzdFBvc2l0aW9uKTtcbiAgICAgICAgdmFyIG9sZFBvc2l0aW9uID0gcG9zaXRpb247XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMCkge1xuICAgICAgICAgICAgcG9zaXRpb24gPSBfdGhpczUucHJvcHMuaW5maW5pdGVMb29wID8gbGFzdFBvc2l0aW9uIDogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA+IGxhc3RQb3NpdGlvbikge1xuICAgICAgICAgICAgcG9zaXRpb24gPSBfdGhpczUucHJvcHMuaW5maW5pdGVMb29wID8gMCA6IGxhc3RQb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZWVkQ2xvbmVkU2xpZGUpIHtcbiAgICAgICAgICAgIC8vIHNldCBzd2lwaW5nIHRydWUgd291bGQgZGlzYWJsZSB0cmFuc2l0aW9uIHRpbWUsIHRoZW4gd2Ugc2V0IHNsaWRlciB0byBjbG9uZWQgcG9zaXRpb24gYW5kIGZvcmNlIGEgcmVmbG93XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG9ubHkgbmVlZGVkIGZvciBub24tc3dpcGluZyBzaXR1YXRpb25cbiAgICAgICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc3dpcGluZzogdHJ1ZVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChvbGRQb3NpdGlvbiA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzNS5wcm9wcy5jZW50ZXJNb2RlICYmIF90aGlzNS5wcm9wcy5heGlzID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5zZXRQb3NpdGlvbignLScgKyAoKGxhc3RQb3NpdGlvbiArIDIpICogX3RoaXM1LnByb3BzLmNlbnRlclNsaWRlUGVyY2VudGFnZSAtICgxMDAgLSBfdGhpczUucHJvcHMuY2VudGVyU2xpZGVQZXJjZW50YWdlKSAvIDIpICsgJyUnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5zZXRQb3NpdGlvbignLScgKyAobGFzdFBvc2l0aW9uICsgMikgKiAxMDAgKyAnJScsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvbGRQb3NpdGlvbiA+IGxhc3RQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczUuc2V0UG9zaXRpb24oMCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX3RoaXM1LnNlbGVjdEl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW06IHBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICBzd2lwaW5nOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczUuc2VsZWN0SXRlbSh7XG4gICAgICAgICAgICAgICAgLy8gaWYgaXQncyBub3QgYSBzbGlkZXIsIHdlIGRvbid0IG5lZWQgdG8gc2V0IHBvc2l0aW9uIGhlcmVcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW06IHBvc2l0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRvbid0IHJlc2V0IGF1dG8gcGxheSB3aGVuIHN0b3Agb24gaG92ZXIgaXMgZW5hYmxlZCwgZG9pbmcgc28gd2lsbCB0cmlnZ2VyIGEgY2FsbCB0byBhdXRvIHBsYXkgbW9yZSB0aGFuIG9uY2VcbiAgICAgICAgLy8gYW5kIHdpbGwgcmVzdWx0IGluIHRoZSBpbnRlcnZhbCBmdW5jdGlvbiBub3QgYmVpbmcgY2xlYXJlZCBjb3JyZWN0bHkuXG4gICAgICAgIGlmIChfdGhpczUuc3RhdGUuYXV0b1BsYXkgJiYgX3RoaXM1LnN0YXRlLmlzTW91c2VFbnRlcmVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgX3RoaXM1LnJlc2V0QXV0b1BsYXkoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm9uQ2xpY2tOZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczUuaW5jcmVtZW50KDEsIGZhbHNlKTtcbiAgICB9O1xuXG4gICAgdGhpcy5vbkNsaWNrUHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM1LmRlY3JlbWVudCgxLCBmYWxzZSk7XG4gICAgfTtcblxuICAgIHRoaXMub25Td2lwZUZvcndhcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzNS5pbmNyZW1lbnQoMSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHRoaXMub25Td2lwZUJhY2t3YXJkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM1LmRlY3JlbWVudCgxLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgdGhpcy5jaGFuZ2VJdGVtID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCFlLmtleSB8fCBlLmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgdmFyIG5ld0luZGV4ID0gZS50YXJnZXQudmFsdWU7XG5cbiAgICAgICAgICAgIF90aGlzNS5zZWxlY3RJdGVtKHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW06IG5ld0luZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNlbGVjdEl0ZW0gPSBmdW5jdGlvbiAoc3RhdGUsIGNiKSB7XG4gICAgICAgIF90aGlzNS5zZXRTdGF0ZShzdGF0ZSwgY2IpO1xuICAgICAgICBfdGhpczUuaGFuZGxlT25DaGFuZ2Uoc3RhdGUuc2VsZWN0ZWRJdGVtLCBfcmVhY3QuQ2hpbGRyZW4udG9BcnJheShfdGhpczUucHJvcHMuY2hpbGRyZW4pW3N0YXRlLnNlbGVjdGVkSXRlbV0pO1xuICAgIH07XG5cbiAgICB0aGlzLmdldEluaXRpYWxJbWFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGVjdGVkSXRlbSA9IF90aGlzNS5wcm9wcy5zZWxlY3RlZEl0ZW07XG4gICAgICAgIHZhciBpdGVtID0gX3RoaXM1Lml0ZW1zUmVmICYmIF90aGlzNS5pdGVtc1JlZltzZWxlY3RlZEl0ZW1dO1xuICAgICAgICB2YXIgaW1hZ2VzID0gaXRlbSAmJiBpdGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKTtcbiAgICAgICAgcmV0dXJuIGltYWdlcyAmJiBpbWFnZXNbc2VsZWN0ZWRJdGVtXTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRWYXJpYWJsZUltYWdlSGVpZ2h0ID0gZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBpdGVtID0gX3RoaXM1Lml0ZW1zUmVmICYmIF90aGlzNS5pdGVtc1JlZltwb3NpdGlvbl07XG4gICAgICAgIHZhciBpbWFnZXMgPSBpdGVtICYmIGl0ZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpO1xuICAgICAgICBpZiAoX3RoaXM1LnN0YXRlLmhhc01vdW50ICYmIGltYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgaW1hZ2UgPSBpbWFnZXNbMF07XG5cbiAgICAgICAgICAgIGlmICghaW1hZ2UuY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgaW1hZ2UgaXMgc3RpbGwgbG9hZGluZywgdGhlIHNpemUgd29uJ3QgYmUgYXZhaWxhYmxlIHNvIHdlIHRyaWdnZXIgYSBuZXcgcmVuZGVyIGFmdGVyIGl0J3MgZG9uZVxuICAgICAgICAgICAgICAgIHZhciBvbkltYWdlTG9hZCA9IGZ1bmN0aW9uIG9uSW1hZ2VMb2FkKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczUuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uSW1hZ2VMb2FkKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uSW1hZ2VMb2FkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGhlaWdodCA9IGltYWdlLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIHJldHVybiBoZWlnaHQgPiAwID8gaGVpZ2h0IDogbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDYXJvdXNlbDsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg3OCk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzKTtcbiAgICBnbG9iYWwucmVhY3RTd2lwZSA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgZXhwb3J0cy5zZXRIYXNTdXBwb3J0VG9DYXB0dXJlT3B0aW9uID0gc2V0SGFzU3VwcG9ydFRvQ2FwdHVyZU9wdGlvbjtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgc3VwcG9ydHNDYXB0dXJlT3B0aW9uID0gZmFsc2U7XG4gIGZ1bmN0aW9uIHNldEhhc1N1cHBvcnRUb0NhcHR1cmVPcHRpb24oaGFzU3VwcG9ydCkge1xuICAgIHN1cHBvcnRzQ2FwdHVyZU9wdGlvbiA9IGhhc1N1cHBvcnQ7XG4gIH1cblxuICB0cnkge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIG51bGwsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2NhcHR1cmUnLCB7IGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBzZXRIYXNTdXBwb3J0VG9DYXB0dXJlT3B0aW9uKHRydWUpO1xuICAgICAgfSB9KSk7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgZnVuY3Rpb24gZ2V0U2FmZUV2ZW50SGFuZGxlck9wdHMoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHsgY2FwdHVyZTogdHJ1ZSB9O1xuXG4gICAgcmV0dXJuIHN1cHBvcnRzQ2FwdHVyZU9wdGlvbiA/IG9wdGlvbnMgOiBvcHRpb25zLmNhcHR1cmU7XG4gIH1cblxuICAvKipcbiAgICogW2dldFBvc2l0aW9uIHJldHVybnMgYSBwb3NpdGlvbiBlbGVtZW50IHRoYXQgd29ya3MgZm9yIG1vdXNlIG9yIHRvdWNoIGV2ZW50c11cbiAgICogQHBhcmFtICB7W0V2ZW50XX0gZXZlbnQgW3RoZSByZWNlaXZlZCBldmVudF1cbiAgICogQHJldHVybiB7W09iamVjdF19ICAgICAgW3ggYW5kIHkgY29vcmRzXVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0UG9zaXRpb24oZXZlbnQpIHtcbiAgICBpZiAoJ3RvdWNoZXMnIGluIGV2ZW50KSB7XG4gICAgICB2YXIgX2V2ZW50JHRvdWNoZXMkID0gZXZlbnQudG91Y2hlc1swXSxcbiAgICAgICAgICBwYWdlWCA9IF9ldmVudCR0b3VjaGVzJC5wYWdlWCxcbiAgICAgICAgICBwYWdlWSA9IF9ldmVudCR0b3VjaGVzJC5wYWdlWTtcblxuICAgICAgcmV0dXJuIHsgeDogcGFnZVgsIHk6IHBhZ2VZIH07XG4gICAgfVxuXG4gICAgdmFyIHNjcmVlblggPSBldmVudC5zY3JlZW5YLFxuICAgICAgICBzY3JlZW5ZID0gZXZlbnQuc2NyZWVuWTtcblxuICAgIHJldHVybiB7IHg6IHNjcmVlblgsIHk6IHNjcmVlblkgfTtcbiAgfVxuXG4gIHZhciBSZWFjdFN3aXBlID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUmVhY3RTd2lwZSwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBSZWFjdFN3aXBlKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWFjdFN3aXBlKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBSZWFjdFN3aXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmVhY3RTd2lwZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgICBfdGhpcy5faGFuZGxlU3dpcGVTdGFydCA9IF90aGlzLl9oYW5kbGVTd2lwZVN0YXJ0LmJpbmQoX3RoaXMpO1xuICAgICAgX3RoaXMuX2hhbmRsZVN3aXBlTW92ZSA9IF90aGlzLl9oYW5kbGVTd2lwZU1vdmUuYmluZChfdGhpcyk7XG4gICAgICBfdGhpcy5faGFuZGxlU3dpcGVFbmQgPSBfdGhpcy5faGFuZGxlU3dpcGVFbmQuYmluZChfdGhpcyk7XG5cbiAgICAgIF90aGlzLl9vbk1vdXNlRG93biA9IF90aGlzLl9vbk1vdXNlRG93bi5iaW5kKF90aGlzKTtcbiAgICAgIF90aGlzLl9vbk1vdXNlTW92ZSA9IF90aGlzLl9vbk1vdXNlTW92ZS5iaW5kKF90aGlzKTtcbiAgICAgIF90aGlzLl9vbk1vdXNlVXAgPSBfdGhpcy5fb25Nb3VzZVVwLmJpbmQoX3RoaXMpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhSZWFjdFN3aXBlLCBbe1xuICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5zd2lwZXIpIHtcbiAgICAgICAgICB0aGlzLnN3aXBlci5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVTd2lwZU1vdmUsIGdldFNhZmVFdmVudEhhbmRsZXJPcHRzKHtcbiAgICAgICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3dpcGVyKSB7XG4gICAgICAgICAgdGhpcy5zd2lwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlU3dpcGVNb3ZlLCBnZXRTYWZlRXZlbnRIYW5kbGVyT3B0cyh7XG4gICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdfb25Nb3VzZURvd24nLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbk1vdXNlRG93bihldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMucHJvcHMuYWxsb3dNb3VzZUV2ZW50cykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gdHJ1ZTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fb25Nb3VzZVVwKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fb25Nb3VzZU1vdmUpO1xuXG4gICAgICAgIHRoaXMuX2hhbmRsZVN3aXBlU3RhcnQoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ19vbk1vdXNlTW92ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX29uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5tb3VzZURvd24pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9oYW5kbGVTd2lwZU1vdmUoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ19vbk1vdXNlVXAnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbk1vdXNlVXAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcblxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fb25Nb3VzZVVwKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fb25Nb3VzZU1vdmUpO1xuXG4gICAgICAgIHRoaXMuX2hhbmRsZVN3aXBlRW5kKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdfaGFuZGxlU3dpcGVTdGFydCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVN3aXBlU3RhcnQoZXZlbnQpIHtcbiAgICAgICAgdmFyIF9nZXRQb3NpdGlvbiA9IGdldFBvc2l0aW9uKGV2ZW50KSxcbiAgICAgICAgICAgIHggPSBfZ2V0UG9zaXRpb24ueCxcbiAgICAgICAgICAgIHkgPSBfZ2V0UG9zaXRpb24ueTtcblxuICAgICAgICB0aGlzLm1vdmVTdGFydCA9IHsgeDogeCwgeTogeSB9O1xuICAgICAgICB0aGlzLnByb3BzLm9uU3dpcGVTdGFydChldmVudCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnX2hhbmRsZVN3aXBlTW92ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVN3aXBlTW92ZShldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMubW92ZVN0YXJ0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9nZXRQb3NpdGlvbjIgPSBnZXRQb3NpdGlvbihldmVudCksXG4gICAgICAgICAgICB4ID0gX2dldFBvc2l0aW9uMi54LFxuICAgICAgICAgICAgeSA9IF9nZXRQb3NpdGlvbjIueTtcblxuICAgICAgICB2YXIgZGVsdGFYID0geCAtIHRoaXMubW92ZVN0YXJ0Lng7XG4gICAgICAgIHZhciBkZWx0YVkgPSB5IC0gdGhpcy5tb3ZlU3RhcnQueTtcbiAgICAgICAgdGhpcy5tb3ZpbmcgPSB0cnVlO1xuXG4gICAgICAgIC8vIGhhbmRsaW5nIHRoZSByZXNwb25zYWJpbGl0eSBvZiBjYW5jZWxsaW5nIHRoZSBzY3JvbGwgdG9cbiAgICAgICAgLy8gdGhlIGNvbXBvbmVudCBoYW5kbGluZyB0aGUgZXZlbnRcbiAgICAgICAgdmFyIHNob3VsZFByZXZlbnREZWZhdWx0ID0gdGhpcy5wcm9wcy5vblN3aXBlTW92ZSh7XG4gICAgICAgICAgeDogZGVsdGFYLFxuICAgICAgICAgIHk6IGRlbHRhWVxuICAgICAgICB9LCBldmVudCk7XG5cbiAgICAgICAgaWYgKHNob3VsZFByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubW92ZVBvc2l0aW9uID0geyBkZWx0YVg6IGRlbHRhWCwgZGVsdGFZOiBkZWx0YVkgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdfaGFuZGxlU3dpcGVFbmQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVTd2lwZUVuZChldmVudCkge1xuICAgICAgICB0aGlzLnByb3BzLm9uU3dpcGVFbmQoZXZlbnQpO1xuXG4gICAgICAgIHZhciB0b2xlcmFuY2UgPSB0aGlzLnByb3BzLnRvbGVyYW5jZTtcblxuXG4gICAgICAgIGlmICh0aGlzLm1vdmluZyAmJiB0aGlzLm1vdmVQb3NpdGlvbikge1xuICAgICAgICAgIGlmICh0aGlzLm1vdmVQb3NpdGlvbi5kZWx0YVggPCAtdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uU3dpcGVMZWZ0KDEsIGV2ZW50KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW92ZVBvc2l0aW9uLmRlbHRhWCA+IHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vblN3aXBlUmlnaHQoMSwgZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5tb3ZlUG9zaXRpb24uZGVsdGFZIDwgLXRvbGVyYW5jZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vblN3aXBlVXAoMSwgZXZlbnQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tb3ZlUG9zaXRpb24uZGVsdGFZID4gdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uU3dpcGVEb3duKDEsIGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1vdmVTdGFydCA9IG51bGw7XG4gICAgICAgIHRoaXMubW92aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMubW92ZVBvc2l0aW9uID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIHRoaXMucHJvcHMudGFnTmFtZSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihub2RlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3dpcGVyID0gbm9kZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5fb25Nb3VzZURvd24sXG4gICAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuX2hhbmRsZVN3aXBlU3RhcnQsXG4gICAgICAgICAgICBvblRvdWNoRW5kOiB0aGlzLl9oYW5kbGVTd2lwZUVuZCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5wcm9wcy5zdHlsZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBSZWFjdFN3aXBlO1xuICB9KF9yZWFjdC5Db21wb25lbnQpO1xuXG4gIFJlYWN0U3dpcGUuZGlzcGxheU5hbWUgPSAnUmVhY3RTd2lwZSc7XG4gIFJlYWN0U3dpcGUucHJvcFR5cGVzID0ge1xuICAgIHRhZ05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gICAgYWxsb3dNb3VzZUV2ZW50czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIG9uU3dpcGVVcDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAgIG9uU3dpcGVEb3duOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gICAgb25Td2lwZUxlZnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgICBvblN3aXBlUmlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgICBvblN3aXBlU3RhcnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgICBvblN3aXBlTW92ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAgIG9uU3dpcGVFbmQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgICB0b2xlcmFuY2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLmlzUmVxdWlyZWRcbiAgfTtcbiAgUmVhY3RTd2lwZS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgdGFnTmFtZTogJ2RpdicsXG4gICAgYWxsb3dNb3VzZUV2ZW50czogZmFsc2UsXG4gICAgb25Td2lwZVVwOiBmdW5jdGlvbiBvblN3aXBlVXAoKSB7fSxcbiAgICBvblN3aXBlRG93bjogZnVuY3Rpb24gb25Td2lwZURvd24oKSB7fSxcbiAgICBvblN3aXBlTGVmdDogZnVuY3Rpb24gb25Td2lwZUxlZnQoKSB7fSxcbiAgICBvblN3aXBlUmlnaHQ6IGZ1bmN0aW9uIG9uU3dpcGVSaWdodCgpIHt9LFxuICAgIG9uU3dpcGVTdGFydDogZnVuY3Rpb24gb25Td2lwZVN0YXJ0KCkge30sXG4gICAgb25Td2lwZU1vdmU6IGZ1bmN0aW9uIG9uU3dpcGVNb3ZlKCkge30sXG4gICAgb25Td2lwZUVuZDogZnVuY3Rpb24gb25Td2lwZUVuZCgpIHt9LFxuXG4gICAgdG9sZXJhbmNlOiAwXG4gIH07XG4gIGV4cG9ydHMuZGVmYXVsdCA9IFJlYWN0U3dpcGU7XG59KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcbnZhciBvdXRlcldpZHRoID0gZXhwb3J0cy5vdXRlcldpZHRoID0gZnVuY3Rpb24gb3V0ZXJXaWR0aChlbCkge1xuXHR2YXIgd2lkdGggPSBlbC5vZmZzZXRXaWR0aDtcblx0dmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG5cblx0d2lkdGggKz0gcGFyc2VJbnQoc3R5bGUubWFyZ2luTGVmdCkgKyBwYXJzZUludChzdHlsZS5tYXJnaW5SaWdodCk7XG5cdHJldHVybiB3aWR0aDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgdW5pdCA9IGV4cG9ydHMudW5pdCA9IGZ1bmN0aW9uIHVuaXQocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgaWYgKCEvKHB0fHB4fGVtfHJlbXx2d3x2aHwlKSQvLnRlc3QocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkIHByb3AgYCcgKyBwcm9wTmFtZSArICdgIHN1cHBsaWVkIHRvJyArICcgYCcgKyBjb21wb25lbnROYW1lICsgJ2AuIFZhbGlkYXRpb24gZmFpbGVkLiBJdCBuZWVkcyB0byBiZSBhIHNpemUgdW5pdCBsaWtlIHB0LCBweCwgZW0sIHJlbSwgdncsICUnKTtcbiAgICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnZhciB0c2xpYl8xID0gcmVxdWlyZSgndHNsaWInKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnKSk7XG52YXIgY3JlYXRlQ29udGV4dCA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdjcmVhdGUtcmVhY3QtY29udGV4dCcpKTtcbnZhciBjbG9uZURlZXAgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnbG9kYXNoLmNsb25lZGVlcCcpKTtcbnZhciB0b1BhdGggPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnbG9kYXNoLnRvcGF0aCcpKTtcbnZhciBpc0VxdWFsID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3JlYWN0LWZhc3QtY29tcGFyZScpKTtcbnZhciB3YXJuaW5nID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3dhcm5pbmcnKSk7XG52YXIgZGVlcG1lcmdlID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ2RlZXBtZXJnZScpKTtcblxudmFyIF9hO1xudmFyIEZvcm1pa1Byb3ZpZGVyID0gKF9hID0gY3JlYXRlQ29udGV4dCh7fSksIF9hLlByb3ZpZGVyKSwgRm9ybWlrQ29uc3VtZXIgPSBfYS5Db25zdW1lcjtcbmZ1bmN0aW9uIGNvbm5lY3QoQ29tcCkge1xuICAgIHZhciBDID0gZnVuY3Rpb24gKHByb3BzKSB7IHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtaWtDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGZvcm1paykgeyByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBwcm9wcywgeyBmb3JtaWs6IGZvcm1payB9KSk7IH0pKTsgfTtcbiAgICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wO1xuICAgIHJldHVybiBob2lzdE5vblJlYWN0U3RhdGljcyhDLCBDb21wKTtcbn1cblxuZnVuY3Rpb24gZ2V0SW4ob2JqLCBrZXksIGRlZiwgcCkge1xuICAgIGlmIChwID09PSB2b2lkIDApIHsgcCA9IDA7IH1cbiAgICB2YXIgcGF0aCA9IHRvUGF0aChrZXkpO1xuICAgIHdoaWxlIChvYmogJiYgcCA8IHBhdGgubGVuZ3RoKSB7XG4gICAgICAgIG9iaiA9IG9ialtwYXRoW3ArK11dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqID09PSB1bmRlZmluZWQgPyBkZWYgOiBvYmo7XG59XG5mdW5jdGlvbiBzZXRJbihvYmosIHBhdGgsIHZhbHVlKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIHZhciByZXNWYWwgPSByZXM7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBwYXRoQXJyYXkgPSB0b1BhdGgocGF0aCk7XG4gICAgZm9yICg7IGkgPCBwYXRoQXJyYXkubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJyZW50UGF0aCA9IHBhdGhBcnJheVtpXTtcbiAgICAgICAgdmFyIGN1cnJlbnRPYmogPSBnZXRJbihvYmosIHBhdGhBcnJheS5zbGljZSgwLCBpICsgMSkpO1xuICAgICAgICBpZiAocmVzVmFsW2N1cnJlbnRQYXRoXSkge1xuICAgICAgICAgICAgcmVzVmFsID0gcmVzVmFsW2N1cnJlbnRQYXRoXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50T2JqKSB7XG4gICAgICAgICAgICByZXNWYWwgPSByZXNWYWxbY3VycmVudFBhdGhdID0gY2xvbmVEZWVwKGN1cnJlbnRPYmopO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIG5leHRQYXRoID0gcGF0aEFycmF5W2kgKyAxXTtcbiAgICAgICAgICAgIHJlc1ZhbCA9IHJlc1ZhbFtjdXJyZW50UGF0aF0gPVxuICAgICAgICAgICAgICAgIGlzSW50ZWdlcihuZXh0UGF0aCkgJiYgTnVtYmVyKG5leHRQYXRoKSA+PSAwID8gW10gOiB7fTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoKGkgPT09IDAgPyBvYmogOiByZXNWYWwpW3BhdGhBcnJheVtpXV0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlbGV0ZSByZXNWYWxbcGF0aEFycmF5W2ldXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlc1ZhbFtwYXRoQXJyYXlbaV1dID0gdmFsdWU7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBvYmosIHJlcyk7XG4gICAgaWYgKGkgPT09IDAgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGUgcmVzdWx0W3BhdGhBcnJheVtpXV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBzZXROZXN0ZWRPYmplY3RWYWx1ZXMob2JqZWN0LCB2YWx1ZSwgdmlzaXRlZCwgcmVzcG9uc2UpIHtcbiAgICBpZiAodmlzaXRlZCA9PT0gdm9pZCAwKSB7IHZpc2l0ZWQgPSBuZXcgV2Vha01hcCgpOyB9XG4gICAgaWYgKHJlc3BvbnNlID09PSB2b2lkIDApIHsgcmVzcG9uc2UgPSB7fTsgfVxuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgayA9IF9hW19pXTtcbiAgICAgICAgdmFyIHZhbCA9IG9iamVjdFtrXTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICAgIGlmICghdmlzaXRlZC5nZXQodmFsKSkge1xuICAgICAgICAgICAgICAgIHZpc2l0ZWQuc2V0KHZhbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2Vba10gPSBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9O1xuICAgICAgICAgICAgICAgIHNldE5lc3RlZE9iamVjdFZhbHVlcyh2YWwsIHZhbHVlLCB2aXNpdGVkLCByZXNwb25zZVtrXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXNwb25zZVtrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZTtcbn1cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xufTtcbnZhciBpc09iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnO1xufTtcbnZhciBpc0ludGVnZXIgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIFN0cmluZyhNYXRoLmZsb29yKE51bWJlcihvYmopKSkgPT09IG9iajtcbn07XG52YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJztcbn07XG52YXIgaXNOYU4gPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogIT09IG9iajsgfTtcbnZhciBpc0VtcHR5Q2hpbGRyZW4gPSBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcbnZhciBpc1Byb21pc2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIGlzRnVuY3Rpb24odmFsdWUudGhlbik7XG59O1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIHtcbiAgICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gICAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBkb2MuYm9keTtcbiAgICB9XG59XG5cbnZhciBGb3JtaWsgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEZvcm1paywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGb3JtaWsocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmhjQ2FjaGUgPSB7fTtcbiAgICAgICAgX3RoaXMuaGJDYWNoZSA9IHt9O1xuICAgICAgICBfdGhpcy5yZWdpc3RlckZpZWxkID0gZnVuY3Rpb24gKG5hbWUsIENvbXApIHtcbiAgICAgICAgICAgIF90aGlzLmZpZWxkc1tuYW1lXSA9IENvbXA7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnVucmVnaXN0ZXJGaWVsZCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuZmllbGRzW25hbWVdO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zZXRFcnJvcnMgPSBmdW5jdGlvbiAoZXJyb3JzKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGVycm9yczogZXJyb3JzIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zZXRUb3VjaGVkID0gZnVuY3Rpb24gKHRvdWNoZWQpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgdG91Y2hlZDogdG91Y2hlZCB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLnZhbGlkYXRlT25CbHVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJ1blZhbGlkYXRpb25zKF90aGlzLnN0YXRlLnZhbHVlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNldFZhbHVlcyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgdmFsdWVzOiB2YWx1ZXMgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy52YWxpZGF0ZU9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJ1blZhbGlkYXRpb25zKHZhbHVlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNldFN0YXR1cyA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgc3RhdHVzOiBzdGF0dXMgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNldEVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGVycm9yOiBlcnJvciB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc2V0U3VibWl0dGluZyA9IGZ1bmN0aW9uIChpc1N1Ym1pdHRpbmcpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5kaWRNb3VudCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgaXNTdWJtaXR0aW5nOiBpc1N1Ym1pdHRpbmcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnZhbGlkYXRlRmllbGQgPSBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgaXNWYWxpZGF0aW5nOiB0cnVlIH0pO1xuICAgICAgICAgICAgX3RoaXMucnVuU2luZ2xlRmllbGRMZXZlbFZhbGlkYXRpb24oZmllbGQsIGdldEluKF90aGlzLnN0YXRlLnZhbHVlcywgZmllbGQpKS50aGVuKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5kaWRNb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IHNldEluKF90aGlzLnN0YXRlLmVycm9ycywgZmllbGQsIGVycm9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWRhdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5ydW5TaW5nbGVGaWVsZExldmVsVmFsaWRhdGlvbiA9IGZ1bmN0aW9uIChmaWVsZCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzLmZpZWxkc1tmaWVsZF0ucHJvcHMudmFsaWRhdGUodmFsdWUpKTtcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0sIGZ1bmN0aW9uIChlKSB7IHJldHVybiBlOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMucnVuVmFsaWRhdGlvblNjaGVtYSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWxpZGF0aW9uU2NoZW1hID0gX3RoaXMucHJvcHMudmFsaWRhdGlvblNjaGVtYTtcbiAgICAgICAgICAgICAgICB2YXIgc2NoZW1hID0gaXNGdW5jdGlvbih2YWxpZGF0aW9uU2NoZW1hKVxuICAgICAgICAgICAgICAgICAgICA/IHZhbGlkYXRpb25TY2hlbWEoKVxuICAgICAgICAgICAgICAgICAgICA6IHZhbGlkYXRpb25TY2hlbWE7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGVZdXBTY2hlbWEodmFsdWVzLCBzY2hlbWEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHt9KTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeXVwVG9Gb3JtRXJyb3JzKGVycikpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnJ1blZhbGlkYXRpb25zID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICAgICAgaWYgKHZhbHVlcyA9PT0gdm9pZCAwKSB7IHZhbHVlcyA9IF90aGlzLnN0YXRlLnZhbHVlczsgfVxuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBpc1ZhbGlkYXRpbmc6IHRydWUgfSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIF90aGlzLnJ1bkZpZWxkTGV2ZWxWYWxpZGF0aW9ucyh2YWx1ZXMpLFxuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLnZhbGlkYXRpb25TY2hlbWEgPyBfdGhpcy5ydW5WYWxpZGF0aW9uU2NoZW1hKHZhbHVlcykgOiB7fSxcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy52YWxpZGF0ZSA/IF90aGlzLnJ1blZhbGlkYXRlSGFuZGxlcih2YWx1ZXMpIDoge30sXG4gICAgICAgICAgICBdKS50aGVuKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHZhciBmaWVsZEVycm9ycyA9IF9hWzBdLCBzY2hlbWFFcnJvcnMgPSBfYVsxXSwgaGFuZGxlckVycm9ycyA9IF9hWzJdO1xuICAgICAgICAgICAgICAgIHZhciBjb21iaW5lZEVycm9ycyA9IGRlZXBtZXJnZS5hbGwoW2ZpZWxkRXJyb3JzLCBzY2hlbWFFcnJvcnMsIGhhbmRsZXJFcnJvcnNdLCB7IGFycmF5TWVyZ2U6IGFycmF5TWVyZ2UgfSk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmRpZE1vdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgaXNWYWxpZGF0aW5nOiBmYWxzZSwgZXJyb3JzOiBjb21iaW5lZEVycm9ycyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbWJpbmVkRXJyb3JzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChldmVudE9yUGF0aCkge1xuICAgICAgICAgICAgdmFyIGV4ZWN1dGVDaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnRPclRleHRWYWx1ZSwgbWF5YmVQYXRoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpZWxkID0gbWF5YmVQYXRoO1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBldmVudE9yVGV4dFZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBwYXJzZWQ7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1N0cmluZyhldmVudE9yVGV4dFZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRPclRleHRWYWx1ZS5wZXJzaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudE9yVGV4dFZhbHVlLnBlcnNpc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgX2EgPSBldmVudE9yVGV4dFZhbHVlLnRhcmdldCwgdHlwZSA9IF9hLnR5cGUsIG5hbWVfMSA9IF9hLm5hbWUsIGlkID0gX2EuaWQsIHZhbHVlID0gX2EudmFsdWUsIGNoZWNrZWQgPSBfYS5jaGVja2VkLCBvdXRlckhUTUwgPSBfYS5vdXRlckhUTUw7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkID0gbWF5YmVQYXRoID8gbWF5YmVQYXRoIDogbmFtZV8xID8gbmFtZV8xIDogaWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmllbGQgJiYgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybkFib3V0TWlzc2luZ0lkZW50aWZpZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxDb250ZW50OiBvdXRlckhUTUwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRhdGlvbkFuY2hvckxpbms6ICdoYW5kbGVjaGFuZ2UtZS1yZWFjdGNoYW5nZWV2ZW50YW55LS12b2lkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyTmFtZTogJ2hhbmRsZUNoYW5nZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YWwgPSAvbnVtYmVyfHJhbmdlLy50ZXN0KHR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgocGFyc2VkID0gcGFyc2VGbG9hdCh2YWx1ZSkpLCBpc05hTihwYXJzZWQpID8gJycgOiBwYXJzZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IC9jaGVja2JveC8udGVzdCh0eXBlKSA/IGNoZWNrZWQgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHsgcmV0dXJuICh0c2xpYl8xLl9fYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgdmFsdWVzOiBzZXRJbihwcmV2U3RhdGUudmFsdWVzLCBmaWVsZCwgdmFsKSB9KSk7IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy52YWxpZGF0ZU9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucnVuVmFsaWRhdGlvbnMoc2V0SW4oX3RoaXMuc3RhdGUudmFsdWVzLCBmaWVsZCwgdmFsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcoZXZlbnRPclBhdGgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24oX3RoaXMuaGNDYWNoZVtldmVudE9yUGF0aF0pXG4gICAgICAgICAgICAgICAgICAgID8gX3RoaXMuaGNDYWNoZVtldmVudE9yUGF0aF1cbiAgICAgICAgICAgICAgICAgICAgOiAoX3RoaXMuaGNDYWNoZVtldmVudE9yUGF0aF0gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleGVjdXRlQ2hhbmdlKGV2ZW50LCBldmVudE9yUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhlY3V0ZUNoYW5nZShldmVudE9yUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNldEZpZWxkVmFsdWUgPSBmdW5jdGlvbiAoZmllbGQsIHZhbHVlLCBzaG91bGRWYWxpZGF0ZSkge1xuICAgICAgICAgICAgaWYgKHNob3VsZFZhbGlkYXRlID09PSB2b2lkIDApIHsgc2hvdWxkVmFsaWRhdGUgPSB0cnVlOyB9XG4gICAgICAgICAgICBpZiAoX3RoaXMuZGlkTW91bnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7IHJldHVybiAodHNsaWJfMS5fX2Fzc2lnbih7fSwgcHJldlN0YXRlLCB7IHZhbHVlczogc2V0SW4ocHJldlN0YXRlLnZhbHVlcywgZmllbGQsIHZhbHVlKSB9KSk7IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLnZhbGlkYXRlT25DaGFuZ2UgJiYgc2hvdWxkVmFsaWRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJ1blZhbGlkYXRpb25zKF90aGlzLnN0YXRlLnZhbHVlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlU3VibWl0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlICYmIGUucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5zdWJtaXRGb3JtKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnN1Ym1pdEZvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgICAgIHRvdWNoZWQ6IHNldE5lc3RlZE9iamVjdFZhbHVlcyhwcmV2U3RhdGUudmFsdWVzLCB0cnVlKSxcbiAgICAgICAgICAgICAgICBpc1N1Ym1pdHRpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgc3VibWl0Q291bnQ6IHByZXZTdGF0ZS5zdWJtaXRDb3VudCArIDEsXG4gICAgICAgICAgICB9KTsgfSk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucnVuVmFsaWRhdGlvbnMoKS50aGVuKGZ1bmN0aW9uIChjb21iaW5lZEVycm9ycykge1xuICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gT2JqZWN0LmtleXMoY29tYmluZWRFcnJvcnMpLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5leGVjdXRlU3VibWl0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKF90aGlzLmRpZE1vdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgaXNTdWJtaXR0aW5nOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuZXhlY3V0ZVN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnByb3BzLm9uU3VibWl0KF90aGlzLnN0YXRlLnZhbHVlcywgX3RoaXMuZ2V0Rm9ybWlrQWN0aW9ucygpKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIChldmVudE9yU3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgZXhlY3V0ZUJsdXIgPSBmdW5jdGlvbiAoZSwgcGF0aCkge1xuICAgICAgICAgICAgICAgIGlmIChlLnBlcnNpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wZXJzaXN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBfYSA9IGUudGFyZ2V0LCBuYW1lID0gX2EubmFtZSwgaWQgPSBfYS5pZCwgb3V0ZXJIVE1MID0gX2Eub3V0ZXJIVE1MO1xuICAgICAgICAgICAgICAgIHZhciBmaWVsZCA9IHBhdGggPyBwYXRoIDogbmFtZSA/IG5hbWUgOiBpZDtcbiAgICAgICAgICAgICAgICBpZiAoIWZpZWxkICYmIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybkFib3V0TWlzc2luZ0lkZW50aWZpZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENvbnRlbnQ6IG91dGVySFRNTCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50YXRpb25BbmNob3JMaW5rOiAnaGFuZGxlYmx1ci1lLWFueS0tdm9pZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyTmFtZTogJ2hhbmRsZUJsdXInLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkgeyByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hlZDogc2V0SW4ocHJldlN0YXRlLnRvdWNoZWQsIGZpZWxkLCB0cnVlKSxcbiAgICAgICAgICAgICAgICB9KTsgfSk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLnZhbGlkYXRlT25CbHVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJ1blZhbGlkYXRpb25zKF90aGlzLnN0YXRlLnZhbHVlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyhldmVudE9yU3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKF90aGlzLmhiQ2FjaGVbZXZlbnRPclN0cmluZ10pXG4gICAgICAgICAgICAgICAgICAgID8gX3RoaXMuaGJDYWNoZVtldmVudE9yU3RyaW5nXVxuICAgICAgICAgICAgICAgICAgICA6IChfdGhpcy5oYkNhY2hlW2V2ZW50T3JTdHJpbmddID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhlY3V0ZUJsdXIoZXZlbnQsIGV2ZW50T3JTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4ZWN1dGVCbHVyKGV2ZW50T3JTdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zZXRGaWVsZFRvdWNoZWQgPSBmdW5jdGlvbiAoZmllbGQsIHRvdWNoZWQsIHNob3VsZFZhbGlkYXRlKSB7XG4gICAgICAgICAgICBpZiAodG91Y2hlZCA9PT0gdm9pZCAwKSB7IHRvdWNoZWQgPSB0cnVlOyB9XG4gICAgICAgICAgICBpZiAoc2hvdWxkVmFsaWRhdGUgPT09IHZvaWQgMCkgeyBzaG91bGRWYWxpZGF0ZSA9IHRydWU7IH1cbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHsgcmV0dXJuICh0c2xpYl8xLl9fYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgdG91Y2hlZDogc2V0SW4ocHJldlN0YXRlLnRvdWNoZWQsIGZpZWxkLCB0b3VjaGVkKSB9KSk7IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMudmFsaWRhdGVPbkJsdXIgJiYgc2hvdWxkVmFsaWRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucnVuVmFsaWRhdGlvbnMoX3RoaXMuc3RhdGUudmFsdWVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc2V0RmllbGRFcnJvciA9IGZ1bmN0aW9uIChmaWVsZCwgbWVzc2FnZSkge1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkgeyByZXR1cm4gKHRzbGliXzEuX19hc3NpZ24oe30sIHByZXZTdGF0ZSwgeyBlcnJvcnM6IHNldEluKHByZXZTdGF0ZS5lcnJvcnMsIGZpZWxkLCBtZXNzYWdlKSB9KSk7IH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5yZXNldEZvcm0gPSBmdW5jdGlvbiAobmV4dFZhbHVlcykge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IG5leHRWYWx1ZXMgPyBuZXh0VmFsdWVzIDogX3RoaXMucHJvcHMuaW5pdGlhbFZhbHVlcztcbiAgICAgICAgICAgIF90aGlzLmluaXRpYWxWYWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1ZhbGlkYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yczoge30sXG4gICAgICAgICAgICAgICAgdG91Y2hlZDoge30sXG4gICAgICAgICAgICAgICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICAgICAgICAgICAgICBzdWJtaXRDb3VudDogMCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVSZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vblJlc2V0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heWJlUHJvbWlzZWRPblJlc2V0ID0gX3RoaXMucHJvcHMub25SZXNldChfdGhpcy5zdGF0ZS52YWx1ZXMsIF90aGlzLmdldEZvcm1pa0FjdGlvbnMoKSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShtYXliZVByb21pc2VkT25SZXNldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlZE9uUmVzZXQudGhlbihfdGhpcy5yZXNldEZvcm0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVzZXRGb3JtKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVzZXRGb3JtKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNldEZvcm1pa1N0YXRlID0gZnVuY3Rpb24gKHMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUocywgY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5nZXRGb3JtaWtBY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXNldEZvcm06IF90aGlzLnJlc2V0Rm9ybSxcbiAgICAgICAgICAgICAgICBzdWJtaXRGb3JtOiBfdGhpcy5zdWJtaXRGb3JtLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRlRm9ybTogX3RoaXMucnVuVmFsaWRhdGlvbnMsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVGaWVsZDogX3RoaXMudmFsaWRhdGVGaWVsZCxcbiAgICAgICAgICAgICAgICBzZXRFcnJvcjogX3RoaXMuc2V0RXJyb3IsXG4gICAgICAgICAgICAgICAgc2V0RXJyb3JzOiBfdGhpcy5zZXRFcnJvcnMsXG4gICAgICAgICAgICAgICAgc2V0RmllbGRFcnJvcjogX3RoaXMuc2V0RmllbGRFcnJvcixcbiAgICAgICAgICAgICAgICBzZXRGaWVsZFRvdWNoZWQ6IF90aGlzLnNldEZpZWxkVG91Y2hlZCxcbiAgICAgICAgICAgICAgICBzZXRGaWVsZFZhbHVlOiBfdGhpcy5zZXRGaWVsZFZhbHVlLFxuICAgICAgICAgICAgICAgIHNldFN0YXR1czogX3RoaXMuc2V0U3RhdHVzLFxuICAgICAgICAgICAgICAgIHNldFN1Ym1pdHRpbmc6IF90aGlzLnNldFN1Ym1pdHRpbmcsXG4gICAgICAgICAgICAgICAgc2V0VG91Y2hlZDogX3RoaXMuc2V0VG91Y2hlZCxcbiAgICAgICAgICAgICAgICBzZXRWYWx1ZXM6IF90aGlzLnNldFZhbHVlcyxcbiAgICAgICAgICAgICAgICBzZXRGb3JtaWtTdGF0ZTogX3RoaXMuc2V0Rm9ybWlrU3RhdGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5nZXRGb3JtaWtDb21wdXRlZFByb3BzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGlzSW5pdGlhbFZhbGlkID0gX3RoaXMucHJvcHMuaXNJbml0aWFsVmFsaWQ7XG4gICAgICAgICAgICB2YXIgZGlydHkgPSAhaXNFcXVhbChfdGhpcy5pbml0aWFsVmFsdWVzLCBfdGhpcy5zdGF0ZS52YWx1ZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkaXJ0eTogZGlydHksXG4gICAgICAgICAgICAgICAgaXNWYWxpZDogZGlydHlcbiAgICAgICAgICAgICAgICAgICAgPyBfdGhpcy5zdGF0ZS5lcnJvcnMgJiYgT2JqZWN0LmtleXMoX3RoaXMuc3RhdGUuZXJyb3JzKS5sZW5ndGggPT09IDBcbiAgICAgICAgICAgICAgICAgICAgOiBpc0luaXRpYWxWYWxpZCAhPT0gZmFsc2UgJiYgaXNGdW5jdGlvbihpc0luaXRpYWxWYWxpZClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gaXNJbml0aWFsVmFsaWQoX3RoaXMucHJvcHMpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGlzSW5pdGlhbFZhbGlkLFxuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZXM6IF90aGlzLmluaXRpYWxWYWx1ZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5nZXRGb3JtaWtCYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2Fzc2lnbih7fSwgX3RoaXMuc3RhdGUsIF90aGlzLmdldEZvcm1pa0FjdGlvbnMoKSwgX3RoaXMuZ2V0Rm9ybWlrQ29tcHV0ZWRQcm9wcygpLCB7IHJlZ2lzdGVyRmllbGQ6IF90aGlzLnJlZ2lzdGVyRmllbGQsIHVucmVnaXN0ZXJGaWVsZDogX3RoaXMudW5yZWdpc3RlckZpZWxkLCBoYW5kbGVCbHVyOiBfdGhpcy5oYW5kbGVCbHVyLCBoYW5kbGVDaGFuZ2U6IF90aGlzLmhhbmRsZUNoYW5nZSwgaGFuZGxlUmVzZXQ6IF90aGlzLmhhbmRsZVJlc2V0LCBoYW5kbGVTdWJtaXQ6IF90aGlzLmhhbmRsZVN1Ym1pdCwgdmFsaWRhdGVPbkNoYW5nZTogX3RoaXMucHJvcHMudmFsaWRhdGVPbkNoYW5nZSwgdmFsaWRhdGVPbkJsdXI6IF90aGlzLnByb3BzLnZhbGlkYXRlT25CbHVyIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5nZXRGb3JtaWtDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hc3NpZ24oe30sIF90aGlzLmdldEZvcm1pa0JhZygpLCB7IHZhbGlkYXRpb25TY2hlbWE6IF90aGlzLnByb3BzLnZhbGlkYXRpb25TY2hlbWEsIHZhbGlkYXRlOiBfdGhpcy5wcm9wcy52YWxpZGF0ZSwgaW5pdGlhbFZhbHVlczogX3RoaXMuaW5pdGlhbFZhbHVlcyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB2YWx1ZXM6IHByb3BzLmluaXRpYWxWYWx1ZXMgfHwge30sXG4gICAgICAgICAgICBlcnJvcnM6IHt9LFxuICAgICAgICAgICAgdG91Y2hlZDoge30sXG4gICAgICAgICAgICBpc1N1Ym1pdHRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgaXNWYWxpZGF0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHN1Ym1pdENvdW50OiAwLFxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5kaWRNb3VudCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5maWVsZHMgPSB7fTtcbiAgICAgICAgX3RoaXMuaW5pdGlhbFZhbHVlcyA9IHByb3BzLmluaXRpYWxWYWx1ZXMgfHwge307XG4gICAgICAgIHdhcm5pbmcoIShwcm9wcy5jb21wb25lbnQgJiYgcHJvcHMucmVuZGVyKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Rm9ybWlrIGNvbXBvbmVudD4gYW5kIDxGb3JtaWsgcmVuZGVyPiBpbiB0aGUgc2FtZSA8Rm9ybWlrPiBjb21wb25lbnQ7IDxGb3JtaWsgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWQnKTtcbiAgICAgICAgd2FybmluZyghKHByb3BzLmNvbXBvbmVudCAmJiBwcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZvcm1payBjb21wb25lbnQ+IGFuZCA8Rm9ybWlrIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSA8Rm9ybWlrPiBjb21wb25lbnQ7IDxGb3JtaWsgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCcpO1xuICAgICAgICB3YXJuaW5nKCEocHJvcHMucmVuZGVyICYmIHByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4ocHJvcHMuY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Rm9ybWlrIHJlbmRlcj4gYW5kIDxGb3JtaWsgY2hpbGRyZW4+IGluIHRoZSBzYW1lIDxGb3JtaWs+IGNvbXBvbmVudDsgPEZvcm1payBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRm9ybWlrLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaWRNb3VudCA9IHRydWU7XG4gICAgfTtcbiAgICBGb3JtaWsucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRpZE1vdW50ID0gZmFsc2U7XG4gICAgfTtcbiAgICBGb3JtaWsucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZW5hYmxlUmVpbml0aWFsaXplICYmXG4gICAgICAgICAgICAhaXNFcXVhbChwcmV2UHJvcHMuaW5pdGlhbFZhbHVlcywgdGhpcy5wcm9wcy5pbml0aWFsVmFsdWVzKSkge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsVmFsdWVzID0gdGhpcy5wcm9wcy5pbml0aWFsVmFsdWVzO1xuICAgICAgICAgICAgdGhpcy5yZXNldEZvcm0odGhpcy5wcm9wcy5pbml0aWFsVmFsdWVzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9ybWlrLnByb3RvdHlwZS5ydW5GaWVsZExldmVsVmFsaWRhdGlvbnMgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBmaWVsZEtleXNXaXRoVmFsaWRhdGlvbiA9IE9iamVjdC5rZXlzKHRoaXMuZmllbGRzKS5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5maWVsZHMgJiZcbiAgICAgICAgICAgICAgICBfdGhpcy5maWVsZHNbZl0gJiZcbiAgICAgICAgICAgICAgICBfdGhpcy5maWVsZHNbZl0ucHJvcHMudmFsaWRhdGUgJiZcbiAgICAgICAgICAgICAgICBpc0Z1bmN0aW9uKF90aGlzLmZpZWxkc1tmXS5wcm9wcy52YWxpZGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZmllbGRWYWxpZGF0aW9ucyA9IGZpZWxkS2V5c1dpdGhWYWxpZGF0aW9uLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gZmllbGRLZXlzV2l0aFZhbGlkYXRpb24ubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJ1blNpbmdsZUZpZWxkTGV2ZWxWYWxpZGF0aW9uKGYsIGdldEluKHZhbHVlcywgZikpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogW1Byb21pc2UucmVzb2x2ZSgnRE9fTk9UX0RFTEVURV9ZT1VfV0lMTF9CRV9GSVJFRCcpXTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGZpZWxkVmFsaWRhdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGZpZWxkRXJyb3JzTGlzdCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkRXJyb3JzTGlzdC5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cnIsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnIgPT09ICdET19OT1RfREVMRVRFX1lPVV9XSUxMX0JFX0ZJUkVEJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCEhY3Vycikge1xuICAgICAgICAgICAgICAgICAgICBwcmV2ID0gc2V0SW4ocHJldiwgZmllbGRLZXlzV2l0aFZhbGlkYXRpb25baW5kZXhdLCBjdXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRm9ybWlrLnByb3RvdHlwZS5ydW5WYWxpZGF0ZUhhbmRsZXIgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgdmFyIG1heWJlUHJvbWlzZWRFcnJvcnMgPSBfdGhpcy5wcm9wcy52YWxpZGF0ZSh2YWx1ZXMpO1xuICAgICAgICAgICAgaWYgKG1heWJlUHJvbWlzZWRFcnJvcnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoe30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNQcm9taXNlKG1heWJlUHJvbWlzZWRFcnJvcnMpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlZEVycm9ycy50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7fSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGVycm9ycyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG1heWJlUHJvbWlzZWRFcnJvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZvcm1pay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBjb21wb25lbnQgPSBfYS5jb21wb25lbnQsIHJlbmRlciA9IF9hLnJlbmRlciwgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbjtcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5nZXRGb3JtaWtCYWcoKTtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuZ2V0Rm9ybWlrQ29udGV4dCgpO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybWlrUHJvdmlkZXIsIHsgdmFsdWU6IGN0eCB9LCBjb21wb25lbnRcbiAgICAgICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKVxuICAgICAgICAgICAgOiByZW5kZXJcbiAgICAgICAgICAgICAgICA/IHJlbmRlcihwcm9wcylcbiAgICAgICAgICAgICAgICA6IGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICAgID8gaXNGdW5jdGlvbihjaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY2hpbGRyZW4ocHJvcHMpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICAgICAgICA6IG51bGwpKTtcbiAgICB9O1xuICAgIEZvcm1pay5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIHZhbGlkYXRlT25DaGFuZ2U6IHRydWUsXG4gICAgICAgIHZhbGlkYXRlT25CbHVyOiB0cnVlLFxuICAgICAgICBpc0luaXRpYWxWYWxpZDogZmFsc2UsXG4gICAgICAgIGVuYWJsZVJlaW5pdGlhbGl6ZTogZmFsc2UsXG4gICAgfTtcbiAgICByZXR1cm4gRm9ybWlrO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmZ1bmN0aW9uIHdhcm5BYm91dE1pc3NpbmdJZGVudGlmaWVyKF9hKSB7XG4gICAgdmFyIGh0bWxDb250ZW50ID0gX2EuaHRtbENvbnRlbnQsIGRvY3VtZW50YXRpb25BbmNob3JMaW5rID0gX2EuZG9jdW1lbnRhdGlvbkFuY2hvckxpbmssIGhhbmRsZXJOYW1lID0gX2EuaGFuZGxlck5hbWU7XG4gICAgY29uc29sZS5lcnJvcihcIldhcm5pbmc6IEZvcm1payBjYWxsZWQgYFwiICsgaGFuZGxlck5hbWUgKyBcImAsIGJ1dCB5b3UgZm9yZ290IHRvIHBhc3MgYW4gYGlkYCBvciBgbmFtZWAgYXR0cmlidXRlIHRvIHlvdXIgaW5wdXQ6XFxuXFxuICAgIFwiICsgaHRtbENvbnRlbnQgKyBcIlxcblxcbiAgICBGb3JtaWsgY2Fubm90IGRldGVybWluZSB3aGljaCB2YWx1ZSB0byB1cGRhdGUuIEZvciBtb3JlIGluZm8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXJlZHBhbG1lci9mb3JtaWsjXCIgKyBkb2N1bWVudGF0aW9uQW5jaG9yTGluayArIFwiXFxuICBcIik7XG59XG5mdW5jdGlvbiB5dXBUb0Zvcm1FcnJvcnMoeXVwRXJyb3IpIHtcbiAgICB2YXIgZXJyb3JzID0ge307XG4gICAgaWYgKHl1cEVycm9yLmlubmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc2V0SW4oZXJyb3JzLCB5dXBFcnJvci5wYXRoLCB5dXBFcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHl1cEVycm9yLmlubmVyOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgZXJyID0gX2FbX2ldO1xuICAgICAgICBpZiAoIWVycm9yc1tlcnIucGF0aF0pIHtcbiAgICAgICAgICAgIGVycm9ycyA9IHNldEluKGVycm9ycywgZXJyLnBhdGgsIGVyci5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVZdXBTY2hlbWEodmFsdWVzLCBzY2hlbWEsIHN5bmMsIGNvbnRleHQpIHtcbiAgICBpZiAoc3luYyA9PT0gdm9pZCAwKSB7IHN5bmMgPSBmYWxzZTsgfVxuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IHt9OyB9XG4gICAgdmFyIHZhbGlkYXRlRGF0YSA9IHt9O1xuICAgIGZvciAodmFyIGsgaW4gdmFsdWVzKSB7XG4gICAgICAgIGlmICh2YWx1ZXMuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBTdHJpbmcoayk7XG4gICAgICAgICAgICB2YWxpZGF0ZURhdGFba2V5XSA9IHZhbHVlc1trZXldICE9PSAnJyA/IHZhbHVlc1trZXldIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWFbc3luYyA/ICd2YWxpZGF0ZVN5bmMnIDogJ3ZhbGlkYXRlJ10odmFsaWRhdGVEYXRhLCB7XG4gICAgICAgIGFib3J0RWFybHk6IGZhbHNlLFxuICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgIH0pO1xufVxuZnVuY3Rpb24gYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IHRhcmdldC5zbGljZSgpO1xuICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25baV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB2YXIgY2xvbmVSZXF1ZXN0ZWQgPSBvcHRpb25zLmNsb25lICE9PSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBzaG91bGRDbG9uZSA9IGNsb25lUmVxdWVzdGVkICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QoZSk7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpXSA9IHNob3VsZENsb25lXG4gICAgICAgICAgICAgICAgPyBkZWVwbWVyZ2UoQXJyYXkuaXNBcnJheShlKSA/IFtdIDoge30sIGUsIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgOiBlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QoZSkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2ldID0gZGVlcG1lcmdlKHRhcmdldFtpXSwgZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGFyZ2V0LmluZGV4T2YoZSkgPT09IC0xKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5wdXNoKGUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xufVxuXG52YXIgRmllbGRJbm5lciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRmllbGRJbm5lciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGaWVsZElubmVyKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICB2YXIgcmVuZGVyID0gcHJvcHMucmVuZGVyLCBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLCBjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQ7XG4gICAgICAgIHdhcm5pbmcoIShjb21wb25lbnQgJiYgcmVuZGVyKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmllbGQgY29tcG9uZW50PiBhbmQgPEZpZWxkIHJlbmRlcj4gaW4gdGhlIHNhbWUgPEZpZWxkPiBjb21wb25lbnQ7IDxGaWVsZCBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZCcpO1xuICAgICAgICB3YXJuaW5nKCEoY29tcG9uZW50ICYmIGNoaWxkcmVuICYmIGlzRnVuY3Rpb24oY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmllbGQgY29tcG9uZW50PiBhbmQgPEZpZWxkIGNoaWxkcmVuPiBhcyBhIGZ1bmN0aW9uIGluIHRoZSBzYW1lIDxGaWVsZD4gY29tcG9uZW50OyA8RmllbGQgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gICAgICAgIHdhcm5pbmcoIShyZW5kZXIgJiYgY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxGaWVsZCByZW5kZXI+IGFuZCA8RmllbGQgY2hpbGRyZW4+IGluIHRoZSBzYW1lIDxGaWVsZD4gY29tcG9uZW50OyA8RmllbGQgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCcpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZpZWxkSW5uZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnByb3BzLmZvcm1pay5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSwgdGhpcyk7XG4gICAgfTtcbiAgICBGaWVsZElubmVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm5hbWUgIT09IHByZXZQcm9wcy5uYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmZvcm1pay51bnJlZ2lzdGVyRmllbGQocHJldlByb3BzLm5hbWUpO1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5mb3JtaWsucmVnaXN0ZXJGaWVsZCh0aGlzLnByb3BzLm5hbWUsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnZhbGlkYXRlICE9PSBwcmV2UHJvcHMudmFsaWRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRmllbGRJbm5lci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnVucmVnaXN0ZXJGaWVsZCh0aGlzLnByb3BzLm5hbWUpO1xuICAgIH07XG4gICAgRmllbGRJbm5lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCB2YWxpZGF0ZSA9IF9hLnZhbGlkYXRlLCBuYW1lID0gX2EubmFtZSwgcmVuZGVyID0gX2EucmVuZGVyLCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBfYiA9IF9hLmNvbXBvbmVudCwgY29tcG9uZW50ID0gX2IgPT09IHZvaWQgMCA/ICdpbnB1dCcgOiBfYiwgZm9ybWlrID0gX2EuZm9ybWlrLCBwcm9wcyA9IHRzbGliXzEuX19yZXN0KF9hLCBbXCJ2YWxpZGF0ZVwiLCBcIm5hbWVcIiwgXCJyZW5kZXJcIiwgXCJjaGlsZHJlblwiLCBcImNvbXBvbmVudFwiLCBcImZvcm1pa1wiXSk7XG4gICAgICAgIHZhciBfdmFsaWRhdGUgPSBmb3JtaWsudmFsaWRhdGUsIF92YWxpZGF0aW9uU2NoZW1hID0gZm9ybWlrLnZhbGlkYXRpb25TY2hlbWEsIHJlc3RPZkZvcm1payA9IHRzbGliXzEuX19yZXN0KGZvcm1paywgW1widmFsaWRhdGVcIiwgXCJ2YWxpZGF0aW9uU2NoZW1hXCJdKTtcbiAgICAgICAgdmFyIGZpZWxkID0ge1xuICAgICAgICAgICAgdmFsdWU6IHByb3BzLnR5cGUgPT09ICdyYWRpbycgfHwgcHJvcHMudHlwZSA9PT0gJ2NoZWNrYm94J1xuICAgICAgICAgICAgICAgID8gcHJvcHMudmFsdWVcbiAgICAgICAgICAgICAgICA6IGdldEluKGZvcm1pay52YWx1ZXMsIG5hbWUpLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBmb3JtaWsuaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgb25CbHVyOiBmb3JtaWsuaGFuZGxlQmx1cixcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGJhZyA9IHsgZmllbGQ6IGZpZWxkLCBmb3JtOiByZXN0T2ZGb3JtaWsgfTtcbiAgICAgICAgaWYgKHJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihiYWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuKGJhZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZiwgcmVzdCA9IHRzbGliXzEuX19yZXN0KHByb3BzLCBbXCJpbm5lclJlZlwiXSk7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHRzbGliXzEuX19hc3NpZ24oeyByZWY6IGlubmVyUmVmIH0sIGZpZWxkLCByZXN0LCB7IGNoaWxkcmVuOiBjaGlsZHJlbiB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCB0c2xpYl8xLl9fYXNzaWduKHt9LCBiYWcsIHByb3BzLCB7IGNoaWxkcmVuOiBjaGlsZHJlbiB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gRmllbGRJbm5lcjtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG52YXIgRmllbGQgPSBjb25uZWN0KEZpZWxkSW5uZXIpO1xuXG52YXIgRm9ybSA9IGNvbm5lY3QoZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIF9iID0gX2EuZm9ybWlrLCBoYW5kbGVSZXNldCA9IF9iLmhhbmRsZVJlc2V0LCBoYW5kbGVTdWJtaXQgPSBfYi5oYW5kbGVTdWJtaXQsIHByb3BzID0gdHNsaWJfMS5fX3Jlc3QoX2EsIFtcImZvcm1pa1wiXSk7XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiLCB0c2xpYl8xLl9fYXNzaWduKHsgb25SZXNldDogaGFuZGxlUmVzZXQsIG9uU3VibWl0OiBoYW5kbGVTdWJtaXQgfSwgcHJvcHMpKSk7XG59KTtcbkZvcm0uZGlzcGxheU5hbWUgPSAnRm9ybSc7XG5cbmZ1bmN0aW9uIHdpdGhGb3JtaWsoX2EpIHtcbiAgICB2YXIgX2IgPSBfYS5tYXBQcm9wc1RvVmFsdWVzLCBtYXBQcm9wc1RvVmFsdWVzID0gX2IgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICh2YW5pbGxhUHJvcHMpIHtcbiAgICAgICAgdmFyIHZhbCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrIGluIHZhbmlsbGFQcm9wcykge1xuICAgICAgICAgICAgaWYgKHZhbmlsbGFQcm9wcy5oYXNPd25Qcm9wZXJ0eShrKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YW5pbGxhUHJvcHNba10gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB2YWxba10gPSB2YW5pbGxhUHJvcHNba107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9IDogX2IsIGNvbmZpZyA9IHRzbGliXzEuX19yZXN0KF9hLCBbXCJtYXBQcm9wc1RvVmFsdWVzXCJdKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlRm9ybWlrKENvbXBvbmVudCkge1xuICAgICAgICB2YXIgY29tcG9uZW50RGlzcGxheU5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHxcbiAgICAgICAgICAgIENvbXBvbmVudC5uYW1lIHx8XG4gICAgICAgICAgICAoQ29tcG9uZW50LmNvbnN0cnVjdG9yICYmIENvbXBvbmVudC5jb25zdHJ1Y3Rvci5uYW1lKSB8fFxuICAgICAgICAgICAgJ0NvbXBvbmVudCc7XG4gICAgICAgIHZhciBDID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIHRzbGliXzEuX19leHRlbmRzKEMsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBDKCkge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgICAgIF90aGlzLnZhbGlkYXRlID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnLnZhbGlkYXRlKHZhbHVlcywgX3RoaXMucHJvcHMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgX3RoaXMudmFsaWRhdGlvblNjaGVtYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24oY29uZmlnLnZhbGlkYXRpb25TY2hlbWEpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZy52YWxpZGF0aW9uU2NoZW1hKF90aGlzLnByb3BzKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBjb25maWcudmFsaWRhdGlvblNjaGVtYTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZVN1Ym1pdCA9IGZ1bmN0aW9uICh2YWx1ZXMsIGFjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZy5oYW5kbGVTdWJtaXQodmFsdWVzLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBhY3Rpb25zLCB7IHByb3BzOiBfdGhpcy5wcm9wcyB9KSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZW5kZXJGb3JtQ29tcG9uZW50ID0gZnVuY3Rpb24gKGZvcm1pa1Byb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgX3RoaXMucHJvcHMsIGZvcm1pa1Byb3BzKSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgcHJvcHMgPSB0c2xpYl8xLl9fcmVzdChfYSwgW1wiY2hpbGRyZW5cIl0pO1xuICAgICAgICAgICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtaWssIHRzbGliXzEuX19hc3NpZ24oe30sIHByb3BzLCBjb25maWcsIHsgdmFsaWRhdGU6IGNvbmZpZy52YWxpZGF0ZSAmJiB0aGlzLnZhbGlkYXRlLCB2YWxpZGF0aW9uU2NoZW1hOiBjb25maWcudmFsaWRhdGlvblNjaGVtYSAmJiB0aGlzLnZhbGlkYXRpb25TY2hlbWEsIGluaXRpYWxWYWx1ZXM6IG1hcFByb3BzVG9WYWx1ZXModGhpcy5wcm9wcyksIG9uU3VibWl0OiB0aGlzLmhhbmRsZVN1Ym1pdCwgcmVuZGVyOiB0aGlzLnJlbmRlckZvcm1Db21wb25lbnQgfSkpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBDLmRpc3BsYXlOYW1lID0gXCJXaXRoRm9ybWlrKFwiICsgY29tcG9uZW50RGlzcGxheU5hbWUgKyBcIilcIjtcbiAgICAgICAgICAgIHJldHVybiBDO1xuICAgICAgICB9KFJlYWN0LkNvbXBvbmVudCkpO1xuICAgICAgICByZXR1cm4gaG9pc3ROb25SZWFjdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbiAgICB9O1xufVxuXG52YXIgbW92ZSA9IGZ1bmN0aW9uIChhcnJheSwgZnJvbSwgdG8pIHtcbiAgICB2YXIgY29weSA9IChhcnJheSB8fCBbXSkuc2xpY2UoKTtcbiAgICB2YXIgdmFsdWUgPSBjb3B5W2Zyb21dO1xuICAgIGNvcHkuc3BsaWNlKGZyb20sIDEpO1xuICAgIGNvcHkuc3BsaWNlKHRvLCAwLCB2YWx1ZSk7XG4gICAgcmV0dXJuIGNvcHk7XG59O1xudmFyIHN3YXAgPSBmdW5jdGlvbiAoYXJyYXksIGluZGV4QSwgaW5kZXhCKSB7XG4gICAgdmFyIGNvcHkgPSAoYXJyYXkgfHwgW10pLnNsaWNlKCk7XG4gICAgdmFyIGEgPSBjb3B5W2luZGV4QV07XG4gICAgY29weVtpbmRleEFdID0gY29weVtpbmRleEJdO1xuICAgIGNvcHlbaW5kZXhCXSA9IGE7XG4gICAgcmV0dXJuIGNvcHk7XG59O1xudmFyIGluc2VydCA9IGZ1bmN0aW9uIChhcnJheSwgaW5kZXgsIHZhbHVlKSB7XG4gICAgdmFyIGNvcHkgPSAoYXJyYXkgfHwgW10pLnNsaWNlKCk7XG4gICAgY29weS5zcGxpY2UoaW5kZXgsIDAsIHZhbHVlKTtcbiAgICByZXR1cm4gY29weTtcbn07XG52YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIChhcnJheSwgaW5kZXgsIHZhbHVlKSB7XG4gICAgdmFyIGNvcHkgPSAoYXJyYXkgfHwgW10pLnNsaWNlKCk7XG4gICAgY29weVtpbmRleF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gY29weTtcbn07XG52YXIgRmllbGRBcnJheUlubmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhGaWVsZEFycmF5SW5uZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmllbGRBcnJheUlubmVyKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy51cGRhdGVBcnJheUZpZWxkID0gZnVuY3Rpb24gKGZuLCBhbHRlclRvdWNoZWQsIGFsdGVyRXJyb3JzKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcywgbmFtZSA9IF9hLm5hbWUsIHZhbGlkYXRlT25DaGFuZ2UgPSBfYS52YWxpZGF0ZU9uQ2hhbmdlLCBfYiA9IF9hLmZvcm1paywgc2V0Rm9ybWlrU3RhdGUgPSBfYi5zZXRGb3JtaWtTdGF0ZSwgdmFsaWRhdGVGb3JtID0gX2IudmFsaWRhdGVGb3JtLCB2YWx1ZXMgPSBfYi52YWx1ZXMsIHRvdWNoZWQgPSBfYi50b3VjaGVkLCBlcnJvcnMgPSBfYi5lcnJvcnM7XG4gICAgICAgICAgICBzZXRGb3JtaWtTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7IHJldHVybiAodHNsaWJfMS5fX2Fzc2lnbih7fSwgcHJldlN0YXRlLCB7IHZhbHVlczogc2V0SW4ocHJldlN0YXRlLnZhbHVlcywgbmFtZSwgZm4oZ2V0SW4odmFsdWVzLCBuYW1lKSkpLCBlcnJvcnM6IGFsdGVyRXJyb3JzXG4gICAgICAgICAgICAgICAgICAgID8gc2V0SW4ocHJldlN0YXRlLmVycm9ycywgbmFtZSwgZm4oZ2V0SW4oZXJyb3JzLCBuYW1lKSkpXG4gICAgICAgICAgICAgICAgICAgIDogcHJldlN0YXRlLmVycm9ycywgdG91Y2hlZDogYWx0ZXJUb3VjaGVkXG4gICAgICAgICAgICAgICAgICAgID8gc2V0SW4ocHJldlN0YXRlLnRvdWNoZWQsIG5hbWUsIGZuKGdldEluKHRvdWNoZWQsIG5hbWUpKSlcbiAgICAgICAgICAgICAgICAgICAgOiBwcmV2U3RhdGUudG91Y2hlZCB9KSk7IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGVPbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUZvcm0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMucHVzaCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7IHJldHVybiAoYXJyYXkgfHwgW10pLmNvbmNhdChbY2xvbmVEZWVwKHZhbHVlKV0pOyB9LCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5wdXNoKHZhbHVlKTsgfTsgfTtcbiAgICAgICAgX3RoaXMuc3dhcCA9IGZ1bmN0aW9uIChpbmRleEEsIGluZGV4Qikge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7IHJldHVybiBzd2FwKGFycmF5LCBpbmRleEEsIGluZGV4Qik7IH0sIHRydWUsIHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVTd2FwID0gZnVuY3Rpb24gKGluZGV4QSwgaW5kZXhCKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuc3dhcChpbmRleEEsIGluZGV4Qik7XG4gICAgICAgIH07IH07XG4gICAgICAgIF90aGlzLm1vdmUgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVBcnJheUZpZWxkKGZ1bmN0aW9uIChhcnJheSkgeyByZXR1cm4gbW92ZShhcnJheSwgZnJvbSwgdG8pOyB9LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlTW92ZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMubW92ZShmcm9tLCB0byk7IH07IH07XG4gICAgICAgIF90aGlzLmluc2VydCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVBcnJheUZpZWxkKGZ1bmN0aW9uIChhcnJheSkgeyByZXR1cm4gaW5zZXJ0KGFycmF5LCBpbmRleCwgdmFsdWUpOyB9LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlSW5zZXJ0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuaW5zZXJ0KGluZGV4LCB2YWx1ZSk7IH07IH07XG4gICAgICAgIF90aGlzLnJlcGxhY2UgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlQXJyYXlGaWVsZChmdW5jdGlvbiAoYXJyYXkpIHsgcmV0dXJuIHJlcGxhY2UoYXJyYXksIGluZGV4LCB2YWx1ZSk7IH0sIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucmVwbGFjZShpbmRleCwgdmFsdWUpO1xuICAgICAgICB9OyB9O1xuICAgICAgICBfdGhpcy51bnNoaWZ0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gLTE7XG4gICAgICAgICAgICBfdGhpcy51cGRhdGVBcnJheUZpZWxkKGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgICAgICAgICAgIHZhciBhcnIgPSBhcnJheSA/IFt2YWx1ZV0uY29uY2F0KGFycmF5KSA6IFt2YWx1ZV07XG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA8IDApXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgICAgIH0sIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlVW5zaGlmdCA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudW5zaGlmdCh2YWx1ZSk7IH07IH07XG4gICAgICAgIF90aGlzLmhhbmRsZVJlbW92ZSA9IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmVtb3ZlKGluZGV4KTsgfTsgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlUG9wID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucG9wKCk7IH07IH07XG4gICAgICAgIF90aGlzLnJlbW92ZSA9IF90aGlzLnJlbW92ZS5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMucG9wID0gX3RoaXMucG9wLmJpbmQoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZpZWxkQXJyYXlJbm5lci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgICAgIHZhciBjb3B5ID0gYXJyYXkgPyBhcnJheS5zbGljZSgpIDogW107XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvcHlbaW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29weS5zcGxpY2UpKSB7XG4gICAgICAgICAgICAgICAgY29weS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgICAgIH0sIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgRmllbGRBcnJheUlubmVyLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgICAgIHZhciB0bXAgPSBhcnJheTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdG1wICYmIHRtcC5wb3AgJiYgdG1wLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRtcDtcbiAgICAgICAgfSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBGaWVsZEFycmF5SW5uZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFycmF5SGVscGVycyA9IHtcbiAgICAgICAgICAgIHB1c2g6IHRoaXMucHVzaCxcbiAgICAgICAgICAgIHBvcDogdGhpcy5wb3AsXG4gICAgICAgICAgICBzd2FwOiB0aGlzLnN3YXAsXG4gICAgICAgICAgICBtb3ZlOiB0aGlzLm1vdmUsXG4gICAgICAgICAgICBpbnNlcnQ6IHRoaXMuaW5zZXJ0LFxuICAgICAgICAgICAgcmVwbGFjZTogdGhpcy5yZXBsYWNlLFxuICAgICAgICAgICAgdW5zaGlmdDogdGhpcy51bnNoaWZ0LFxuICAgICAgICAgICAgcmVtb3ZlOiB0aGlzLnJlbW92ZSxcbiAgICAgICAgICAgIGhhbmRsZVB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgICAgICAgIGhhbmRsZVBvcDogdGhpcy5oYW5kbGVQb3AsXG4gICAgICAgICAgICBoYW5kbGVTd2FwOiB0aGlzLmhhbmRsZVN3YXAsXG4gICAgICAgICAgICBoYW5kbGVNb3ZlOiB0aGlzLmhhbmRsZU1vdmUsXG4gICAgICAgICAgICBoYW5kbGVJbnNlcnQ6IHRoaXMuaGFuZGxlSW5zZXJ0LFxuICAgICAgICAgICAgaGFuZGxlUmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgICAgICAgaGFuZGxlVW5zaGlmdDogdGhpcy5oYW5kbGVVbnNoaWZ0LFxuICAgICAgICAgICAgaGFuZGxlUmVtb3ZlOiB0aGlzLmhhbmRsZVJlbW92ZSxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgY29tcG9uZW50ID0gX2EuY29tcG9uZW50LCByZW5kZXIgPSBfYS5yZW5kZXIsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIG5hbWUgPSBfYS5uYW1lLCBfYiA9IF9hLmZvcm1paywgX3ZhbGlkYXRlID0gX2IudmFsaWRhdGUsIF92YWxpZGF0aW9uU2NoZW1hID0gX2IudmFsaWRhdGlvblNjaGVtYSwgcmVzdE9mRm9ybWlrID0gdHNsaWJfMS5fX3Jlc3QoX2IsIFtcInZhbGlkYXRlXCIsIFwidmFsaWRhdGlvblNjaGVtYVwiXSk7XG4gICAgICAgIHZhciBwcm9wcyA9IHRzbGliXzEuX19hc3NpZ24oe30sIGFycmF5SGVscGVycywgeyBmb3JtOiByZXN0T2ZGb3JtaWssIG5hbWU6IG5hbWUgfSk7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRcbiAgICAgICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKVxuICAgICAgICAgICAgOiByZW5kZXJcbiAgICAgICAgICAgICAgICA/IHJlbmRlcihwcm9wcylcbiAgICAgICAgICAgICAgICA6IGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICAgID8gdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNoaWxkcmVuKHByb3BzKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbFxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgfTtcbiAgICBGaWVsZEFycmF5SW5uZXIuZGVmYXVsdFByb3BzID0ge1xuICAgICAgICB2YWxpZGF0ZU9uQ2hhbmdlOiB0cnVlLFxuICAgIH07XG4gICAgcmV0dXJuIEZpZWxkQXJyYXlJbm5lcjtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG52YXIgRmllbGRBcnJheSA9IGNvbm5lY3QoRmllbGRBcnJheUlubmVyKTtcblxudmFyIEZhc3RGaWVsZElubmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhGYXN0RmllbGRJbm5lciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGYXN0RmllbGRJbm5lcihwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHJlbmRlciA9IHByb3BzLnJlbmRlciwgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbiwgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50O1xuICAgICAgICB3YXJuaW5nKCEoY29tcG9uZW50ICYmIHJlbmRlciksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZhc3RGaWVsZCBjb21wb25lbnQ+IGFuZCA8RmFzdEZpZWxkIHJlbmRlcj4gaW4gdGhlIHNhbWUgPEZhc3RGaWVsZD4gY29tcG9uZW50OyA8RmFzdEZpZWxkIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkJyk7XG4gICAgICAgIHdhcm5pbmcoIShjb21wb25lbnQgJiYgY2hpbGRyZW4gJiYgaXNGdW5jdGlvbihjaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxGYXN0RmllbGQgY29tcG9uZW50PiBhbmQgPEZhc3RGaWVsZCBjaGlsZHJlbj4gYXMgYSBmdW5jdGlvbiBpbiB0aGUgc2FtZSA8RmFzdEZpZWxkPiBjb21wb25lbnQ7IDxGYXN0RmllbGQgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gICAgICAgIHdhcm5pbmcoIShyZW5kZXIgJiYgY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxGYXN0RmllbGQgcmVuZGVyPiBhbmQgPEZhc3RGaWVsZCBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgPEZhc3RGaWVsZD4gY29tcG9uZW50OyA8RmFzdEZpZWxkIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWQnKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGYXN0RmllbGRJbm5lci5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNob3VsZFVwZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuc2hvdWxkVXBkYXRlKHByb3BzLCB0aGlzLnByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnZXRJbih0aGlzLnByb3BzLmZvcm1pay52YWx1ZXMsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgICAgICBnZXRJbihwcm9wcy5mb3JtaWsudmFsdWVzLCB0aGlzLnByb3BzLm5hbWUpIHx8XG4gICAgICAgICAgICBnZXRJbih0aGlzLnByb3BzLmZvcm1pay5lcnJvcnMsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgICAgICAgICAgZ2V0SW4ocHJvcHMuZm9ybWlrLmVycm9ycywgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsudG91Y2hlZCwgdGhpcy5wcm9wcy5uYW1lKSAhPT1cbiAgICAgICAgICAgICAgICBnZXRJbihwcm9wcy5mb3JtaWsudG91Y2hlZCwgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcykubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhwcm9wcykubGVuZ3RoIHx8XG4gICAgICAgICAgICB0aGlzLnByb3BzLmZvcm1pay5pc1N1Ym1pdHRpbmcgIT09IHByb3BzLmZvcm1pay5pc1N1Ym1pdHRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGYXN0RmllbGRJbm5lci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB0aGlzKTtcbiAgICB9O1xuICAgIEZhc3RGaWVsZElubmVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm5hbWUgIT09IHByZXZQcm9wcy5uYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmZvcm1pay51bnJlZ2lzdGVyRmllbGQocHJldlByb3BzLm5hbWUpO1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5mb3JtaWsucmVnaXN0ZXJGaWVsZCh0aGlzLnByb3BzLm5hbWUsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnZhbGlkYXRlICE9PSBwcmV2UHJvcHMudmFsaWRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRmFzdEZpZWxkSW5uZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnByb3BzLmZvcm1pay51bnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lKTtcbiAgICB9O1xuICAgIEZhc3RGaWVsZElubmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIHZhbGlkYXRlID0gX2EudmFsaWRhdGUsIG5hbWUgPSBfYS5uYW1lLCByZW5kZXIgPSBfYS5yZW5kZXIsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIF9iID0gX2EuY29tcG9uZW50LCBjb21wb25lbnQgPSBfYiA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9iLCBmb3JtaWsgPSBfYS5mb3JtaWssIHByb3BzID0gdHNsaWJfMS5fX3Jlc3QoX2EsIFtcInZhbGlkYXRlXCIsIFwibmFtZVwiLCBcInJlbmRlclwiLCBcImNoaWxkcmVuXCIsIFwiY29tcG9uZW50XCIsIFwiZm9ybWlrXCJdKTtcbiAgICAgICAgdmFyIF92YWxpZGF0ZSA9IGZvcm1pay52YWxpZGF0ZSwgX3ZhbGlkYXRpb25TY2hlbWEgPSBmb3JtaWsudmFsaWRhdGlvblNjaGVtYSwgcmVzdE9mRm9ybWlrID0gdHNsaWJfMS5fX3Jlc3QoZm9ybWlrLCBbXCJ2YWxpZGF0ZVwiLCBcInZhbGlkYXRpb25TY2hlbWFcIl0pO1xuICAgICAgICB2YXIgZmllbGQgPSB7XG4gICAgICAgICAgICB2YWx1ZTogcHJvcHMudHlwZSA9PT0gJ3JhZGlvJyB8fCBwcm9wcy50eXBlID09PSAnY2hlY2tib3gnXG4gICAgICAgICAgICAgICAgPyBwcm9wcy52YWx1ZVxuICAgICAgICAgICAgICAgIDogZ2V0SW4oZm9ybWlrLnZhbHVlcywgbmFtZSksXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgb25DaGFuZ2U6IGZvcm1pay5oYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgICBvbkJsdXI6IGZvcm1pay5oYW5kbGVCbHVyLFxuICAgICAgICB9O1xuICAgICAgICB2YXIgYmFnID0geyBmaWVsZDogZmllbGQsIGZvcm06IHJlc3RPZkZvcm1payB9O1xuICAgICAgICBpZiAocmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyKGJhZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW4oYmFnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLCByZXN0ID0gdHNsaWJfMS5fX3Jlc3QocHJvcHMsIFtcImlubmVyUmVmXCJdKTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgdHNsaWJfMS5fX2Fzc2lnbih7IHJlZjogaW5uZXJSZWYgfSwgZmllbGQsIHJlc3QsIHsgY2hpbGRyZW46IGNoaWxkcmVuIH0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHRzbGliXzEuX19hc3NpZ24oe30sIGJhZywgcHJvcHMsIHsgY2hpbGRyZW46IGNoaWxkcmVuIH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBGYXN0RmllbGRJbm5lcjtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG52YXIgRmFzdEZpZWxkID0gY29ubmVjdChGYXN0RmllbGRJbm5lcik7XG5cbnZhciBFcnJvck1lc3NhZ2VJbXBsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhFcnJvck1lc3NhZ2VJbXBsLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVycm9yTWVzc2FnZUltcGwoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgRXJyb3JNZXNzYWdlSW1wbC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmIChnZXRJbih0aGlzLnByb3BzLmZvcm1pay5lcnJvcnMsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgICAgICBnZXRJbihwcm9wcy5mb3JtaWsuZXJyb3JzLCB0aGlzLnByb3BzLm5hbWUpIHx8XG4gICAgICAgICAgICBnZXRJbih0aGlzLnByb3BzLmZvcm1pay50b3VjaGVkLCB0aGlzLnByb3BzLm5hbWUpICE9PVxuICAgICAgICAgICAgICAgIGdldEluKHByb3BzLmZvcm1pay50b3VjaGVkLCB0aGlzLnByb3BzLm5hbWUpIHx8XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKHByb3BzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFcnJvck1lc3NhZ2VJbXBsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGNvbXBvbmVudCA9IF9hLmNvbXBvbmVudCwgZm9ybWlrID0gX2EuZm9ybWlrLCByZW5kZXIgPSBfYS5yZW5kZXIsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIG5hbWUgPSBfYS5uYW1lLCByZXN0ID0gdHNsaWJfMS5fX3Jlc3QoX2EsIFtcImNvbXBvbmVudFwiLCBcImZvcm1pa1wiLCBcInJlbmRlclwiLCBcImNoaWxkcmVuXCIsIFwibmFtZVwiXSk7XG4gICAgICAgIHZhciB0b3VjaCA9IGdldEluKGZvcm1pay50b3VjaGVkLCBuYW1lKTtcbiAgICAgICAgdmFyIGVycm9yID0gZ2V0SW4oZm9ybWlrLmVycm9ycywgbmFtZSk7XG4gICAgICAgIHJldHVybiAhIXRvdWNoICYmICEhZXJyb3JcbiAgICAgICAgICAgID8gcmVuZGVyXG4gICAgICAgICAgICAgICAgPyBpc0Z1bmN0aW9uKHJlbmRlcikgPyByZW5kZXIoZXJyb3IpIDogbnVsbFxuICAgICAgICAgICAgICAgIDogY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgICAgPyBpc0Z1bmN0aW9uKGNoaWxkcmVuKSA/IGNoaWxkcmVuKGVycm9yKSA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgOiBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHJlc3QsIGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBlcnJvclxuICAgICAgICAgICAgOiBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIEVycm9yTWVzc2FnZUltcGw7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xudmFyIEVycm9yTWVzc2FnZSA9IGNvbm5lY3QoRXJyb3JNZXNzYWdlSW1wbCk7XG5cbmV4cG9ydHMuRm9ybWlrID0gRm9ybWlrO1xuZXhwb3J0cy55dXBUb0Zvcm1FcnJvcnMgPSB5dXBUb0Zvcm1FcnJvcnM7XG5leHBvcnRzLnZhbGlkYXRlWXVwU2NoZW1hID0gdmFsaWRhdGVZdXBTY2hlbWE7XG5leHBvcnRzLkZpZWxkID0gRmllbGQ7XG5leHBvcnRzLkZvcm0gPSBGb3JtO1xuZXhwb3J0cy53aXRoRm9ybWlrID0gd2l0aEZvcm1paztcbmV4cG9ydHMubW92ZSA9IG1vdmU7XG5leHBvcnRzLnN3YXAgPSBzd2FwO1xuZXhwb3J0cy5pbnNlcnQgPSBpbnNlcnQ7XG5leHBvcnRzLnJlcGxhY2UgPSByZXBsYWNlO1xuZXhwb3J0cy5GaWVsZEFycmF5ID0gRmllbGRBcnJheTtcbmV4cG9ydHMuZ2V0SW4gPSBnZXRJbjtcbmV4cG9ydHMuc2V0SW4gPSBzZXRJbjtcbmV4cG9ydHMuc2V0TmVzdGVkT2JqZWN0VmFsdWVzID0gc2V0TmVzdGVkT2JqZWN0VmFsdWVzO1xuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcbmV4cG9ydHMuaXNJbnRlZ2VyID0gaXNJbnRlZ2VyO1xuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuZXhwb3J0cy5pc05hTiA9IGlzTmFOO1xuZXhwb3J0cy5pc0VtcHR5Q2hpbGRyZW4gPSBpc0VtcHR5Q2hpbGRyZW47XG5leHBvcnRzLmlzUHJvbWlzZSA9IGlzUHJvbWlzZTtcbmV4cG9ydHMuZ2V0QWN0aXZlRWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQ7XG5leHBvcnRzLkZhc3RGaWVsZCA9IEZhc3RGaWVsZDtcbmV4cG9ydHMuRm9ybWlrUHJvdmlkZXIgPSBGb3JtaWtQcm92aWRlcjtcbmV4cG9ydHMuRm9ybWlrQ29uc3VtZXIgPSBGb3JtaWtDb25zdW1lcjtcbmV4cG9ydHMuY29ubmVjdCA9IGNvbm5lY3Q7XG5leHBvcnRzLkVycm9yTWVzc2FnZSA9IEVycm9yTWVzc2FnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1pay5janMucHJvZHVjdGlvbi5qcy5tYXBcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBnbG9iYWwsIGRlZmluZSwgU3lzdGVtLCBSZWZsZWN0LCBQcm9taXNlICovXHJcbnZhciBfX2V4dGVuZHM7XHJcbnZhciBfX2Fzc2lnbjtcclxudmFyIF9fcmVzdDtcclxudmFyIF9fZGVjb3JhdGU7XHJcbnZhciBfX3BhcmFtO1xyXG52YXIgX19tZXRhZGF0YTtcclxudmFyIF9fYXdhaXRlcjtcclxudmFyIF9fZ2VuZXJhdG9yO1xyXG52YXIgX19leHBvcnRTdGFyO1xyXG52YXIgX192YWx1ZXM7XHJcbnZhciBfX3JlYWQ7XHJcbnZhciBfX3NwcmVhZDtcclxudmFyIF9fYXdhaXQ7XHJcbnZhciBfX2FzeW5jR2VuZXJhdG9yO1xyXG52YXIgX19hc3luY0RlbGVnYXRvcjtcclxudmFyIF9fYXN5bmNWYWx1ZXM7XHJcbnZhciBfX21ha2VUZW1wbGF0ZU9iamVjdDtcclxudmFyIF9faW1wb3J0U3RhcjtcclxudmFyIF9faW1wb3J0RGVmYXVsdDtcclxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XHJcbiAgICB2YXIgcm9vdCA9IHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0eXBlb2YgdGhpcyA9PT0gXCJvYmplY3RcIiA/IHRoaXMgOiB7fTtcclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShcInRzbGliXCIsIFtcImV4cG9ydHNcIl0sIGZ1bmN0aW9uIChleHBvcnRzKSB7IGZhY3RvcnkoY3JlYXRlRXhwb3J0ZXIocm9vdCwgY3JlYXRlRXhwb3J0ZXIoZXhwb3J0cykpKTsgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIGZhY3RvcnkoY3JlYXRlRXhwb3J0ZXIocm9vdCwgY3JlYXRlRXhwb3J0ZXIobW9kdWxlLmV4cG9ydHMpKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmYWN0b3J5KGNyZWF0ZUV4cG9ydGVyKHJvb3QpKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUV4cG9ydGVyKGV4cG9ydHMsIHByZXZpb3VzKSB7XHJcbiAgICAgICAgaWYgKGV4cG9ydHMgIT09IHJvb3QpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpZCwgdikgeyByZXR1cm4gZXhwb3J0c1tpZF0gPSBwcmV2aW91cyA/IHByZXZpb3VzKGlkLCB2KSA6IHY7IH07XHJcbiAgICB9XHJcbn0pXHJcbihmdW5jdGlvbiAoZXhwb3J0ZXIpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG5cclxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcblxyXG4gICAgX19yZXN0ID0gZnVuY3Rpb24gKHMsIGUpIHtcclxuICAgICAgICB2YXIgdCA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgICAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fZGVjb3JhdGUgPSBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgICAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICAgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgICAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3BhcmFtID0gZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX21ldGFkYXRhID0gZnVuY3Rpb24gKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgX19hd2FpdGVyID0gZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fZ2VuZXJhdG9yID0gZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgICAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgX19leHBvcnRTdGFyID0gZnVuY3Rpb24gKG0sIGV4cG9ydHMpIHtcclxuICAgICAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbiAgICB9O1xyXG5cclxuICAgIF9fdmFsdWVzID0gZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0sIGkgPSAwO1xyXG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3JlYWQgPSBmdW5jdGlvbiAobywgbikge1xyXG4gICAgICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgICAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXI7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fc3ByZWFkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICAgICAgcmV0dXJuIGFyO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2F3YWl0ID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxuICAgIH07XHJcblxyXG4gICAgX19hc3luY0dlbmVyYXRvciA9IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgICAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICAgICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7ICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgICAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXN5bmNEZWxlZ2F0b3IgPSBmdW5jdGlvbiAobykge1xyXG4gICAgICAgIHZhciBpLCBwO1xyXG4gICAgICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICAgICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX2FzeW5jVmFsdWVzID0gZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICAgICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgICAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9fbWFrZVRlbXBsYXRlT2JqZWN0ID0gZnVuY3Rpb24gKGNvb2tlZCwgcmF3KSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgICAgICByZXR1cm4gY29va2VkO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2ltcG9ydFN0YXIgPSBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgICAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICAgICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgICAgICByZXN1bHRbXCJkZWZhdWx0XCJdID0gbW9kO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9faW1wb3J0RGVmYXVsdCA9IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgICAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0ZXIoXCJfX2V4dGVuZHNcIiwgX19leHRlbmRzKTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3NpZ25cIiwgX19hc3NpZ24pO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3Jlc3RcIiwgX19yZXN0KTtcclxuICAgIGV4cG9ydGVyKFwiX19kZWNvcmF0ZVwiLCBfX2RlY29yYXRlKTtcclxuICAgIGV4cG9ydGVyKFwiX19wYXJhbVwiLCBfX3BhcmFtKTtcclxuICAgIGV4cG9ydGVyKFwiX19tZXRhZGF0YVwiLCBfX21ldGFkYXRhKTtcclxuICAgIGV4cG9ydGVyKFwiX19hd2FpdGVyXCIsIF9fYXdhaXRlcik7XHJcbiAgICBleHBvcnRlcihcIl9fZ2VuZXJhdG9yXCIsIF9fZ2VuZXJhdG9yKTtcclxuICAgIGV4cG9ydGVyKFwiX19leHBvcnRTdGFyXCIsIF9fZXhwb3J0U3Rhcik7XHJcbiAgICBleHBvcnRlcihcIl9fdmFsdWVzXCIsIF9fdmFsdWVzKTtcclxuICAgIGV4cG9ydGVyKFwiX19yZWFkXCIsIF9fcmVhZCk7XHJcbiAgICBleHBvcnRlcihcIl9fc3ByZWFkXCIsIF9fc3ByZWFkKTtcclxuICAgIGV4cG9ydGVyKFwiX19hd2FpdFwiLCBfX2F3YWl0KTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3luY0dlbmVyYXRvclwiLCBfX2FzeW5jR2VuZXJhdG9yKTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3luY0RlbGVnYXRvclwiLCBfX2FzeW5jRGVsZWdhdG9yKTtcclxuICAgIGV4cG9ydGVyKFwiX19hc3luY1ZhbHVlc1wiLCBfX2FzeW5jVmFsdWVzKTtcclxuICAgIGV4cG9ydGVyKFwiX19tYWtlVGVtcGxhdGVPYmplY3RcIiwgX19tYWtlVGVtcGxhdGVPYmplY3QpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2ltcG9ydFN0YXJcIiwgX19pbXBvcnRTdGFyKTtcclxuICAgIGV4cG9ydGVyKFwiX19pbXBvcnREZWZhdWx0XCIsIF9faW1wb3J0RGVmYXVsdCk7XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoT2JqZWN0KTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2ltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgX2ltcGxlbWVudGF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ltcGxlbWVudGF0aW9uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNvbnRleHQgfHwgX2ltcGxlbWVudGF0aW9uMi5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2d1ZCA9IHJlcXVpcmUoJ2d1ZCcpO1xuXG52YXIgX2d1ZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ndWQpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcblxuLy8gSW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArICgwLCBfZ3VkMi5kZWZhdWx0KSgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm92aWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cyA9IHZvaWQgMDtcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDsgLy8gTm8gY2hhbmdlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcycsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGVtcDIsIF90aGlzMiwgX3JldDI7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25zdW1lcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQyID0gKF90ZW1wMiA9IChfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50Mi5jYWxsLmFwcGx5KF9Db21wb25lbnQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzMiksIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9LCBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoeyB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKCkgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIF90ZW1wMiksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzMiwgX3JldDIpO1xuICAgIH1cblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuXG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCAvLyBTdWJzY3JpYmUgdG8gYWxsIGNoYW5nZXMgYnkgZGVmYXVsdFxuICAgICAgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcblxuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgLy8gU3Vic2NyaWJlIHRvIGFsbCBjaGFuZ2VzIGJ5IGRlZmF1bHRcbiAgICAgIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcblxuXG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVSZWFjdENvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvLyBAZmxvd1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdsb2JhbFtrZXldID0gKGdsb2JhbFtrZXldIHx8IDApICsgMTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9lbXB0eUZ1bmN0aW9uJyk7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZW1wdHlGdW5jdGlvbjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9O1xuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgKyAnbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQuaW5kZXhPZignRmFpbGVkIENvbXBvc2l0ZSBwcm9wVHlwZTogJykgPT09IDApIHtcbiAgICAgIHJldHVybjsgLy8gSWdub3JlIENvbXBvc2l0ZUNvbXBvbmVudCBwcm9wdHlwZSBjaGVjay5cbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMl0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkodW5kZWZpbmVkLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nOyIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xudmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbmNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG5jbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbmNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbmNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG5jbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbmNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbmNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKlxuICogQWRkcyB0aGUga2V5LXZhbHVlIGBwYWlyYCB0byBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHBhaXIgVGhlIGtleS12YWx1ZSBwYWlyIHRvIGFkZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG1hcGAuXG4gKi9cbmZ1bmN0aW9uIGFkZE1hcEVudHJ5KG1hcCwgcGFpcikge1xuICAvLyBEb24ndCByZXR1cm4gYG1hcC5zZXRgIGJlY2F1c2UgaXQncyBub3QgY2hhaW5hYmxlIGluIElFIDExLlxuICBtYXAuc2V0KHBhaXJbMF0sIHBhaXJbMV0pO1xuICByZXR1cm4gbWFwO1xufVxuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byBgc2V0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFkZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYHNldGAuXG4gKi9cbmZ1bmN0aW9uIGFkZFNldEVudHJ5KHNldCwgdmFsdWUpIHtcbiAgLy8gRG9uJ3QgcmV0dXJuIGBzZXQuYWRkYCBiZWNhdXNlIGl0J3Mgbm90IGNoYWluYWJsZSBpbiBJRSAxMS5cbiAgc2V0LmFkZCh2YWx1ZSk7XG4gIHJldHVybiBzZXQ7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCBpbiBJRSA8IDkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0hvc3RPYmplY3QodmFsdWUpIHtcbiAgLy8gTWFueSBob3N0IG9iamVjdHMgYXJlIGBPYmplY3RgIG9iamVjdHMgdGhhdCBjYW4gY29lcmNlIHRvIHN0cmluZ3NcbiAgLy8gZGVzcGl0ZSBoYXZpbmcgaW1wcm9wZXJseSBkZWZpbmVkIGB0b1N0cmluZ2AgbWV0aG9kcy5cbiAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICBpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSAhISh2YWx1ZSArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgU3ltYm9sID0gcm9vdC5TeW1ib2wsXG4gICAgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheSxcbiAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpLFxuICAgIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyksXG4gICAgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpLFxuICAgIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0JyksXG4gICAgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpLFxuICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICByZXR1cm4gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLnNldChrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX19bJ2RlbGV0ZSddKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgY2FjaGUgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoY2FjaGUgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBjYWNoZS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY2FjaGUgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBjYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIC8vIFNhZmFyaSA5IG1ha2VzIGBhcmd1bWVudHMubGVuZ3RoYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICB2YXIgcmVzdWx0ID0gKGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSlcbiAgICA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZylcbiAgICA6IFtdO1xuXG4gIHZhciBsZW5ndGggPSByZXN1bHQubGVuZ3RoLFxuICAgICAgc2tpcEluZGV4ZXMgPSAhIWxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChrZXkgPT0gJ2xlbmd0aCcgfHwgaXNJbmRleChrZXksIGxlbmd0aCkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICogdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRnVsbF0gU3BlY2lmeSBhIGNsb25lIGluY2x1ZGluZyBzeW1ib2xzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBpc0RlZXAsIGlzRnVsbCwgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChjdXN0b21pemVyKSB7XG4gICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICB9XG4gIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gIGlmIChpc0Fycikge1xuICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgIGlmIChpc0hvc3RPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gaW5pdENsb25lT2JqZWN0KGlzRnVuYyA/IHt9IDogdmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBiYXNlQ2xvbmUsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKCFpc0Fycikge1xuICAgIHZhciBwcm9wcyA9IGlzRnVsbCA/IGdldEFsbEtleXModmFsdWUpIDoga2V5cyh2YWx1ZSk7XG4gIH1cbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBpc0RlZXAsIGlzRnVsbCwgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBiYXNlQ3JlYXRlKHByb3RvKSB7XG4gIHJldHVybiBpc09iamVjdChwcm90bykgPyBvYmplY3RDcmVhdGUocHJvdG8pIDoge307XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gKGlzRnVuY3Rpb24odmFsdWUpIHx8IGlzSG9zdE9iamVjdCh2YWx1ZSkpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IG5ldyBidWZmZXIuY29uc3RydWN0b3IoYnVmZmVyLmxlbmd0aCk7XG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAqL1xuZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNsb25lRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2xvbmUgdmFsdWVzLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBtYXAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lTWFwKG1hcCwgaXNEZWVwLCBjbG9uZUZ1bmMpIHtcbiAgdmFyIGFycmF5ID0gaXNEZWVwID8gY2xvbmVGdW5jKG1hcFRvQXJyYXkobWFwKSwgdHJ1ZSkgOiBtYXBUb0FycmF5KG1hcCk7XG4gIHJldHVybiBhcnJheVJlZHVjZShhcnJheSwgYWRkTWFwRW50cnksIG5ldyBtYXAuY29uc3RydWN0b3IpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBzZXRgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjbG9uZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNsb25lIHZhbHVlcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc2V0LlxuICovXG5mdW5jdGlvbiBjbG9uZVNldChzZXQsIGlzRGVlcCwgY2xvbmVGdW5jKSB7XG4gIHZhciBhcnJheSA9IGlzRGVlcCA/IGNsb25lRnVuYyhzZXRUb0FycmF5KHNldCksIHRydWUpIDogc2V0VG9BcnJheShzZXQpO1xuICByZXR1cm4gYXJyYXlSZWR1Y2UoYXJyYXksIGFkZFNldEVudHJ5LCBuZXcgc2V0LmNvbnN0cnVjdG9yKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUgPT09IHVuZGVmaW5lZCA/IHNvdXJjZVtrZXldIDogbmV3VmFsdWUpO1xuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbi8qKlxuICogQ29waWVzIG93biBzeW1ib2wgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2wgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9IG5hdGl2ZUdldFN5bWJvbHMgPyBvdmVyQXJnKG5hdGl2ZUdldFN5bWJvbHMsIE9iamVjdCkgOiBzdHViQXJyYXk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSxcbi8vIGZvciBkYXRhIHZpZXdzIGluIEVkZ2UgPCAxNCwgYW5kIHByb21pc2VzIGluIE5vZGUuanMuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgIDoge307XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2xvbmVGdW5jIFRoZSBmdW5jdGlvbiB0byBjbG9uZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBjbG9uZUZ1bmMsIGlzRGVlcCkge1xuICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgcmV0dXJuIGNsb25lTWFwKG9iamVjdCwgaXNEZWVwLCBjbG9uZUZ1bmMpO1xuXG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVNldChvYmplY3QsIGlzRGVlcCwgY2xvbmVGdW5jKTtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IHJlSXNVaW50LnRlc3QodmFsdWUpKSAmJlxuICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAxLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICogQHNlZSBfLmNsb25lXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICpcbiAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCB0cnVlLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgfHwgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJnc1RhZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOC05IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBpc09iamVjdCh2YWx1ZSkgPyBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZURlZXA7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgyNzcpOyIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgYFR5cGVFcnJvcmAgbWVzc2FnZSBmb3IgXCJGdW5jdGlvbnNcIiBtZXRob2RzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlTGVhZGluZ0RvdCA9IC9eXFwuLyxcbiAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbCxcbiAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyksXG4gICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHJldHVybiB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gZGF0YVtrZXldICE9PSB1bmRlZmluZWQgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICBnZXRNYXBEYXRhKHRoaXMsIGtleSkuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBpc0hvc3RPYmplY3QodmFsdWUpKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemUoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAocmVMZWFkaW5nRG90LnRlc3Qoc3RyaW5nKSkge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEFzc2lnbiBjYWNoZSB0byBgXy5tZW1vaXplYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICpcbiAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICogLy8gPT4gWydhJywgJzAnLCAnYicsICdjJ11cbiAqL1xuZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICB9XG4gIHJldHVybiBpc1N5bWJvbCh2YWx1ZSkgPyBbdmFsdWVdIDogY29weUFycmF5KHN0cmluZ1RvUGF0aCh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvUGF0aDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIGtleUxpc3QgPSBPYmplY3Qua2V5cztcbnZhciBoYXNQcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgdmFyIGFyckEgPSBpc0FycmF5KGEpXG4gICAgLCBhcnJCID0gaXNBcnJheShiKVxuICAgICwgaVxuICAgICwgbGVuZ3RoXG4gICAgLCBrZXk7XG5cbiAgaWYgKGFyckEgJiYgYXJyQikge1xuICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoYXJyQSAhPSBhcnJCKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGRhdGVBID0gYSBpbnN0YW5jZW9mIERhdGVcbiAgICAsIGRhdGVCID0gYiBpbnN0YW5jZW9mIERhdGU7XG4gIGlmIChkYXRlQSAhPSBkYXRlQikgcmV0dXJuIGZhbHNlO1xuICBpZiAoZGF0ZUEgJiYgZGF0ZUIpIHJldHVybiBhLmdldFRpbWUoKSA9PSBiLmdldFRpbWUoKTtcblxuICB2YXIgcmVnZXhwQSA9IGEgaW5zdGFuY2VvZiBSZWdFeHBcbiAgICAsIHJlZ2V4cEIgPSBiIGluc3RhbmNlb2YgUmVnRXhwO1xuICBpZiAocmVnZXhwQSAhPSByZWdleHBCKSByZXR1cm4gZmFsc2U7XG4gIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xuXG4gIGlmIChhIGluc3RhbmNlb2YgT2JqZWN0ICYmIGIgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IGtleUxpc3QoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoICE9PSBrZXlMaXN0KGIpLmxlbmd0aClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICAgIGlmICghaGFzUHJvcC5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoa2V5ID09PSAnX293bmVyJyAmJiBhLiQkdHlwZW9mICYmIGEuX3N0b3JlKSB7XG4gICAgICAgIC8vIFJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFJlYWN0IGVsZW1lbnRzJyBfb3duZXIuXG4gICAgICAgIC8vICBfb3duZXIgY29udGFpbnMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgICAgICAvLyBhbmQgaXMgbm90IG5lZWRlZCB3aGVuIGNvbXBhcmluZyB0aGUgYWN0dWFsIGVsZW1lbnRzIChhbmQgbm90IHRoZWlyIG93bmVycylcbiAgICAgICAgLy8gLiQkdHlwZW9mIGFuZCAuX3N0b3JlIG9uIGp1c3QgcmVhc29uYWJsZSBtYXJrZXJzIG9mIGEgcmVhY3QgZWxlbWVudFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFsbCBvdGhlciBwcm9wZXJ0aWVzIHNob3VsZCBiZSB0cmF2ZXJzZWQgYXMgdXN1YWxcbiAgICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHBvcnRlZEVxdWFsKGEsIGIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXF1YWwoYSwgYik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLm1lc3NhZ2UgJiYgZXJyb3IubWVzc2FnZS5tYXRjaCgvc3RhY2t8cmVjdXJzaW9uL2kpKSB7XG4gICAgICAvLyB3YXJuIG9uIGNpcmN1bGFyIHJlZmVyZW5jZXMsIGRvbid0IGNyYXNoXG4gICAgICAvLyBicm93c2VycyBnaXZlIHRoaXMgZGlmZmVyZW50IGVycm9ycyBuYW1lIGFuZCBtZXNzYWdlczpcbiAgICAgIC8vIGNocm9tZS9zYWZhcmk6IFwiUmFuZ2VFcnJvclwiLCBcIk1heGltdW0gY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCJcbiAgICAgIC8vIGZpcmVmb3g6IFwiSW50ZXJuYWxFcnJvclwiLCB0b28gbXVjaCByZWN1cnNpb25cIlxuICAgICAgLy8gZWRnZTogXCJFcnJvclwiLCBcIk91dCBvZiBzdGFjayBzcGFjZVwiXG4gICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IHJlYWN0LWZhc3QtY29tcGFyZSBkb2VzIG5vdCBoYW5kbGUgY2lyY3VsYXIgcmVmZXJlbmNlcy4nLCBlcnJvci5uYW1lLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gc29tZSBvdGhlciBlcnJvci4gd2Ugc2hvdWxkIGRlZmluaXRlbHkga25vdyBhYm91dCB0aGVzZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoNTkpOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5kZWVwbWVyZ2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0JiYgIWlzU3BlY2lhbCh2YWx1ZSlcbn07XG5cbmZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHR2YXIgc3RyaW5nVmFsdWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG5cdHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcblx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0fHwgaXNSZWFjdEVsZW1lbnQodmFsdWUpXG59XG5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxudmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gKG9wdGlvbnMuY2xvbmUgIT09IGZhbHNlICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKVxuXHRcdD8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnMpXG5cdFx0OiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKGVsZW1lbnQsIG9wdGlvbnMpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuXHRpZiAob3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpKSB7XG5cdFx0T2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHRhcmdldFtrZXldLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fVxuXHRPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKCFvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRvcHRpb25zLmFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cdG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgPSBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0IHx8IGlzTWVyZ2VhYmxlT2JqZWN0O1xuXG5cdHZhciBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuXHR2YXIgdGFyZ2V0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkodGFyZ2V0KTtcblx0dmFyIHNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2ggPSBzb3VyY2VJc0FycmF5ID09PSB0YXJnZXRJc0FycmF5O1xuXG5cdGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSBpZiAoc291cmNlSXNBcnJheSkge1xuXHRcdHJldHVybiBvcHRpb25zLmFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnMpIHtcblx0aWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5Jylcblx0fVxuXG5cdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9ucylcblx0fSwge30pXG59O1xuXG52YXIgZGVlcG1lcmdlXzEgPSBkZWVwbWVyZ2U7XG5cbnJldHVybiBkZWVwbWVyZ2VfMTtcblxufSkpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKiBnbG9iYWwgc2V0VGltZW91dCwgY2xlYXJUaW1lb3V0ICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVib3VuY2UoZm4pIHtcbiAgdmFyIHdhaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICB2YXIgbGFzdENhbGxBdCA9IHZvaWQgMDtcbiAgdmFyIGRlZmVycmVkID0gdm9pZCAwO1xuICB2YXIgdGltZXIgPSB2b2lkIDA7XG4gIHZhciBwZW5kaW5nQXJncyA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciBjdXJyZW50V2FpdCA9IGdldFdhaXQod2FpdCk7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICB2YXIgaXNDb2xkID0gIWxhc3RDYWxsQXQgfHwgY3VycmVudFRpbWUgLSBsYXN0Q2FsbEF0ID4gY3VycmVudFdhaXQ7XG5cbiAgICBsYXN0Q2FsbEF0ID0gY3VycmVudFRpbWU7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoaXNDb2xkICYmIG9wdGlvbnMubGVhZGluZykge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuYWNjdW11bGF0ZSA/IFByb21pc2UucmVzb2x2ZShmbi5jYWxsKHRoaXMsIFthcmdzXSkpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgICAgfSkgOiBQcm9taXNlLnJlc29sdmUoZm4uY2FsbC5hcHBseShmbiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuICAgIH1cblxuICAgIGlmIChkZWZlcnJlZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIH1cblxuICAgIHBlbmRpbmdBcmdzLnB1c2goYXJncyk7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZsdXNoLmJpbmQodGhpcyksIGN1cnJlbnRXYWl0KTtcblxuICAgIGlmIChvcHRpb25zLmFjY3VtdWxhdGUpIHtcbiAgICAgIHZhciBfcmV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gcGVuZGluZ0FyZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2OiBkZWZlcnJlZC5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzW2FyZ3NJbmRleF07XG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgIH0oKTtcblxuICAgICAgaWYgKCh0eXBlb2YgX3JldCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3JldCkpID09PSBcIm9iamVjdFwiKSByZXR1cm4gX3JldC52O1xuICAgIH1cblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHZhciB0aGlzRGVmZXJyZWQgPSBkZWZlcnJlZDtcbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuXG4gICAgUHJvbWlzZS5yZXNvbHZlKG9wdGlvbnMuYWNjdW11bGF0ZSA/IGZuLmNhbGwodGhpcywgcGVuZGluZ0FyZ3MpIDogZm4uYXBwbHkodGhpcywgcGVuZGluZ0FyZ3NbcGVuZGluZ0FyZ3MubGVuZ3RoIC0gMV0pKS50aGVuKHRoaXNEZWZlcnJlZC5yZXNvbHZlLCB0aGlzRGVmZXJyZWQucmVqZWN0KTtcblxuICAgIHBlbmRpbmdBcmdzID0gW107XG4gICAgZGVmZXJyZWQgPSBudWxsO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRXYWl0KHdhaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiB3YWl0ID09PSAnZnVuY3Rpb24nID8gd2FpdCgpIDogd2FpdDtcbn1cblxuZnVuY3Rpb24gZGVmZXIoKSB7XG4gIHZhciBkZWZlcnJlZCA9IHt9O1xuICBkZWZlcnJlZC5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRlZmVycmVkLnJlc29sdmUgPSByZXNvbHZlO1xuICAgIGRlZmVycmVkLnJlamVjdCA9IHJlamVjdDtcbiAgfSk7XG4gIHJldHVybiBkZWZlcnJlZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCB7dG9hc3R9IGZyb20gXCJyZWFjdC10b2FzdGlmeVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVpIHtcclxuICAgIFxyXG4gICAgc3RhdGljIHNob3dFcnJvcnMoLi4ubWVzc2FnZXM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbWVzc2FnZXMuZm9yRWFjaCh4ID0+IHtcclxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHgpKSB7XHJcbiAgICAgICAgICAgICAgICB0b2FzdC5lcnJvcih4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICh4IGFzIGFueSkuZm9yRWFjaCgoeTogc3RyaW5nKSA9PiB0b2FzdC5lcnJvcih5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc2hvd0luZm8obWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdG9hc3QuaW5mbyhtZXNzYWdlKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3VsdDxUPiB7XHJcbiAgICBwdWJsaWMgdmFsdWU6IFQ7XHJcbiAgICBwdWJsaWMgZXJyb3JzOiBzdHJpbmdbXTtcclxuICAgIHB1YmxpYyBnZXQgaGFzRXJyb3JzKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9ycyAhPSBudWxsICYmIEFycmF5LmlzQXJyYXkodGhpcy5lcnJvcnMpICYmIHRoaXMuZXJyb3JzLmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IodmFsdWU6IFQsIC4uLmVycm9yczogc3RyaW5nW10pIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnNbMF0gPT0gdW5kZWZpbmVkIHx8IGVycm9yc1swXSA9PSBudWxsID8gW10gOiBlcnJvcnM7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBcHBUaHVua0FjdGlvbkFzeW5jIH0gZnJvbSBcIkBTdG9yZS9pbmRleFwiO1xyXG5cclxuZGVjbGFyZSB2YXIgcHJvY2VzczogYW55O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lPFQ+KG9iamVjdDogVCk6IFQge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqZWN0KSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9taXNlRnJvbUFjdGlvbjxULCBWPihhc3luY0FjdGlvbkNyZWF0b3I6IEFwcFRodW5rQWN0aW9uQXN5bmM8VCwgVj4pOiBQcm9taXNlPFY+IHtcclxuICAgIHJldHVybiAoYXN5bmNBY3Rpb25DcmVhdG9yIGFzIGFueSkgYXMgUHJvbWlzZTxWPjtcclxufVxyXG5cclxuLyoqXHJcbiAqIElzIHNlcnZlciBwcmVyZW5kZXJpbmcgYnkgTm9kZS5qcy5cclxuICogVGhlcmUgY2FuJ3QgYmUgYW55IERPTTogd2luZG93LCBkb2N1bWVudCwgZXRjLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcgJiYgcHJvY2Vzcy52ZXJzaW9ucyAmJiAhIXByb2Nlc3MudmVyc2lvbnMubm9kZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKTogYm9vbGVhbiB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVtcHR5Rm9ybShmb3JtOiBIVE1MRm9ybUVsZW1lbnQpOiB2b2lkIHtcclxuICAgIHZhciBpbnB1dHMgPSBBcnJheS5mcm9tKGZvcm0ucXVlcnlTZWxlY3RvckFsbChcImlucHV0LCBzZWxlY3QsIHRleHRhcmVhXCIpKTtcclxuICAgIGlucHV0cy5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgIHZhciBpbnB1dFR5cGUgPSB4LmdldEF0dHJpYnV0ZShcInR5cGVcIik7XHJcbiAgICAgICAgaWYgKGlucHV0VHlwZSA9PT0gXCJjaGVja2JveFwiIHx8IGlucHV0VHlwZSA9PT0gXCJyYWRpb1wiKSB7XHJcbiAgICAgICAgICAgICh4IGFzIGFueSkuY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICh4IGFzIGFueSkudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59IiwiaW1wb3J0IHsgSUxvZ2luTW9kZWwgfSBmcm9tIFwiQE1vZGVscy9JTG9naW5Nb2RlbFwiO1xyXG5pbXBvcnQgeyBJU2VydmljZVVzZXIgfSBmcm9tIFwiQE1vZGVscy9JU2VydmljZVVzZXJcIjtcclxuaW1wb3J0IHsgY2xvbmUgfSBmcm9tIFwiQFV0aWxzXCI7XHJcbmltcG9ydCB7IEFjdGlvbiwgUmVkdWNlciB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgQWNjb3VudFNlcnZpY2UgZnJvbSBcIkBTZXJ2aWNlcy9BY2NvdW50U2VydmljZVwiO1xyXG5pbXBvcnQgeyBBcHBUaHVua0FjdGlvbiB9IGZyb20gXCIuL2luZGV4XCI7XHJcblxyXG5leHBvcnQgbW9kdWxlIExvZ2luU3RvcmUge1xyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIHtcclxuICAgICAgICBpbmRpY2F0b3JzOiB7XHJcbiAgICAgICAgICAgIG9wZXJhdGlvbkxvYWRpbmc6IGJvb2xlYW47XHJcbiAgICAgICAgICAgIGxvZ2luU3VjY2VzczogYm9vbGVhbjtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBlbnVtIEFjdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFlvdSBuZWVkIHRvIGhhdmUgdGhlIGluaXRpYWwgc3RhdGUgdG9cclxuICAgICAgICAgKiByZXNldCB0aGUgaW5kaWNhdG9ycyAoZS5nLiBsb2dpblN1Y2Nlc3MpXHJcbiAgICAgICAgICogdGhhdCBjYWxsIHJlZGlyZWN0IG9yIGFueSBvdGhlciBhY3Rpb25zLlxyXG4gICAgICAgICAqIEl0IG11c3QgYmUgY2FsbGVkIGluIG1ldGhvZCAnY29tcG9uZW50RGlkTW91bnQnXHJcbiAgICAgICAgICogb2YgYSBjb21wb25lbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgSW5pdCA9IFwiTE9HSU5fSU5JVFwiLFxyXG4gICAgICAgIFJlcXVlc3QgPSBcIkxPR0lOX1JFUVVFU1RcIixcclxuICAgICAgICBTdWNjZXNzID0gXCJMT0dJTl9TVUNDRVNTXCIsXHJcbiAgICAgICAgRmFpbHVyZSA9IFwiTE9HSU5fRkFJTFVSRVwiXHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIElJbml0IHtcclxuICAgICAgICB0eXBlOiBBY3Rpb25zLkluaXQ7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIElSZXF1ZXN0IHtcclxuICAgICAgICB0eXBlOiBBY3Rpb25zLlJlcXVlc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIElTdWNjZXNzIHtcclxuICAgICAgICB0eXBlOiBBY3Rpb25zLlN1Y2Nlc3M7XHJcbiAgICAgICAgcGF5bG9hZDogSVNlcnZpY2VVc2VyO1xyXG4gICAgfVxyXG5cclxuICAgIGludGVyZmFjZSBJRmFpbHVyZSB7XHJcbiAgICAgICAgdHlwZTogQWN0aW9ucy5GYWlsdXJlO1xyXG4gICAgfVxyXG5cclxuICAgIHR5cGUgS25vd25BY3Rpb24gPSBJSW5pdCB8IElSZXF1ZXN0IHwgSVN1Y2Nlc3MgfCBJRmFpbHVyZTtcclxuXHJcbiAgICBleHBvcnQgY29uc3QgYWN0aW9uQ3JlYXRvcnMgPSB7XHJcbiAgICAgICAgaW5pdDogKCk6IEFwcFRodW5rQWN0aW9uPEtub3duQWN0aW9uPiA9PiBhc3luYyAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5Jbml0IH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsb2dpblJlcXVlc3Q6IChtb2RlbDogSUxvZ2luTW9kZWwpOiBBcHBUaHVua0FjdGlvbjxLbm93bkFjdGlvbj4gPT4gYXN5bmMgKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25zLlJlcXVlc3QgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gYXdhaXQgQWNjb3VudFNlcnZpY2UubG9naW4obW9kZWwpO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0Lmhhc0Vycm9ycykge1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25zLkZhaWx1cmUgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5TdWNjZXNzLCBwYXlsb2FkOiByZXN1bHQudmFsdWUgfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaW5pdGlhbFN0YXRlOiBJU3RhdGUgPSB7XHJcbiAgICAgICAgaW5kaWNhdG9yczoge1xyXG4gICAgICAgICAgICBvcGVyYXRpb25Mb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgbG9naW5TdWNjZXNzOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0IGNvbnN0IHJlZHVjZXI6IFJlZHVjZXI8SVN0YXRlPiA9IChjdXJyZW50U3RhdGU6IElTdGF0ZSwgaW5jb21pbmdBY3Rpb246IEFjdGlvbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGluY29taW5nQWN0aW9uIGFzIEtub3duQWN0aW9uO1xyXG5cclxuICAgICAgICB2YXIgY2xvbmVJbmRpY2F0b3JzID0gKCkgPT4gY2xvbmUoY3VycmVudFN0YXRlLmluZGljYXRvcnMpO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9ucy5Jbml0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZTtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25zLlJlcXVlc3Q6XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9ycyA9IGNsb25lSW5kaWNhdG9ycygpO1xyXG4gICAgICAgICAgICAgICAgaW5kaWNhdG9ycy5vcGVyYXRpb25Mb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLmN1cnJlbnRTdGF0ZSwgaW5kaWNhdG9ycyB9O1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvbnMuU3VjY2VzczpcclxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gY2xvbmVJbmRpY2F0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGluZGljYXRvcnMubG9naW5TdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLmN1cnJlbnRTdGF0ZSwgaW5kaWNhdG9ycyB9O1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvbnMuRmFpbHVyZTpcclxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gY2xvbmVJbmRpY2F0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLmN1cnJlbnRTdGF0ZSwgaW5kaWNhdG9ycyB9O1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBsaW5lIGd1YXJhbnRlZXMgdGhhdCBldmVyeSBhY3Rpb24gaW4gdGhlIEtub3duQWN0aW9uIHVuaW9uIGhhcyBiZWVuIGNvdmVyZWQgYnkgYSBjYXNlIGFib3ZlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBleGhhdXN0aXZlQ2hlY2s6IG5ldmVyID0gYWN0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0ZSB8fCBpbml0aWFsU3RhdGU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBJU2VydmljZVVzZXIgfSBmcm9tIFwiQE1vZGVscy9JU2VydmljZVVzZXJcIjtcclxuaW1wb3J0IHsgTlNlcmlhbGl6ZUpzb24gfSBmcm9tIFwibnNlcmlhbGl6ZWpzb25cIjtcclxuaW1wb3J0IHsgSU5vZGVTZXNzaW9uIH0gZnJvbSBcIkBNb2RlbHMvSU5vZGVTZXNzaW9uXCI7XHJcblxyXG4vKipcclxuICogQ29udGFpbnMgZ2xvYmFsIGlzb21vcnBoaWMgc2Vzc2lvbi5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdsb2JhbHMge1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGlzSW5pdGlhbGl6ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgc3RhdGljIGdhbWVSZWFkeTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGRhdGE6IElOb2RlU2Vzc2lvbiA9IHt9O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5nYW1lUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGluaXQoZGF0YTogSU5vZGVTZXNzaW9uKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkdsb2JhbHMgaXMgYWxyZWFkeSBpbml0aWFsaXplZC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGF0YSA9IChkYXRhIHx8IHtcclxuICAgICAgICAgICAgcHVibGljOiB7fSwgcHJpdmF0ZToge31cclxuICAgICAgICB9KSBhcyBJTm9kZVNlc3Npb247XHJcbiAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gVXNlIGRvdCBub3RhdGlvbiBpbiBuYW1lIG9mIHRoZSBmb3JtIGlucHV0cy5cclxuICAgICAgICBOU2VyaWFsaXplSnNvbi5vcHRpb25zLnVzZURvdFNlcGFyYXRvckluUGF0aCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBzZXRHYW1lUmVhZHkoYjpib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5nYW1lUmVhZHkgPSBiO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNHYW1lUmVhZHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZVJlYWR5O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIHRocm93SWZOb3RJbml0aWFsaXplZCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJHbG9iYWxzIGlzIG5vdCBpbml0aWFsaXplZC4gWW91IGhhdmUgdG8gY2FsbCBTZXNzaW9uLmluaXQgYmVmb3JlLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldERhdGEoKTogSU5vZGVTZXNzaW9uIHtcclxuICAgICAgICB0aGlzLnRocm93SWZOb3RJbml0aWFsaXplZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBzZXREYXRhKGRhdGE6IElOb2RlU2Vzc2lvbikge1xyXG4gICAgICAgIHRoaXMudGhyb3dJZk5vdEluaXRpYWxpemVkKCk7XHJcbiAgICAgICAgdmFyIG9sZERhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgICAgdGhpcy5kYXRhID0geyAuLi5vbGREYXRhLCAuLi5kYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgc2VydmljZVVzZXIoKTogSVNlcnZpY2VVc2VyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKCkucHVibGljLnNlcnZpY2VVc2VyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0IHNlcnZpY2VVc2VyKHNlcnZpY2VVc2VyOiBJU2VydmljZVVzZXIpIHtcclxuICAgICAgICB0aGlzLnNldERhdGEoeyBwdWJsaWM6IHsgc2VydmljZVVzZXIgfSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBpc0F1dGhlbnRpY2F0ZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZVVzZXIgIT0gbnVsbDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFVpIH0gZnJvbSBcIkBVaVwiO1xyXG5pbXBvcnQgUmVzdWx0IGZyb20gXCJATW9kZWxzL1Jlc3VsdFwiO1xyXG5pbXBvcnQgQXhpb3MsIHsgQXhpb3NSZXF1ZXN0Q29uZmlnIH0gZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCB7IHRyYW5zZm9ybVVybCB9IGZyb20gXCJkb21haW4td2FpdFwiO1xyXG5pbXBvcnQganNvblRvVXJsIGZyb20gXCJqc29uLXRvLXVybFwiO1xyXG5pbXBvcnQgeyBpc05vZGUgfSBmcm9tIFwiQFV0aWxzXCI7XHJcbmltcG9ydCBHbG9iYWxzIGZyb20gXCJAR2xvYmFsc1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUmVxdWVzdE9wdGlvbnMge1xyXG4gICAgdXJsOiBzdHJpbmc7XHJcbiAgICBkYXRhPzogYW55O1xyXG4gICAgbWV0aG9kOiBcIkdFVFwiIHwgXCJQT1NUXCIgfCBcIlBVVFwiIHwgXCJQQVRDSFwiIHwgXCJERUxFVEVcIjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJU2VuZEZvcm1EYXRhT3B0aW9ucyB7XHJcbiAgICB1cmw6IHN0cmluZztcclxuICAgIGRhdGE6IEZvcm1EYXRhO1xyXG4gICAgbWV0aG9kOiBcIlBPU1RcIiB8IFwiUFVUXCIgfCBcIlBBVENIXCI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGJhc2UgY2xhc3Mgb2YgdGhlIGlzb21vcnBoaWMgc2VydmljZS5cclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTZXJ2aWNlQmFzZSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWtlIHJlcXVlc3Qgd2l0aCBKU09OIGRhdGEuXHJcbiAgICAgKiBAcGFyYW0gb3B0c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIHJlcXVlc3RKc29uPFQ+KG9wdHM6IElSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8UmVzdWx0PFQ+PiB7XHJcblxyXG4gICAgICAgIHZhciBheGlvc1Jlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XHJcblxyXG4gICAgICAgIG9wdHMudXJsID0gdHJhbnNmb3JtVXJsKG9wdHMudXJsKTsgLy8gQWxsb3cgcmVxdWVzdHMgYWxzbyBmb3IgTm9kZS5cclxuXHJcbiAgICAgICAgdmFyIHByb2Nlc3NRdWVyeSA9ICh1cmw6IHN0cmluZywgZGF0YTogYW55KTogc3RyaW5nID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgJHt1cmx9PyR7anNvblRvVXJsKGRhdGEpfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgYXhpb3NSZXF1ZXN0Q29uZmlnIDogQXhpb3NSZXF1ZXN0Q29uZmlnO1xyXG5cclxuICAgICAgICBpZiAoaXNOb2RlKCkpIHtcclxuICAgICAgICAgICAgLy8gVXNlZCBmb3IgU1NSIHJlcXVlc3RzIGZyb20gdGhlIHdlYiBzZXJ2ZXIgdG8gTm9kZVNlcnZpY2VzLlxyXG4gICAgICAgICAgICBheGlvc1JlcXVlc3RDb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ29va2llOiBHbG9iYWxzLmdldERhdGEoKS5wcml2YXRlLmNvb2tpZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wdHMubWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiR0VUXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYXhpb3NSZXN1bHQgPSBhd2FpdCBBeGlvcy5nZXQocHJvY2Vzc1F1ZXJ5KG9wdHMudXJsLCBvcHRzLmRhdGEpLCBheGlvc1JlcXVlc3RDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlBPU1RcIjpcclxuICAgICAgICAgICAgICAgICAgICBheGlvc1Jlc3VsdCA9IGF3YWl0IEF4aW9zLnBvc3Qob3B0cy51cmwsIG9wdHMuZGF0YSwgYXhpb3NSZXF1ZXN0Q29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJQVVRcIjpcclxuICAgICAgICAgICAgICAgICAgICBheGlvc1Jlc3VsdCA9IGF3YWl0IEF4aW9zLnB1dChvcHRzLnVybCwgb3B0cy5kYXRhLCBheGlvc1JlcXVlc3RDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlBBVENIXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYXhpb3NSZXN1bHQgPSBhd2FpdCBBeGlvcy5wYXRjaChvcHRzLnVybCwgb3B0cy5kYXRhLCBheGlvc1JlcXVlc3RDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkRFTEVURVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGF4aW9zUmVzdWx0ID0gYXdhaXQgQXhpb3MuZGVsZXRlKHByb2Nlc3NRdWVyeShvcHRzLnVybCwgb3B0cy5kYXRhKSwgYXhpb3NSZXF1ZXN0Q29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgUmVzdWx0KGF4aW9zUmVzdWx0LmRhdGEudmFsdWUsIC4uLmF4aW9zUmVzdWx0LmRhdGEuZXJyb3JzKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgUmVzdWx0KG51bGwsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlc3VsdC5oYXNFcnJvcnMpIHtcclxuICAgICAgICAgICAgVWkuc2hvd0Vycm9ycyguLi5yZXN1bHQuZXJyb3JzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGxvd3MgeW91IHRvIHNlbmQgZmlsZXMgdG8gdGhlIHNlcnZlci5cclxuICAgICAqIEBwYXJhbSBvcHRzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgc2VuZEZvcm1EYXRhPFQ+KG9wdHM6IElTZW5kRm9ybURhdGFPcHRpb25zKTogUHJvbWlzZTxSZXN1bHQ8VD4+IHtcclxuICAgICAgICB2YXIgYXhpb3NSZXN1bHQgPSBudWxsO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xyXG5cclxuICAgICAgICBvcHRzLnVybCA9IHRyYW5zZm9ybVVybChvcHRzLnVybCk7IC8vIEFsbG93IHJlcXVlc3RzIGFsc28gZm9yIE5vZGUuXHJcblxyXG4gICAgICAgIHZhciBheGlvc09wdHMgPSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3B0cy5tZXRob2QpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJQT1NUXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYXhpb3NSZXN1bHQgPSBhd2FpdCBBeGlvcy5wb3N0KG9wdHMudXJsLCBvcHRzLmRhdGEsIGF4aW9zT3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUFVUXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYXhpb3NSZXN1bHQgPSBhd2FpdCBBeGlvcy5wdXQob3B0cy51cmwsIG9wdHMuZGF0YSwgYXhpb3NPcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJQQVRDSFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGF4aW9zUmVzdWx0ID0gYXdhaXQgQXhpb3MucGF0Y2gob3B0cy51cmwsIG9wdHMuZGF0YSwgYXhpb3NPcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgUmVzdWx0KGF4aW9zUmVzdWx0LmRhdGEudmFsdWUsIC4uLmF4aW9zUmVzdWx0LmRhdGEuZXJyb3JzKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgUmVzdWx0KG51bGwsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlc3VsdC5oYXNFcnJvcnMpIHtcclxuICAgICAgICAgICAgVWkuc2hvd0Vycm9ycyguLi5yZXN1bHQuZXJyb3JzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBJTG9naW5Nb2RlbCB9IGZyb20gXCJATW9kZWxzL0lMb2dpbk1vZGVsXCI7XHJcbmltcG9ydCB7IElTZXJ2aWNlVXNlciB9IGZyb20gXCJATW9kZWxzL0lTZXJ2aWNlVXNlclwiO1xyXG5pbXBvcnQgUmVzdWx0IGZyb20gXCJATW9kZWxzL1Jlc3VsdFwiO1xyXG5pbXBvcnQgeyBTZXJ2aWNlQmFzZSB9IGZyb20gXCIuL1NlcnZpY2VCYXNlXCI7XHJcbmltcG9ydCBHbG9iYWxzIGZyb20gXCJAR2xvYmFsc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWNjb3VudFNlcnZpY2UgZXh0ZW5kcyBTZXJ2aWNlQmFzZSB7XHJcbiAgICBcclxuICAgIHN0YXRpYyBhc3luYyBsb2dpbihsb2dpbk1vZGVsOiBJTG9naW5Nb2RlbCkgOiBQcm9taXNlPFJlc3VsdDxJU2VydmljZVVzZXI+PiB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IHRoaXMucmVxdWVzdEpzb248SVNlcnZpY2VVc2VyPih7XHJcbiAgICAgICAgICAgIHVybDogXCJhcGkvQWNjb3VudC9Mb2dpblwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBsb2dpbk1vZGVsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICghcmVzdWx0Lmhhc0Vycm9ycykge1xyXG4gICAgICAgICAgICBHbG9iYWxzLnNlcnZpY2VVc2VyID0gcmVzdWx0LnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgbG9nb3V0KCk6IFByb21pc2U8UmVzdWx0PHt9Pj4ge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBhd2FpdCB0aGlzLnJlcXVlc3RKc29uPElTZXJ2aWNlVXNlcj4oe1xyXG4gICAgICAgICAgICB1cmw6IFwiYXBpL0FjY291bnQvTG9nb3V0XCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKCFyZXN1bHQuaGFzRXJyb3JzKSB7XHJcbiAgICAgICAgICAgIEdsb2JhbHMuc2VydmljZVVzZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgeyBOYXZMaW5rLCBSZWRpcmVjdCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBHbG9iYWxzIGZyb20gXCJAR2xvYmFsc1wiO1xyXG5pbXBvcnQgQWNjb3VudFNlcnZpY2UgZnJvbSBcIkBTZXJ2aWNlcy9BY2NvdW50U2VydmljZVwiO1xyXG5pbXBvcnQgeyBEcm9wZG93biB9IGZyb20gXCJib290c3RyYXAzLW5hdGl2ZVwiO1xyXG5cclxuaW1wb3J0IGJpbmQgZnJvbSAnYmluZC1kZWNvcmF0b3InO1xyXG5cclxuY2xhc3MgVG9wTWVudSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7fSwgeyBsb2dvdXRBY3Rpb246IGJvb2xlYW4gfT4ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7IGxvZ291dEFjdGlvbjogZmFsc2UgfTtcclxuICAgIH1cclxuXHJcbiAgICBAYmluZFxyXG4gICAgYXN5bmMgb25DbGlja1NpZ25PdXQoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MQW5jaG9yRWxlbWVudD4pIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIGF3YWl0IEFjY291bnRTZXJ2aWNlLmxvZ291dCgpO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2dvdXRBY3Rpb246IHRydWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhYm91dERyb3Bkb3duOiBIVE1MQW5jaG9yRWxlbWVudDtcclxuICAgIC8vcHJpdmF0ZSBibG9nRHJvcGRvd246IEhUTUxBbmNob3JFbGVtZW50O1xyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHZhciBhYm91dE1lRHJvcGRvd24gPSBuZXcgRHJvcGRvd24odGhpcy5hYm91dERyb3Bkb3duKTtcclxuICAgICAgICAvL3ZhciBibG9nRHJvcGRvd24gPSBuZXcgRHJvcGRvd24odGhpcy5ibG9nRHJvcGRvd24pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubG9nb3V0QWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDxuYXYgY2xhc3NOYW1lPVwibmF2YmFyIG5hdmJhci1leHBhbmQtbWQgbmF2YmFyLWxpZ2h0IGJnLWxpZ2h0XCI+XHJcbiAgICAgICAgICAgIDxOYXZMaW5rIGV4YWN0IHRvPXsnLyd9IGNsYXNzTmFtZT1cIm5hdmJhci1icmFuZFwiPkpHPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm5hdmJhci10b2dnbGVyXCIgdHlwZT1cImJ1dHRvblwiIGRhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIiBkYXRhLXRhcmdldD1cIiNuYXZiYXJOYXZcIiBhcmlhLWNvbnRyb2xzPVwibmF2YmFyTmF2XCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuYXZpZ2F0aW9uXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuYXZiYXItdG9nZ2xlci1pY29uXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2VcIiBpZD1cIm5hdmJhck5hdlwiPlxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm5hdmJhci1uYXZcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibmF2LWl0ZW0gYWN0aXZlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIGV4YWN0IHRvPXsnLyd9IHN0eWxlPXt7IFwiZm9udFNpemVcIjogXCIxOHB4XCIgfX0gY2xhc3NOYW1lPVwibmF2LWxpbmtcIiBhY3RpdmVDbGFzc05hbWU9XCJhY3RpdmVcIj5Ib21lPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIGV4YWN0IHRvPXsnL3BvcnRmb2xpbyd9IHN0eWxlPXt7IFwiZm9udFNpemVcIjogXCIxOHB4XCIgfX0gY2xhc3NOYW1lPVwibmF2LWxpbmtcIiBhY3RpdmVDbGFzc05hbWU9XCJhY3RpdmVcIj5Qb3J0Zm9saW88L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZHJvcGRvd25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiByZWY9e3ggPT4gdGhpcy5hYm91dERyb3Bkb3duID0geH0gY2xhc3NOYW1lPVwiZHJvcGRvd24tdG9nZ2xlIG5hdi1saW5rXCIgc3R5bGU9e3sgXCJmb250U2l6ZVwiOiBcIjE4cHhcIiB9fSBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJcIj5BYm91dDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiZHJvcGRvd24tbWVudVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgZXhhY3QgdG89eycvYWJvdXQvbWUnfSBzdHlsZT17eyBcImZvbnRTaXplXCI6IFwiMThweFwiIH19IGNsYXNzTmFtZT1cIm5hdi1saW5rXCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+QWJvdXQgTWU8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgZXhhY3QgdG89eycvYWJvdXQvbXVzaWMnfSBzdHlsZT17eyBcImZvbnRTaXplXCI6IFwiMThweFwiIH19IGNsYXNzTmFtZT1cIm5hdi1saW5rXCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+TXVzaWM8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgZXhhY3QgdG89eycvYWJvdXQvcmVhZGluZyd9IHN0eWxlPXt7IFwiZm9udFNpemVcIjogXCIxOHB4XCIgfX0gY2xhc3NOYW1lPVwibmF2LWxpbmtcIiBhY3RpdmVDbGFzc05hbWU9XCJhY3RpdmVcIj5SZWFkaW5nPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJkcm9wZG93blwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiByZWY9e3ggPT4gdGhpcy5ibG9nRHJvcGRvd24gPSB4fSBjbGFzc05hbWU9XCJkcm9wZG93bi10b2dnbGUgbmF2LWxpbmtcIiBzdHlsZT17eyBcImZvbnRTaXplXCI6IFwiMThweFwiIH19IGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJcIj5CbG9nPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImRyb3Bkb3duLW1lbnVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibmF2LWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgZXhhY3QgdG89eycvYmxvZy90cmF2ZWxpbmcnfSBzdHlsZT17eyBcImZvbnRTaXplXCI6IFwiMThweFwiIH19IGNsYXNzTmFtZT1cIm5hdi1saW5rXCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+VHJhdmVsaW5nPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIGV4YWN0IHRvPXsnL2Jsb2cvdHJhdmVsaW5nL3N1bW1lcjIwMTgnfSBzdHlsZT17eyBcImZvbnRTaXplXCI6IFwiMThweFwiIH19IGNsYXNzTmFtZT1cIm5hdi1saW5rXCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+U3VtbWVyIDIwMTg8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48TmF2TGluayBleGFjdCB0bz17Jy9hZG1pbid9IGFjdGl2ZUNsYXNzTmFtZT1cImFjdGl2ZVwiPkFkbWluPC9OYXZMaW5rPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJkcm9wZG93blwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiByZWY9e3ggPT4gdGhpcy5lbERyb3Bkb3duID0geH0gY2xhc3NOYW1lPVwiZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtHbG9iYWxzLnNlcnZpY2VVc2VyID8gR2xvYmFscy5zZXJ2aWNlVXNlci5sb2dpbiA6IG51bGx9Jm5ic3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2FyZXRcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiZHJvcGRvd24tbWVudVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtHbG9iYWxzLnNlcnZpY2VVc2VyID8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cIiNcIiBvbkNsaWNrPXt0aGlzLm9uQ2xpY2tTaWduT3V0fT5TaWduIG91dDwvYT48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVwiL2xvZ2luXCI+U2lnbiBpbjwvYT48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvbmF2PlxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKFRvcE1lbnUgYXMgYW55KTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvb3RlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7fSwge30+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiA8Zm9vdGVyIGNsYXNzTmFtZT1cImZvb3RlciB0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvKjxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgZXh0ZXJuYWxsaW5rc1wiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+PGI+RXh0ZXJuYWwgcHJvZmlsZSBsaW5rczwvYj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPkdpdGh1YiB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2pncmlmZml0aDM0MzNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwOi8vZ2l0aHViLmNvbS9qZ3JpZmZpdGgzNDMzPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Tb3VuZCBDbG91ZCB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9zb3VuZGNsb3VkLmNvbS9qYWNvYnNncmlmZml0aFwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vc291bmRjbG91ZC5jb20vamFjb2JzZ3JpZmZpdGg8L2E+XHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlN0YWNrIE92ZXJmbG93IHwgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzk0MTYzMi9qYWNvYnNncmlmZml0aFwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvOTQxNjMyL2phY29ic2dyaWZmaXRoPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5JdGNoLmlvIHwgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2pncmlmZml0aDM0MzMuaXRjaC5pby9saWZlb2Znb29iYVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vamdyaWZmaXRoMzQzMy5pdGNoLmlvL2xpZmVvZmdvb2JhPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5LaWNrc3RhcnRlciB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly93d3cua2lja3N0YXJ0ZXIuY29tL3Byb2ZpbGUvamdyaWZmaXRoMzQzM1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmtpY2tzdGFydGVyLmNvbS9wcm9maWxlL2pncmlmZml0aDM0MzM8L2E+XHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8cD5Db3B5cmlnaHQgKEMpIDIwMTkgSmF5Y2VlIEdyaWZmaXRoPC9wPiovXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICA8L2Zvb3Rlcj47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgVG9wTWVudSBmcm9tIFwiQENvbXBvbmVudHMvc2hhcmVkL1RvcE1lbnVcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIkBTdHlsZXMvYXV0aG9yaXplZExheW91dC5zY3NzXCI7XHJcbmltcG9ydCB7IFRvYXN0Q29udGFpbmVyIH0gZnJvbSBcInJlYWN0LXRvYXN0aWZ5XCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIkBDb21wb25lbnRzL3NoYXJlZC9Gb290ZXJcIjtcclxuXHJcbmludGVyZmFjZSBJUHJvcHMge1xyXG4gICAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XHJcbn1cclxuXHJcbnR5cGUgUHJvcHMgPSBJUHJvcHM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRob3JpemVkTGF5b3V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCB7fT4ge1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJhdXRob3JpemVkTGF5b3V0XCIgY2xhc3NOYW1lPVwibGF5b3V0XCI+XHJcbiAgICAgICAgICAgICAgICA8VG9wTWVudSAvPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgY29udGFpbmVyLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPFRvYXN0Q29udGFpbmVyIC8+XHJcbiAgICAgICAgICAgICAgICA8Rm9vdGVyIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PjtcclxuICAgIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgVW5pdHksIHsgVW5pdHlDb250ZW50IH0gZnJvbSBcInJlYWN0LXVuaXR5LXdlYmdsXCI7XHJcbmltcG9ydCBHbG9iYWxzIGZyb20gXCJAR2xvYmFsc1wiO1xyXG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gXCJ1dGlsXCI7XHJcbmltcG9ydCB7IHNldFRpbWVvdXQgfSBmcm9tIFwidGltZXJzXCI7XHJcblxyXG5pbnRlcmZhY2UgSVVuaXR5R2FtZVByb3BzIHtcclxuICAgIG1hdGNoLFxyXG4gICAgbG9jYXRpb24sXHJcbiAgICBoaXN0b3J5O1xyXG59XHJcblxyXG5jbGFzcyBVbml0eUdhbWUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVVuaXR5R2FtZVByb3BzLCB7fT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy51bmxpc3RlbiA9IHRoaXMucHJvcHMuaGlzdG9yeS5saXN0ZW4oKGxvY2F0aW9uLCBhY3Rpb24pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5KR1dHYW1lLnNlbmQoXCJHYW1lQ29udHJvbGxlclwiLCBcIkxvYWRQYWdlXCIsIGxvY2F0aW9uLnBhdGhuYW1lKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgdW5saXN0ZW46IGFueTtcclxuXHJcbiAgICBwdXRvbnRvcChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibGF5ZXJpZnJhbWVcIik7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImxheWVyaWZyYW1lXCIpO1xyXG4gICAgICAgIH0sIDIwMDApO1xyXG4gICAgfTtcclxuXHJcbiAgICBzaW11bGF0ZShlbGVtZW50LCBldmVudE5hbWUsIGEpIHtcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuZXh0ZW5kKHtcclxuICAgICAgICAgICAgcG9pbnRlclg6IDAsXHJcbiAgICAgICAgICAgIHBvaW50ZXJZOiAwLFxyXG4gICAgICAgICAgICBidXR0b246IDAsXHJcbiAgICAgICAgICAgIGN0cmxLZXk6IGZhbHNlLFxyXG4gICAgICAgICAgICBhbHRLZXk6IGZhbHNlLFxyXG4gICAgICAgICAgICBzaGlmdEtleTogZmFsc2UsXHJcbiAgICAgICAgICAgIG1ldGFLZXk6IGZhbHNlLFxyXG4gICAgICAgICAgICBidWJibGVzOiB0cnVlLFxyXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXHJcbiAgICAgICAgfSwgYSB8fCB7fSk7XHJcbiAgICAgICAgdmFyIG9FdmVudCwgZXZlbnRUeXBlID0gbnVsbDtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLmV2ZW50TWF0Y2hlcnMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRNYXRjaGVyc1tuYW1lXS50ZXN0KGV2ZW50TmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50VHlwZSA9IG5hbWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFldmVudFR5cGUpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignT25seSBIVE1MRXZlbnRzIGFuZCBNb3VzZUV2ZW50cyBpbnRlcmZhY2VzIGFyZSBzdXBwb3J0ZWQnKTtcclxuXHJcbiAgICAgICAgaWYgKGRvY3VtZW50LmNyZWF0ZUV2ZW50KSB7XHJcbiAgICAgICAgICAgIG9FdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KGV2ZW50VHlwZSk7XHJcbiAgICAgICAgICAgIGlmIChldmVudFR5cGUgPT0gJ0hUTUxFdmVudHMnKSB7XHJcbiAgICAgICAgICAgICAgICBvRXZlbnQuaW5pdEV2ZW50KGV2ZW50TmFtZSwgb3B0aW9ucy5idWJibGVzLCBvcHRpb25zLmNhbmNlbGFibGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb0V2ZW50LmluaXRNb3VzZUV2ZW50KGV2ZW50TmFtZSwgb3B0aW9ucy5idWJibGVzLCBvcHRpb25zLmNhbmNlbGFibGUsIGRvY3VtZW50LmRlZmF1bHRWaWV3LFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuYnV0dG9uLCBvcHRpb25zLnBvaW50ZXJYLCBvcHRpb25zLnBvaW50ZXJZLCBvcHRpb25zLnBvaW50ZXJYLCBvcHRpb25zLnBvaW50ZXJZLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuY3RybEtleSwgb3B0aW9ucy5hbHRLZXksIG9wdGlvbnMuc2hpZnRLZXksIG9wdGlvbnMubWV0YUtleSwgb3B0aW9ucy5idXR0b24sIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChvRXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKmVsc2Uge1xyXG4gICAgICAgICAgICBvcHRpb25zLmNsaWVudFggPSBvcHRpb25zLnBvaW50ZXJYO1xyXG4gICAgICAgICAgICBvcHRpb25zLmNsaWVudFkgPSBvcHRpb25zLnBvaW50ZXJZO1xyXG4gICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKTtcclxuICAgICAgICAgICAgb0V2ZW50ID0gZXh0ZW5kKGV2dCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuZmlyZUV2ZW50KCdvbicgKyBldmVudE5hbWUsIG9FdmVudCk7XHJcbiAgICAgICAgfSovXHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGV4dGVuZChkZXN0aW5hdGlvbiwgc291cmNlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gc291cmNlKSB7XHJcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IHNvdXJjZVtwcm9wZXJ0eV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZXN0aW5hdGlvbjtcclxuICAgIH07XHJcblxyXG4gICAgZXZlbnRNYXRjaGVycyA9IHtcclxuICAgICAgICAnSFRNTEV2ZW50cyc6IC9eKD86bG9hZHx1bmxvYWR8YWJvcnR8ZXJyb3J8c2VsZWN0fGNoYW5nZXxzdWJtaXR8cmVzZXR8Zm9jdXN8Ymx1cnxyZXNpemV8c2Nyb2xsKSQvLFxyXG4gICAgICAgICdNb3VzZUV2ZW50cyc6IC9eKD86Y2xpY2t8ZGJsY2xpY2t8bW91c2UoPzpkb3dufHVwfG92ZXJ8bW92ZXxvdXR8d2hlZWwpKSQvXHJcbiAgICB9O1xyXG5cclxuICAgIGdldEFsbEVsZW1lbnRzRnJvbVBvaW50ID0gKHgsIHkpID0+IHtcclxuICAgICAgICB2YXIgZWxlbWVudHMgPSBbXTtcclxuICAgICAgICB2YXIgaXRlbSA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XHJcbiAgICAgICAgdmFyIGxhc3RJdGVtO1xyXG4gICAgICAgIHdoaWxlIChpdGVtICYmIGl0ZW0gIT09IGxhc3RJdGVtICYmIGl0ZW0gIT09IGRvY3VtZW50LmJvZHkgJiYgaXRlbSAhPT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLmNsYXNzTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIC8vIHRlbXBvcmFyaWx5IGRpc2FibGUgcG9pbnRlciBldmVudHMgZWxlbWVudCBzbyB3ZSBjYW4gc2VlIHdoYXQncyB1bmRlcm5lYXRoIGl0XHJcbiAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoXCJmYWtlaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgLy8gcHJldmVudCBwb3NzaWJsZSBpbmZpbml0ZSBsb29wIGJ5IHJlbWVtYmVyaW5nIHRoaXMgaXRlbVxyXG4gICAgICAgICAgICAgICAgbGFzdEl0ZW0gPSBpdGVtO1xyXG4gICAgICAgICAgICAgICAgaXRlbSA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcmVzdG9yZSBkaXNwbGF5IHByb3BlcnR5XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudHNbaV0uY2xhc3NMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50c1tpXS5jbGFzc0xpc3QucmVtb3ZlKFwiZmFrZWhpZGRlblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWxlbWVudHM7XHJcbiAgICB9O1xyXG5cclxuICAgIHVwZGF0ZURpbWVuc2lvbnMgPSAoKSA9PiB7XHJcbiAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiI2NhbnZhc1wiKTtcclxuICAgICAgICB2YXIgcmVhY3RBcHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlYWN0LWFwcFwiKTtcclxuICAgICAgICBpZiAoY2FudmFzICYmIHJlYWN0QXBwKSB7XHJcbiAgICAgICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCByZWFjdEFwcC5jbGllbnRXaWR0aC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCByZWFjdEFwcC5jbGllbnRIZWlnaHQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIHRoaXMuSkdXR2FtZS5zZW5kKFwiR2FtZUNvbnRyb2xsZXJcIiwgXCJVcGRhdGVEaW1lbnNpb25zXCIsIFwie1wiICtcclxuICAgICAgICAgICAgICAgIFwid2lkdGg6IFwiICsgcmVhY3RBcHAuY2xpZW50V2lkdGgudG9TdHJpbmcoKSArIFwiLCBcIiArXHJcbiAgICAgICAgICAgICAgICBcImhlaWdodDogXCIgKyByZWFjdEFwcC5jbGllbnRIZWlnaHQudG9TdHJpbmcoKSArXHJcbiAgICAgICAgICAgICAgICBcIiB9XCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMudXBkYXRlRGltZW5zaW9ucyk7XHJcbiAgICAgICAgR2xvYmFscy5zZXRHYW1lUmVhZHkoZmFsc2UpO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLkpHV0dhbWUgPSBuZXcgVW5pdHlDb250ZW50KFxyXG4gICAgICAgICAgICAgICAgXCJKYXljZWVHcmlmZml0aFdlYnNpdGVHYW1lL0J1aWxkLmpzb25cIixcclxuICAgICAgICAgICAgICAgIFwiSmF5Y2VlR3JpZmZpdGhXZWJzaXRlR2FtZS9Vbml0eUxvYWRlci5qc1wiXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuSkdXR2FtZS5vbihcIk9uUmVhZHlcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgR2xvYmFscy5zZXRHYW1lUmVhZHkodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByZWxvYWRlclwiKS5jbGFzc0xpc3QuYWRkKFwibG9hZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmVsb2FkZXJcIikuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcclxuICAgICAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkpHV0dhbWUuc2VuZChcIkdhbWVDb250cm9sbGVyXCIsIFwiQ29ubmVjdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5KR1dHYW1lLnNlbmQoXCJHYW1lQ29udHJvbGxlclwiLCBcIkxvYWRQYWdlXCIsIHRoaXMucHJvcHMubG9jYXRpb24ucGF0aG5hbWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5KR1dHYW1lLm9uKFwiU2V0UGFnZVwiLCBwYWdlID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChwYWdlICE9IHRoaXMucHJvcHMubG9jYXRpb24ucGF0aG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaChwYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuSkdXR2FtZS5vbihcIkdldERpbWVuc2lvbnNcIiwgcGFnZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZURpbWVuc2lvbnMoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuSkdXR2FtZS5vbihcIk9wZW5OZXdUYWJcIiwgdXJsID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciB3aW4gPSB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcclxuICAgICAgICAgICAgICAgIHdpbi5mb2N1cygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5KR1dHYW1lLm9uKFwiTW91c2VFdmVudFwiLCBtb3VzZUV2ZW50U3RyID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBtb3VzZUV2ZW50ID0gSlNPTi5wYXJzZShtb3VzZUV2ZW50U3RyKTtcclxuICAgICAgICAgICAgICAgIGlmIChtb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9maXggeTogdW5pdHkgYmVnaW5zIGJvdHRvbSBsZWZ0LCB3ZWIgYnJvd3NlcnMgYmVnaW4gdG9wIGxlZnRcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZUV2ZW50LnBvaW50ZXJZID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZWFjdC1hcHBcIikuY2xpZW50SGVpZ2h0IC0gbW91c2VFdmVudC5wb2ludGVyWTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobW91c2VFdmVudC50eXBlID09IFwic2Nyb2xsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9kb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIC0gKG1vdXNlRXZlbnQuc2Nyb2xsICogMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYmFyQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNjcm9sbGJhci1jb250YWluZXJcIilbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhckNvbnRhaW5lci5zY3JvbGxUb3AgPSBzY3JvbGxiYXJDb250YWluZXIuc2Nyb2xsVG9wIC0gKG1vdXNlRXZlbnQuc2Nyb2xsICogMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb3VzZUV2ZW50LnR5cGUgIT0gXCJtb3VzZW1vdmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgdW5pdHlHYW1lRWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidW5pdHlHYW1lXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy91bml0eUdhbWVFbGVtLmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlcG9pbnRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cobW91c2VFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VyRWxlbXMgPSB0aGlzLmdldEFsbEVsZW1lbnRzRnJvbVBvaW50KG1vdXNlRXZlbnQucG9pbnRlclgsIG1vdXNlRXZlbnQucG9pbnRlclkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgY3VyRWxlbSA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQobW91c2VFdmVudC5wb2ludGVyWCwgbW91c2VFdmVudC5wb2ludGVyWSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyRWxlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VyRWxlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckVsZW1zW2ldLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSAnaWZyYW1lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXRvbnRvcChjdXJFbGVtc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaW11bGF0ZShjdXJFbGVtc1tpXSwgbW91c2VFdmVudC50eXBlLCBtb3VzZUV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy91bml0eUdhbWVFbGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlcG9pbnRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vdXNlVGVzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW91c2VUZXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW91c2VUZXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZVRlc3Quc3R5bGUubGVmdCA9IG1vdXNlRXZlbnQucG9pbnRlclggKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZVRlc3Quc3R5bGUudG9wID0gbW91c2VFdmVudC5wb2ludGVyWSArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFJlYWN0RE9NLnJlbmRlcig8VW5pdHkgdW5pdHlDb250ZW50PXt0aGlzLkpHV0dhbWV9IC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVuaXR5R2FtZVwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgICAgIHRoaXMudW5saXN0ZW4oKTtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLnVwZGF0ZURpbWVuc2lvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIEpHV0dhbWU6IFVuaXR5Q29udGVudDtcclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3QgeyBtYXRjaCwgbG9jYXRpb24sIGhpc3RvcnkgfSA9IHRoaXMucHJvcHM7XHJcbiAgICAgICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJtb3VzZVRlc3RcIiBjbGFzc05hbWU9XCJtb3VzZVRlc3RcIj48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBpZD1cInVuaXR5R2FtZVwiIGNsYXNzTmFtZT1cInVuaXR5R2FtZVwiPjwvZGl2PlxyXG4gICAgICAgIDwvZGl2PjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcihVbml0eUdhbWUpOyIsImltcG9ydCBUb3BNZW51IGZyb20gXCJAQ29tcG9uZW50cy9zaGFyZWQvVG9wTWVudVwiO1xyXG5pbXBvcnQgXCJAU3R5bGVzL2d1ZXN0TGF5b3V0LnNjc3NcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCAqIGFzIEggZnJvbSAnaGlzdG9yeSc7XHJcbmltcG9ydCB7IFJvdXRlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XHJcbmltcG9ydCB7IFRvYXN0Q29udGFpbmVyIH0gZnJvbSBcInJlYWN0LXRvYXN0aWZ5XCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIkBDb21wb25lbnRzL3NoYXJlZC9Gb290ZXJcIjtcclxuaW1wb3J0IFVuaXR5R2FtZSBmcm9tIFwiQENvbXBvbmVudHMvc2hhcmVkL1VuaXR5R2FtZVwiO1xyXG5pbXBvcnQgUGVyZmVjdFNjcm9sbGJhciBmcm9tIFwicmVhY3QtcGVyZmVjdC1zY3JvbGxiYXJcIlxyXG5cclxuaW50ZXJmYWNlIElQcm9wcyB7XHJcbiAgICBjaGlsZHJlbjogYW55O1xyXG4gICAgcGF0aDogc3RyaW5nO1xyXG59XHJcblxyXG50eXBlIFByb3BzID0gSVByb3BzICYgUm91dGVDb21wb25lbnRQcm9wczxhbnk+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3Vlc3RMYXlvdXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIHt9PiB7XHJcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGlkPVwiZ3Vlc3RMYXlvdXRcIiBjbGFzc05hbWU9XCJsYXlvdXRcIj5cclxuICAgICAgICAgICAgICAgIDxUb3BNZW51IC8+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lciBjb250YWluZXItY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiAnNzUlOycgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsvKnRoaXMucHJvcHMuY2hpbGRyZW4qL31cclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBlcmZlY3RTY3JvbGxiYXIgb3B0aW9uPXt7IHN1cHByZXNzU2Nyb2xsWDogXCJ0cnVlXCIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1BlcmZlY3RTY3JvbGxiYXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPFRvYXN0Q29udGFpbmVyIC8+XHJcbiAgICAgICAgICAgICAgICA8VW5pdHlHYW1lIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PjtcclxuICAgIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgYmluZCBmcm9tICdiaW5kLWRlY29yYXRvcic7XHJcblxyXG4vKipcclxuICogVGhpcyBjb21wb25lbnQgY29udGFpbnMgaGVscGZ1bCBtZXRob2Qgd2hpY2hcclxuICogYWxsb3dzIHlvdSB0byBtYWtlIFwiZm9yY2UgdXBkYXRlXCIgb2YgdGhlIHN0dWNrIGVsZW1lbnRzLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQXBwQ29tcG9uZW50PFRQcm9wcyA9IHt9LCBUU3RhdGUgPSB7fT4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VFByb3BzLCBUU3RhdGU+IHtcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBQbGFjZSBpdCBpbnRvIHRoZSBcImtleVwiIGF0dHJpYnV0ZSBvZiBhbiBlbGVtZW50LlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyS2V5ID0gMDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGwgdGhpcyBpZiBjb21wb25lbnQgc3RhdGUgaXMgc3R1Y2suXHJcbiAgICAgKiBCdXQgeW91IHNob3VsZCBzZXQgdGhlIHJlbmRlcktleSB0byB0aGUgZWxlbWVudCdzIGF0dHJpYnV0ZS5cclxuICAgICAqL1xyXG4gICAgQGJpbmRcclxuICAgIHB1YmxpYyBmb3JjZVVwZGF0ZSgpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcktleSA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgXCJAU3R5bGVzL2xvYWRlci5zY3NzXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBpc05vZGUgfSBmcm9tIFwiQFV0aWxzXCI7XHJcbmltcG9ydCBBcHBDb21wb25lbnQgZnJvbSBcIkBDb21wb25lbnRzL3NoYXJlZC9BcHBDb21wb25lbnRcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BzIHtcclxuICAgIHNob3c6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRlciBleHRlbmRzIEFwcENvbXBvbmVudDxJUHJvcHMsIHt9PiB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICB2YXIgY3NzID0ge1wiZGlzcGxheVwiOiBcIm5vbmVcIn07XHJcblxyXG4gICAgICAgIGlmICghaXNOb2RlKCkpIHtcclxuICAgICAgICAgICAgY3NzID0geyBcImRpc3BsYXlcIjogKHRoaXMucHJvcHMuc2hvdyA/IFwiYmxvY2tcIiA6IFwibm9uZVwiKSB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gPGRpdiBrZXk9e3RoaXMucmVuZGVyS2V5fSBjbGFzc05hbWU9XCJsb2FkZXItYmdcIiBzdHlsZT17Y3NzfT5cclxuICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2stY2lyY2xlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGUxIHNrLWNoaWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGUyIHNrLWNoaWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGUzIHNrLWNoaWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGU0IHNrLWNoaWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGU1IHNrLWNoaWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGU2IHNrLWNoaWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGU3IHNrLWNoaWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGU4IHNrLWNoaWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGU5IHNrLWNoaWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGUxMCBzay1jaGlsZFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2stY2lyY2xlMTEgc2stY2hpbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNrLWNpcmNsZTEyIHNrLWNoaWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgPC9kaXY+O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY2xvbmUgfSBmcm9tIFwiQFV0aWxzXCI7XHJcbmltcG9ydCB7IEFjdGlvbiwgUmVkdWNlciB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBBcHBUaHVua0FjdGlvbiB9IGZyb20gXCIuL2luZGV4XCI7XHJcbmltcG9ydCBQZXJzb25TZXJ2aWNlIGZyb20gXCJAU2VydmljZXMvUGVyc29uU2VydmljZVwiO1xyXG5pbXBvcnQgeyBJUGVyc29uTW9kZWwgfSBmcm9tIFwiQE1vZGVscy9JUGVyc29uTW9kZWxcIjtcclxuaW1wb3J0IHsgd2FpdCB9IGZyb20gXCJkb21haW4td2FpdFwiO1xyXG5cclxuZXhwb3J0IG1vZHVsZSBQZXJzb25TdG9yZSB7XHJcblxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3RhdGUge1xyXG4gICAgICAgIHBlb3BsZTogSVBlcnNvbk1vZGVsW10sXHJcbiAgICAgICAgaW5kaWNhdG9yczoge1xyXG4gICAgICAgICAgICBvcGVyYXRpb25Mb2FkaW5nOiBib29sZWFuO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGVudW0gQWN0aW9ucyB7XHJcbiAgICAgICAgU2VhcmNoUmVxdWVzdCA9IFwiUEVSU09OX1NFQVJDSF9SRVFVRVNUXCIsXHJcbiAgICAgICAgU2VhcmNoUmVzcG9uc2UgPSBcIlBFUlNPTl9TRUFSQ0hfUkVTUE9OU0VcIixcclxuICAgICAgICBBZGRSZXF1ZXN0ID0gXCJQRVJTT05fQUREX1JFUVVFU1RcIixcclxuICAgICAgICBBZGRSZXNwb25zZSA9IFwiUEVSU09OX0FERF9SRVNQT05TRVwiLFxyXG4gICAgICAgIFVwZGF0ZVJlcXVlc3QgPSBcIlBFUlNPTl9VUERBVEVfUkVRVUVTVFwiLFxyXG4gICAgICAgIFVwZGF0ZVJlc3BvbnNlID0gXCJQRVJTT05fVVBEQVRFX1JFU1BPTlNFXCIsXHJcbiAgICAgICAgRGVsZXRlUmVxdWVzdCA9IFwiUEVSU09OX0RFTEVURV9SRVFVRVNUXCIsXHJcbiAgICAgICAgRGVsZXRlUmVzcG9uc2UgPSBcIlBFUlNPTl9ERUxFVEVfUkVTUE9OU0VcIlxyXG4gICAgfVxyXG5cclxuICAgIGludGVyZmFjZSBJR2V0QWxsUmVxdWVzdCB7XHJcbiAgICAgICAgdHlwZTogQWN0aW9ucy5TZWFyY2hSZXF1ZXN0O1xyXG4gICAgfVxyXG5cclxuICAgIGludGVyZmFjZSBJR2V0QWxsUmVzcG9uc2Uge1xyXG4gICAgICAgIHR5cGU6IEFjdGlvbnMuU2VhcmNoUmVzcG9uc2U7XHJcbiAgICAgICAgcGF5bG9hZDogSVBlcnNvbk1vZGVsW107XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIElBZGRSZXF1ZXN0IHtcclxuICAgICAgICB0eXBlOiBBY3Rpb25zLkFkZFJlcXVlc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIElBZGRSZXNwb25zZSB7XHJcbiAgICAgICAgdHlwZTogQWN0aW9ucy5BZGRSZXNwb25zZTtcclxuICAgICAgICBwYXlsb2FkOiBJUGVyc29uTW9kZWw7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIElVcGRhdGVSZXF1ZXN0IHtcclxuICAgICAgICB0eXBlOiBBY3Rpb25zLlVwZGF0ZVJlcXVlc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIElVcGRhdGVSZXNwb25zZSB7XHJcbiAgICAgICAgdHlwZTogQWN0aW9ucy5VcGRhdGVSZXNwb25zZTtcclxuICAgICAgICBwYXlsb2FkOiBJUGVyc29uTW9kZWw7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIElEZWxldGVSZXF1ZXN0IHtcclxuICAgICAgICB0eXBlOiBBY3Rpb25zLkRlbGV0ZVJlcXVlc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIElEZWxldGVSZXNwb25zZSB7XHJcbiAgICAgICAgdHlwZTogQWN0aW9ucy5EZWxldGVSZXNwb25zZTtcclxuICAgICAgICBpZDogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHR5cGUgS25vd25BY3Rpb24gPVxyXG4gICAgICAgIElHZXRBbGxSZXF1ZXN0IHwgSUdldEFsbFJlc3BvbnNlIHxcclxuICAgICAgICBJQWRkUmVxdWVzdCB8IElBZGRSZXNwb25zZSB8XHJcbiAgICAgICAgSVVwZGF0ZVJlcXVlc3QgfCBJVXBkYXRlUmVzcG9uc2UgfFxyXG4gICAgICAgIElEZWxldGVSZXF1ZXN0IHwgSURlbGV0ZVJlc3BvbnNlO1xyXG5cclxuICAgIGV4cG9ydCBjb25zdCBhY3Rpb25DcmVhdG9ycyA9IHtcclxuICAgICAgICBzZWFyY2hSZXF1ZXN0OiAodGVybT86IHN0cmluZyk6IEFwcFRodW5rQWN0aW9uPEtub3duQWN0aW9uPiA9PiBhc3luYyAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBhd2FpdCB3YWl0KGFzeW5jICh0cmFuc2Zvcm1VcmwpID0+IHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gV2FpdCBmb3Igc2VydmVyIHByZXJlbmRlcmluZy5cclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5TZWFyY2hSZXF1ZXN0IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhd2FpdCBQZXJzb25TZXJ2aWNlLnNlYXJjaCh0ZXJtKTtcclxuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0Lmhhc0Vycm9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5TZWFyY2hSZXNwb25zZSwgcGF5bG9hZDogcmVzdWx0LnZhbHVlIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZFJlcXVlc3Q6IChtb2RlbDogSVBlcnNvbk1vZGVsKTogQXBwVGh1bmtBY3Rpb248S25vd25BY3Rpb24+ID0+IGFzeW5jIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5BZGRSZXF1ZXN0IH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IFBlcnNvblNlcnZpY2UuYWRkKG1vZGVsKTtcclxuICAgICAgICAgICAgaWYgKCFyZXN1bHQuaGFzRXJyb3JzKSB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5pZCA9IHJlc3VsdC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5BZGRSZXNwb25zZSwgcGF5bG9hZDogbW9kZWwgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHVwZGF0ZVJlcXVlc3Q6IChtb2RlbDogSVBlcnNvbk1vZGVsKTogQXBwVGh1bmtBY3Rpb248S25vd25BY3Rpb24+ID0+IGFzeW5jIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5VcGRhdGVSZXF1ZXN0IH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IFBlcnNvblNlcnZpY2UudXBkYXRlKG1vZGVsKTtcclxuICAgICAgICAgICAgaWYgKCFyZXN1bHQuaGFzRXJyb3JzKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvbnMuVXBkYXRlUmVzcG9uc2UsIHBheWxvYWQ6IG1vZGVsIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxldGVSZXF1ZXN0OiAoaWQ6IG51bWJlcik6IEFwcFRodW5rQWN0aW9uPEtub3duQWN0aW9uPiA9PiBhc3luYyAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvbnMuRGVsZXRlUmVxdWVzdCB9KTtcclxuXHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBhd2FpdCBQZXJzb25TZXJ2aWNlLmRlbGV0ZShpZCk7XHJcbiAgICAgICAgICAgIGlmICghcmVzdWx0Lmhhc0Vycm9ycykge1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25zLkRlbGV0ZVJlc3BvbnNlLCBpZCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpbml0aWFsU3RhdGU6IElTdGF0ZSA9IHtcclxuICAgICAgICBwZW9wbGU6IFtdLFxyXG4gICAgICAgIGluZGljYXRvcnM6IHtcclxuICAgICAgICAgICAgb3BlcmF0aW9uTG9hZGluZzogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydCBjb25zdCByZWR1Y2VyOiBSZWR1Y2VyPElTdGF0ZT4gPSAoY3VycmVudFN0YXRlOiBJU3RhdGUsIGluY29taW5nQWN0aW9uOiBBY3Rpb24pID0+IHtcclxuICAgICAgICBjb25zdCBhY3Rpb24gPSBpbmNvbWluZ0FjdGlvbiBhcyBLbm93bkFjdGlvbjtcclxuXHJcbiAgICAgICAgdmFyIGNsb25lSW5kaWNhdG9ycyA9ICgpID0+IGNsb25lKGN1cnJlbnRTdGF0ZS5pbmRpY2F0b3JzKTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvbnMuU2VhcmNoUmVxdWVzdDpcclxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gY2xvbmVJbmRpY2F0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uY3VycmVudFN0YXRlLCBpbmRpY2F0b3JzIH07XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9ucy5TZWFyY2hSZXNwb25zZTpcclxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gY2xvbmVJbmRpY2F0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLmN1cnJlbnRTdGF0ZSwgaW5kaWNhdG9ycywgcGVvcGxlOiBhY3Rpb24ucGF5bG9hZCB9O1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvbnMuVXBkYXRlUmVxdWVzdDpcclxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gY2xvbmVJbmRpY2F0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uY3VycmVudFN0YXRlLCBpbmRpY2F0b3JzIH07XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9ucy5VcGRhdGVSZXNwb25zZTpcclxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gY2xvbmVJbmRpY2F0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gY2xvbmUoY3VycmVudFN0YXRlLnBlb3BsZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlbVRvVXBkYXRlID0gZGF0YS5maWx0ZXIoeCA9PiB4LmlkID09PSBhY3Rpb24ucGF5bG9hZC5pZClbMF07XHJcbiAgICAgICAgICAgICAgICBpdGVtVG9VcGRhdGUuZmlyc3ROYW1lID0gYWN0aW9uLnBheWxvYWQuZmlyc3ROYW1lO1xyXG4gICAgICAgICAgICAgICAgaXRlbVRvVXBkYXRlLmxhc3ROYW1lID0gYWN0aW9uLnBheWxvYWQubGFzdE5hbWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5jdXJyZW50U3RhdGUsIGluZGljYXRvcnMsIHBlb3BsZTogZGF0YSB9O1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvbnMuQWRkUmVxdWVzdDpcclxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gY2xvbmVJbmRpY2F0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uY3VycmVudFN0YXRlLCBpbmRpY2F0b3JzIH07XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9ucy5BZGRSZXNwb25zZTpcclxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gY2xvbmVJbmRpY2F0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gY2xvbmUoY3VycmVudFN0YXRlLnBlb3BsZSk7XHJcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goYWN0aW9uLnBheWxvYWQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uY3VycmVudFN0YXRlLCBpbmRpY2F0b3JzLCBwZW9wbGU6IGRhdGEgfTtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25zLkRlbGV0ZVJlcXVlc3Q6XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9ycyA9IGNsb25lSW5kaWNhdG9ycygpO1xyXG4gICAgICAgICAgICAgICAgaW5kaWNhdG9ycy5vcGVyYXRpb25Mb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLmN1cnJlbnRTdGF0ZSwgaW5kaWNhdG9ycyB9O1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvbnMuRGVsZXRlUmVzcG9uc2U6XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9ycyA9IGNsb25lSW5kaWNhdG9ycygpO1xyXG4gICAgICAgICAgICAgICAgaW5kaWNhdG9ycy5vcGVyYXRpb25Mb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGNsb25lKGN1cnJlbnRTdGF0ZS5wZW9wbGUpLmZpbHRlcih4ID0+IHguaWQgIT09IGFjdGlvbi5pZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5jdXJyZW50U3RhdGUsIGluZGljYXRvcnMsIHBlb3BsZTogZGF0YSB9O1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBsaW5lIGd1YXJhbnRlZXMgdGhhdCBldmVyeSBhY3Rpb24gaW4gdGhlIEtub3duQWN0aW9uIHVuaW9uIGhhcyBiZWVuIGNvdmVyZWQgYnkgYSBjYXNlIGFib3ZlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBleGhhdXN0aXZlQ2hlY2s6IG5ldmVyID0gYWN0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0ZSB8fCBpbml0aWFsU3RhdGU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgTlNlcmlhbGl6ZUpzb24gfSBmcm9tIFwibnNlcmlhbGl6ZWpzb25cIjtcclxuaW1wb3J0IHsgZW1wdHlGb3JtIH0gZnJvbSBcIkBVdGlsc1wiO1xyXG5pbXBvcnQgeyBOVmFsVGlwcHkgfSBmcm9tIFwibnZhbC10aXBweVwiO1xyXG5pbXBvcnQgYmluZCBmcm9tICdiaW5kLWRlY29yYXRvcic7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIFJlYWN0LkRldGFpbGVkSFRNTFByb3BzPFJlYWN0LkZvcm1IVE1MQXR0cmlidXRlczxIVE1MRm9ybUVsZW1lbnQ+LCBIVE1MRm9ybUVsZW1lbnQ+IHtcclxuICAgIGNoaWxkcmVuOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywge30+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB2YWxpZGF0b3I6IE5WYWxUaXBweTtcclxuICAgIHByb3RlY3RlZCBlbEZvcm06IEhUTUxGb3JtRWxlbWVudDtcclxuXHJcbiAgICBAYmluZFxyXG4gICAgcHVibGljIGlzVmFsaWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yLmlzVmFsaWQoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgQGJpbmRcclxuICAgIHB1YmxpYyBlbXB0eUZvcm0oKTogdm9pZCB7XHJcbiAgICAgICAgZW1wdHlGb3JtKHRoaXMuZWxGb3JtKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgQGJpbmRcclxuICAgIHB1YmxpYyBnZXREYXRhPFQ+KCk6IFQge1xyXG4gICAgICAgIHJldHVybiBOU2VyaWFsaXplSnNvbi5zZXJpYWxpemVGb3JtKHRoaXMuZWxGb3JtKSBhcyBhbnkgYXMgVDtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICB0aGlzLnZhbGlkYXRvciA9IG5ldyBOVmFsVGlwcHkodGhpcy5lbEZvcm0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gPGZvcm0gey4uLnRoaXMucHJvcHN9IHJlZj17eCA9PiB0aGlzLmVsRm9ybSA9IHh9Pnt0aGlzLnByb3BzLmNoaWxkcmVufTwvZm9ybT47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBJTG9naW5Nb2RlbCB9IGZyb20gXCJATW9kZWxzL0lMb2dpbk1vZGVsXCI7XHJcbmltcG9ydCBMb2FkZXIgZnJvbSBcIkBDb21wb25lbnRzL3NoYXJlZC9Mb2FkZXJcIjtcclxuaW1wb3J0IHsgQXBwbGljYXRpb25TdGF0ZSB9IGZyb20gXCJAU3RvcmUvaW5kZXhcIjtcclxuaW1wb3J0IHsgTG9naW5TdG9yZSB9IGZyb20gXCJAU3RvcmUvTG9naW5TdG9yZVwiO1xyXG5pbXBvcnQgXCJAU3R5bGVzL21haW4uc2Nzc1wiOztcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IEhlbG1ldCB9IGZyb20gXCJyZWFjdC1oZWxtZXRcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBSZWRpcmVjdCwgUm91dGVDb21wb25lbnRQcm9wcywgd2l0aFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuaW1wb3J0IGJpbmQgZnJvbSAnYmluZC1kZWNvcmF0b3InO1xyXG5pbXBvcnQgeyBGb3JtIH0gZnJvbSBcIkBDb21wb25lbnRzL3NoYXJlZC9Gb3JtXCI7XHJcblxyXG50eXBlIFByb3BzID0gUm91dGVDb21wb25lbnRQcm9wczx7fT4gJiB0eXBlb2YgTG9naW5TdG9yZS5hY3Rpb25DcmVhdG9ycyAmIExvZ2luU3RvcmUuSVN0YXRlO1xyXG5cclxuY2xhc3MgTG9naW5QYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCB7fT4ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICBlbExvYWRlcjogTG9hZGVyO1xyXG4gICAgZWxGb3JtOiBGb3JtO1xyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMucHJvcHMuaW5pdCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmVsTG9hZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxMb2FkZXIuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQGJpbmRcclxuICAgIHByaXZhdGUgYXN5bmMgb25DbGlja1N1Ym1pdEJ0bihlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50Pikge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZiAodGhpcy5lbEZvcm0uaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5lbEZvcm0uZ2V0RGF0YTxJTG9naW5Nb2RlbD4oKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5sb2dpblJlcXVlc3QoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaW5kaWNhdG9ycy5sb2dpblN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz1cIi9cIi8+O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIDxkaXYgaWQ9XCJsb2dpblBhZ2VcIj5cclxuXHJcbiAgICAgICAgICAgIDxIZWxtZXQ+XHJcbiAgICAgICAgICAgICAgICA8dGl0bGU+TG9naW4gcGFnZSAtIEpheWNlZSBHcmlmZml0aDwvdGl0bGU+XHJcbiAgICAgICAgICAgIDwvSGVsbWV0PlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgPExvYWRlciByZWY9e3ggPT4gdGhpcy5lbExvYWRlciA9IHh9IHNob3c9e3RoaXMucHJvcHMuaW5kaWNhdG9ycy5vcGVyYXRpb25Mb2FkaW5nfSAvPlxyXG5cclxuICAgICAgICAgICAgPGRpdiBpZD1cImxvZ2luQ29udGFpbmVyXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5UeXBlIGFueSBsb2dpbiBhbmQgcGFzc3dvcmQgdG8gZW50ZXIuPC9wPlxyXG5cclxuICAgICAgICAgICAgICAgIDxGb3JtIHJlZj17eCA9PiB0aGlzLmVsRm9ybSA9IHh9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImlucHV0TG9naW5cIj5Mb2dpbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9e1wibG9naW5cIn0gZGF0YS12YWx1ZS10eXBlPVwic3RyaW5nXCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJpbnB1dExvZ2luXCIgZGF0YS12YWwtcmVxdWlyZWQ9XCJ0cnVlXCIgZGF0YS1tc2ctcmVxdWlyZWQ9XCJMb2dpbiBpcyByZXF1aXJlZC5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImlucHV0TG9naW5cIj5QYXNzd29yZDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBuYW1lPXtcInBhc3N3b3JkXCJ9IGRhdGEtdmFsdWUtdHlwZT1cInN0cmluZ1wiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIGlkPVwiaW5wdXRQYXNzd29yZFwiIGRhdGEtdmFsLXJlcXVpcmVkPVwidHJ1ZVwiIGRhdGEtbXNnLXJlcXVpcmVkPVwiUGFzc3dvcmQgaXMgcmVxdWlyZWQuXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0taW5saW5lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1zdWNjZXNzXCIgb25DbGljaz17dGhpcy5vbkNsaWNrU3VibWl0QnRufT5TaWduIGluPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L0Zvcm0+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8L2Rpdj47XHJcbiAgICB9XHJcbn1cclxuXHJcbnZhciBjb21wb25lbnQgPSBjb25uZWN0KFxyXG4gICAgKHN0YXRlOiBBcHBsaWNhdGlvblN0YXRlKSA9PiBzdGF0ZS5sb2dpbiwgLy8gU2VsZWN0cyB3aGljaCBzdGF0ZSBwcm9wZXJ0aWVzIGFyZSBtZXJnZWQgaW50byB0aGUgY29tcG9uZW50J3MgcHJvcHNcclxuICAgIExvZ2luU3RvcmUuYWN0aW9uQ3JlYXRvcnMgLy8gU2VsZWN0cyB3aGljaCBhY3Rpb24gY3JlYXRvcnMgYXJlIG1lcmdlZCBpbnRvIHRoZSBjb21wb25lbnQncyBwcm9wc1xyXG4pKExvZ2luUGFnZSBhcyBhbnkpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHdpdGhSb3V0ZXIoY29tcG9uZW50IGFzIGFueSkgYXMgYW55IGFzIHR5cGVvZiBMb2dpblBhZ2UpIiwiaW1wb3J0IHsgUm91dGUsIFJvdXRlUHJvcHMsIFJlZGlyZWN0IH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IEdsb2JhbHMgZnJvbSBcIkBHbG9iYWxzXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIFJvdXRlUHJvcHMge1xyXG4gICAgbGF5b3V0OiBSZWFjdC5Db21wb25lbnRDbGFzczxhbnk+O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQXBwUm91dGUgPSAoeyBjb21wb25lbnQ6IENvbXBvbmVudCwgbGF5b3V0OiBMYXlvdXQsIHBhdGg6IFBhdGgsIC4uLnJlc3QgfTogSVByb3BzKSA9PiB7XHJcblxyXG4gICAgdmFyIGlzQWRtaW5QYXRoID0gUGF0aCA9PT0gXCIvYWRtaW5cIjtcclxuICAgIHZhciBpc0xvZ2luUGF0aCA9IFBhdGggPT09IFwiL2xvZ2luXCI7XHJcbiAgICBpZiAoIUdsb2JhbHMuaXNBdXRoZW50aWNhdGVkICYmIGlzQWRtaW5QYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz1cIi9sb2dpblwiIC8+O1xyXG4gICAgfVxyXG4gICAgaWYgKEdsb2JhbHMuaXNBdXRoZW50aWNhdGVkICYmIGlzTG9naW5QYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz1cIi9cIiAvPjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gPFJvdXRlIHsuLi5yZXN0fSByZW5kZXI9e3Byb3BzID0+IChcclxuICAgICAgICA8TGF5b3V0PlxyXG4gICAgICAgICAgICA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz5cclxuICAgICAgICA8L0xheW91dD5cclxuICAgICl9IC8+O1xyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFJvdXRlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XHJcbmltcG9ydCB7IE5hdkxpbmssIFJlZGlyZWN0IH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHsgSGVsbWV0IH0gZnJvbSBcInJlYWN0LWhlbG1ldFwiO1xyXG5pbXBvcnQgR2xvYmFscyBmcm9tIFwiQEdsb2JhbHNcIjtcclxuXHJcbnR5cGUgUHJvcHMgPSBSb3V0ZUNvbXBvbmVudFByb3BzPHt9PjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWVQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCB7fT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICAgICAgICA8SGVsbWV0PlxyXG4gICAgICAgICAgICAgICAgPHRpdGxlPkpheWNlZSBHcmlmZml0aCAtIEhvbWU8L3RpdGxlPlxyXG4gICAgICAgICAgICA8L0hlbG1ldD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJqdW1ib3Ryb24gcC0zIHAtbWQtNSByb3VuZGVkIGJnLXdoaXRlXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vYmlsZS1vbmx5LWNvbnRlbnQgY29sLW1kLTYgcHgtMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJkaXNwbGF5LTQgZm9udC1pdGFsaWNcIj5XZWxjb21lIHRvIG15IFdlYjxkZWw+c2l0ZTwvZGVsPiBnYW1lLjwvaDE+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibGVhZCBteS0zXCI+TmF2aWdhdGUgYnkgPGI+dGlsdGluZzwvYj4geW91ciBkZXZpY2U8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibGVhZCBtYi0wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPk1ha2Ugc3VyZSB0byBjaGVjayBvdXQgbXkgPGEgaHJlZj1cImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9vcGVuP2lkPTF4X0owS0RfVU4yOHdJT3pPZHpPcHJyNFBwY1lIaDIyeFwiIHRhcmdldD1cIl9ibGFua1wiPlJlc3VtZTwvYT4uPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZXNrdG9wLW9ubHktY29udGVudCBjb2wtbWQtNiBweC0wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImRpc3BsYXktNCBmb250LWl0YWxpY1wiPldlbGNvbWUgdG8gbXkgV2ViPGRlbD5zaXRlPC9kZWw+IGdhbWUuPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsZWFkIG15LTNcIj5OYXZpZ2F0ZSB3aXRoIDxiPndhc2Q8L2I+IG9yIHRoZSA8Yj5hcnJvdyBrZXlzPC9iPjwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsZWFkIG15LTNcIj5KdW1wIHdpdGggPGI+c3BhY2U8L2I+PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImxlYWQgbWItMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Ub28gc2xvdz8gSG9sZCA8Yj5zaGlmdDwvYj4uPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsZWFkIG1iLTBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+TWFrZSBzdXJlIHRvIGNoZWNrIG91dCBteSA8YSBocmVmPVwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL29wZW4/aWQ9MXhfSjBLRF9VTjI4d0lPek9kek9wcnI0UHBjWUhoMjJ4XCIgdGFyZ2V0PVwiX2JsYW5rXCI+UmVzdW1lPC9hPi48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuaW1wb3J0IHsgSGVsbWV0IH0gZnJvbSBcInJlYWN0LWhlbG1ldFwiO1xyXG5pbXBvcnQgeyB3aXRoUm91dGVyLCBOYXZMaW5rLCBSZWRpcmVjdCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xyXG52YXIgQ2Fyb3VzZWwgPSByZXF1aXJlKCdyZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsJykuQ2Fyb3VzZWw7XHJcbmltcG9ydCBraXR0ZW5mYWNlIGZyb20gXCJASW1hZ2VzL2tpdHRlbmZhY2UuanBnXCI7XHJcbmltcG9ydCBraXR0ZW5mdWxsIGZyb20gXCJASW1hZ2VzL2tpdHRlbmZ1bGwuanBnXCI7XHJcbmltcG9ydCBuaWNjb2xvIGZyb20gXCJASW1hZ2VzL25pY2NvbG8uanBnXCI7XHJcbmltcG9ydCBib3kgZnJvbSBcIkBJbWFnZXMvYm95LmpwZ1wiO1xyXG5pbXBvcnQgZ29vYmEgZnJvbSBcIkBJbWFnZXMvZ29vYmEuanBnXCI7XHJcbmltcG9ydCBzd2F0dHJhaW5lciBmcm9tIFwiQEltYWdlcy9zd2F0dHJhaW5lci5qcGdcIjtcclxuaW1wb3J0IHplbGRhIGZyb20gXCJASW1hZ2VzL3plbGRhLmpwZ1wiO1xyXG5pbXBvcnQgR2xvYmFscyBmcm9tIFwiQEdsb2JhbHNcIjtcclxuaW1wb3J0IFlvdVR1YmUgZnJvbSBcInJlYWN0LXlvdXR1YmVcIjtcclxuXHJcblxyXG50eXBlIFByb3BzID0gUm91dGVDb21wb25lbnRQcm9wczx7fT47XHJcblxyXG5jbGFzcyBQb3J0Zm9saW9QYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCB7fT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICAgICAgICA8SGVsbWV0PlxyXG4gICAgICAgICAgICAgICAgPHRpdGxlPkpheWNlZSBHcmlmZml0aCAtIFBvcnRmb2xpbzwvdGl0bGU+XHJcbiAgICAgICAgICAgIDwvSGVsbWV0PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIGxlYWQgbWItMCBtdC01XCI+XHJcbiAgICAgICAgICAgICAgICA8aDI+TWFrZSBzdXJlIHRvIGNoZWNrIG91dCBteSA8YSBocmVmPVwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL29wZW4/aWQ9MXhfSjBLRF9VTjI4d0lPek9kek9wcnI0UHBjWUhoMjJ4XCIgdGFyZ2V0PVwiX2JsYW5rXCI+UmVzdW1lPC9hPi48L2gyPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxDYXJvdXNlbCBjbGFzc05hbWU9XCJjb2wtbWRcIiBzaG93QXJyb3dzPXt0cnVlfSBzaG93VGh1bWJzPXtmYWxzZX0gaW5maW5pdGVMb29wPXt0cnVlfSBzd2lwZWFibGU9e2ZhbHNlfT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17a2l0dGVuZnVsbH0gY2xhc3NOYW1lPVwidy01MCBkZXNrdG9wLW9ubHktY29udGVudC1pbmxpbmVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17a2l0dGVuZnVsbH0gY2xhc3NOYW1lPVwidy03NSBtb2JpbGUtb25seS1jb250ZW50LWlubGluZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImxlZ2VuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q2luZW1hIDREIEtpdHRlbiBGdWxseSBSaWdnZWQgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RmVlbCBmcmVlIHRvIGRvd25sb2FkIHRoZSBraXR0ZW4gfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL29wZW4/aWQ9MXc1NmN0bVdTZ1BEaFJCN2ZLWS12LXdhRnpCUEltalp5XCIgdGFyZ2V0PVwiX2JsYW5rXCI+S2l0dGVuIFJlZF9GaW5hbC56aXA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17a2l0dGVuZmFjZX0gY2xhc3NOYW1lPVwidy01MCBkZXNrdG9wLW9ubHktY29udGVudC1pbmxpbmVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17a2l0dGVuZmFjZX0gY2xhc3NOYW1lPVwidy01MCBtb2JpbGUtb25seS1jb250ZW50LWlubGluZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImxlZ2VuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q2luZW1hIDREIEtpdHRlbiBGdWxseSBSaWdnZWQgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RmVlbCBmcmVlIHRvIGRvd25sb2FkIHRoZSBraXR0ZW4gfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL29wZW4/aWQ9MXc1NmN0bVdTZ1BEaFJCN2ZLWS12LXdhRnpCUEltalp5XCIgdGFyZ2V0PVwiX2JsYW5rXCI+S2l0dGVuIFJlZF9GaW5hbC56aXA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17Z29vYmF9IGNsYXNzTmFtZT1cInctNTAgZGVza3RvcC1vbmx5LWNvbnRlbnQtaW5saW5lXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2dvb2JhfSBjbGFzc05hbWU9XCJ3LTUwIG1vYmlsZS1vbmx5LWNvbnRlbnQtaW5saW5lXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibGVnZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Eb3dubG9hZCBhbmQgcGxheSBMaWZlIG9mIEdvb2JhIHwgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vamdyaWZmaXRoMzQzMy5pdGNoLmlvL2xpZmVvZmdvb2JhXCIgdGFyZ2V0PVwiX2JsYW5rXCI+SXRjaC5pbyBnYW1lIHBhZ2U8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17bmljY29sb30gY2xhc3NOYW1lPVwidy01MCBkZXNrdG9wLW9ubHktY29udGVudC1pbmxpbmVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17bmljY29sb30gY2xhc3NOYW1lPVwidy01MCBtb2JpbGUtb25seS1jb250ZW50LWlubGluZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImxlZ2VuZFwiPkxvdyBQb2x5IENoYXJhY3RlciBNb2RlbGluZzwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17Ym95fSBjbGFzc05hbWU9XCJ3LTUwIGRlc2t0b3Atb25seS1jb250ZW50LWlubGluZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtib3l9IGNsYXNzTmFtZT1cInctNTAgbW9iaWxlLW9ubHktY29udGVudC1pbmxpbmVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsZWdlbmRcIj4zZHMgTWF4IFNtaWxpbmcgQm95PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyo8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFlvdVR1YmUgdmlkZW9JZD1cImoyalhENDZCNFZ3XCIgY2xhc3NOYW1lPVwidy03NSBoLTUwIG10LTVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibGVnZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+VG8gcGxheSB0aGUgU3BhY2UgU2hvb3RlciBHYW1lLCBkb3dubG9hZCBhbmQgZXh0cmFjdCB0aGUgemlwIGZpbGUuIFRoZW4gdXNlIGludGVybmV0IGV4cGxvcmVyIGFuZCBkb3dubG9hZCB0aGUgd2ViIHBsYXllciwgZG9uJ3Qgd29ycnkgaXQncyBzYWZlIGFuZCBjb21lcyBkaXJlY3RseSBmcm9tIFVuaXR5M2QuY29tIHwgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vb3Blbj9pZD0xWTJVd2tBX3BBQ1JpRHQyT0NUSDM4dVJmd2JNXzFBWldcIiB0YXJnZXQ9XCJfYmxhbmtcIj5zcGFjZXNob290ZXIuemlwPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxZb3VUdWJlIHZpZGVvSWQ9XCJuczlzTTQySVAtSVwiIGNsYXNzTmFtZT1cInctNzUgaC01MCBtdC01XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImxlZ2VuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlRvIHBsYXkgdGhlIEhvb3AgSm9uZXMgR2FtZSwgZG93bmxvYWQgYW5kIGV4dHJhY3QgdGhlIHppcCBmaWxlLiBUaGVuIHVzZSBpbnRlcm5ldCBleHBsb3JlciBhbmQgZG93bmxvYWQgdGhlIHdlYiBwbGF5ZXIsIGRvbid0IHdvcnJ5IGl0J3Mgc2FmZSBhbmQgY29tZXMgZGlyZWN0bHkgZnJvbSBVbml0eTNkLmNvbSB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL29wZW4/aWQ9MWh5Um91eERKWnVmaHZGSzZ0VUx5VWFxSlZyY1Rucmt3XCIgdGFyZ2V0PVwiX2JsYW5rXCI+aG9vcGpvbmVzLnppcDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+Ki9cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3N3YXR0cmFpbmVyfSBjbGFzc05hbWU9XCJ3LTUwIGRlc2t0b3Atb25seS1jb250ZW50LWlubGluZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtzd2F0dHJhaW5lcn0gY2xhc3NOYW1lPVwidy01MCBtb2JpbGUtb25seS1jb250ZW50LWlubGluZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImxlZ2VuZFwiPlVESyB0cmFpbmluZyBzaW11bGF0aW9uPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt6ZWxkYX0gY2xhc3NOYW1lPVwidy01MCBkZXNrdG9wLW9ubHktY29udGVudC1pbmxpbmVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17emVsZGF9IGNsYXNzTmFtZT1cInctNTAgbW9iaWxlLW9ubHktY29udGVudC1pbmxpbmVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsZWdlbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlplbGRhLXN0eWxlIGNhbWVyYSB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkZlZWwgZnJlZSB0byBkb3dubG9hZCB0aGUgcHJvamVjdCB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vb3Blbj9pZD0xUmNXQTIteTJtQkdoZzNRWW9ibU5hb3ZyWWYzRjRUTm5cIiB0YXJnZXQ9XCJfYmxhbmtcIj56ZWxkYS56aXA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcihQb3J0Zm9saW9QYWdlKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuaW1wb3J0IHsgSGVsbWV0IH0gZnJvbSBcInJlYWN0LWhlbG1ldFwiO1xyXG5pbXBvcnQgeyBOYXZMaW5rLCBSZWRpcmVjdCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBTdGFyV2Fyc0Jvb2tzSW1hZ2UgZnJvbSBcIkBJbWFnZXMvc3RhcndhcnNib29rcy5qcGdcIjtcclxuXHJcbnR5cGUgUHJvcHMgPSBSb3V0ZUNvbXBvbmVudFByb3BzPHt9PjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWRpbmdQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCB7fT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICAgICAgICA8SGVsbWV0PlxyXG4gICAgICAgICAgICAgICAgPHRpdGxlPkpheWNlZSBHcmlmZml0aCAtIFJlYWRpbmc8L3RpdGxlPlxyXG4gICAgICAgICAgICA8L0hlbG1ldD5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8aDI+SSBsb3ZlIHRoZSBzdGFyIHdhcnMgYm9va3M8L2gyPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgPHA+VGhleSBhcmUgZXZlbiBiZXR0ZXIgdGhhbiB0aGUgbW92aWVzIGFuZCB5b3UgY2FuIHJlYWQgdGhlbSBjaHJvbm9sb2dpY2FsbHk8L3A+XHJcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz17U3RhcldhcnNCb29rc0ltYWdlfSBhbHQ9XCJTdGFyIFdhcnMgQm9va3NcIiBjbGFzc05hbWU9XCJpbWctZmx1aWRcIiAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGgzPlNvbWV0aGluZywgc29tZXRoaW5nLCBzb21ldGhpbmcuLi4gQ29tcGxldGUuPC9oMz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxhIGhyZWY9XCJodHRwczovL3d3dy5hbWF6b24uY29tL2RwL0IwMEpOOEgyVEMvcmVmPWNtX3N3X2VtX3JfbXRfZHBfVV9NVTF1Q2JGOUZDQlNaXCIgdGFyZ2V0PVwiX2JsYW5rXCI+SW50byB0aGUgVm9pZDogU3RhciBXYXJzIChEYXduIG9mIHRoZSBKZWRpKTwvYT48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q29tcGxldGVkPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48YSBocmVmPVwiaHR0cHM6Ly93d3cuYW1hem9uLmNvbS9kcC8wMzQ1NTQxMzI0L3JlZj1jbV9zd19lbV9yX210X2RwX1VfQzQxdUNiOUZIUTRCSFwiIHRhcmdldD1cIl9ibGFua1wiPlN0YXIgV2FyczogTG9zdCBUcmliZSBvZiB0aGUgU2l0aCAtIFRoZSBDb2xsZWN0ZWQgU3RvcmllcyAoU3RhciBXYXJzOiBMb3N0IFRyaWJlIG9mIHRoZSBTaXRoIC0gTGVnZW5kcyk8L2E+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNvbXBsZXRlZDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGEgaHJlZj1cImh0dHBzOi8vd3d3LmFtYXpvbi5jb20vZHAvMDM0NTUxMTM1Mi9yZWY9Y21fc3dfZW1fcl9tdF9kcF9VX2s1MXVDYkRCQ1Y5UFJcIiB0YXJnZXQ9XCJfYmxhbmtcIj5TdGFyIFdhcnM6IFRoZSBPbGQgUmVwdWJsaWMgLSBSZXZhbiAoU3RhciBXYXJzOiBUaGUgT2xkIFJlcHVibGljIC0gTGVnZW5kcyk8L2E+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNvbXBsZXRlZDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGEgaHJlZj1cImh0dHBzOi8vd3d3LmFtYXpvbi5jb20vZHAvMDM0NTUxMTM5NS9yZWY9Y21fc3dfZW1fcl9tdF9kcF9VX1A1MXVDYlBBNkJQRTdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5TdGFyIFdhcnM6IFRoZSBPbGQgUmVwdWJsaWMgLSBEZWNlaXZlZCAoU3RhciBXYXJzOiBUaGUgT2xkIFJlcHVibGljIC0gTGVnZW5kcyk8L2E+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNvbXBsZXRlZDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGEgaHJlZj1cImh0dHBzOi8vd3d3LmFtYXpvbi5jb20vZHAvMDM0NTUxODU5NC9yZWY9Y21fc3dfZW1fcl9tdF9kcF9VX0E2MXVDYk5TUkJTRlRcIiB0YXJnZXQ9XCJfYmxhbmtcIj5TdGFyIFdhcnM6IFJlZCBIYXJ2ZXN0PC9hPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IHwgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Db21wbGV0ZWQ8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxhIGhyZWY9XCJodHRwczovL3d3dy5hbWF6b24uY29tL2RwLzAzNDU1MTEzMzYvcmVmPWNtX3N3X2VtX3JfbXRfZHBfVV9zNzF1Q2IzVDY2M1JIXCIgdGFyZ2V0PVwiX2JsYW5rXCI+RmF0YWwgQWxsaWFuY2UgKFN0YXIgV2FyczogVGhlIE9sZCBSZXB1YmxpYykgKFN0YXIgV2FyczogVGhlIE9sZCBSZXB1YmxpYyAtIExlZ2VuZHMpPC9hPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IHwgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Db21wbGV0ZWQ8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxhIGhyZWY9XCJodHRwczovL3d3dy5hbWF6b24uY29tL2RwLzAzNDU1Mjk0MjEvcmVmPWNtX3N3X2VtX3JfbXRfZHBfVV9aNzF1Q2JXMEMxOTdKXCIgdGFyZ2V0PVwiX2JsYW5rXCI+QW5uaWhpbGF0aW9uOiBTdGFyIFdhcnMgTGVnZW5kcyAoVGhlIE9sZCBSZXB1YmxpYykgKFN0YXIgV2FyczogVGhlIE9sZCBSZXB1YmxpYyAtIExlZ2VuZHMpPC9hPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IHwgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Db21wbGV0ZWQ8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxhIGhyZWY9XCJodHRwczovL3d3dy5hbWF6b24uY29tL2RwLzAzNDU1MjI2NDgvcmVmPWNtX3N3X2VtX3JfbXRfZHBfVV9xODF1Q2JLSzBURDE4XCIgdGFyZ2V0PVwiX2JsYW5rXCI+U3RhciBXYXJzOiBLbmlnaHQgRXJyYW50PC9hPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IHwgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Db21wbGV0ZWQ8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxhIGhyZWY9XCJodHRwczovL3d3dy5hbWF6b24uY29tL2RwLzAzNDU0NzczNzUvcmVmPWNtX3N3X2VtX3JfbXRfZHBfVV9zOTF1Q2JSWEQ0Rkc5XCIgdGFyZ2V0PVwiX2JsYW5rXCI+UGF0aCBvZiBEZXN0cnVjdGlvbiAoU3RhciBXYXJzOiBEYXJ0aCBCYW5lLCBCb29rIDEpPC9hPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IHwgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DdXJyZW50bHkgUmVhZGluZzwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGEgaHJlZj1cImh0dHBzOi8vd3d3LmFtYXpvbi5jb20vZHAvMDM0NTQ3NzQ5OS9yZWY9Y21fc3dfZW1fcl9tdF9kcF9VX3U5MXVDYjU5MzBSWUZcIiB0YXJnZXQ9XCJfYmxhbmtcIj5SdWxlIG9mIFR3byAoU3RhciBXYXJzOiBEYXJ0aCBCYW5lLCBCb29rIDIpPC9hPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IHwgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5RdWV1ZWQ8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxhIGhyZWY9XCJodHRwczovL3d3dy5hbWF6b24uY29tL2RwLzAzNDU1MTE1NzMvcmVmPWNtX3N3X2VtX3JfbXRfZHBfVV9xOTF1Q2I3ODZSQk5TXCIgdGFyZ2V0PVwiX2JsYW5rXCI+RHluYXN0eSBvZiBFdmlsIChTdGFyIFdhcnM6IERhcnRoIEJhbmUsIEJvb2sgMyk8L2E+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlF1ZXVlZDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICA8L2Rpdj47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuaW1wb3J0IHsgTmF2TGluaywgUmVkaXJlY3QgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tIFwicmVhY3QtaGVsbWV0XCI7XHJcbmltcG9ydCBHbG9iYWxzIGZyb20gXCJAR2xvYmFsc1wiO1xyXG5pbXBvcnQgcHJvZmlsZXBpYyBmcm9tIFwiQEltYWdlcy9wcm9maWxlcGljLmpwZ1wiO1xyXG5pbXBvcnQgWW91VHViZSBmcm9tIFwicmVhY3QteW91dHViZVwiO1xyXG5cclxudHlwZSBQcm9wcyA9IFJvdXRlQ29tcG9uZW50UHJvcHM8e30+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWJvdXRNZVBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIHt9PiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgICAgICAgIDxIZWxtZXQ+XHJcbiAgICAgICAgICAgICAgICA8dGl0bGU+SmF5Y2VlIEdyaWZmaXRoIC0gQWJvdXQgTWU8L3RpdGxlPlxyXG4gICAgICAgICAgICA8L0hlbG1ldD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC01XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLW1kLTRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3Byb2ZpbGVwaWN9IGNsYXNzTmFtZT1cInctMTAwXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1tZC04XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJkaXNwbGF5LTQgZm9udC1pdGFsaWNcIj5JIGVuam95IGNvbXB1dGVycywgcmVhZGluZywgbWFraW5nIHZpZG9lcyBhbmQgbXVzaWMuPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cImxlYWQgbXktM1wiPkkgaGF2ZSBsaXZlZCBpbiA8Yj5Pa2xhaG9tIENpdHksIE9LPC9iPiBhbmQgPGI+QWxidXF1ZXJxdWUsIE5NPC9iPi4gSSBjdXJyZW50bHkgbGl2ZSBpbiA8Yj5SZW5vLCBOVjwvYj4uPC9oMj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLW1kLTEyIHRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5WaWRlbyBvZiBtZSBncm93aW5nIHVwPC9oMj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFlvdVR1YmUgdmlkZW9JZD1cIjZCZ1lNVFpWd2lNXCIgb3B0cz17eyBoZWlnaHQ6ICczOTAnLCB3aWR0aDogJzY0MCcgfX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PiovXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLW1kLTEyIHRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVhZCBtdC01XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxiPkV4dGVybmFsIHByb2ZpbGUgbGlua3M8L2I+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2pncmlmZml0aDM0MzNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5HaXRodWI8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9qZ3JpZmZpdGgzNDMzLml0Y2guaW8vbGlmZW9mZ29vYmFcIiB0YXJnZXQ9XCJfYmxhbmtcIj5JdGNoLmlvPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmtpY2tzdGFydGVyLmNvbS9wcm9maWxlL2pncmlmZml0aDM0MzNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5LaWNrc3RhcnRlcjwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vamF5Y2VlLWdyaWZmaXRoLTc2MGJiNzExNi9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rZWRJbjwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3NvdW5kY2xvdWQuY29tL2phY29ic2dyaWZmaXRoXCIgdGFyZ2V0PVwiX2JsYW5rXCI+U291bmQgQ2xvdWQ8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS91c2Vycy85NDE2MzIvamFjb2JzZ3JpZmZpdGhcIiB0YXJnZXQ9XCJfYmxhbmtcIj5TdGFjayBPdmVyZmxvdzwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3RyZWxsby5jb20vamF5Y2VlZ3JpZmZpdGhcIiB0YXJnZXQ9XCJfYmxhbmtcIj5UcmVsbG88L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PjtcclxuICAgIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tIFwicmVhY3QtaGVsbWV0XCI7XHJcbmltcG9ydCB7IE5hdkxpbmssIFJlZGlyZWN0IH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IFN0YXJXYXJzQm9va3NJbWFnZSBmcm9tIFwiQEltYWdlcy9zdGFyd2Fyc2Jvb2tzLmpwZ1wiO1xyXG5cclxudHlwZSBQcm9wcyA9IFJvdXRlQ29tcG9uZW50UHJvcHM8e30+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVzaWNQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCB7fT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICAgICAgICA8SGVsbWV0PlxyXG4gICAgICAgICAgICAgICAgPHRpdGxlPkpheWNlZSBHcmlmZml0aCAtIE11c2ljPC90aXRsZT5cclxuICAgICAgICAgICAgPC9IZWxtZXQ+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGgyPkxpc3RlbiB0byBzb21lIG9mIG15IHNvdW5kczwvaDI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8aWZyYW1lIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjMwMFwiIHNjcm9sbGluZz1cIm5vXCIgZnJhbWVCb3JkZXI9XCJub1wiIGFsbG93PVwiYXV0b3BsYXlcIiBzcmM9XCJodHRwczovL3cuc291bmRjbG91ZC5jb20vcGxheWVyLz91cmw9aHR0cHMlM0EvL2FwaS5zb3VuZGNsb3VkLmNvbS91c2Vycy80NzU0NzMwMyZjb2xvcj0lMjNmZjU1MDAmYXV0b19wbGF5PWZhbHNlJmhpZGVfcmVsYXRlZD1mYWxzZSZzaG93X2NvbW1lbnRzPXRydWUmc2hvd191c2VyPXRydWUmc2hvd19yZXBvc3RzPWZhbHNlJnNob3dfdGVhc2VyPXRydWUmdmlzdWFsPXRydWVcIj48L2lmcmFtZT5cclxuICAgICAgICA8L2Rpdj47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTZXJ2aWNlQmFzZSB9IGZyb20gXCJAU2VydmljZXMvU2VydmljZUJhc2VcIjtcclxuaW1wb3J0IFJlc3VsdCBmcm9tIFwiQE1vZGVscy9SZXN1bHRcIjtcclxuaW1wb3J0IHsgSVBlcnNvbk1vZGVsIH0gZnJvbSBcIkBNb2RlbHMvSVBlcnNvbk1vZGVsXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJzb25TZXJ2aWNlIGV4dGVuZHMgU2VydmljZUJhc2Uge1xyXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBzZWFyY2godGVybTogc3RyaW5nID0gbnVsbCk6IFByb21pc2U8UmVzdWx0PElQZXJzb25Nb2RlbFtdPj4ge1xyXG4gICAgICAgIGlmICh0ZXJtID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGVybSA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBhd2FpdCB0aGlzLnJlcXVlc3RKc29uPElQZXJzb25Nb2RlbFtdPih7XHJcbiAgICAgICAgICAgIHVybDogYC9hcGkvUGVyc29uL1NlYXJjaD90ZXJtPSR7dGVybX1gLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCJcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyB1cGRhdGUobW9kZWw6IElQZXJzb25Nb2RlbCk6IFByb21pc2U8UmVzdWx0PHt9Pj4ge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBhd2FpdCB0aGlzLnJlcXVlc3RKc29uKHtcclxuICAgICAgICAgICAgdXJsOiBcIi9hcGkvUGVyc29uXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBtb2RlbFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGRlbGV0ZShpZDogbnVtYmVyKTogUHJvbWlzZTxSZXN1bHQ8e30+PiB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IHRoaXMucmVxdWVzdEpzb24oe1xyXG4gICAgICAgICAgICB1cmw6IGAvYXBpL1BlcnNvbi8ke2lkfWAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJERUxFVEVcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGFkZChtb2RlbDogSVBlcnNvbk1vZGVsKTogUHJvbWlzZTxSZXN1bHQ8bnVtYmVyPj4ge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBhd2FpdCB0aGlzLnJlcXVlc3RKc29uPG51bWJlcj4oe1xyXG4gICAgICAgICAgICB1cmw6IFwiL2FwaS9QZXJzb24vQWRkXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IG1vZGVsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufSIsImltcG9ydCBQYWdpbmF0aW9uLCB7IFBhZ2luYXRpb25Qcm9wcyB9IGZyb20gXCJyZWFjdC1wYWdpbmF0aW5nXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgYmluZCBmcm9tICdiaW5kLWRlY29yYXRvcic7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wcyB7XHJcbiAgICB0b3RhbFJlc3VsdHM6IG51bWJlcjtcclxuICAgIGxpbWl0UGVyUGFnZTogbnVtYmVyO1xyXG4gICAgY3VycmVudFBhZ2U6IG51bWJlcjtcclxuICAgIG9uQ2hhbmdlUGFnZTogKHBhZ2VOdW06IG51bWJlcikgPT4gdm9pZDtcclxufVxyXG5cclxuLyogQmVsb3cgY29kZSBvZiB0aGUgJ1BhZ2luYXRpb24nIGNvbXBvbmVudCB3YXMgdGFrZW4gXHJcbmZyb20gdGhlIGh0dHBzOi8vZ2l0aHViLmNvbS9DaG9Ub3RPU1MvcmVhY3QtcGFnaW5hdGluZyBcclxuYW5kIHJlbWFrZWQgZm9yIHRoZSBCb290c3RyYXAgc3R5bGUuICovXHJcblxyXG5leHBvcnQgY2xhc3MgUGFnaW5nQmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywge30+IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZWxGaXJzdFBhZ2VCdG46IEhUTUxFbGVtZW50O1xyXG4gICAgcHJvdGVjdGVkIGVsTGFzdFBhZ2VCdG46IEhUTUxFbGVtZW50O1xyXG5cclxuICAgIEBiaW5kXHJcbiAgICBwdWJsaWMgc2V0Rmlyc3RQYWdlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZWxGaXJzdFBhZ2VCdG4uY2xpY2soKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgQGJpbmRcclxuICAgIHB1YmxpYyBzZXRMYXN0UGFnZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVsTGFzdFBhZ2VCdG4uY2xpY2soKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIDxQYWdpbmF0aW9uXHJcbiAgICAgICAgICAgIHRvdGFsPXt0aGlzLnByb3BzLnRvdGFsUmVzdWx0c31cclxuICAgICAgICAgICAgbGltaXQ9e3RoaXMucHJvcHMubGltaXRQZXJQYWdlfVxyXG4gICAgICAgICAgICBjdXJyZW50UGFnZT17dGhpcy5wcm9wcy5jdXJyZW50UGFnZX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIHsoe1xyXG4gICAgICAgICAgICAgICAgcGFnZXMsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZSxcclxuICAgICAgICAgICAgICAgIGhhc05leHRQYWdlLFxyXG4gICAgICAgICAgICAgICAgaGFzUHJldmlvdXNQYWdlLFxyXG4gICAgICAgICAgICAgICAgcHJldmlvdXNQYWdlLFxyXG4gICAgICAgICAgICAgICAgbmV4dFBhZ2UsXHJcbiAgICAgICAgICAgICAgICB0b3RhbFBhZ2VzLFxyXG4gICAgICAgICAgICAgICAgZ2V0UGFnZUl0ZW1Qcm9wc1xyXG4gICAgICAgICAgICB9KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInBhZ2luYXRpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLmdldFBhZ2VJdGVtUHJvcHMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlVmFsdWU6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUGFnZUNoYW5nZTogdGhpcy5wcm9wcy5vbkNoYW5nZVBhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e3ggPT4gdGhpcy5lbEZpcnN0UGFnZUJ0biA9IHh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RcclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtoYXNQcmV2aW91c1BhZ2UgJiYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4uZ2V0UGFnZUl0ZW1Qcm9wcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlVmFsdWU6IHByZXZpb3VzUGFnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUGFnZUNoYW5nZTogdGhpcy5wcm9wcy5vbkNoYW5nZVBhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JzwnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cGFnZXMubWFwKHBhZ2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtwYWdlfSBjbGFzc05hbWU9e3BhZ2UgPT09IGN1cnJlbnRQYWdlID8gJ2FjdGl2ZScgOiAnJ30+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4uZ2V0UGFnZUl0ZW1Qcm9wcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVZhbHVlOiBwYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUGFnZUNoYW5nZTogdGhpcy5wcm9wcy5vbkNoYW5nZVBhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cGFnZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtoYXNOZXh0UGFnZSAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLmdldFBhZ2VJdGVtUHJvcHMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVZhbHVlOiBuZXh0UGFnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUGFnZUNoYW5nZTogdGhpcy5wcm9wcy5vbkNoYW5nZVBhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Jz4nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5nZXRQYWdlSXRlbVByb3BzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVZhbHVlOiB0b3RhbFBhZ2VzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblBhZ2VDaGFuZ2U6IHRoaXMucHJvcHMub25DaGFuZ2VQYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXt4ID0+IHRoaXMuZWxMYXN0UGFnZUJ0biA9IHh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgPC9QYWdpbmF0aW9uPlxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgSVBlcnNvbk1vZGVsIH0gZnJvbSBcIkBNb2RlbHMvSVBlcnNvbk1vZGVsXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgYmluZCBmcm9tICdiaW5kLWRlY29yYXRvcic7XHJcbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwiQENvbXBvbmVudHMvc2hhcmVkL0Zvcm1cIjtcclxuaW1wb3J0IHsgRm9ybWlrIH0gZnJvbSAnZm9ybWlrJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BzIHtcclxuICAgIGRhdGE6IElQZXJzb25Nb2RlbDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVyc29uRWRpdG9yIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywge30+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbEZvcm06IEZvcm07XHJcblxyXG4gICAgQGJpbmRcclxuICAgIHB1YmxpYyBlbXB0eUZvcm0oKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZWxGb3JtKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxGb3JtLmVtcHR5Rm9ybSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIHJldHVybiA8Rm9ybWlrXHJcbiAgICAgICAgICAgIGVuYWJsZVJlaW5pdGlhbGl6ZT17dHJ1ZX1cclxuICAgICAgICAgICAgaW5pdGlhbFZhbHVlcz17e1xyXG4gICAgICAgICAgICAgICAgZmlyc3ROYW1lOiB0aGlzLnByb3BzLmRhdGEuZmlyc3ROYW1lIHx8ICcnLFxyXG4gICAgICAgICAgICAgICAgbGFzdE5hbWU6IHRoaXMucHJvcHMuZGF0YS5sYXN0TmFtZSB8fCAnJ1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICBvblN1Ym1pdD17KHZhbHVlcywgeyBzZXRTdWJtaXR0aW5nIH0pID0+IHtcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIHsoe1xyXG4gICAgICAgICAgICAgICAgdmFsdWVzLFxyXG4gICAgICAgICAgICAgICAgZXJyb3JzLFxyXG4gICAgICAgICAgICAgICAgdG91Y2hlZCxcclxuICAgICAgICAgICAgICAgIGhhbmRsZUNoYW5nZSxcclxuICAgICAgICAgICAgICAgIGhhbmRsZUJsdXIsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVTdWJtaXQsXHJcbiAgICAgICAgICAgICAgICBpc1N1Ym1pdHRpbmcsXHJcbiAgICAgICAgICAgICAgICAvKiBhbmQgb3RoZXIgZ29vZGllcyAqL1xyXG4gICAgICAgICAgICB9KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPEZvcm0gY2xhc3NOYW1lPVwiZm9ybVwiIHJlZj17eCA9PiB0aGlzLmVsRm9ybSA9IHh9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJpZFwiIGRlZmF1bHRWYWx1ZT17KHRoaXMucHJvcHMuZGF0YS5pZCB8fCAwKS50b1N0cmluZygpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJjb250cm9sLWxhYmVsIHJlcXVpcmVkXCIgaHRtbEZvcj1cInBlcnNvbl9fZmlyc3ROYW1lXCI+Rmlyc3QgbmFtZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cInBlcnNvbl9fZmlyc3ROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtcImZpcnN0TmFtZVwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWUtdHlwZT1cInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWwtcmVxdWlyZWQ9XCJ0cnVlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1zZy1yZXF1aXJlZD1cIkZpcnN0IG5hbWUgaXMgcmVxdWlyZWQuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLmZpcnN0TmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17aGFuZGxlQmx1cn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJjb250cm9sLWxhYmVsIHJlcXVpcmVkXCIgaHRtbEZvcj1cInBlcnNvbl9fbGFzdE5hbWVcIj5MYXN0IG5hbWU8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJwZXJzb25fX2xhc3ROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtcImxhc3ROYW1lXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZS10eXBlPVwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbC1yZXF1aXJlZD1cInRydWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbXNnLXJlcXVpcmVkPVwiTGFzdCBuYW1lIGlzIHJlcXVpcmVkLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlcy5sYXN0TmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17aGFuZGxlQmx1cn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvRm9ybT4pfVxyXG4gICAgICAgIDwvRm9ybWlrPjtcclxuICAgIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBNb2RhbCB9IGZyb20gXCJib290c3RyYXAzLW5hdGl2ZVwiO1xyXG5pbXBvcnQgYmluZCBmcm9tICdiaW5kLWRlY29yYXRvcic7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wcyB7XHJcbiAgICB0aXRsZTogSlNYLkVsZW1lbnQgfCBKU1guRWxlbWVudFtdIHwgYW55O1xyXG4gICAgYnV0dG9ucz86IGFueTtcclxuICAgIGNoaWxkcmVuPzogSlNYLkVsZW1lbnQgfCBKU1guRWxlbWVudFtdIHwgYW55O1xyXG4gICAgb25TaG93PzogKCkgPT4gdm9pZDtcclxuICAgIG9uSGlkZT86ICgpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNb2RhbENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHMsIHt9PiB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG1vZGFsUGx1Z2luOiBNb2RhbDtcclxuICAgIHByb3RlY3RlZCBlbE1vZGFsOiBIVE1MRGl2RWxlbWVudDtcclxuXHJcbiAgICBAYmluZFxyXG4gICAgcHVibGljIHNob3coKSB7XHJcbiAgICAgICAgdGhpcy5tb2RhbFBsdWdpbi5zaG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgQGJpbmRcclxuICAgIHB1YmxpYyBoaWRlKCkge1xyXG4gICAgICAgIHRoaXMubW9kYWxQbHVnaW4uaGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMubW9kYWxQbHVnaW4gPSBuZXcgTW9kYWwodGhpcy5lbE1vZGFsKTtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5vblNob3cpIHtcclxuICAgICAgICAgICAgdGhpcy5lbE1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoXCJzaG93LmJzLm1vZGFsXCIgYXMgYW55LCAoKSA9PiB0aGlzLnByb3BzLm9uU2hvdygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25IaWRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxNb2RhbC5hZGRFdmVudExpc3RlbmVyKFwiaGlkZS5icy5tb2RhbFwiIGFzIGFueSwgKCkgPT4gdGhpcy5wcm9wcy5vbkhpZGUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgICAgIHRoaXMubW9kYWxQbHVnaW4uaGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJtb2RhbCBmYWRlXCIgdGFiSW5kZXg9ey0xfSByb2xlPVwiZGlhbG9nXCIgcmVmPXt4ID0+IHRoaXMuZWxNb2RhbCA9IHh9PlxyXG4gICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1kaWFsb2dcIiByb2xlPVwiZG9jdW1lbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImNsb3NlXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj48c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cIm1vZGFsLXRpdGxlXCI+e3RoaXMucHJvcHMudGl0bGV9PC9oND5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWZvb3RlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYnV0dG9uc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgPC9kaXY+O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFwiQFN0eWxlcy9tYWluLnNjc3NcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IEhlbG1ldCB9IGZyb20gXCJyZWFjdC1oZWxtZXRcIjtcclxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcywgd2l0aFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuaW1wb3J0IHsgSVBlcnNvbk1vZGVsIH0gZnJvbSBcIkBNb2RlbHMvSVBlcnNvbk1vZGVsXCI7XHJcbmltcG9ydCB7IFBlcnNvblN0b3JlIH0gZnJvbSBcIkBTdG9yZS9QZXJzb25TdG9yZVwiO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvblN0YXRlIH0gZnJvbSBcIkBTdG9yZS9pbmRleFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IFBhZ2luZ0JhciB9IGZyb20gXCJAQ29tcG9uZW50cy9zaGFyZWQvUGFnaW5nQmFyXCI7XHJcbmltcG9ydCBQZXJzb25FZGl0b3IgZnJvbSBcIkBDb21wb25lbnRzL3BlcnNvbi9QZXJzb25FZGl0b3JcIjtcclxuaW1wb3J0IExvYWRlciBmcm9tIFwiQENvbXBvbmVudHMvc2hhcmVkL0xvYWRlclwiO1xyXG5pbXBvcnQgYmluZCBmcm9tICdiaW5kLWRlY29yYXRvcic7XHJcbmltcG9ydCB7IE1vZGFsQ29tcG9uZW50IH0gZnJvbSBcIkBDb21wb25lbnRzL3NoYXJlZC9Nb2RhbENvbXBvbmVudFwiO1xyXG5pbXBvcnQgQXdlc29tZURlYm91bmNlUHJvbWlzZSBmcm9tIFwiYXdlc29tZS1kZWJvdW5jZS1wcm9taXNlXCI7XHJcblxyXG50eXBlIFByb3BzID0gUm91dGVDb21wb25lbnRQcm9wczx7fT4gJiB0eXBlb2YgUGVyc29uU3RvcmUuYWN0aW9uQ3JlYXRvcnMgJiBQZXJzb25TdG9yZS5JU3RhdGU7XHJcblxyXG5pbnRlcmZhY2UgSVN0YXRlIHtcclxuICAgIHNlYXJjaFRlcm06IHN0cmluZztcclxuICAgIHBhZ2VOdW06IG51bWJlcjtcclxuICAgIGxpbWl0UGVyUGFnZTogbnVtYmVyO1xyXG4gICAgcm93T2Zmc2V0OiBudW1iZXI7XHJcbiAgICBtb2RlbEZvckVkaXQ6IElQZXJzb25Nb2RlbDtcclxufVxyXG5cclxuXHJcbmNsYXNzIEFkbWluUGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgSVN0YXRlPiB7XHJcblxyXG4gICAgcHJpdmF0ZSBwYWdpbmdCYXI6IFBhZ2luZ0JhcjtcclxuXHJcbiAgICBwcml2YXRlIGVsTW9kYWxBZGQ6IE1vZGFsQ29tcG9uZW50O1xyXG4gICAgcHJpdmF0ZSBlbE1vZGFsRWRpdDogTW9kYWxDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIGVsTW9kYWxEZWxldGU6IE1vZGFsQ29tcG9uZW50O1xyXG5cclxuICAgIHByaXZhdGUgcGVyc29uRWRpdG9yQWRkOiBQZXJzb25FZGl0b3I7XHJcbiAgICBwcml2YXRlIHBlcnNvbkVkaXRvckVkaXQ6IFBlcnNvbkVkaXRvcjtcclxuXHJcbiAgICBwcml2YXRlIGRlYm91bmNlZFNlYXJjaDogKHRlcm06IHN0cmluZykgPT4gdm9pZDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHNlYXJjaFRlcm06IFwiXCIsXHJcbiAgICAgICAgICAgIHBhZ2VOdW06IDEsXHJcbiAgICAgICAgICAgIGxpbWl0UGVyUGFnZTogNSxcclxuICAgICAgICAgICAgcm93T2Zmc2V0OiAwLFxyXG4gICAgICAgICAgICBtb2RlbEZvckVkaXQ6IHt9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5kZWJvdW5jZWRTZWFyY2ggPSBBd2Vzb21lRGVib3VuY2VQcm9taXNlKCh0ZXJtOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgcHJvcHMuc2VhcmNoUmVxdWVzdCh0ZXJtKTtcclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgICAgICB0aGlzLnByb3BzLnNlYXJjaFJlcXVlc3QoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICBpZiAodGhpcy5lbE1vZGFsQWRkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxNb2RhbEFkZC5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmVsTW9kYWxFZGl0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxNb2RhbEVkaXQuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5lbE1vZGFsRGVsZXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxNb2RhbERlbGV0ZS5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBiaW5kXHJcbiAgICBvbkNoYW5nZVBhZ2UocGFnZU51bTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHJvd09mZnNldCA9IE1hdGguY2VpbCgocGFnZU51bSAtIDEpICogdGhpcy5zdGF0ZS5saW1pdFBlclBhZ2UpO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwYWdlTnVtLCByb3dPZmZzZXQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgQGJpbmRcclxuICAgIG9uQ2xpY2tTaG93QWRkTW9kYWwoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4pIHtcclxuICAgICAgICB0aGlzLmVsTW9kYWxBZGQuc2hvdygpO1xyXG4gICAgfVxyXG5cclxuICAgIEBiaW5kXHJcbiAgICBvbkNsaWNrU2hvd0VkaXRNb2RhbChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50PiwgbW9kZWxGb3JFZGl0OiBJUGVyc29uTW9kZWwpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbW9kZWxGb3JFZGl0IH0pO1xyXG4gICAgICAgIHRoaXMuZWxNb2RhbEVkaXQuc2hvdygpO1xyXG4gICAgfVxyXG5cclxuICAgIEBiaW5kXHJcbiAgICBvbkNsaWNrU2hvd0RlbGV0ZU1vZGFsKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+LCBtb2RlbEZvckVkaXQ6IElQZXJzb25Nb2RlbCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtb2RlbEZvckVkaXQgfSk7XHJcbiAgICAgICAgdGhpcy5lbE1vZGFsRGVsZXRlLnNob3coKTtcclxuICAgIH1cclxuXHJcbiAgICBAYmluZFxyXG4gICAgb25DbGlja1BlcnNvbkVkaXRvckFkZF9fc2F2ZUJ0bihlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50Pik6IHZvaWQge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZiAoIXRoaXMucGVyc29uRWRpdG9yQWRkLmVsRm9ybS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByb3BzLmFkZFJlcXVlc3QodGhpcy5wZXJzb25FZGl0b3JBZGQuZWxGb3JtLmdldERhdGEoKSk7XHJcbiAgICAgICAgdGhpcy5wYWdpbmdCYXIuc2V0TGFzdFBhZ2UoKTtcclxuICAgICAgICB0aGlzLmVsTW9kYWxBZGQuaGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIEBiaW5kXHJcbiAgICBvbkNsaWNrUGVyc29uRWRpdG9yRWRpdF9fc2F2ZUJ0bihlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50Pik6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5wZXJzb25FZGl0b3JFZGl0LmVsRm9ybS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMucGVyc29uRWRpdG9yRWRpdC5lbEZvcm0uZ2V0RGF0YSgpO1xyXG4gICAgICAgIHRoaXMucHJvcHMudXBkYXRlUmVxdWVzdChkYXRhKTtcclxuICAgICAgICB0aGlzLmVsTW9kYWxFZGl0LmhpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBAYmluZFxyXG4gICAgb25DbGlja1BlcnNvbkVkaXRvckRlbGV0ZV9fc2F2ZUJ0bihlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50Pik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucHJvcHMuZGVsZXRlUmVxdWVzdCh0aGlzLnN0YXRlLm1vZGVsRm9yRWRpdC5pZCk7XHJcbiAgICAgICAgdGhpcy5lbE1vZGFsRGVsZXRlLmhpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBAYmluZFxyXG4gICAgcmVuZGVyUm93KHBlcnNvbjogSVBlcnNvbk1vZGVsKSB7XHJcbiAgICAgICAgcmV0dXJuIDx0ciBrZXk9e3BlcnNvbi5pZH0+XHJcbiAgICAgICAgICAgIDx0ZD57cGVyc29uLmZpcnN0TmFtZX08L3RkPlxyXG4gICAgICAgICAgICA8dGQ+e3BlcnNvbi5sYXN0TmFtZX08L3RkPlxyXG4gICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4taW5mb1wiIG9uQ2xpY2s9e3ggPT4gdGhpcy5vbkNsaWNrU2hvd0VkaXRNb2RhbCh4LCBwZXJzb24pfT5FZGl0PC9idXR0b24+Jm5ic3A7XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tZGFuZ2VyXCIgb25DbGljaz17eCA9PiB0aGlzLm9uQ2xpY2tTaG93RGVsZXRlTW9kYWwoeCwgcGVyc29uKX0+RGVsZXRlPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgPC90cj47XHJcbiAgICB9XHJcblxyXG4gICAgQGJpbmRcclxuICAgIHJlbmRlclJvd3MoZGF0YTogSVBlcnNvbk1vZGVsW10pIHtcclxuICAgICAgICByZXR1cm4gZGF0YVxyXG4gICAgICAgICAgICAuc2xpY2UodGhpcy5zdGF0ZS5yb3dPZmZzZXQsIHRoaXMuc3RhdGUucm93T2Zmc2V0ICsgdGhpcy5zdGF0ZS5saW1pdFBlclBhZ2UpXHJcbiAgICAgICAgICAgIC5tYXAoeCA9PiB0aGlzLnJlbmRlclJvdyh4KSk7XHJcbiAgICB9XHJcblxyXG4gICAgQGJpbmRcclxuICAgIG9uQ2hhbmdlU2VhcmNoSW5wdXQoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pIHtcclxuICAgICAgICB2YXIgdmFsID0gZS5jdXJyZW50VGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgIHRoaXMuZGVib3VuY2VkU2VhcmNoKHZhbCk7XHJcbiAgICAgICAgdGhpcy5wYWdpbmdCYXIuc2V0Rmlyc3RQYWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICByZXR1cm4gPGRpdj5cclxuICAgICAgICAgICAgPEhlbG1ldD5cclxuICAgICAgICAgICAgICAgIDx0aXRsZT5KYXljZWUgR3JpZmZpdGggLSBQb3J0Zm9saW88L3RpdGxlPlxyXG4gICAgICAgICAgICA8L0hlbG1ldD5cclxuXHJcbiAgICAgICAgICAgIDxMb2FkZXIgc2hvdz17dGhpcy5wcm9wcy5pbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmd9IC8+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsIHBhbmVsLWRlZmF1bHRcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtYm9keSByb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1zbS0xXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1zdWNjZXNzXCIgb25DbGljaz17dGhpcy5vbkNsaWNrU2hvd0FkZE1vZGFsfT5BZGQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1zbS0xMVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e1wiXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZVNlYXJjaElucHV0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e1wiU2VhcmNoIGZvciBwZW9wbGUuLi5cIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ0YWJsZVwiPlxyXG4gICAgICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkZpcnN0IG5hbWU8L3RoPjx0aD5MYXN0IG5hbWU8L3RoPjx0aD48L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlclJvd3ModGhpcy5wcm9wcy5wZW9wbGUpfVxyXG4gICAgICAgICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgICAgPC90YWJsZT5cclxuXHJcbiAgICAgICAgICAgIHsvKiBBZGQgbW9kYWwgKi99XHJcbiAgICAgICAgICAgIDxNb2RhbENvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgcmVmPXt4ID0+IHRoaXMuZWxNb2RhbEFkZCA9IHh9XHJcbiAgICAgICAgICAgICAgICBidXR0b25zPXs8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tZGVmYXVsdFwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCI+Q2xvc2U8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnlcIiBvbkNsaWNrPXt0aGlzLm9uQ2xpY2tQZXJzb25FZGl0b3JBZGRfX3NhdmVCdG59PlNhdmU8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2Pn1cclxuICAgICAgICAgICAgICAgIHRpdGxlPVwiQWRkIHBlcnNvblwiXHJcbiAgICAgICAgICAgICAgICBvbkhpZGU9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wZXJzb25FZGl0b3JBZGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJzb25FZGl0b3JBZGQuZW1wdHlGb3JtKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICA8UGVyc29uRWRpdG9yIHJlZj17eCA9PiB0aGlzLnBlcnNvbkVkaXRvckFkZCA9IHh9IGRhdGE9e3t9fSAvPlxyXG4gICAgICAgICAgICA8L01vZGFsQ29tcG9uZW50PlxyXG5cclxuICAgICAgICAgICAgey8qIEVkaXQgbW9kYWwgKi99XHJcbiAgICAgICAgICAgIDxNb2RhbENvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgcmVmPXt4ID0+IHRoaXMuZWxNb2RhbEVkaXQgPSB4fVxyXG4gICAgICAgICAgICAgICAgYnV0dG9ucz17PGRpdj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJidG4gYnRuLWRlZmF1bHRcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiPkNsb3NlPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17dGhpcy5vbkNsaWNrUGVyc29uRWRpdG9yRWRpdF9fc2F2ZUJ0bn0+U2F2ZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+fVxyXG4gICAgICAgICAgICAgICAgdGl0bGU9e2BFZGl0IHBlcnNvbjogJHt0aGlzLnN0YXRlLm1vZGVsRm9yRWRpdC5maXJzdE5hbWV9ICR7dGhpcy5zdGF0ZS5tb2RlbEZvckVkaXQubGFzdE5hbWV9YH1cclxuICAgICAgICAgICAgICAgIG9uSGlkZT17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBlcnNvbkVkaXRvckVkaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1vZGVsRm9yRWRpdDoge30gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICA8UGVyc29uRWRpdG9yIHJlZj17eCA9PiB0aGlzLnBlcnNvbkVkaXRvckVkaXQgPSB4fSBkYXRhPXt0aGlzLnN0YXRlLm1vZGVsRm9yRWRpdH0gLz5cclxuICAgICAgICAgICAgPC9Nb2RhbENvbXBvbmVudD5cclxuXHJcbiAgICAgICAgICAgIHsvKiBEZWxldGUgbW9kYWwgKi99XHJcbiAgICAgICAgICAgIDxNb2RhbENvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgcmVmPXt4ID0+IHRoaXMuZWxNb2RhbERlbGV0ZSA9IHh9XHJcbiAgICAgICAgICAgICAgICBidXR0b25zPXs8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tZGVmYXVsdFwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCI+Q2xvc2U8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJidG4gYnRuLWRhbmdlclwiIG9uQ2xpY2s9e3RoaXMub25DbGlja1BlcnNvbkVkaXRvckRlbGV0ZV9fc2F2ZUJ0bn0+RGVsZXRlPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgICAgICAgICB0aXRsZT17YERlbGV0ZSBwZXJzb246ICR7dGhpcy5zdGF0ZS5tb2RlbEZvckVkaXQuZmlyc3ROYW1lfSAke3RoaXMuc3RhdGUubW9kZWxGb3JFZGl0Lmxhc3ROYW1lfWB9PlxyXG4gICAgICAgICAgICAgICAgPHA+RG8geW91IHJlYWxseSB3YW50IHRvIGRlbGV0ZSB0aGlzIHBlcnNvbj88L3A+XHJcbiAgICAgICAgICAgIDwvTW9kYWxDb21wb25lbnQ+XHJcblxyXG4gICAgICAgICAgICA8UGFnaW5nQmFyXHJcbiAgICAgICAgICAgICAgICByZWY9e3ggPT4gdGhpcy5wYWdpbmdCYXIgPSB4fVxyXG4gICAgICAgICAgICAgICAgdG90YWxSZXN1bHRzPXt0aGlzLnByb3BzLnBlb3BsZS5sZW5ndGh9XHJcbiAgICAgICAgICAgICAgICBsaW1pdFBlclBhZ2U9e3RoaXMuc3RhdGUubGltaXRQZXJQYWdlfVxyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2U9e3RoaXMuc3RhdGUucGFnZU51bX1cclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlUGFnZT17dGhpcy5vbkNoYW5nZVBhZ2V9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+O1xyXG4gICAgfVxyXG59XHJcblxyXG52YXIgY29tcG9uZW50ID0gY29ubmVjdChcclxuICAgIChzdGF0ZTogQXBwbGljYXRpb25TdGF0ZSkgPT4gc3RhdGUucGVyc29uLCAvLyBTZWxlY3RzIHdoaWNoIHN0YXRlIHByb3BlcnRpZXMgYXJlIG1lcmdlZCBpbnRvIHRoZSBjb21wb25lbnQncyBwcm9wcy5cclxuICAgIFBlcnNvblN0b3JlLmFjdGlvbkNyZWF0b3JzIC8vIFNlbGVjdHMgd2hpY2ggYWN0aW9uIGNyZWF0b3JzIGFyZSBtZXJnZWQgaW50byB0aGUgY29tcG9uZW50J3MgcHJvcHMuXHJcbikoQWRtaW5QYWdlIGFzIGFueSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAod2l0aFJvdXRlcihjb21wb25lbnQgYXMgYW55KSBhcyBhbnkgYXMgdHlwZW9mIEFkbWluUGFnZSkiLCJpbXBvcnQgQXV0aG9yaXplZExheW91dCBmcm9tICdATGF5b3V0cy9BdXRob3JpemVkTGF5b3V0JztcclxuaW1wb3J0IEd1ZXN0TGF5b3V0IGZyb20gXCJATGF5b3V0cy9HdWVzdExheW91dFwiO1xyXG5pbXBvcnQgTG9naW5QYWdlIGZyb20gJ0BQYWdlcy9Mb2dpblBhZ2UnO1xyXG5pbXBvcnQgeyBBcHBSb3V0ZSB9IGZyb20gXCJAQ29tcG9uZW50cy9zaGFyZWQvQXBwUm91dGVcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBTd2l0Y2ggfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IEhvbWVQYWdlIGZyb20gJ0BQYWdlcy9Ib21lUGFnZSc7XHJcbmltcG9ydCBQb3J0Zm9saW9QYWdlIGZyb20gJ0BQYWdlcy9Qb3J0Zm9saW9QYWdlJztcclxuaW1wb3J0IFJlYWRpbmdQYWdlIGZyb20gJ0BQYWdlcy9SZWFkaW5nUGFnZSc7XHJcbmltcG9ydCBBYm91dE1lUGFnZSBmcm9tICdAUGFnZXMvQWJvdXRNZVBhZ2UnO1xyXG5pbXBvcnQgTXVzaWNQYWdlIGZyb20gJ0BQYWdlcy9NdXNpY1BhZ2UnO1xyXG5pbXBvcnQgQWRtaW5QYWdlIGZyb20gJ0BQYWdlcy9BZG1pblBhZ2UnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJvdXRlcyA9IDxTd2l0Y2g+XHJcbiAgICA8QXBwUm91dGUgbGF5b3V0PXtHdWVzdExheW91dH0gZXhhY3QgcGF0aD1cIi9sb2dpblwiIGNvbXBvbmVudD17TG9naW5QYWdlfSAvPlxyXG4gICAgPEFwcFJvdXRlIGxheW91dD17R3Vlc3RMYXlvdXR9IGV4YWN0IHBhdGg9XCIvXCIgY29tcG9uZW50PXtIb21lUGFnZX0gLz5cclxuICAgIDxBcHBSb3V0ZSBsYXlvdXQ9e0d1ZXN0TGF5b3V0fSBleGFjdCBwYXRoPVwiL3BvcnRmb2xpb1wiIGNvbXBvbmVudD17UG9ydGZvbGlvUGFnZX0gLz5cclxuICAgIDxBcHBSb3V0ZSBsYXlvdXQ9e0d1ZXN0TGF5b3V0fSBleGFjdCBwYXRoPVwiL2Fib3V0L21lXCIgY29tcG9uZW50PXtBYm91dE1lUGFnZX0gLz5cclxuICAgIDxBcHBSb3V0ZSBsYXlvdXQ9e0d1ZXN0TGF5b3V0fSBleGFjdCBwYXRoPVwiL2Fib3V0L211c2ljXCIgY29tcG9uZW50PXtNdXNpY1BhZ2V9IC8+XHJcbiAgICA8QXBwUm91dGUgbGF5b3V0PXtHdWVzdExheW91dH0gZXhhY3QgcGF0aD1cIi9hYm91dC9yZWFkaW5nXCIgY29tcG9uZW50PXtSZWFkaW5nUGFnZX0gLz5cclxuICAgIDxBcHBSb3V0ZSBsYXlvdXQ9e0F1dGhvcml6ZWRMYXlvdXR9IGV4YWN0IHBhdGg9XCIvYWRtaW5cIiBjb21wb25lbnQ9e0FkbWluUGFnZX0gLz5cclxuPC9Td2l0Y2g+OyIsImltcG9ydCB7IExvZ2luU3RvcmUgfSBmcm9tIFwiQFN0b3JlL0xvZ2luU3RvcmVcIjtcclxuaW1wb3J0IHsgUGVyc29uU3RvcmUgfSBmcm9tIFwiQFN0b3JlL1BlcnNvblN0b3JlXCI7XHJcblxyXG4vLyBUaGUgdG9wLWxldmVsIHN0YXRlIG9iamVjdFxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcGxpY2F0aW9uU3RhdGUge1xyXG4gICAgbG9naW46IExvZ2luU3RvcmUuSVN0YXRlO1xyXG4gICAgcGVyc29uOiBQZXJzb25TdG9yZS5JU3RhdGU7XHJcbn1cclxuXHJcbi8vIFdoZW5ldmVyIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLCBSZWR1eCB3aWxsIHVwZGF0ZSBlYWNoIHRvcC1sZXZlbCBhcHBsaWNhdGlvbiBzdGF0ZSBwcm9wZXJ0eSB1c2luZ1xyXG4vLyB0aGUgcmVkdWNlciB3aXRoIHRoZSBtYXRjaGluZyBuYW1lLiBJdCdzIGltcG9ydGFudCB0aGF0IHRoZSBuYW1lcyBtYXRjaCBleGFjdGx5LCBhbmQgdGhhdCB0aGUgcmVkdWNlclxyXG4vLyBhY3RzIG9uIHRoZSBjb3JyZXNwb25kaW5nIEFwcGxpY2F0aW9uU3RhdGUgcHJvcGVydHkgdHlwZS5cclxuZXhwb3J0IGNvbnN0IHJlZHVjZXJzID0ge1xyXG4gICAgbG9naW46IExvZ2luU3RvcmUucmVkdWNlcixcclxuICAgIHBlcnNvbjogUGVyc29uU3RvcmUucmVkdWNlclxyXG59O1xyXG5cclxuLy8gVGhpcyB0eXBlIGNhbiBiZSB1c2VkIGFzIGEgaGludCBvbiBhY3Rpb24gY3JlYXRvcnMgc28gdGhhdCBpdHMgJ2Rpc3BhdGNoJyBhbmQgJ2dldFN0YXRlJyBwYXJhbXMgYXJlXHJcbi8vIGNvcnJlY3RseSB0eXBlZCB0byBtYXRjaCB5b3VyIHN0b3JlLlxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcFRodW5rQWN0aW9uPFRBY3Rpb24+IHtcclxuICAgIChkaXNwYXRjaDogKGFjdGlvbjogVEFjdGlvbikgPT4gdm9pZCwgZ2V0U3RhdGU6ICgpID0+IEFwcGxpY2F0aW9uU3RhdGUpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcFRodW5rQWN0aW9uQXN5bmM8VEFjdGlvbiwgVFJlc3VsdD4ge1xyXG4gICAgKGRpc3BhdGNoOiAoYWN0aW9uOiBUQWN0aW9uKSA9PiB2b2lkLCBnZXRTdGF0ZTogKCkgPT4gQXBwbGljYXRpb25TdGF0ZSkgOiBQcm9taXNlPFRSZXN1bHQ+XHJcbn0iLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBjb21iaW5lUmVkdWNlcnMsIFN0b3JlRW5oYW5jZXIsIFN0b3JlLCBTdG9yZUVuaGFuY2VyU3RvcmVDcmVhdG9yLCBSZWR1Y2Vyc01hcE9iamVjdCB9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcclxuaW1wb3J0IHsgcm91dGVyTWlkZGxld2FyZSwgTE9DQVRJT05fQ0hBTkdFIH0gZnJvbSAnY29ubmVjdGVkLXJlYWN0LXJvdXRlcic7XHJcbi8vdmFyIHJvdXRlclJlZHVjZXIgPSByZXF1aXJlKFwiY29ubmVjdGVkLXJlYWN0LXJvdXRlci9saWIvcmVkdWNlclwiKTtcclxuLy9pbXBvcnQge3JvdXRlclJlZHVjZXJ9IGZyb20gXCJyZWFjdC1yb3V0ZXItcmVkdXhcIjtcclxuaW1wb3J0ICogYXMgU3RvcmVNb2R1bGUgZnJvbSAnLi9zdG9yZSc7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uU3RhdGUsIHJlZHVjZXJzIH0gZnJvbSAnLi9zdG9yZSc7XHJcbmltcG9ydCB7IEhpc3RvcnkgfSBmcm9tICdoaXN0b3J5JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKGhpc3Rvcnk6IEhpc3RvcnksIGluaXRpYWxTdGF0ZT86IEFwcGxpY2F0aW9uU3RhdGUpIHtcclxuICAgIC8vIEJ1aWxkIG1pZGRsZXdhcmUuIFRoZXNlIGFyZSBmdW5jdGlvbnMgdGhhdCBjYW4gcHJvY2VzcyB0aGUgYWN0aW9ucyBiZWZvcmUgdGhleSByZWFjaCB0aGUgc3RvcmUuXHJcbiAgICBjb25zdCB3aW5kb3dJZkRlZmluZWQgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB3aW5kb3cgYXMgYW55O1xyXG4gICAgLy8gSWYgZGV2VG9vbHMgaXMgaW5zdGFsbGVkLCBjb25uZWN0IHRvIGl0XHJcbiAgICBjb25zdCBkZXZUb29sc0V4dGVuc2lvbiA9IHdpbmRvd0lmRGVmaW5lZCAmJiB3aW5kb3dJZkRlZmluZWQuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyBhcyAoKSA9PiBTdG9yZUVuaGFuY2VyO1xyXG4gICAgY29uc3QgY3JlYXRlU3RvcmVXaXRoTWlkZGxld2FyZSA9IGNvbXBvc2UoXHJcbiAgICAgICAgYXBwbHlNaWRkbGV3YXJlKHRodW5rLCByb3V0ZXJNaWRkbGV3YXJlKGhpc3RvcnkpKSxcclxuICAgICAgICBkZXZUb29sc0V4dGVuc2lvbiA/IGRldlRvb2xzRXh0ZW5zaW9uKCkgOiA8Uz4obmV4dDogU3RvcmVFbmhhbmNlclN0b3JlQ3JlYXRvcjxTPikgPT4gbmV4dFxyXG4gICAgKShjcmVhdGVTdG9yZSk7XHJcblxyXG4gICAgLy8gQ29tYmluZSBhbGwgcmVkdWNlcnMgYW5kIGluc3RhbnRpYXRlIHRoZSBhcHAtd2lkZSBzdG9yZSBpbnN0YW5jZVxyXG4gICAgY29uc3QgYWxsUmVkdWNlcnMgPSBidWlsZFJvb3RSZWR1Y2VyKHJlZHVjZXJzLCBoaXN0b3J5KTtcclxuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmVXaXRoTWlkZGxld2FyZShhbGxSZWR1Y2VycywgaW5pdGlhbFN0YXRlIGFzIGFueSkgYXMgU3RvcmU8QXBwbGljYXRpb25TdGF0ZT47XHJcblxyXG4gICAgLy8gRW5hYmxlIFdlYnBhY2sgaG90IG1vZHVsZSByZXBsYWNlbWVudCBmb3IgcmVkdWNlcnNcclxuICAgIGlmIChtb2R1bGUuaG90KSB7XHJcbiAgICAgICAgbW9kdWxlLmhvdC5hY2NlcHQoJy4vc3RvcmUnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRSb290UmVkdWNlciA9IHJlcXVpcmU8dHlwZW9mIFN0b3JlTW9kdWxlPignLi9zdG9yZScpO1xyXG4gICAgICAgICAgICBzdG9yZS5yZXBsYWNlUmVkdWNlcihidWlsZFJvb3RSZWR1Y2VyKG5leHRSb290UmVkdWNlci5yZWR1Y2VycywgaGlzdG9yeSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdG9yZTtcclxufVxyXG5cclxuY29uc3Qgcm91dGVyUmVkdWNlciA9IChoaXN0b3J5KSA9PiB7XHJcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7XHJcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXHJcbiAgICAgICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcclxuICAgIH07XHJcbiAgICByZXR1cm4gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhcmc6IGFueSA9IHt9KSA9PiB7XHJcbiAgICAgICAgaWYgKGFyZy50eXBlID09PSBMT0NBVElPTl9DSEFOR0UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIC4uLmFyZy5wYXlsb2FkIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIGJ1aWxkUm9vdFJlZHVjZXIoYWxsUmVkdWNlcnM6IFJlZHVjZXJzTWFwT2JqZWN0LCBoaXN0b3J5KSB7XHJcbiAgICByZXR1cm4gY29tYmluZVJlZHVjZXJzPEFwcGxpY2F0aW9uU3RhdGU+KHsuLi5hbGxSZWR1Y2VycywgLi4ueyByb3V0ZXI6IHJvdXRlclJlZHVjZXIoaGlzdG9yeSkgfX0gYXMgYW55KTtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyByZW5kZXJUb1N0cmluZyB9IGZyb20gJ3JlYWN0LWRvbS9zZXJ2ZXInO1xyXG5pbXBvcnQgeyBTdGF0aWNSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHsgcmVwbGFjZSB9IGZyb20gJ2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5IH0gZnJvbSAnaGlzdG9yeSc7XHJcbmltcG9ydCB7IGNyZWF0ZVNlcnZlclJlbmRlcmVyLCBSZW5kZXJSZXN1bHQgfSBmcm9tICdhc3BuZXQtcHJlcmVuZGVyaW5nJztcclxuaW1wb3J0IHsgcm91dGVzIH0gZnJvbSAnLi9yb3V0ZXMnO1xyXG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi9jb25maWd1cmVTdG9yZSc7XHJcbmltcG9ydCB7IEhlbG1ldCB9IGZyb20gJ3JlYWN0LWhlbG1ldCc7XHJcbmltcG9ydCBHbG9iYWxzIGZyb20gXCJAR2xvYmFsc1wiO1xyXG5pbXBvcnQgeyBJTm9kZVNlc3Npb24gfSBmcm9tIFwiQE1vZGVscy9JTm9kZVNlc3Npb25cIjtcclxuaW1wb3J0IHsgY29tcGxldGVkVGFza3MgfSBmcm9tIFwiZG9tYWluLXdhaXRcIjtcclxuXHJcbnZhciByZW5kZXJIZWxtZXQgPSAoKTogc3RyaW5nID0+IHtcclxuICAgIHZhciBoZWxtZXREYXRhID0gSGVsbWV0LnJlbmRlclN0YXRpYygpO1xyXG4gICAgdmFyIGhlbG1ldFN0cmluZ3MgPSBcIlwiO1xyXG4gICAgZm9yICh2YXIga2V5IGluIGhlbG1ldERhdGEpIHtcclxuICAgICAgICBpZiAoaGVsbWV0RGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIGhlbG1ldFN0cmluZ3MgKz0gaGVsbWV0RGF0YVtrZXldLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhlbG1ldFN0cmluZ3M7XHJcbn07XHJcblxyXG52YXIgY3JlYXRlR2xvYmFscyA9IChub2RlU2Vzc2lvbiwgaW5pdGlhbFJlZHV4U3RhdGUsIGhlbG1ldFN0cmluZ3MpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY29tcGxldGVkVGFza3MsXHJcbiAgICAgICAgbm9kZVNlc3Npb24sXHJcbiAgICAgICAgaW5pdGlhbFJlZHV4U3RhdGUsXHJcbiAgICAgICAgaGVsbWV0U3RyaW5nc1xyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNlcnZlclJlbmRlcmVyKChwYXJhbXMpID0+IHtcclxuXHJcbiAgICBHbG9iYWxzLnJlc2V0KCk7XHJcbiAgICBHbG9iYWxzLmluaXQocGFyYW1zLmRhdGEgYXMgSU5vZGVTZXNzaW9uKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8UmVuZGVyUmVzdWx0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICAgIC8vIFByZXBhcmUgUmVkdXggc3RvcmUgd2l0aCBpbi1tZW1vcnkgaGlzdG9yeSwgYW5kIGRpc3BhdGNoIGEgbmF2aWdhdGlvbiBldmVudC5cclxuICAgICAgICAvLyBjb3JyZXNwb25kaW5nIHRvIHRoZSBpbmNvbWluZyBVUkwuXHJcbiAgICAgICAgY29uc3QgYmFzZW5hbWUgPSBwYXJhbXMuYmFzZVVybC5zdWJzdHJpbmcoMCwgcGFyYW1zLmJhc2VVcmwubGVuZ3RoIC0gMSk7IC8vIFJlbW92ZSB0cmFpbGluZyBzbGFzaC5cclxuICAgICAgICBjb25zdCB1cmxBZnRlckJhc2VuYW1lID0gcGFyYW1zLnVybC5zdWJzdHJpbmcoYmFzZW5hbWUubGVuZ3RoKTtcclxuICAgICAgICBjb25zdCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSk7XHJcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2gocmVwbGFjZSh1cmxBZnRlckJhc2VuYW1lKSk7XHJcblxyXG4gICAgICAgIC8vIFByZXBhcmUgYW4gaW5zdGFuY2Ugb2YgdGhlIGFwcGxpY2F0aW9uIGFuZCBwZXJmb3JtIGFuIGluaXRhbCByZW5kZXIgdGhhdCB3aWxsXHJcbiAgICAgICAgLy8gY2F1c2UgYW55IGFzeW5jIHRhc2tzIChlLmcuLCBkYXRhIGFjY2VzcykgdG8gYmVnaW4uXHJcbiAgICAgICAgY29uc3Qgcm91dGVyQ29udGV4dDogYW55ID0ge307XHJcbiAgICAgICAgY29uc3QgYXBwID0gKFxyXG4gICAgICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICAgICAgICAgIDxTdGF0aWNSb3V0ZXIgYmFzZW5hbWU9e2Jhc2VuYW1lfSBjb250ZXh0PXtyb3V0ZXJDb250ZXh0fSBsb2NhdGlvbj17cGFyYW1zLmxvY2F0aW9uLnBhdGh9IGNoaWxkcmVuPXtyb3V0ZXN9IC8+XHJcbiAgICAgICAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVuZGVyQXBwID0gKCk6IHN0cmluZyA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJUb1N0cmluZyhhcHApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJlbmRlckFwcCgpO1xyXG5cclxuICAgICAgICAvLyBJZiB0aGVyZSdzIGEgcmVkaXJlY3Rpb24sIGp1c3Qgc2VuZCB0aGlzIGluZm9ybWF0aW9uIGJhY2sgdG8gdGhlIGhvc3QgYXBwbGljYXRpb24uXHJcbiAgICAgICAgaWYgKHJvdXRlckNvbnRleHQudXJsKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RVcmw6IHJvdXRlckNvbnRleHQudXJsLFxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsczogY3JlYXRlR2xvYmFscyhwYXJhbXMuZGF0YSwgc3RvcmUuZ2V0U3RhdGUoKSwgcmVuZGVySGVsbWV0KCkpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBPbmNlIGFueSBhc3luYyB0YXNrcyBhcmUgZG9uZSwgd2UgY2FuIHBlcmZvcm0gdGhlIGZpbmFsIHJlbmRlci5cclxuICAgICAgICAvLyBXZSBhbHNvIHNlbmQgdGhlIHJlZHV4IHN0b3JlIHN0YXRlLCBzbyB0aGUgY2xpZW50IGNhbiBjb250aW51ZSBleGVjdXRpb24gd2hlcmUgdGhlIHNlcnZlciBsZWZ0IG9mZi5cclxuICAgICAgICBwYXJhbXMuZG9tYWluVGFza3MudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgIGh0bWw6IHJlbmRlckFwcCgpLFxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsczogY3JlYXRlR2xvYmFscyhwYXJhbXMuZGF0YSwgc3RvcmUuZ2V0U3RhdGUoKSwgcmVuZGVySGVsbWV0KCkpXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9LCByZWplY3QpOyAvLyBBbHNvIHByb3BhZ2F0ZSBhbnkgZXJyb3JzIGJhY2sgaW50byB0aGUgaG9zdCBhcHBsaWNhdGlvbi5cclxuICAgIH0pO1xyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==