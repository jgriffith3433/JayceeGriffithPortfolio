!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="dist/",n(n.s=112)}([function(e,t,n){e.exports=n(1)(4)},function(e,t){e.exports=require("./vendor")},function(e,t,n){"use strict";var r;function o(e,t,n){if(!n||typeof n.value!==r.typeOfFunction)throw new TypeError("Only methods can be decorated with @bind. <"+t+"> is not a method!");return{configurable:r.boolTrue,get:function(){var e=n.value.bind(this);return Object.defineProperty(this,t,{value:e,configurable:r.boolTrue,writable:r.boolTrue}),e}}}Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.typeOfFunction="function",e.boolTrue=!0}(r||(r={})),t.bind=o,t.default=o},function(e,t,n){e.exports=n(1)(301)},function(e,t,n){"use strict";t.__esModule=!0,t.withRouter=t.matchPath=t.generatePath=t.Switch=t.StaticRouter=t.Router=t.Route=t.Redirect=t.Prompt=t.NavLink=t.MemoryRouter=t.Link=t.HashRouter=t.BrowserRouter=void 0;var r=y(n(53)),o=y(n(60)),i=y(n(25)),a=y(n(61)),s=y(n(63)),l=y(n(65)),c=y(n(67)),u=y(n(26)),f=y(n(21)),p=y(n(69)),d=y(n(71)),h=y(n(73)),m=y(n(75)),v=y(n(77));function y(e){return e&&e.__esModule?e:{default:e}}t.BrowserRouter=r.default,t.HashRouter=o.default,t.Link=i.default,t.MemoryRouter=a.default,t.NavLink=s.default,t.Prompt=l.default,t.Redirect=c.default,t.Route=u.default,t.Router=f.default,t.StaticRouter=p.default,t.Switch=d.default,t.generatePath=h.default,t.matchPath=m.default,t.withRouter=v.default},function(e,t,n){e.exports=n(1)(84)},function(e,t,n){e.exports=n(1)(7)},function(e,t,n){e.exports=n(1)(195)},function(e,t,n){e.exports=n(1)(229)},function(e,t,n){e.exports=n(1)(187)},function(e,t,n){e.exports=n(1)(143)},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){e.exports=n(1)(264)},function(e,t,n){e.exports=n(1)(148)},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n(54)),i=s(n(55)),a=n(11);function s(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,i){var s=void 0;"string"==typeof e?(s=(0,a.parsePath)(e)).state=t:(void 0===(s=r({},e)).pathname&&(s.pathname=""),s.search?"?"!==s.search.charAt(0)&&(s.search="?"+s.search):s.search="",s.hash?"#"!==s.hash.charAt(0)&&(s.hash="#"+s.hash):s.hash="",void 0!==t&&void 0===s.state&&(s.state=t));try{s.pathname=decodeURI(s.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+s.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(s.key=n),i?s.pathname?"/"!==s.pathname.charAt(0)&&(s.pathname=(0,o.default)(s.pathname,i.pathname)):s.pathname=i.pathname:s.pathname||(s.pathname="/"),s},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,i.default)(e.state,t.state)}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){e.exports=n(1)(132)},function(e,t,n){e.exports=n(1)(242)},function(e,t,n){"use strict";t.__esModule=!0,t.createPath=t.parsePath=t.locationsAreEqual=t.createLocation=t.createMemoryHistory=t.createHashHistory=t.createBrowserHistory=void 0;var r=n(14);Object.defineProperty(t,"createLocation",{enumerable:!0,get:function(){return r.createLocation}}),Object.defineProperty(t,"locationsAreEqual",{enumerable:!0,get:function(){return r.locationsAreEqual}});var o=n(11);Object.defineProperty(t,"parsePath",{enumerable:!0,get:function(){return o.parsePath}}),Object.defineProperty(t,"createPath",{enumerable:!0,get:function(){return o.createPath}});var i=l(n(56)),a=l(n(57)),s=l(n(58));function l(e){return e&&e.__esModule?e:{default:e}}t.createBrowserHistory=i.default,t.createHashHistory=a.default,t.createMemoryHistory=s.default},function(e,t,n){e.exports=n(1)(19)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(15));t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,r.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,o,i){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof o?o(a,i):((0,r.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==a)}else i(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(59));t.default=r.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(27);t.UnityVersion=o.UnityVersion;var i=r(n(81));t.UnityContent=i.default;var a=r(n(82));t.default=a.default},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n(0)),i=l(n(6)),a=l(n(19)),s=n(18);function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},f=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!u(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);(0,a.default)(this.context.router,"You should not use <Link> outside a <Router>"),(0,a.default)(void 0!==t,'You must specify the "to" property');var l=this.context.router.history,c="string"==typeof t?(0,s.createLocation)(t,null,null,l.location):t,u=l.createHref(c);return o.default.createElement("a",r({},i,{onClick:this.handleClick,href:u,ref:n}))},t}(o.default.Component);f.propTypes={onClick:i.default.func,target:i.default.string,replace:i.default.bool,to:i.default.oneOfType([i.default.string,i.default.object]).isRequired,innerRef:i.default.oneOfType([i.default.string,i.default.func])},f.defaultProps={replace:!1},f.contextTypes={router:i.default.shape({history:i.default.shape({push:i.default.func.isRequired,replace:i.default.func.isRequired,createHref:i.default.func.isRequired}).isRequired}).isRequired},t.default=f},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(64));t.default=r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.UNITY_5_6=0]="UNITY_5_6",e[e.UNITY_2017=1]="UNITY_2017",e[e.UNITY_2018=2]="UNITY_2018"}(t.UnityVersion||(t.UnityVersion={}))},function(e,t,n){"use strict"},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(94));t.default={CAROUSEL:function(e){return(0,r.default)({carousel:!0,"carousel-slider":e})},WRAPPER:function(e,t){return(0,r.default)({"thumbs-wrapper":!e,"slider-wrapper":e,"axis-horizontal":"horizontal"===t,"axis-vertical":"horizontal"!==t})},SLIDER:function(e,t){return(0,r.default)({thumbs:!e,slider:e,animated:!t})},ITEM:function(e,t){return(0,r.default)({thumb:!e,slide:e,selected:t})},ARROW_PREV:function(e){return(0,r.default)({"control-arrow control-prev":!0,"control-disabled":e})},ARROW_NEXT:function(e){return(0,r.default)({"control-arrow control-next":!0,"control-disabled":e})},DOT:function(e){return(0,r.default)({dot:!0,selected:e})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return"translate3d"+("("+("horizontal"===t?[e,0,0]:[0,e,0]).join(",")+")")}},function(e,t,n){var r,o,i;o=[t,n(95)],void 0===(i="function"==typeof(r=function(e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(e){return e&&e.__esModule?e:{default:e}}(t);e.default=n.default})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=p(i),s=p(n(6)),l=p(n(31)),c=n(96),u=p(n(32)),f=p(n(33));function p(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return h.call(n),n.state={selectedItem:e.selectedItem,hasMount:!1,firstItem:0,itemSize:null,visibleItems:0,lastPosition:0,showArrows:!1,images:n.getImages()},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"componentDidMount",value:function(e){this.setupThumbs()}},{key:"componentWillReceiveProps",value:function(e,t){e.selectedItem!==this.state.selectedItem&&this.setState({selectedItem:e.selectedItem,firstItem:this.getFirstItem(e.selectedItem)}),e.children!==this.props.children&&this.setState({images:this.getImages()})}},{key:"componentDidUpdate",value:function(e){this.props.children!==e.children&&this.updateSizes()}},{key:"componentWillUnmount",value:function(){this.destroyThumbs()}},{key:"setupThumbs",value:function(){window.addEventListener("resize",this.updateSizes),window.addEventListener("DOMContentLoaded",this.updateSizes),this.updateSizes()}},{key:"destroyThumbs",value:function(){window.removeEventListener("resize",this.updateSizes),window.removeEventListener("DOMContentLoaded",this.updateSizes)}},{key:"getImages",value:function(){var e=i.Children.map(this.props.children,function(e,t){var n=e;return"img"!==e.type&&(n=i.Children.toArray(e.props.children).filter(function(e){return"img"===e.type})[0]),n&&0!==n.length?n:null});return 0===e.filter(function(e){return null!==e}).length?(console.warn("No images found! Can't build the thumb list without images. If you don't need thumbs, set showThumbs={false} in the Carousel. Note that it's not possible to get images rendered inside custom components. More info at https://github.com/leandrowd/react-responsive-carousel/blob/master/TROUBLESHOOTING.md"),null):e}},{key:"getFirstItem",value:function(e){var t=e;return e>=this.state.lastPosition&&(t=this.state.lastPosition),e<this.state.firstItem+this.state.visibleItems&&(t=this.state.firstItem),e<this.state.firstItem&&(t=e),t}},{key:"renderItems",value:function(){var e=this;return this.state.images.map(function(t,n){var o=l.default.ITEM(!1,n===e.state.selectedItem&&e.state.hasMount),i={key:n,ref:function(t){return e.setThumbsRef(t,n)},className:o,onClick:e.handleClickItem.bind(e,n,e.props.children[n]),onKeyDown:e.handleClickItem.bind(e,n,e.props.children[n])};return 0===n&&(t=a.default.cloneElement(t,{onLoad:e.setMountState})),a.default.createElement("li",r({},i,{role:"button",tabIndex:0}),t)})}},{key:"render",value:function(){if(!this.props.children)return null;var e,t=this.state.showArrows&&this.state.firstItem>0,n=this.state.showArrows&&this.state.firstItem<this.state.lastPosition,r=-this.state.firstItem*this.state.itemSize+"px",o=(0,u.default)(r,this.props.axis),i=this.props.transitionTime+"ms";return e={WebkitTransform:o,MozTransform:o,MsTransform:o,OTransform:o,transform:o,msTransform:o,WebkitTransitionDuration:i,MozTransitionDuration:i,MsTransitionDuration:i,OTransitionDuration:i,transitionDuration:i,msTransitionDuration:i},a.default.createElement("div",{className:l.default.CAROUSEL(!1)},a.default.createElement("div",{className:l.default.WRAPPER(!1),ref:this.setItemsWrapperRef},a.default.createElement("button",{type:"button",className:l.default.ARROW_PREV(!t),onClick:this.slideRight}),a.default.createElement(f.default,{tagName:"ul",selectedItem:this.state.selectedItem,className:l.default.SLIDER(!1,this.state.swiping),onSwipeLeft:this.slideLeft,onSwipeRight:this.slideRight,onSwipeMove:this.onSwipeMove,onSwipeStart:this.onSwipeStart,onSwipeEnd:this.onSwipeEnd,style:e,ref:this.setItemsListRef},this.renderItems()),a.default.createElement("button",{type:"button",className:l.default.ARROW_NEXT(!n),onClick:this.slideLeft})))}}]),t}();d.displayName="Thumbs",d.propsTypes={children:s.default.element.isRequired,transitionTime:s.default.number,selectedItem:s.default.number,thumbWidth:s.default.number},d.defaultProps={selectedItem:0,transitionTime:350,axis:"horizontal"};var h=function(){var e=this;this.setItemsWrapperRef=function(t){e.itemsWrapperRef=t},this.setItemsListRef=function(t){e.itemsListRef=t},this.setThumbsRef=function(t,n){e.thumbsRef||(e.thumbsRef=[]),e.thumbsRef[n]=t},this.updateSizes=function(){if(e.props.children&&e.itemsWrapperRef){var t=e.props.children.length,n=e.itemsWrapperRef.clientWidth,r=e.props.thumbWidth?e.props.thumbWidth:(0,c.outerWidth)(e.thumbsRef[0]),o=Math.floor(n/r),i=t-o,a=o<t;e.setState(function(t,n){return{itemSize:r,visibleItems:o,firstItem:a?e.getFirstItem(n.selectedItem):0,lastPosition:i,showArrows:a}})}},this.setMountState=function(){e.setState({hasMount:!0}),e.updateSizes()},this.handleClickItem=function(t,n,r){if(!r.keyCode||"Enter"===r.key){var o=e.props.onSelectItem;"function"==typeof o&&o(t,n)}},this.onSwipeStart=function(){e.setState({swiping:!0})},this.onSwipeEnd=function(){e.setState({swiping:!1})},this.onSwipeMove=function(t){var n=-e.state.firstItem*e.state.itemSize,r=-e.state.visibleItems*e.state.itemSize;0===n&&t>0&&(t=0),n===r&&t<0&&(t=0);var o=n+100/(e.itemsWrapperRef.clientWidth/t)+"%";e.itemsListRef&&["WebkitTransform","MozTransform","MsTransform","OTransform","transform","msTransform"].forEach(function(t){e.itemsListRef.style[t]=(0,u.default)(o,e.props.axis)})},this.slideRight=function(t){e.moveTo(e.state.firstItem-("number"==typeof t?t:1))},this.slideLeft=function(t){e.moveTo(e.state.firstItem+("number"==typeof t?t:1))},this.moveTo=function(t){t=(t=t<0?0:t)>=e.lastPosition?e.lastPosition:t,e.setState({firstItem:t,selectedItem:e.state.selectedItem})}};t.default=d},function(e,t,n){e.exports=n(1)(481)},function(e,t,n){e.exports=n(1)(260)},function(e,t,n){e.exports=n(1)(478)},function(e,t,n){e.exports=n(1)(186)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(89));t.default=r.default,e.exports=t.default},function(e,t,n){e.exports=n(1)(246)},function(e,t,n){e.exports=n.p+"ca6e18d297f499728270623baa09432b.jpg"},function(e,t,n){e.exports=n.p+"a1d58cf19b77fb6f6917befb472cdc8d.jpg"},function(e,t,n){e.exports=n.p+"88c332112e8e3ec1a787516c75bba4ad.png"},function(e,t,n){e.exports=n.p+"f215b8ab565c09e3da83575440569612.jpg"},function(e,t,n){e.exports=n.p+"f2f30dc7704b93cd414dba2533f7a0f7.jpg"},function(e,t,n){e.exports=n.p+"6254da913578421dc62065fede06f3e9.jpg"},function(e,t,n){e.exports=n.p+"6a50cb30e6d0464aba45ec14263058d2.jpg"},function(e,t,n){e.exports=n(1)(189)},function(e,t,n){"use strict";e.exports=n(98)},function(e,t,n){e.exports=n(1)(253)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DebounceCache=t.onlyResolvesLast=t.debounce=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){return e&&e.__esModule?e:{default:e}}(n(111));var i=t.debounce=function(e,t,n){return(0,o.default)(e,t,n)},a=t.onlyResolvesLast=function(e){var t=void 0;return function(){t&&t();var n=function(e){var t=!1;return{promise:new Promise(function(n,r){e.then(function(e){return t?void 0:n(e)},function(e){return t?void 0:r(e)})}),cancel:function(){t=!0}}}(e.apply(void 0,arguments)),r=n.promise,o=n.cancel;return t=o,r}},s=t.DebounceCache=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.getDebouncedFunction=function(e,n,r,o){var s=r.key,l=r.onlyResolvesLast,c=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(r,["key","onlyResolvesLast"]),u=s.apply(void 0,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(o));if(!t.debounceCache[u]){var f=i(e,n,c);l&&(f=a(f)),t.debounceCache[u]=f}return t.debounceCache[u]},this.debounceCache={}},l={key:function(){return null},onlyResolvesLast:!0};t.default=function(e,t,n){var o=r({},l,n),i=new s;return function(){for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];return i.getDebouncedFunction(e,t,o,r).apply(void 0,r)}}},function(e,t,n){e.exports=n(1)(309)},function(e,t,n){"use strict";t.__esModule=!0;var r=l(n(23)),o=l(n(0)),i=l(n(6)),a=n(18),s=l(n(21));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.history=(0,a.createBrowserHistory)(r.props),c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,r.default)(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return o.default.createElement(s.default,{history:this.history,children:this.props.children})},t}(o.default.Component);u.propTypes={basename:i.default.string,forceRefresh:i.default.bool,getUserConfirmation:i.default.func,keyLength:i.default.number,children:i.default.node},t.default=u},function(e,t,n){e.exports=n(1)(140)},function(e,t,n){e.exports=n(1)(141)},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=f(n(15)),a=f(n(19)),s=n(14),l=n(11),c=f(n(20)),u=n(24);function f(e){return e&&e.__esModule?e:{default:e}}var p=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(u.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,u.supportsHistory)(),f=!(0,u.supportsPopStateOnHashChange)(),d=e.forceRefresh,h=void 0!==d&&d,m=e.getUserConfirmation,v=void 0===m?u.getConfirmation:m,y=e.keyLength,b=void 0===y?6:y,g=e.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(e.basename)):"",_=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,i.default)(!g||(0,l.hasBasename)(a,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+g+'".'),g&&(a=(0,l.stripBasename)(a,g)),(0,s.createLocation)(a,r,n)},w=function(){return Math.random().toString(36).substr(2,b)},E=(0,c.default)(),S=function(e){o(I,e),I.length=t.length,E.notifyListeners(I.location,I.action)},P=function(e){(0,u.isExtraneousPopstateEvent)(e)||k(_(e.state))},O=function(){k(_(p()))},R=!1,k=function(e){R?(R=!1,S()):E.confirmTransitionTo(e,"POP",v,function(t){t?S({action:"POP",location:e}):j(e)})},j=function(e){var t=I.location,n=x.indexOf(t.key);-1===n&&(n=0);var r=x.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(R=!0,L(o))},C=_(p()),x=[C.key],T=function(e){return g+(0,l.createPath)(e)},L=function(e){t.go(e)},M=0,N=function(e){1===(M+=e)?((0,u.addEventListener)(window,"popstate",P),f&&(0,u.addEventListener)(window,"hashchange",O)):0===M&&((0,u.removeEventListener)(window,"popstate",P),f&&(0,u.removeEventListener)(window,"hashchange",O))},A=!1,I={length:t.length,action:"POP",location:C,createHref:T,push:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,s.createLocation)(e,o,w(),I.location);E.confirmTransitionTo(a,"PUSH",v,function(e){if(e){var r=T(a),o=a.key,s=a.state;if(n)if(t.pushState({key:o,state:s},null,r),h)window.location.href=r;else{var l=x.indexOf(I.location.key),c=x.slice(0,-1===l?0:l+1);c.push(a.key),x=c,S({action:"PUSH",location:a})}else(0,i.default)(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,s.createLocation)(e,o,w(),I.location);E.confirmTransitionTo(a,"REPLACE",v,function(e){if(e){var r=T(a),o=a.key,s=a.state;if(n)if(t.replaceState({key:o,state:s},null,r),h)window.location.replace(r);else{var l=x.indexOf(I.location.key);-1!==l&&(x[l]=a.key),S({action:"REPLACE",location:a})}else(0,i.default)(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:L,goBack:function(){return L(-1)},goForward:function(){return L(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return A||(N(1),A=!0),function(){return A&&(A=!1,N(-1)),t()}},listen:function(e){var t=E.appendListener(e);return N(1),function(){N(-1),t()}}};return I}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(15)),i=u(n(19)),a=n(14),s=n(11),l=u(n(20)),c=n(24);function u(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,s.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:s.stripLeadingSlash,decodePath:s.addLeadingSlash},slash:{encodePath:s.addLeadingSlash,decodePath:s.addLeadingSlash}},p=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},d=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(c.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,c.supportsGoWithoutReloadUsingHash)(),u=e.getUserConfirmation,h=void 0===u?c.getConfirmation:u,m=e.hashType,v=void 0===m?"slash":m,y=e.basename?(0,s.stripTrailingSlash)((0,s.addLeadingSlash)(e.basename)):"",b=f[v],g=b.encodePath,_=b.decodePath,w=function(){var e=_(p());return(0,o.default)(!y||(0,s.hasBasename)(e,y),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+y+'".'),y&&(e=(0,s.stripBasename)(e,y)),(0,a.createLocation)(e)},E=(0,l.default)(),S=function(e){r(F,e),F.length=t.length,E.notifyListeners(F.location,F.action)},P=!1,O=null,R=function(){var e=p(),t=g(e);if(e!==t)d(t);else{var n=w(),r=F.location;if(!P&&(0,a.locationsAreEqual)(r,n))return;if(O===(0,s.createPath)(n))return;O=null,k(n)}},k=function(e){P?(P=!1,S()):E.confirmTransitionTo(e,"POP",h,function(t){t?S({action:"POP",location:e}):j(e)})},j=function(e){var t=F.location,n=L.lastIndexOf((0,s.createPath)(t));-1===n&&(n=0);var r=L.lastIndexOf((0,s.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(P=!0,M(o))},C=p(),x=g(C);C!==x&&d(x);var T=w(),L=[(0,s.createPath)(T)],M=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},N=0,A=function(e){1===(N+=e)?(0,c.addEventListener)(window,"hashchange",R):0===N&&(0,c.removeEventListener)(window,"hashchange",R)},I=!1,F={length:t.length,action:"POP",location:T,createHref:function(e){return"#"+g(y+(0,s.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,F.location);E.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(y+t);if(p()!==r){O=t,function(e){window.location.hash=e}(r);var i=L.lastIndexOf((0,s.createPath)(F.location)),a=L.slice(0,-1===i?0:i+1);a.push(t),L=a,S({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),S()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,F.location);E.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(y+t);p()!==r&&(O=t,d(r));var o=L.indexOf((0,s.createPath)(F.location));-1!==o&&(L[o]=t),S({action:"REPLACE",location:n})}})},go:M,goBack:function(){return M(-1)},goForward:function(){return M(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return I||(A(1),I=!0),function(){return I&&(I=!1,A(-1)),t()}},listen:function(e){var t=E.appendListener(e);return A(1),function(){A(-1),t()}}};return F}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=c(n(15)),a=n(11),s=n(14),l=c(n(20));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,c=void 0===n?["/"]:n,f=e.initialIndex,p=void 0===f?0:f,d=e.keyLength,h=void 0===d?6:d,m=(0,l.default)(),v=function(e){o(E,e),E.length=E.entries.length,m.notifyListeners(E.location,E.action)},y=function(){return Math.random().toString(36).substr(2,h)},b=u(p,0,c.length-1),g=c.map(function(e){return"string"==typeof e?(0,s.createLocation)(e,void 0,y()):(0,s.createLocation)(e,void 0,e.key||y())}),_=a.createPath,w=function(e){var n=u(E.index+e,0,E.entries.length-1),r=E.entries[n];m.confirmTransitionTo(r,"POP",t,function(e){e?v({action:"POP",location:r,index:n}):v()})},E={length:g.length,action:"POP",location:g[b],index:b,entries:g,createHref:_,push:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,y(),E.location);m.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=E.index+1,n=E.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),v({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,y(),E.location);m.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(E.entries[E.index]=o,v({action:"REPLACE",location:o}))})},go:w,goBack:function(){return w(-1)},goForward:function(){return w(1)},canGo:function(e){var t=E.index+e;return t>=0&&t<E.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return E}},function(e,t,n){e.exports=n(1)(87)},function(e,t,n){"use strict";t.__esModule=!0;var r=l(n(23)),o=l(n(0)),i=l(n(6)),a=n(18),s=l(n(21));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.history=(0,a.createHashHistory)(r.props),c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,r.default)(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return o.default.createElement(s.default,{history:this.history,children:this.props.children})},t}(o.default.Component);u.propTypes={basename:i.default.string,getUserConfirmation:i.default.func,hashType:i.default.oneOf(["hashbang","noslash","slash"]),children:i.default.node},t.default=u},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(62));t.default=r.default},function(e,t,n){e.exports=n(1)(284)},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=c(n(0)),a=c(n(6)),s=c(n(26)),l=c(n(25));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e){var t=e.to,n=e.exact,a=e.strict,c=e.location,u=e.activeClassName,f=e.className,p=e.activeStyle,d=e.style,h=e.isActive,m=e["aria-current"],v=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),y="object"===(void 0===t?"undefined":o(t))?t.pathname:t,b=y&&y.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return i.default.createElement(s.default,{path:b,exact:n,strict:a,location:c,children:function(e){var n=e.location,o=e.match,a=!!(h?h(o,n):o);return i.default.createElement(l.default,r({to:t,className:a?[f,u].filter(function(e){return e}).join(" "):f,style:a?r({},d,p):d,"aria-current":a&&m||null},v))}})};u.propTypes={to:l.default.propTypes.to,exact:a.default.bool,strict:a.default.bool,location:a.default.object,activeClassName:a.default.string,className:a.default.string,activeStyle:a.default.object,style:a.default.object,isActive:a.default.func,"aria-current":a.default.oneOf(["page","step","location","date","time","true"])},u.defaultProps={activeClassName:"active","aria-current":"page"},t.default=u},function(e,t,n){e.exports=n(1)(154)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(66));t.default=r.default},function(e,t,n){e.exports=n(1)(288)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(68));t.default=r.default},function(e,t,n){e.exports=n(1)(289)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(70));t.default=r.default},function(e,t,n){e.exports=n(1)(291)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(72));t.default=r.default},function(e,t,n){e.exports=n(1)(292)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(74));t.default=r.default},function(e,t,n){e.exports=n(1)(152)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(76));t.default=r.default},function(e,t,n){e.exports=n(1)(88)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(78));t.default=r.default},function(e,t,n){e.exports=n(1)(293)},function(e,t){},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(27);n(28);var o=function(){function e(t,n,o){var i=o||{};this.buildJsonPath=t,this.unityLoaderJsPath=n,this.uniqueID=++e.uniqueID,this.unityEvents=[],this.unityConfig={modules:i.modules||{},unityVersion:i.unityVersion||r.UnityVersion.UNITY_2018,adjustOnWindowResize:i.adjustOnWindowResize,id:i.id||"nill"}}return e.prototype.setComponentInstance=function(e){this.unityComponent=e},e.prototype.setUnityInstance=function(e){this.unityInstance=e},e.prototype.setFullscreen=function(e){null!=this.unityInstance&&this.unityInstance.SetFullscreen(!0===e?1:0)},e.prototype.send=function(e,t,n){null!=this.unityInstance&&(void 0===n?this.unityInstance.SendMessage(e,t):this.unityInstance.SendMessage(e,t,n))},e.prototype.on=function(e,t){this.unityEvents.push({eventName:e,eventCallback:t}),void 0===window.ReactUnityWebGL&&(window.ReactUnityWebGL={}),window.ReactUnityWebGL[e]=function(e){return t(e)}},e.prototype.triggerUnityEvent=function(e,t){for(var n=0;n<this.unityEvents.length;n++)this.unityEvents[n].eventName===e&&this.unityEvents[n].eventCallback(t)},e.uniqueID=0,e}();t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(83)),s=i(n(88));n(28);var l=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n.unityLoaderService=new s.default,n.onWindowResizeBinding=n.onWindowResize.bind(n),n.unityContent=n.props.unityContent,n.unityContent.setComponentInstance(n),n}return r(t,e),t.prototype.onProgress=function(e,t){this.unityContent.triggerUnityEvent("progress",t),1===t&&this.unityContent.triggerUnityEvent("loaded")},t.prototype.onWindowResize=function(){!0===this.unityContent.unityConfig.adjustOnWindowResize&&this.adjustCanvasToContainer()},t.prototype.adjustCanvasToContainer=function(){var e=this.htmlElement.offsetWidth,t=this.htmlElement.offsetHeight,n=this.htmlElement.getElementsByTagName("canvas")[0];null!==n&&(n.height!==t&&(n.height=t),n.width!==e&&(n.width=e))},t.prototype.componentDidMount=function(){var e=this;window.addEventListener("resize",this.onWindowResizeBinding),this.unityLoaderService.append(this.props.unityContent.unityLoaderJsPath,function(){e.unityContent.setUnityInstance(UnityLoader.instantiate("__ReactUnityWebGL_"+e.props.unityContent.uniqueID+"__",e.props.unityContent.buildJsonPath,{onProgress:e.onProgress.bind(e),Module:e.props.unityContent.unityConfig.modules,width:"100%",height:"100%"}))})},t.prototype.componentWillUnmount=function(){window.removeEventListener("resize",this.onWindowResizeBinding)},t.prototype.render=function(){var e=this;return a.createElement("div",{className:this.props.className||"",ref:function(t){return e.htmlElement=t},id:"__ReactUnityWebGL_"+this.props.unityContent.uniqueID+"__",style:{width:this.props.width||"800px",height:this.props.height||"600px"}})},t}(a.Component);t.default=l},function(e,t,n){"use strict";e.exports=n(84)},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(85),o=n(86),i=n(87),a=n(29),s="function"==typeof Symbol&&Symbol.for,l=s?Symbol.for("react.element"):60103,c=s?Symbol.for("react.portal"):60106,u=s?Symbol.for("react.fragment"):60107,f=s?Symbol.for("react.strict_mode"):60108,p=s?Symbol.for("react.profiler"):60114,d=s?Symbol.for("react.provider"):60109,h=s?Symbol.for("react.context"):60110,m=s?Symbol.for("react.async_mode"):60111,v=s?Symbol.for("react.forward_ref"):60112;s&&Symbol.for("react.timeout");var y="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function _(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||g}function w(){}function E(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||g}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=_.prototype;var S=E.prototype=new w;S.constructor=E,r(S,_.prototype),S.isPureReactComponent=!0;var P={current:null},O=Object.prototype.hasOwnProperty,R={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)O.call(t,r)&&!R.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:l,type:e,key:i,ref:a,props:o,_owner:P.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var C=/\/+/g,x=[];function T(e,t,n,r){if(x.length){var o=x.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function L(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>x.length&&x.push(e)}function M(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case l:case c:i=!0}}if(i)return n(r,e,""===t?"."+N(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var s=t+N(o=e[a],a);i+=M(o,s,n,r)}else if(null===e||void 0===e?s=null:s="function"==typeof(s=y&&e[y]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),a=0;!(o=e.next()).done;)i+=M(o=o.value,s=t+N(o,a++),n,r);else"object"===o&&b("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,a.thatReturnsArgument):null!=e&&(j(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(C,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(C,"$&/")+"/"),t=T(t,i,r,o),null==e||M(e,"",I,t),L(t)}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=T(null,null,t,n),null==e||M(e,"",A,t),L(t)},count:function(e){return null==e?0:M(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return F(e,t,null,a.thatReturnsArgument),t},only:function(e){return j(e)||b("143"),e}},createRef:function(){return{current:null}},Component:_,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:h,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:v,render:e}},Fragment:u,StrictMode:f,unstable_AsyncMode:m,unstable_Profiler:p,createElement:k,cloneElement:function(e,t,n){(null===e||void 0===e)&&b("267",e);var o=void 0,i=r({},e.props),a=e.key,s=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,c=P.current),void 0!==t.key&&(a=""+t.key);var u=void 0;for(o in e.type&&e.type.defaultProps&&(u=e.type.defaultProps),t)O.call(t,o)&&!R.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==u?u[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){u=Array(o);for(var f=0;f<o;f++)u[f]=arguments[f+2];i.children=u}return{$$typeof:l,type:e.type,key:a,ref:s,props:i,_owner:c}},createFactory:function(e){var t=k.bind(null,e);return t.type=e,t},isValidElement:j,version:"16.4.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:P,assign:r}},D={default:W},U=D&&W||D;e.exports=U.default?U.default:U},function(e,t,n){e.exports=n(1)(56)},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,s,l){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,o,i,a,s,l],f=0;(c=new Error(t.replace(/%s/g,function(){return u[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.documentHead=document.getElementsByTagName("head")[0]}return e.prototype.append=function(e,t){this.unityLoaderScript=document.createElement("script"),this.unityLoaderScript.type="text/javascript",this.unityLoaderScript.async=!0,this.unityLoaderScript.src=e,this.unityLoaderScript.onload=function(){t()},this.documentHead.appendChild(this.unityLoaderScript)},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=l(o),a=n(6),s=l(n(90));function l(e){return e&&e.__esModule?e:{default:e}}var c={"ps-scroll-y":"onScrollY","ps-scroll-x":"onScrollX","ps-scroll-up":"onScrollUp","ps-scroll-down":"onScrollDown","ps-scroll-left":"onScrollLeft","ps-scroll-right":"onScrollRight","ps-y-reach-start":"onYReachStart","ps-y-reach-end":"onYReachEnd","ps-x-reach-start":"onXReachStart","ps-x-reach-end":"onXReachEnd"};Object.freeze(c);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleRef=n.handleRef.bind(n),n._handlerByEvent={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this._ps=new s.default(this._container,this.props.option),this._updateEventHook()}},{key:"componentDidUpdate",value:function(e){this._updateEventHook(e),this._ps.update()}},{key:"componentWillUnmount",value:function(){var e=this;Object.keys(this._handlerByEvent).forEach(function(t){var n=e._handlerByEvent[t];n&&e._container.removeEventListener(t,n,!1)}),this._handlerByEvent={},this._ps.destroy(),this._ps=null}},{key:"_updateEventHook",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object.keys(c).forEach(function(n){var r=e.props[c[n]],o=t[c[n]];if(r!==o){if(o){var i=e._handlerByEvent[n];e._container.removeEventListener(n,i,!1),e._handlerByEvent[n]=null}if(r){var a=function(){return r(e._container)};e._container.addEventListener(n,a,!1),e._handlerByEvent[n]=a}}})}},{key:"updateScroll",value:function(){this._ps.update()}},{key:"handleRef",value:function(e){this._container=e,this.props.containerRef(e)}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.component,r=e.className,o=e.style,a=n;return i.default.createElement(a,{style:o,className:"scrollbar-container "+r,ref:this.handleRef},t)}}]),t}();t.default=u,u.defaultProps={className:"",style:void 0,option:void 0,containerRef:function(){},onScrollY:void 0,onScrollX:void 0,onScrollUp:void 0,onScrollDown:void 0,onScrollLeft:void 0,onScrollRight:void 0,onYReachStart:void 0,onYReachEnd:void 0,onXReachStart:void 0,onXReachEnd:void 0,component:"div"},u.propTypes={children:a.PropTypes.node.isRequired,className:a.PropTypes.string,style:a.PropTypes.object,option:a.PropTypes.object,containerRef:a.PropTypes.func,onScrollY:a.PropTypes.func,onScrollX:a.PropTypes.func,onScrollUp:a.PropTypes.func,onScrollDown:a.PropTypes.func,onScrollLeft:a.PropTypes.func,onScrollRight:a.PropTypes.func,onYReachStart:a.PropTypes.func,onYReachEnd:a.PropTypes.func,onXReachStart:a.PropTypes.func,onXReachEnd:a.PropTypes.func,component:a.PropTypes.string},e.exports=t.default},function(e,t,n){"use strict";
/*!
 * perfect-scrollbar v1.4.0
 * (c) 2018 Hyunje Jun
 * @license MIT
 */function r(e){return getComputedStyle(e)}function o(e,t){for(var n in t){var r=t[n];"number"==typeof r&&(r+="px"),e.style[n]=r}return e}function i(e){var t=document.createElement("div");return t.className=e,t}var a="undefined"!=typeof Element&&(Element.prototype.matches||Element.prototype.webkitMatchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector);function s(e,t){if(!a)throw new Error("No element matching method supported");return a.call(e,t)}function l(e){e.remove?e.remove():e.parentNode&&e.parentNode.removeChild(e)}function c(e,t){return Array.prototype.filter.call(e.children,function(e){return s(e,t)})}var u={main:"ps",element:{thumb:function(e){return"ps__thumb-"+e},rail:function(e){return"ps__rail-"+e},consuming:"ps__child--consume"},state:{focus:"ps--focus",clicking:"ps--clicking",active:function(e){return"ps--active-"+e},scrolling:function(e){return"ps--scrolling-"+e}}},f={x:null,y:null};function p(e,t){var n=e.element.classList,r=u.state.scrolling(t);n.contains(r)?clearTimeout(f[t]):n.add(r)}function d(e,t){f[t]=setTimeout(function(){return e.isAlive&&e.element.classList.remove(u.state.scrolling(t))},e.settings.scrollingThreshold)}var h=function(e){this.element=e,this.handlers={}},m={isEmpty:{configurable:!0}};h.prototype.bind=function(e,t){void 0===this.handlers[e]&&(this.handlers[e]=[]),this.handlers[e].push(t),this.element.addEventListener(e,t,!1)},h.prototype.unbind=function(e,t){var n=this;this.handlers[e]=this.handlers[e].filter(function(r){return!(!t||r===t)||(n.element.removeEventListener(e,r,!1),!1)})},h.prototype.unbindAll=function(){for(var e in this.handlers)this.unbind(e)},m.isEmpty.get=function(){var e=this;return Object.keys(this.handlers).every(function(t){return 0===e.handlers[t].length})},Object.defineProperties(h.prototype,m);var v=function(){this.eventElements=[]};function y(e){if("function"==typeof window.CustomEvent)return new CustomEvent(e);var t=document.createEvent("CustomEvent");return t.initCustomEvent(e,!1,!1,void 0),t}v.prototype.eventElement=function(e){var t=this.eventElements.filter(function(t){return t.element===e})[0];return t||(t=new h(e),this.eventElements.push(t)),t},v.prototype.bind=function(e,t,n){this.eventElement(e).bind(t,n)},v.prototype.unbind=function(e,t,n){var r=this.eventElement(e);r.unbind(t,n),r.isEmpty&&this.eventElements.splice(this.eventElements.indexOf(r),1)},v.prototype.unbindAll=function(){this.eventElements.forEach(function(e){return e.unbindAll()}),this.eventElements=[]},v.prototype.once=function(e,t,n){var r=this.eventElement(e),o=function(e){r.unbind(t,o),n(e)};r.bind(t,o)};var b=function(e,t,n,r,o){var i;if(void 0===r&&(r=!0),void 0===o&&(o=!1),"top"===t)i=["contentHeight","containerHeight","scrollTop","y","up","down"];else{if("left"!==t)throw new Error("A proper axis should be provided");i=["contentWidth","containerWidth","scrollLeft","x","left","right"]}!function(e,t,n,r,o){var i=n[0],a=n[1],s=n[2],l=n[3],c=n[4],u=n[5];void 0===r&&(r=!0);void 0===o&&(o=!1);var f=e.element;e.reach[l]=null,f[s]<1&&(e.reach[l]="start");f[s]>e[i]-e[a]-1&&(e.reach[l]="end");t&&(f.dispatchEvent(y("ps-scroll-"+l)),t<0?f.dispatchEvent(y("ps-scroll-"+c)):t>0&&f.dispatchEvent(y("ps-scroll-"+u)),r&&function(e,t){p(e,t),d(e,t)}(e,l));e.reach[l]&&(t||o)&&f.dispatchEvent(y("ps-"+l+"-reach-"+e.reach[l]))}(e,n,i,r,o)};function g(e){return parseInt(e,10)||0}var _={isWebKit:"undefined"!=typeof document&&"WebkitAppearance"in document.documentElement.style,supportsTouch:"undefined"!=typeof window&&("ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch),supportsIePointer:"undefined"!=typeof navigator&&navigator.msMaxTouchPoints,isChrome:"undefined"!=typeof navigator&&/Chrome/i.test(navigator&&navigator.userAgent)},w=function(e){var t=e.element,n=Math.floor(t.scrollTop);e.containerWidth=t.clientWidth,e.containerHeight=t.clientHeight,e.contentWidth=t.scrollWidth,e.contentHeight=t.scrollHeight,t.contains(e.scrollbarXRail)||(c(t,u.element.rail("x")).forEach(function(e){return l(e)}),t.appendChild(e.scrollbarXRail)),t.contains(e.scrollbarYRail)||(c(t,u.element.rail("y")).forEach(function(e){return l(e)}),t.appendChild(e.scrollbarYRail)),!e.settings.suppressScrollX&&e.containerWidth+e.settings.scrollXMarginOffset<e.contentWidth?(e.scrollbarXActive=!0,e.railXWidth=e.containerWidth-e.railXMarginWidth,e.railXRatio=e.containerWidth/e.railXWidth,e.scrollbarXWidth=E(e,g(e.railXWidth*e.containerWidth/e.contentWidth)),e.scrollbarXLeft=g((e.negativeScrollAdjustment+t.scrollLeft)*(e.railXWidth-e.scrollbarXWidth)/(e.contentWidth-e.containerWidth))):e.scrollbarXActive=!1,!e.settings.suppressScrollY&&e.containerHeight+e.settings.scrollYMarginOffset<e.contentHeight?(e.scrollbarYActive=!0,e.railYHeight=e.containerHeight-e.railYMarginHeight,e.railYRatio=e.containerHeight/e.railYHeight,e.scrollbarYHeight=E(e,g(e.railYHeight*e.containerHeight/e.contentHeight)),e.scrollbarYTop=g(n*(e.railYHeight-e.scrollbarYHeight)/(e.contentHeight-e.containerHeight))):e.scrollbarYActive=!1,e.scrollbarXLeft>=e.railXWidth-e.scrollbarXWidth&&(e.scrollbarXLeft=e.railXWidth-e.scrollbarXWidth),e.scrollbarYTop>=e.railYHeight-e.scrollbarYHeight&&(e.scrollbarYTop=e.railYHeight-e.scrollbarYHeight),function(e,t){var n={width:t.railXWidth},r=Math.floor(e.scrollTop);t.isRtl?n.left=t.negativeScrollAdjustment+e.scrollLeft+t.containerWidth-t.contentWidth:n.left=e.scrollLeft;t.isScrollbarXUsingBottom?n.bottom=t.scrollbarXBottom-r:n.top=t.scrollbarXTop+r;o(t.scrollbarXRail,n);var i={top:r,height:t.railYHeight};t.isScrollbarYUsingRight?t.isRtl?i.right=t.contentWidth-(t.negativeScrollAdjustment+e.scrollLeft)-t.scrollbarYRight-t.scrollbarYOuterWidth:i.right=t.scrollbarYRight-e.scrollLeft:t.isRtl?i.left=t.negativeScrollAdjustment+e.scrollLeft+2*t.containerWidth-t.contentWidth-t.scrollbarYLeft-t.scrollbarYOuterWidth:i.left=t.scrollbarYLeft+e.scrollLeft;o(t.scrollbarYRail,i),o(t.scrollbarX,{left:t.scrollbarXLeft,width:t.scrollbarXWidth-t.railBorderXWidth}),o(t.scrollbarY,{top:t.scrollbarYTop,height:t.scrollbarYHeight-t.railBorderYWidth})}(t,e),e.scrollbarXActive?t.classList.add(u.state.active("x")):(t.classList.remove(u.state.active("x")),e.scrollbarXWidth=0,e.scrollbarXLeft=0,t.scrollLeft=0),e.scrollbarYActive?t.classList.add(u.state.active("y")):(t.classList.remove(u.state.active("y")),e.scrollbarYHeight=0,e.scrollbarYTop=0,t.scrollTop=0)};function E(e,t){return e.settings.minScrollbarLength&&(t=Math.max(t,e.settings.minScrollbarLength)),e.settings.maxScrollbarLength&&(t=Math.min(t,e.settings.maxScrollbarLength)),t}function S(e,t){var n=t[0],r=t[1],o=t[2],i=t[3],a=t[4],s=t[5],l=t[6],c=t[7],f=t[8],h=e.element,m=null,v=null,y=null;function b(t){h[l]=m+y*(t[o]-v),p(e,c),w(e),t.stopPropagation(),t.preventDefault()}function g(){d(e,c),e[f].classList.remove(u.state.clicking),e.event.unbind(e.ownerDocument,"mousemove",b)}e.event.bind(e[a],"mousedown",function(t){m=h[l],v=t[o],y=(e[r]-e[n])/(e[i]-e[s]),e.event.bind(e.ownerDocument,"mousemove",b),e.event.once(e.ownerDocument,"mouseup",g),e[f].classList.add(u.state.clicking),t.stopPropagation(),t.preventDefault()})}var P={"click-rail":function(e){e.event.bind(e.scrollbarY,"mousedown",function(e){return e.stopPropagation()}),e.event.bind(e.scrollbarYRail,"mousedown",function(t){var n=t.pageY-window.pageYOffset-e.scrollbarYRail.getBoundingClientRect().top>e.scrollbarYTop?1:-1;e.element.scrollTop+=n*e.containerHeight,w(e),t.stopPropagation()}),e.event.bind(e.scrollbarX,"mousedown",function(e){return e.stopPropagation()}),e.event.bind(e.scrollbarXRail,"mousedown",function(t){var n=t.pageX-window.pageXOffset-e.scrollbarXRail.getBoundingClientRect().left>e.scrollbarXLeft?1:-1;e.element.scrollLeft+=n*e.containerWidth,w(e),t.stopPropagation()})},"drag-thumb":function(e){S(e,["containerWidth","contentWidth","pageX","railXWidth","scrollbarX","scrollbarXWidth","scrollLeft","x","scrollbarXRail"]),S(e,["containerHeight","contentHeight","pageY","railYHeight","scrollbarY","scrollbarYHeight","scrollTop","y","scrollbarYRail"])},keyboard:function(e){var t=e.element;e.event.bind(e.ownerDocument,"keydown",function(n){if(!(n.isDefaultPrevented&&n.isDefaultPrevented()||n.defaultPrevented)&&(s(t,":hover")||s(e.scrollbarX,":focus")||s(e.scrollbarY,":focus"))){var r=document.activeElement?document.activeElement:e.ownerDocument.activeElement;if(r){if("IFRAME"===r.tagName)r=r.contentDocument.activeElement;else for(;r.shadowRoot;)r=r.shadowRoot.activeElement;if(function(e){return s(e,"input,[contenteditable]")||s(e,"select,[contenteditable]")||s(e,"textarea,[contenteditable]")||s(e,"button,[contenteditable]")}(r))return}var o=0,i=0;switch(n.which){case 37:o=n.metaKey?-e.contentWidth:n.altKey?-e.containerWidth:-30;break;case 38:i=n.metaKey?e.contentHeight:n.altKey?e.containerHeight:30;break;case 39:o=n.metaKey?e.contentWidth:n.altKey?e.containerWidth:30;break;case 40:i=n.metaKey?-e.contentHeight:n.altKey?-e.containerHeight:-30;break;case 32:i=n.shiftKey?e.containerHeight:-e.containerHeight;break;case 33:i=e.containerHeight;break;case 34:i=-e.containerHeight;break;case 36:i=e.contentHeight;break;case 35:i=-e.contentHeight;break;default:return}e.settings.suppressScrollX&&0!==o||e.settings.suppressScrollY&&0!==i||(t.scrollTop-=i,t.scrollLeft+=o,w(e),function(n,r){var o=Math.floor(t.scrollTop);if(0===n){if(!e.scrollbarYActive)return!1;if(0===o&&r>0||o>=e.contentHeight-e.containerHeight&&r<0)return!e.settings.wheelPropagation}var i=t.scrollLeft;if(0===r){if(!e.scrollbarXActive)return!1;if(0===i&&n<0||i>=e.contentWidth-e.containerWidth&&n>0)return!e.settings.wheelPropagation}return!0}(o,i)&&n.preventDefault())}})},wheel:function(e){var t=e.element;function n(n){var o=function(e){var t=e.deltaX,n=-1*e.deltaY;return void 0!==t&&void 0!==n||(t=-1*e.wheelDeltaX/6,n=e.wheelDeltaY/6),e.deltaMode&&1===e.deltaMode&&(t*=10,n*=10),t!=t&&n!=n&&(t=0,n=e.wheelDelta),e.shiftKey?[-n,-t]:[t,n]}(n),i=o[0],a=o[1];if(!function(e,n,o){if(!_.isWebKit&&t.querySelector("select:focus"))return!0;if(!t.contains(e))return!1;for(var i=e;i&&i!==t;){if(i.classList.contains(u.element.consuming))return!0;var a=r(i);if([a.overflow,a.overflowX,a.overflowY].join("").match(/(scroll|auto)/)){var s=i.scrollHeight-i.clientHeight;if(s>0&&!(0===i.scrollTop&&o>0||i.scrollTop===s&&o<0))return!0;var l=i.scrollWidth-i.clientWidth;if(l>0&&!(0===i.scrollLeft&&n<0||i.scrollLeft===l&&n>0))return!0}i=i.parentNode}return!1}(n.target,i,a)){var s=!1;e.settings.useBothWheelAxes?e.scrollbarYActive&&!e.scrollbarXActive?(a?t.scrollTop-=a*e.settings.wheelSpeed:t.scrollTop+=i*e.settings.wheelSpeed,s=!0):e.scrollbarXActive&&!e.scrollbarYActive&&(i?t.scrollLeft+=i*e.settings.wheelSpeed:t.scrollLeft-=a*e.settings.wheelSpeed,s=!0):(t.scrollTop-=a*e.settings.wheelSpeed,t.scrollLeft+=i*e.settings.wheelSpeed),w(e),(s=s||function(n,r){var o=Math.floor(t.scrollTop),i=0===t.scrollTop,a=o+t.offsetHeight===t.scrollHeight,s=0===t.scrollLeft,l=t.scrollLeft+t.offsetWidth===t.scrollWidth;return!(Math.abs(r)>Math.abs(n)?i||a:s||l)||!e.settings.wheelPropagation}(i,a))&&!n.ctrlKey&&(n.stopPropagation(),n.preventDefault())}}void 0!==window.onwheel?e.event.bind(t,"wheel",n):void 0!==window.onmousewheel&&e.event.bind(t,"mousewheel",n)},touch:function(e){if(_.supportsTouch||_.supportsIePointer){var t=e.element,n={},o=0,i={},a=null;_.supportsTouch?(e.event.bind(t,"touchstart",f),e.event.bind(t,"touchmove",p),e.event.bind(t,"touchend",d)):_.supportsIePointer&&(window.PointerEvent?(e.event.bind(t,"pointerdown",f),e.event.bind(t,"pointermove",p),e.event.bind(t,"pointerup",d)):window.MSPointerEvent&&(e.event.bind(t,"MSPointerDown",f),e.event.bind(t,"MSPointerMove",p),e.event.bind(t,"MSPointerUp",d)))}function s(n,r){t.scrollTop-=r,t.scrollLeft-=n,w(e)}function l(e){return e.targetTouches?e.targetTouches[0]:e}function c(e){return!(e.pointerType&&"pen"===e.pointerType&&0===e.buttons||(!e.targetTouches||1!==e.targetTouches.length)&&(!e.pointerType||"mouse"===e.pointerType||e.pointerType===e.MSPOINTER_TYPE_MOUSE))}function f(e){if(c(e)){var t=l(e);n.pageX=t.pageX,n.pageY=t.pageY,o=(new Date).getTime(),null!==a&&clearInterval(a)}}function p(a){if(c(a)){var f=l(a),p={pageX:f.pageX,pageY:f.pageY},d=p.pageX-n.pageX,h=p.pageY-n.pageY;if(function(e,n,o){if(!t.contains(e))return!1;for(var i=e;i&&i!==t;){if(i.classList.contains(u.element.consuming))return!0;var a=r(i);if([a.overflow,a.overflowX,a.overflowY].join("").match(/(scroll|auto)/)){var s=i.scrollHeight-i.clientHeight;if(s>0&&!(0===i.scrollTop&&o>0||i.scrollTop===s&&o<0))return!0;var l=i.scrollLeft-i.clientWidth;if(l>0&&!(0===i.scrollLeft&&n<0||i.scrollLeft===l&&n>0))return!0}i=i.parentNode}return!1}(a.target,d,h))return;s(d,h),n=p;var m=(new Date).getTime(),v=m-o;v>0&&(i.x=d/v,i.y=h/v,o=m),function(n,r){var o=Math.floor(t.scrollTop),i=t.scrollLeft,a=Math.abs(n),s=Math.abs(r);if(s>a){if(r<0&&o===e.contentHeight-e.containerHeight||r>0&&0===o)return 0===window.scrollY&&r>0&&_.isChrome}else if(a>s&&(n<0&&i===e.contentWidth-e.containerWidth||n>0&&0===i))return!0;return!0}(d,h)&&a.preventDefault()}}function d(){e.settings.swipeEasing&&(clearInterval(a),a=setInterval(function(){e.isInitialized?clearInterval(a):i.x||i.y?Math.abs(i.x)<.01&&Math.abs(i.y)<.01?clearInterval(a):(s(30*i.x,30*i.y),i.x*=.8,i.y*=.8):clearInterval(a)},10))}}},O=function(e,t){var n=this;if(void 0===t&&(t={}),"string"==typeof e&&(e=document.querySelector(e)),!e||!e.nodeName)throw new Error("no element is specified to initialize PerfectScrollbar");for(var a in this.element=e,e.classList.add(u.main),this.settings={handlers:["click-rail","drag-thumb","keyboard","wheel","touch"],maxScrollbarLength:null,minScrollbarLength:null,scrollingThreshold:1e3,scrollXMarginOffset:0,scrollYMarginOffset:0,suppressScrollX:!1,suppressScrollY:!1,swipeEasing:!0,useBothWheelAxes:!1,wheelPropagation:!0,wheelSpeed:1},t)n.settings[a]=t[a];this.containerWidth=null,this.containerHeight=null,this.contentWidth=null,this.contentHeight=null;var s=function(){return e.classList.add(u.state.focus)},l=function(){return e.classList.remove(u.state.focus)};this.isRtl="rtl"===r(e).direction,this.isNegativeScroll=function(){var t,n=e.scrollLeft;return e.scrollLeft=-1,t=e.scrollLeft<0,e.scrollLeft=n,t}(),this.negativeScrollAdjustment=this.isNegativeScroll?e.scrollWidth-e.clientWidth:0,this.event=new v,this.ownerDocument=e.ownerDocument||document,this.scrollbarXRail=i(u.element.rail("x")),e.appendChild(this.scrollbarXRail),this.scrollbarX=i(u.element.thumb("x")),this.scrollbarXRail.appendChild(this.scrollbarX),this.scrollbarX.setAttribute("tabindex",0),this.event.bind(this.scrollbarX,"focus",s),this.event.bind(this.scrollbarX,"blur",l),this.scrollbarXActive=null,this.scrollbarXWidth=null,this.scrollbarXLeft=null;var c=r(this.scrollbarXRail);this.scrollbarXBottom=parseInt(c.bottom,10),isNaN(this.scrollbarXBottom)?(this.isScrollbarXUsingBottom=!1,this.scrollbarXTop=g(c.top)):this.isScrollbarXUsingBottom=!0,this.railBorderXWidth=g(c.borderLeftWidth)+g(c.borderRightWidth),o(this.scrollbarXRail,{display:"block"}),this.railXMarginWidth=g(c.marginLeft)+g(c.marginRight),o(this.scrollbarXRail,{display:""}),this.railXWidth=null,this.railXRatio=null,this.scrollbarYRail=i(u.element.rail("y")),e.appendChild(this.scrollbarYRail),this.scrollbarY=i(u.element.thumb("y")),this.scrollbarYRail.appendChild(this.scrollbarY),this.scrollbarY.setAttribute("tabindex",0),this.event.bind(this.scrollbarY,"focus",s),this.event.bind(this.scrollbarY,"blur",l),this.scrollbarYActive=null,this.scrollbarYHeight=null,this.scrollbarYTop=null;var f=r(this.scrollbarYRail);this.scrollbarYRight=parseInt(f.right,10),isNaN(this.scrollbarYRight)?(this.isScrollbarYUsingRight=!1,this.scrollbarYLeft=g(f.left)):this.isScrollbarYUsingRight=!0,this.scrollbarYOuterWidth=this.isRtl?function(e){var t=r(e);return g(t.width)+g(t.paddingLeft)+g(t.paddingRight)+g(t.borderLeftWidth)+g(t.borderRightWidth)}(this.scrollbarY):null,this.railBorderYWidth=g(f.borderTopWidth)+g(f.borderBottomWidth),o(this.scrollbarYRail,{display:"block"}),this.railYMarginHeight=g(f.marginTop)+g(f.marginBottom),o(this.scrollbarYRail,{display:""}),this.railYHeight=null,this.railYRatio=null,this.reach={x:e.scrollLeft<=0?"start":e.scrollLeft>=this.contentWidth-this.containerWidth?"end":null,y:e.scrollTop<=0?"start":e.scrollTop>=this.contentHeight-this.containerHeight?"end":null},this.isAlive=!0,this.settings.handlers.forEach(function(e){return P[e](n)}),this.lastScrollTop=Math.floor(e.scrollTop),this.lastScrollLeft=e.scrollLeft,this.event.bind(this.element,"scroll",function(e){return n.onScroll(e)}),w(this)};O.prototype.update=function(){this.isAlive&&(this.negativeScrollAdjustment=this.isNegativeScroll?this.element.scrollWidth-this.element.clientWidth:0,o(this.scrollbarXRail,{display:"block"}),o(this.scrollbarYRail,{display:"block"}),this.railXMarginWidth=g(r(this.scrollbarXRail).marginLeft)+g(r(this.scrollbarXRail).marginRight),this.railYMarginHeight=g(r(this.scrollbarYRail).marginTop)+g(r(this.scrollbarYRail).marginBottom),o(this.scrollbarXRail,{display:"none"}),o(this.scrollbarYRail,{display:"none"}),w(this),b(this,"top",0,!1,!0),b(this,"left",0,!1,!0),o(this.scrollbarXRail,{display:""}),o(this.scrollbarYRail,{display:""}))},O.prototype.onScroll=function(e){this.isAlive&&(w(this),b(this,"top",this.element.scrollTop-this.lastScrollTop),b(this,"left",this.element.scrollLeft-this.lastScrollLeft),this.lastScrollTop=Math.floor(this.element.scrollTop),this.lastScrollLeft=this.element.scrollLeft)},O.prototype.destroy=function(){this.isAlive&&(this.event.unbindAll(),l(this.scrollbarX),l(this.scrollbarY),l(this.scrollbarXRail),l(this.scrollbarYRail),this.removePsClasses(),this.element=null,this.scrollbarX=null,this.scrollbarY=null,this.scrollbarXRail=null,this.scrollbarYRail=null,this.isAlive=!1)},O.prototype.removePsClasses=function(){this.element.className=this.element.className.split(" ").filter(function(e){return!e.match(/^ps([-_].+|)$/)}).join(" ")},e.exports=O},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Thumbs=t.Carousel=void 0;var r=i(n(93)),o=i(n(34));function i(e){return e&&e.__esModule?e:{default:e}}t.Carousel=r.default,t.Thumbs=o.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=h(i),s=h(n(16)),l=h(n(6)),c=h(n(31)),u=h(n(32)),f=h(n(33)),p=h(n(34)),d=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(97));function h(e){return e&&e.__esModule?e:{default:e}}var m=function(){},v=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return y.call(n),n.state={initialized:!1,selectedItem:e.selectedItem,hasMount:!1,isMouseEntered:!1,autoPlay:e.autoPlay},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"componentDidMount",value:function(){this.props.children&&this.setupCarousel()}},{key:"componentWillReceiveProps",value:function(e){var t=this;e.selectedItem!==this.state.selectedItem&&(this.updateSizes(),this.moveTo(e.selectedItem)),e.autoPlay!==this.state.autoPlay&&this.setState({autoPlay:e.autoPlay},function(){t.state.autoPlay?t.setupAutoPlay():t.destroyAutoPlay()})}},{key:"componentDidUpdate",value:function(e,t){e.children||!this.props.children||this.state.initialized||this.setupCarousel(),t.swiping&&!this.state.swiping&&this.resetPosition()}},{key:"componentWillUnmount",value:function(){this.destroyCarousel()}},{key:"setupCarousel",value:function(){this.bindEvents(),this.state.autoPlay&&i.Children.count(this.props.children)>1&&this.setupAutoPlay(),this.setState({initialized:!0});var e=this.getInitialImage();e?e.addEventListener("load",this.setMountState):this.setMountState()}},{key:"destroyCarousel",value:function(){this.state.initialized&&(this.unbindEvents(),this.destroyAutoPlay())}},{key:"setupAutoPlay",value:function(){this.autoPlay();var e=this.carouselWrapperRef;this.props.stopOnHover&&e&&(e.addEventListener("mouseenter",this.stopOnHover),e.addEventListener("mouseleave",this.startOnLeave))}},{key:"destroyAutoPlay",value:function(){this.clearAutoPlay();var e=this.carouselWrapperRef;this.props.stopOnHover&&e&&(e.removeEventListener("mouseenter",this.stopOnHover),e.removeEventListener("mouseleave",this.startOnLeave))}},{key:"bindEvents",value:function(){window.addEventListener("resize",this.updateSizes),window.addEventListener("DOMContentLoaded",this.updateSizes),this.props.useKeyboardArrows&&document.addEventListener("keydown",this.navigateWithKeyboard)}},{key:"unbindEvents",value:function(){window.removeEventListener("resize",this.updateSizes),window.removeEventListener("DOMContentLoaded",this.updateSizes);var e=this.getInitialImage();e&&e.removeEventListener("load",this.setMountState),this.props.useKeyboardArrows&&document.removeEventListener("keydown",this.navigateWithKeyboard)}},{key:"getPosition",value:function(e){this.props.infiniteLoop&&++e;var t=i.Children.count(this.props.children);if(this.props.centerMode&&"horizontal"===this.props.axis){var n=-e*this.props.centerSlidePercentage,r=t-1;return e&&(e!==r||this.props.infiniteLoop)?n+=(100-this.props.centerSlidePercentage)/2:e===r&&(n+=100-this.props.centerSlidePercentage),n}return 100*-e}},{key:"renderItems",value:function(e){var t=this;return i.Children.map(this.props.children,function(n,r){var o={ref:function(e){return t.setItemsRef(e,r)},key:"itemKey"+r+(e?"clone":""),className:c.default.ITEM(!0,r===t.state.selectedItem),onClick:t.handleClickItem.bind(t,r,n)};return t.props.centerMode&&"horizontal"===t.props.axis&&(o.style={minWidth:t.props.centerSlidePercentage+"%"}),a.default.createElement("li",o,n)})}},{key:"renderControls",value:function(){var e=this;return this.props.showIndicators?a.default.createElement("ul",{className:"control-dots"},i.Children.map(this.props.children,function(t,n){return a.default.createElement("li",{className:c.default.DOT(n===e.state.selectedItem),onClick:e.changeItem,onKeyDown:e.changeItem,value:n,key:n,role:"button",tabIndex:0})})):null}},{key:"renderStatus",value:function(){return this.props.showStatus?a.default.createElement("p",{className:"carousel-status"},this.props.statusFormatter(this.state.selectedItem+1,i.Children.count(this.props.children))):null}},{key:"renderThumbs",value:function(){return this.props.showThumbs&&0!==i.Children.count(this.props.children)?a.default.createElement(p.default,{ref:this.setThumbsRef,onSelectItem:this.handleClickThumb,selectedItem:this.state.selectedItem,transitionTime:this.props.transitionTime,thumbWidth:this.props.thumbWidth},this.props.children):null}},{key:"render",value:function(){if(!this.props.children||0===i.Children.count(this.props.children))return null;var e="horizontal"===this.props.axis,t=this.props.showArrows&&i.Children.count(this.props.children)>1,n=t&&(this.state.selectedItem>0||this.props.infiniteLoop),o=t&&(this.state.selectedItem<i.Children.count(this.props.children)-1||this.props.infiniteLoop),s={},l=this.getPosition(this.state.selectedItem),p=(0,u.default)(l+"%",this.props.axis),d=this.props.transitionTime+"ms";s={WebkitTransform:p,MozTransform:p,MsTransform:p,OTransform:p,transform:p,msTransform:p},this.state.swiping||(s=r({},s,{WebkitTransitionDuration:d,MozTransitionDuration:d,MsTransitionDuration:d,OTransitionDuration:d,transitionDuration:d,msTransitionDuration:d}));var h=this.renderItems(!0),m=h.shift(),v=h.pop(),y={selectedItem:this.state.selectedItem,className:c.default.SLIDER(!0,this.state.swiping),onSwipeMove:this.onSwipeMove,onSwipeStart:this.onSwipeStart,onSwipeEnd:this.onSwipeEnd,style:s,tolerance:this.props.swipeScrollTolerance},b={};if(e){if(y.onSwipeLeft=this.onSwipeBackwards,y.onSwipeRight=this.onSwipeForward,this.props.dynamicHeight){var g=this.getVariableImageHeight(this.state.selectedItem);y.style.height=g||"auto",b.height=g||"auto"}}else y.onSwipeUp="natural"===this.props.verticalSwipe?this.onSwipeForward:this.onSwipeBackwards,y.onSwipeDown="natural"===this.props.verticalSwipe?this.onSwipeBackwards:this.onSwipeForward,y.style.height=this.state.itemSize,b.height=this.state.itemSize;return a.default.createElement("div",{className:this.props.className,ref:this.setCarouselWrapperRef},a.default.createElement("div",{className:c.default.CAROUSEL(!0),style:{width:this.props.width}},a.default.createElement("button",{type:"button",className:c.default.ARROW_PREV(!n),onClick:this.onClickPrev}),a.default.createElement("div",{className:c.default.WRAPPER(!0,this.props.axis),style:b,ref:this.setItemsWrapperRef},this.props.swipeable?a.default.createElement(f.default,r({tagName:"ul",ref:this.setListRef},y,{allowMouseEvents:this.props.emulateTouch}),this.props.infiniteLoop&&v,this.renderItems(),this.props.infiniteLoop&&m):a.default.createElement("ul",{className:c.default.SLIDER(!0,this.state.swiping),ref:this.setListRef,style:s},this.props.infiniteLoop&&v,this.renderItems(),this.props.infiniteLoop&&m)),a.default.createElement("button",{type:"button",className:c.default.ARROW_NEXT(!o),onClick:this.onClickNext}),this.renderControls(),this.renderStatus()),this.renderThumbs())}}]),t}();v.displayName="Carousel",v.propTypes={className:l.default.string,children:l.default.node,showArrows:l.default.bool,showStatus:l.default.bool,showIndicators:l.default.bool,infiniteLoop:l.default.bool,showThumbs:l.default.bool,thumbWidth:l.default.number,selectedItem:l.default.number,onClickItem:l.default.func.isRequired,onClickThumb:l.default.func.isRequired,onChange:l.default.func.isRequired,axis:l.default.oneOf(["horizontal","vertical"]),verticalSwipe:l.default.oneOf(["natural","standard"]),width:d.unit,useKeyboardArrows:l.default.bool,autoPlay:l.default.bool,stopOnHover:l.default.bool,interval:l.default.number,transitionTime:l.default.number,swipeScrollTolerance:l.default.number,swipeable:l.default.bool,dynamicHeight:l.default.bool,emulateTouch:l.default.bool,statusFormatter:l.default.func.isRequired,centerMode:l.default.bool,centerSlidePercentage:l.default.number},v.defaultProps={showIndicators:!0,showArrows:!0,showStatus:!0,showThumbs:!0,infiniteLoop:!1,selectedItem:0,axis:"horizontal",verticalSwipe:"standard",width:"100%",useKeyboardArrows:!1,autoPlay:!1,stopOnHover:!0,interval:3e3,transitionTime:350,swipeScrollTolerance:5,swipeable:!0,dynamicHeight:!1,emulateTouch:!1,onClickItem:m,onClickThumb:m,onChange:m,statusFormatter:function(e,t){return e+" of "+t},centerMode:!1,centerSlidePercentage:80};var y=function(){var e=this;this.setThumbsRef=function(t){e.thumbsRef=t},this.setCarouselWrapperRef=function(t){e.carouselWrapperRef=t},this.setListRef=function(t){e.listRef=t},this.setItemsWrapperRef=function(t){e.itemsWrapperRef=t},this.setItemsRef=function(t,n){e.itemsRef||(e.itemsRef=[]),e.itemsRef[n]=t},this.autoPlay=function(){!e.state.autoPlay||i.Children.count(e.props.children)<=1||(clearTimeout(e.timer),e.timer=setTimeout(function(){e.increment()},e.props.interval))},this.clearAutoPlay=function(){e.state.autoPlay&&clearTimeout(e.timer)},this.resetAutoPlay=function(){e.clearAutoPlay(),e.autoPlay()},this.stopOnHover=function(){e.setState({isMouseEntered:!0}),e.clearAutoPlay()},this.startOnLeave=function(){e.setState({isMouseEntered:!1}),e.autoPlay()},this.navigateWithKeyboard=function(t){var n="horizontal"===e.props.axis,r=n?37:38;(n?39:40)===t.keyCode?e.increment():r===t.keyCode&&e.decrement()},this.updateSizes=function(){if(e.state.initialized){var t="horizontal"===e.props.axis,n=e.itemsRef[0],r=t?n.clientWidth:n.clientHeight;e.setState(function(e,n){return{itemSize:r,wrapperSize:t?r*i.Children.count(n.children):r}}),e.thumbsRef&&e.thumbsRef.updateSizes()}},this.setMountState=function(){e.setState({hasMount:!0}),e.updateSizes()},this.handleClickItem=function(t,n){i.Children.count(e.props.children)<=1||(e.state.cancelClick?e.setState({cancelClick:!1}):(e.props.onClickItem(t,n),t!==e.state.selectedItem&&e.setState({selectedItem:t})))},this.handleOnChange=function(t,n){i.Children.count(e.props.children)<=1||e.props.onChange(t,n)},this.handleClickThumb=function(t,n){e.props.onClickThumb(t,n),e.selectItem({selectedItem:t})},this.onSwipeStart=function(){e.setState({swiping:!0}),e.clearAutoPlay()},this.onSwipeEnd=function(){e.setState({swiping:!1}),e.autoPlay()},this.onSwipeMove=function(t){var n="horizontal"===e.props.axis,r=i.Children.count(e.props.children),o=e.getPosition(e.state.selectedItem),a=e.props.infiniteLoop?e.getPosition(r-1)-100:e.getPosition(r-1),s=n?t.x:t.y,l=s;0===o&&s>0&&(l=0),o===a&&s<0&&(l=0);var c=o+100/(e.state.itemSize/l);e.props.infiniteLoop&&(0===e.state.selectedItem&&c>-100?c-=100*r:e.state.selectedItem===r-1&&c<100*-r&&(c+=100*r)),c+="%",e.setPosition(c);var u=Math.abs(s)>e.props.swipeScrollTolerance;return u&&!e.state.cancelClick&&e.setState({cancelClick:!0}),u},this.setPosition=function(t,n){var r=s.default.findDOMNode(e.listRef);["WebkitTransform","MozTransform","MsTransform","OTransform","transform","msTransform"].forEach(function(n){r.style[n]=(0,u.default)(t,e.props.axis)}),n&&r.offsetLeft},this.resetPosition=function(){var t=e.getPosition(e.state.selectedItem)+"%";e.setPosition(t)},this.decrement=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.moveTo(e.state.selectedItem-("number"==typeof t?t:1),n)},this.increment=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.moveTo(e.state.selectedItem+("number"==typeof t?t:1),n)},this.moveTo=function(t,n){var r=i.Children.count(e.props.children)-1,o=e.props.infiniteLoop&&!n&&(t<0||t>r),a=t;t<0&&(t=e.props.infiniteLoop?r:0),t>r&&(t=e.props.infiniteLoop?0:r),o?e.setState({swiping:!0},function(){a<0?e.props.centerMode&&"horizontal"===e.props.axis?e.setPosition("-"+((r+2)*e.props.centerSlidePercentage-(100-e.props.centerSlidePercentage)/2)+"%",!0):e.setPosition("-"+100*(r+2)+"%",!0):a>r&&e.setPosition(0,!0),e.selectItem({selectedItem:t,swiping:!1})}):e.selectItem({selectedItem:t}),e.state.autoPlay&&!1===e.state.isMouseEntered&&e.resetAutoPlay()},this.onClickNext=function(){e.increment(1,!1)},this.onClickPrev=function(){e.decrement(1,!1)},this.onSwipeForward=function(){e.increment(1,!0)},this.onSwipeBackwards=function(){e.decrement(1,!0)},this.changeItem=function(t){if(!t.key||"Enter"===t.key){var n=t.target.value;e.selectItem({selectedItem:n})}},this.selectItem=function(t,n){e.setState(t,n),e.handleOnChange(t.selectedItem,i.Children.toArray(e.props.children)[t.selectedItem])},this.getInitialImage=function(){var t=e.props.selectedItem,n=e.itemsRef&&e.itemsRef[t],r=n&&n.getElementsByTagName("img");return r&&r[t]},this.getVariableImageHeight=function(t){var n=e.itemsRef&&e.itemsRef[t],r=n&&n.getElementsByTagName("img");if(e.state.hasMount&&r.length>0){var o=r[0];if(!o.complete){o.addEventListener("load",function t(){e.forceUpdate(),o.removeEventListener("load",t)})}var i=o.clientHeight;return i>0?i:null}return null}};t.default=v},function(e,t,n){e.exports=n(1)(78)},function(e,t,n){var r,o,i;o=[t,n(0),n(6)],void 0===(i="function"==typeof(r=function(e,t,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setHasSupportToCaptureOption=l;var r=i(t),o=i(n);function i(e){return e&&e.__esModule?e:{default:e}}var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=!1;function l(e){s=e}try{addEventListener("test",null,Object.defineProperty({},"capture",{get:function(){l(!0)}}))}catch(e){}function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{capture:!0};return s?e:e.capture}function u(e){if("touches"in e){var t=e.touches[0],n=t.pageX,r=t.pageY;return{x:n,y:r}}var o=e.screenX,i=e.screenY;return{x:o,y:i}}var f=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i._handleSwipeStart=i._handleSwipeStart.bind(i),i._handleSwipeMove=i._handleSwipeMove.bind(i),i._handleSwipeEnd=i._handleSwipeEnd.bind(i),i._onMouseDown=i._onMouseDown.bind(i),i._onMouseMove=i._onMouseMove.bind(i),i._onMouseUp=i._onMouseUp.bind(i),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.swiper&&this.swiper.addEventListener("touchmove",this._handleSwipeMove,c({capture:!0,passive:!1}))}},{key:"componentWillUnmount",value:function(){this.swiper&&this.swiper.removeEventListener("touchmove",this._handleSwipeMove,c({capture:!0,passive:!1}))}},{key:"_onMouseDown",value:function(e){this.props.allowMouseEvents&&(this.mouseDown=!0,document.addEventListener("mouseup",this._onMouseUp),document.addEventListener("mousemove",this._onMouseMove),this._handleSwipeStart(e))}},{key:"_onMouseMove",value:function(e){this.mouseDown&&this._handleSwipeMove(e)}},{key:"_onMouseUp",value:function(e){this.mouseDown=!1,document.removeEventListener("mouseup",this._onMouseUp),document.removeEventListener("mousemove",this._onMouseMove),this._handleSwipeEnd(e)}},{key:"_handleSwipeStart",value:function(e){var t=u(e),n=t.x,r=t.y;this.moveStart={x:n,y:r},this.props.onSwipeStart(e)}},{key:"_handleSwipeMove",value:function(e){if(this.moveStart){var t=u(e),n=t.x,r=t.y,o=n-this.moveStart.x,i=r-this.moveStart.y;this.moving=!0;var a=this.props.onSwipeMove({x:o,y:i},e);a&&e.preventDefault(),this.movePosition={deltaX:o,deltaY:i}}}},{key:"_handleSwipeEnd",value:function(e){this.props.onSwipeEnd(e);var t=this.props.tolerance;this.moving&&this.movePosition&&(this.movePosition.deltaX<-t?this.props.onSwipeLeft(1,e):this.movePosition.deltaX>t&&this.props.onSwipeRight(1,e),this.movePosition.deltaY<-t?this.props.onSwipeUp(1,e):this.movePosition.deltaY>t&&this.props.onSwipeDown(1,e)),this.moveStart=null,this.moving=!1,this.movePosition=null}},{key:"render",value:function(){var e=this;return r.default.createElement(this.props.tagName,{ref:function(t){return e.swiper=t},onMouseDown:this._onMouseDown,onTouchStart:this._handleSwipeStart,onTouchEnd:this._handleSwipeEnd,className:this.props.className,style:this.props.style},this.props.children)}}]),t}(t.Component);f.displayName="ReactSwipe",f.propTypes={tagName:o.default.string,className:o.default.string,style:o.default.object,children:o.default.node,allowMouseEvents:o.default.bool,onSwipeUp:o.default.func,onSwipeDown:o.default.func,onSwipeLeft:o.default.func,onSwipeRight:o.default.func,onSwipeStart:o.default.func,onSwipeMove:o.default.func,onSwipeEnd:o.default.func,tolerance:o.default.number.isRequired},f.defaultProps={tagName:"div",allowMouseEvents:!1,onSwipeUp:function(){},onSwipeDown:function(){},onSwipeLeft:function(){},onSwipeRight:function(){},onSwipeStart:function(){},onSwipeMove:function(){},onSwipeEnd:function(){},tolerance:0},e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.outerWidth=function(e){var t=e.offsetWidth,n=getComputedStyle(e);return t+=parseInt(n.marginLeft)+parseInt(n.marginRight)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.unit=function(e,t,n){if(!/(pt|px|em|rem|vw|vh|%)$/.test(e[t]))return new Error("Invalid prop `"+t+"` supplied to `"+n+"`. Validation failed. It needs to be a size unit like pt, px, em, rem, vw, %")}},function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(t,"__esModule",{value:!0});var o,i=n(99),a=n(0),s=r(n(100)),l=r(n(101)),c=r(n(105)),u=r(n(107)),f=r(n(108)),p=r(n(109)),d=r(n(110)),h=(o=l({})).Provider,m=o.Consumer;function v(e){var t=function(t){return a.createElement(m,null,function(n){return a.createElement(e,i.__assign({},t,{formik:n}))})};return t.WrappedComponent=e,s(t,e)}function y(e,t,n,r){void 0===r&&(r=0);for(var o=u(t);e&&r<o.length;)e=e[o[r++]];return void 0===e?n:e}function b(e,t,n){for(var r={},o=r,a=0,s=u(t);a<s.length-1;a++){var l=s[a],f=y(e,s.slice(0,a+1));if(o[l])o=o[l];else if(f)o=o[l]=c(f);else{var p=s[a+1];o=o[l]=E(p)&&Number(p)>=0?[]:{}}}if((0===a?e:o)[s[a]]===n)return e;void 0===n?delete o[s[a]]:o[s[a]]=n;var d=i.__assign({},e,r);return 0===a&&void 0===n&&delete d[s[a]],d}function g(e,t,n,r){void 0===n&&(n=new WeakMap),void 0===r&&(r={});for(var o=0,i=Object.keys(e);o<i.length;o++){var a=i[o],s=e[a];w(s)?n.get(s)||(n.set(s,!0),r[a]=Array.isArray(s)?[]:{},g(s,t,n,r[a])):r[a]=t}return r}var _=function(e){return"function"==typeof e},w=function(e){return null!==e&&"object"==typeof e},E=function(e){return String(Math.floor(Number(e)))===e},S=function(e){return"[object String]"===Object.prototype.toString.call(e)},P=function(e){return e!=e},O=function(e){return 0===a.Children.count(e)},R=function(e){return w(e)&&_(e.then)};var k=function(e){function t(t){var n=e.call(this,t)||this;return n.hcCache={},n.hbCache={},n.registerField=function(e,t){n.fields[e]=t},n.unregisterField=function(e){delete n.fields[e]},n.setErrors=function(e){n.setState({errors:e})},n.setTouched=function(e){n.setState({touched:e},function(){n.props.validateOnBlur&&n.runValidations(n.state.values)})},n.setValues=function(e){n.setState({values:e},function(){n.props.validateOnChange&&n.runValidations(e)})},n.setStatus=function(e){n.setState({status:e})},n.setError=function(e){n.setState({error:e})},n.setSubmitting=function(e){n.didMount&&n.setState({isSubmitting:e})},n.validateField=function(e){n.setState({isValidating:!0}),n.runSingleFieldLevelValidation(e,y(n.state.values,e)).then(function(t){n.didMount&&n.setState({errors:b(n.state.errors,e,t),isValidating:!1})})},n.runSingleFieldLevelValidation=function(e,t){return new Promise(function(r){return r(n.fields[e].props.validate(t))}).then(function(e){return e},function(e){return e})},n.runValidationSchema=function(e){return new Promise(function(t){var r=n.props.validationSchema,o=_(r)?r():r;C(e,o).then(function(){t({})},function(e){t(j(e))})})},n.runValidations=function(e){return void 0===e&&(e=n.state.values),n.setState({isValidating:!0}),Promise.all([n.runFieldLevelValidations(e),n.props.validationSchema?n.runValidationSchema(e):{},n.props.validate?n.runValidateHandler(e):{}]).then(function(e){var t=e[0],r=e[1],o=e[2],i=d.all([t,r,o],{arrayMerge:x});return n.didMount&&n.setState({isValidating:!1,errors:i}),i})},n.handleChange=function(e){var t=function(e,t){var r,o=t,a=e;if(!S(e)){e.persist&&e.persist();var s=e.target,l=s.type,c=s.name,u=s.id,f=s.value,p=s.checked;s.outerHTML;o=t||(c||u),a=/number|range/.test(l)?(r=parseFloat(f),P(r)?"":r):/checkbox/.test(l)?p:f}o&&n.setState(function(e){return i.__assign({},e,{values:b(e.values,o,a)})},function(){n.props.validateOnChange&&n.runValidations(b(n.state.values,o,a))})};if(S(e))return _(n.hcCache[e])?n.hcCache[e]:n.hcCache[e]=function(n){return t(n,e)};t(e)},n.setFieldValue=function(e,t,r){void 0===r&&(r=!0),n.didMount&&n.setState(function(n){return i.__assign({},n,{values:b(n.values,e,t)})},function(){n.props.validateOnChange&&r&&n.runValidations(n.state.values)})},n.handleSubmit=function(e){e&&e.preventDefault&&e.preventDefault(),n.submitForm()},n.submitForm=function(){return n.setState(function(e){return{touched:g(e.values,!0),isSubmitting:!0,submitCount:e.submitCount+1}}),n.runValidations().then(function(e){0===Object.keys(e).length?n.executeSubmit():n.didMount&&n.setState({isSubmitting:!1})})},n.executeSubmit=function(){n.props.onSubmit(n.state.values,n.getFormikActions())},n.handleBlur=function(e){var t=function(e,t){e.persist&&e.persist();var r=e.target,o=r.name,i=r.id,a=(r.outerHTML,t||(o||i));n.setState(function(e){return{touched:b(e.touched,a,!0)}}),n.props.validateOnBlur&&n.runValidations(n.state.values)};if(S(e))return _(n.hbCache[e])?n.hbCache[e]:n.hbCache[e]=function(n){return t(n,e)};t(e)},n.setFieldTouched=function(e,t,r){void 0===t&&(t=!0),void 0===r&&(r=!0),n.setState(function(n){return i.__assign({},n,{touched:b(n.touched,e,t)})},function(){n.props.validateOnBlur&&r&&n.runValidations(n.state.values)})},n.setFieldError=function(e,t){n.setState(function(n){return i.__assign({},n,{errors:b(n.errors,e,t)})})},n.resetForm=function(e){var t=e||n.props.initialValues;n.initialValues=t,n.setState({isSubmitting:!1,isValidating:!1,errors:{},touched:{},error:void 0,status:void 0,values:t,submitCount:0})},n.handleReset=function(){if(n.props.onReset){var e=n.props.onReset(n.state.values,n.getFormikActions());R(e)?e.then(n.resetForm):n.resetForm()}else n.resetForm()},n.setFormikState=function(e,t){return n.setState(e,t)},n.getFormikActions=function(){return{resetForm:n.resetForm,submitForm:n.submitForm,validateForm:n.runValidations,validateField:n.validateField,setError:n.setError,setErrors:n.setErrors,setFieldError:n.setFieldError,setFieldTouched:n.setFieldTouched,setFieldValue:n.setFieldValue,setStatus:n.setStatus,setSubmitting:n.setSubmitting,setTouched:n.setTouched,setValues:n.setValues,setFormikState:n.setFormikState}},n.getFormikComputedProps=function(){var e=n.props.isInitialValid,t=!f(n.initialValues,n.state.values);return{dirty:t,isValid:t?n.state.errors&&0===Object.keys(n.state.errors).length:!1!==e&&_(e)?e(n.props):e,initialValues:n.initialValues}},n.getFormikBag=function(){return i.__assign({},n.state,n.getFormikActions(),n.getFormikComputedProps(),{registerField:n.registerField,unregisterField:n.unregisterField,handleBlur:n.handleBlur,handleChange:n.handleChange,handleReset:n.handleReset,handleSubmit:n.handleSubmit,validateOnChange:n.props.validateOnChange,validateOnBlur:n.props.validateOnBlur})},n.getFormikContext=function(){return i.__assign({},n.getFormikBag(),{validationSchema:n.props.validationSchema,validate:n.props.validate,initialValues:n.initialValues})},n.state={values:t.initialValues||{},errors:{},touched:{},isSubmitting:!1,isValidating:!1,submitCount:0},n.didMount=!1,n.fields={},n.initialValues=t.initialValues||{},p(!(t.component&&t.render),"You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored"),p(!(t.component&&t.children&&!O(t.children)),"You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored"),p(!(t.render&&t.children&&!O(t.children)),"You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored"),n}return i.__extends(t,e),t.prototype.componentDidMount=function(){this.didMount=!0},t.prototype.componentWillUnmount=function(){this.didMount=!1},t.prototype.componentDidUpdate=function(e){this.props.enableReinitialize&&!f(e.initialValues,this.props.initialValues)&&(this.initialValues=this.props.initialValues,this.resetForm(this.props.initialValues))},t.prototype.runFieldLevelValidations=function(e){var t=this,n=Object.keys(this.fields).filter(function(e){return t.fields&&t.fields[e]&&t.fields[e].props.validate&&_(t.fields[e].props.validate)}),r=n.length>0?n.map(function(n){return t.runSingleFieldLevelValidation(n,y(e,n))}):[Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];return Promise.all(r).then(function(e){return e.reduce(function(e,t,r){return"DO_NOT_DELETE_YOU_WILL_BE_FIRED"===t?e:(t&&(e=b(e,n[r],t)),e)},{})})},t.prototype.runValidateHandler=function(e){var t=this;return new Promise(function(n){var r=t.props.validate(e);void 0===r?n({}):R(r)?r.then(function(){n({})},function(e){n(e)}):n(r)})},t.prototype.render=function(){var e=this.props,t=e.component,n=e.render,r=e.children,o=this.getFormikBag(),i=this.getFormikContext();return a.createElement(h,{value:i},t?a.createElement(t,o):n?n(o):r?_(r)?r(o):O(r)?null:a.Children.only(r):null)},t.defaultProps={validateOnChange:!0,validateOnBlur:!0,isInitialValid:!1,enableReinitialize:!1},t}(a.Component);function j(e){var t={};if(0===e.inner.length)return b(t,e.path,e.message);for(var n=0,r=e.inner;n<r.length;n++){var o=r[n];t[o.path]||(t=b(t,o.path,o.message))}return t}function C(e,t,n,r){void 0===n&&(n=!1),void 0===r&&(r={});var o={};for(var i in e)if(e.hasOwnProperty(i)){var a=String(i);o[a]=""!==e[a]?e[a]:void 0}return t[n?"validateSync":"validate"](o,{abortEarly:!1,context:r})}function x(e,t,n){var r=e.slice();return t.forEach(function(t,o){if(void 0===r[o]){var i=!1!==n.clone&&n.isMergeableObject(t);r[o]=i?d(Array.isArray(t)?[]:{},t,n):t}else n.isMergeableObject(t)?r[o]=d(e[o],t,n):-1===e.indexOf(t)&&r.push(t)}),r}var T=v(function(e){function t(t){var n=e.call(this,t)||this,r=t.render,o=t.children,i=t.component;return p(!(i&&r),"You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored"),p(!(i&&o&&_(o)),"You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored."),p(!(r&&o&&!O(o)),"You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored"),n}return i.__extends(t,e),t.prototype.componentDidMount=function(){this.props.formik.registerField(this.props.name,this)},t.prototype.componentDidUpdate=function(e){this.props.name!==e.name&&(this.props.formik.unregisterField(e.name),this.props.formik.registerField(this.props.name,this)),this.props.validate!==e.validate&&this.props.formik.registerField(this.props.name,this)},t.prototype.componentWillUnmount=function(){this.props.formik.unregisterField(this.props.name)},t.prototype.render=function(){var e=this.props,t=(e.validate,e.name),n=e.render,r=e.children,o=e.component,s=void 0===o?"input":o,l=e.formik,c=i.__rest(e,["validate","name","render","children","component","formik"]),u=(l.validate,l.validationSchema,i.__rest(l,["validate","validationSchema"])),f={value:"radio"===c.type||"checkbox"===c.type?c.value:y(l.values,t),name:t,onChange:l.handleChange,onBlur:l.handleBlur},p={field:f,form:u};if(n)return n(p);if(_(r))return r(p);if("string"==typeof s){var d=c.innerRef,h=i.__rest(c,["innerRef"]);return a.createElement(s,i.__assign({ref:d},f,h,{children:r}))}return a.createElement(s,i.__assign({},p,c,{children:r}))},t}(a.Component)),L=v(function(e){var t=e.formik,n=t.handleReset,r=t.handleSubmit,o=i.__rest(e,["formik"]);return a.createElement("form",i.__assign({onReset:n,onSubmit:r},o))});L.displayName="Form";var M=function(e,t,n){var r=(e||[]).slice(),o=r[t];return r.splice(t,1),r.splice(n,0,o),r},N=function(e,t,n){var r=(e||[]).slice(),o=r[t];return r[t]=r[n],r[n]=o,r},A=function(e,t,n){var r=(e||[]).slice();return r.splice(t,0,n),r},I=function(e,t,n){var r=(e||[]).slice();return r[t]=n,r},F=v(function(e){function t(t){var n=e.call(this,t)||this;return n.updateArrayField=function(e,t,r){var o=n.props,a=o.name,s=o.validateOnChange,l=o.formik,c=l.setFormikState,u=l.validateForm,f=l.values,p=l.touched,d=l.errors;c(function(n){return i.__assign({},n,{values:b(n.values,a,e(y(f,a))),errors:r?b(n.errors,a,e(y(d,a))):n.errors,touched:t?b(n.touched,a,e(y(p,a))):n.touched})},function(){s&&u()})},n.push=function(e){return n.updateArrayField(function(t){return(t||[]).concat([c(e)])},!1,!1)},n.handlePush=function(e){return function(){return n.push(e)}},n.swap=function(e,t){return n.updateArrayField(function(n){return N(n,e,t)},!0,!0)},n.handleSwap=function(e,t){return function(){return n.swap(e,t)}},n.move=function(e,t){return n.updateArrayField(function(n){return M(n,e,t)},!0,!0)},n.handleMove=function(e,t){return function(){return n.move(e,t)}},n.insert=function(e,t){return n.updateArrayField(function(n){return A(n,e,t)},!0,!0)},n.handleInsert=function(e,t){return function(){return n.insert(e,t)}},n.replace=function(e,t){return n.updateArrayField(function(n){return I(n,e,t)},!1,!1)},n.handleReplace=function(e,t){return function(){return n.replace(e,t)}},n.unshift=function(e){var t=-1;return n.updateArrayField(function(n){var r=n?[e].concat(n):[e];return t<0&&(t=r.length),r},!0,!0),t},n.handleUnshift=function(e){return function(){return n.unshift(e)}},n.handleRemove=function(e){return function(){return n.remove(e)}},n.handlePop=function(){return function(){return n.pop()}},n.remove=n.remove.bind(n),n.pop=n.pop.bind(n),n}return i.__extends(t,e),t.prototype.remove=function(e){var t;return this.updateArrayField(function(n){var r=n?n.slice():[];return t||(t=r[e]),_(r.splice)&&r.splice(e,1),r},!0,!0),t},t.prototype.pop=function(){var e;return this.updateArrayField(function(t){var n=t;return e||(e=n&&n.pop&&n.pop()),n},!0,!0),e},t.prototype.render=function(){var e={push:this.push,pop:this.pop,swap:this.swap,move:this.move,insert:this.insert,replace:this.replace,unshift:this.unshift,remove:this.remove,handlePush:this.handlePush,handlePop:this.handlePop,handleSwap:this.handleSwap,handleMove:this.handleMove,handleInsert:this.handleInsert,handleReplace:this.handleReplace,handleUnshift:this.handleUnshift,handleRemove:this.handleRemove},t=this.props,n=t.component,r=t.render,o=t.children,s=t.name,l=t.formik,c=(l.validate,l.validationSchema,i.__rest(l,["validate","validationSchema"])),u=i.__assign({},e,{form:c,name:s});return n?a.createElement(n,u):r?r(u):o?"function"==typeof o?o(u):O(o)?null:a.Children.only(o):null},t.defaultProps={validateOnChange:!0},t}(a.Component)),W=v(function(e){function t(t){var n=e.call(this,t)||this,r=t.render,o=t.children,i=t.component;return p(!(i&&r),"You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored"),p(!(i&&o&&_(o)),"You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored."),p(!(r&&o&&!O(o)),"You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored"),n}return i.__extends(t,e),t.prototype.shouldComponentUpdate=function(e){return this.props.shouldUpdate?this.props.shouldUpdate(e,this.props):y(this.props.formik.values,this.props.name)!==y(e.formik.values,this.props.name)||y(this.props.formik.errors,this.props.name)!==y(e.formik.errors,this.props.name)||y(this.props.formik.touched,this.props.name)!==y(e.formik.touched,this.props.name)||Object.keys(this.props).length!==Object.keys(e).length||this.props.formik.isSubmitting!==e.formik.isSubmitting},t.prototype.componentDidMount=function(){this.props.formik.registerField(this.props.name,this)},t.prototype.componentDidUpdate=function(e){this.props.name!==e.name&&(this.props.formik.unregisterField(e.name),this.props.formik.registerField(this.props.name,this)),this.props.validate!==e.validate&&this.props.formik.registerField(this.props.name,this)},t.prototype.componentWillUnmount=function(){this.props.formik.unregisterField(this.props.name)},t.prototype.render=function(){var e=this.props,t=(e.validate,e.name),n=e.render,r=e.children,o=e.component,s=void 0===o?"input":o,l=e.formik,c=i.__rest(e,["validate","name","render","children","component","formik"]),u=(l.validate,l.validationSchema,i.__rest(l,["validate","validationSchema"])),f={value:"radio"===c.type||"checkbox"===c.type?c.value:y(l.values,t),name:t,onChange:l.handleChange,onBlur:l.handleBlur},p={field:f,form:u};if(n)return n(p);if(_(r))return r(p);if("string"==typeof s){var d=c.innerRef,h=i.__rest(c,["innerRef"]);return a.createElement(s,i.__assign({ref:d},f,h,{children:r}))}return a.createElement(s,i.__assign({},p,c,{children:r}))},t}(a.Component)),D=v(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i.__extends(t,e),t.prototype.shouldComponentUpdate=function(e){return y(this.props.formik.errors,this.props.name)!==y(e.formik.errors,this.props.name)||y(this.props.formik.touched,this.props.name)!==y(e.formik.touched,this.props.name)||Object.keys(this.props).length!==Object.keys(e).length},t.prototype.render=function(){var e=this.props,t=e.component,n=e.formik,r=e.render,o=e.children,s=e.name,l=i.__rest(e,["component","formik","render","children","name"]),c=y(n.touched,s),u=y(n.errors,s);return c&&u?r?_(r)?r(u):null:o?_(o)?o(u):null:t?a.createElement(t,l,u):u:null},t}(a.Component));t.Formik=k,t.yupToFormErrors=j,t.validateYupSchema=C,t.Field=T,t.Form=L,t.withFormik=function(e){var t=e.mapPropsToValues,n=void 0===t?function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&"function"!=typeof e[n]&&(t[n]=e[n]);return t}:t,r=i.__rest(e,["mapPropsToValues"]);return function(e){var t=e.displayName||e.name||e.constructor&&e.constructor.name||"Component",o=function(o){function s(){var t=null!==o&&o.apply(this,arguments)||this;return t.validate=function(e){return r.validate(e,t.props)},t.validationSchema=function(){return _(r.validationSchema)?r.validationSchema(t.props):r.validationSchema},t.handleSubmit=function(e,n){return r.handleSubmit(e,i.__assign({},n,{props:t.props}))},t.renderFormComponent=function(n){return a.createElement(e,i.__assign({},t.props,n))},t}return i.__extends(s,o),s.prototype.render=function(){var e=this.props,t=(e.children,i.__rest(e,["children"]));return a.createElement(k,i.__assign({},t,r,{validate:r.validate&&this.validate,validationSchema:r.validationSchema&&this.validationSchema,initialValues:n(this.props),onSubmit:this.handleSubmit,render:this.renderFormComponent}))},s.displayName="WithFormik("+t+")",s}(a.Component);return s(o,e)}},t.move=M,t.swap=N,t.insert=A,t.replace=I,t.FieldArray=F,t.getIn=y,t.setIn=b,t.setNestedObjectValues=g,t.isFunction=_,t.isObject=w,t.isInteger=E,t.isString=S,t.isNaN=P,t.isEmptyChildren=O,t.isPromise=R,t.getActiveElement=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}},t.FastField=W,t.FormikProvider=h,t.FormikConsumer=m,t.connect=v,t.ErrorMessage=D},function(e,t,n){var r,o,i,a,s,l,c,u,f,p,d,h,m,v,y,b,g,_,w,E;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */!function(n){var S="object"==typeof global?global:"object"==typeof self?self:"object"==typeof this?this:{};function P(e,t){return e!==S&&("function"==typeof Object.create?Object.defineProperty(e,"__esModule",{value:!0}):e.__esModule=!0),function(n,r){return e[n]=t?t(n,r):r}}void 0===(r=function(e){!function(e){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};o=function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)},i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var o=0,r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]]);return n},s=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},l=function(e,t){return function(n,r){t(n,r,e)}},c=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},u=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},f=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},p=function(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])},d=function(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}},h=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},m=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(h(arguments[t]));return e},v=function(e){return this instanceof v?(this.v=e,this):new v(e)},y=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise(function(n,r){i.push([e,t,n,r])>1||s(e,t)})})}function s(e,t){try{!function(e){e.value instanceof v?Promise.resolve(e.value.v).then(l,c):u(i[0][2],e)}(o[e](t))}catch(e){u(i[0][3],e)}}function l(e){s("next",e)}function c(e){s("throw",e)}function u(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}},b=function(e){var t,n;return t={},r("next"),r("throw",function(e){throw e}),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:v(e[r](t)),done:"return"===r}:o?o(t):t}:o}},g=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e="function"==typeof d?d(e):e[Symbol.iterator](),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise(function(r,o){t=e[n](t),function(e,t,n,r){Promise.resolve(r).then(function(t){e({value:t,done:n})},t)}(r,o,t.done,t.value)})}}},_=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},w=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},E=function(e){return e&&e.__esModule?e:{default:e}},e("__extends",o),e("__assign",i),e("__rest",a),e("__decorate",s),e("__param",l),e("__metadata",c),e("__awaiter",u),e("__generator",f),e("__exportStar",p),e("__values",d),e("__read",h),e("__spread",m),e("__await",v),e("__asyncGenerator",y),e("__asyncDelegator",b),e("__asyncValues",g),e("__makeTemplateObject",_),e("__importStar",w),e("__importDefault",E)}(P(S,P(e)))}.apply(t,[t]))||(e.exports=r)}()},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,u=c&&c(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(u){var p=c(n);p&&p!==u&&e(t,p,f)}var d=a(n);s&&(d=d.concat(s(n)));for(var h=0;h<d.length;++h){var m=d[h];if(!(r[m]||o[m]||f&&f[m])){var v=l(n,m);try{i(t,m,v)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(0)),o=i(n(102));function i(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.createContext||o.default,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0),o=(a(r),a(n(6))),i=a(n(103));a(n(104));function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=1073741823;t.default=function(e,t){var n,a,f="__create-react-context-"+(0,i.default)()+"__",p=function(e){function n(){var t,r;s(this,n);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return t=r=l(this,e.call.apply(e,[this].concat(i))),r.emitter=function(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter(function(t){return t!==e})},get:function(){return e},set:function(n,r){e=n,t.forEach(function(t){return t(e,r)})}}}(r.props.value),l(r,t)}return c(n,e),n.prototype.getChildContext=function(){var e;return(e={})[f]=this.emitter,e},n.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n=this.props.value,r=e.value,o=void 0;!function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,r)?(o="function"==typeof t?t(n,r):u,0!=(o|=0)&&this.emitter.set(e.value,o)):o=0}},n.prototype.render=function(){return this.props.children},n}(r.Component);p.childContextTypes=((n={})[f]=o.default.object.isRequired,n);var d=function(t){function n(){var e,r;s(this,n);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=l(this,t.call.apply(t,[this].concat(i))),r.state={value:r.getValue()},r.onUpdate=function(e,t){0!=((0|r.observedBits)&t)&&r.setState({value:r.getValue()})},l(r,e)}return c(n,t),n.prototype.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=void 0===t||null===t?u:t},n.prototype.componentDidMount=function(){this.context[f]&&this.context[f].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=void 0===e||null===e?u:e},n.prototype.componentWillUnmount=function(){this.context[f]&&this.context[f].off(this.onUpdate)},n.prototype.getValue=function(){return this.context[f]?this.context[f].get():e},n.prototype.render=function(){return function(e){return Array.isArray(e)?e[0]:e}(this.props.children)(this.state.value)},n}(r.Component);return d.contextTypes=((a={})[f]=o.default.object,a),{Provider:p,Consumer:d}},e.exports=t.default},function(e,t,n){"use strict";var r="__global_unique_id__";e.exports=function(){return global[r]=(global[r]||0)+1}},function(e,t,n){"use strict";var r=n(29);e.exports=r},function(e,t,n){(function(e){var n=200,r="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",a="[object Boolean]",s="[object Date]",l="[object Function]",c="[object GeneratorFunction]",u="[object Map]",f="[object Number]",p="[object Object]",d="[object RegExp]",h="[object Set]",m="[object String]",v="[object Symbol]",y="[object ArrayBuffer]",b="[object DataView]",g="[object Float32Array]",_="[object Float64Array]",w="[object Int8Array]",E="[object Int16Array]",S="[object Int32Array]",P="[object Uint8Array]",O="[object Uint8ClampedArray]",R="[object Uint16Array]",k="[object Uint32Array]",j=/\w*$/,C=/^\[object .+?Constructor\]$/,x=/^(?:0|[1-9]\d*)$/,T={};T[i]=T["[object Array]"]=T[y]=T[b]=T[a]=T[s]=T[g]=T[_]=T[w]=T[E]=T[S]=T[u]=T[f]=T[p]=T[d]=T[h]=T[m]=T[v]=T[P]=T[O]=T[R]=T[k]=!0,T["[object Error]"]=T[l]=T["[object WeakMap]"]=!1;var L="object"==typeof global&&global&&global.Object===Object&&global,M="object"==typeof self&&self&&self.Object===Object&&self,N=L||M||Function("return this")(),A=t&&!t.nodeType&&t,I=A&&"object"==typeof e&&e&&!e.nodeType&&e,F=I&&I.exports===A;function W(e,t){return e.set(t[0],t[1]),e}function D(e,t){return e.add(t),e}function U(e,t,n,r){var o=-1,i=e?e.length:0;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function H(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function Y(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function B(e,t){return function(n){return e(t(n))}}function X(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}var z=Array.prototype,V=Function.prototype,q=Object.prototype,G=N["__core-js_shared__"],J=function(){var e=/[^.]+$/.exec(G&&G.keys&&G.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),$=V.toString,K=q.hasOwnProperty,Q=q.toString,Z=RegExp("^"+$.call(K).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ee=F?N.Buffer:void 0,te=N.Symbol,ne=N.Uint8Array,re=B(Object.getPrototypeOf,Object),oe=Object.create,ie=q.propertyIsEnumerable,ae=z.splice,se=Object.getOwnPropertySymbols,le=ee?ee.isBuffer:void 0,ce=B(Object.keys,Object),ue=Ae(N,"DataView"),fe=Ae(N,"Map"),pe=Ae(N,"Promise"),de=Ae(N,"Set"),he=Ae(N,"WeakMap"),me=Ae(Object,"create"),ve=Ue(ue),ye=Ue(fe),be=Ue(pe),ge=Ue(de),_e=Ue(he),we=te?te.prototype:void 0,Ee=we?we.valueOf:void 0;function Se(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Pe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Oe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Re(e){this.__data__=new Pe(e)}function ke(e,t){var n=Ye(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&Be(e)}(e)&&K.call(e,"callee")&&(!ie.call(e,"callee")||Q.call(e)==i)}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,o=!!r;for(var a in e)!t&&!K.call(e,a)||o&&("length"==a||We(a,r))||n.push(a);return n}function je(e,t,n){var r=e[t];K.call(e,t)&&He(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function Ce(e,t){for(var n=e.length;n--;)if(He(e[n][0],t))return n;return-1}function xe(e,t,n,r,o,C,x){var L;if(r&&(L=C?r(e,o,C,x):r(e)),void 0!==L)return L;if(!Ve(e))return e;var M=Ye(e);if(M){if(L=function(e){var t=e.length,n=e.constructor(t);t&&"string"==typeof e[0]&&K.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!t)return function(e,t){var n=-1,r=e.length;t||(t=Array(r));for(;++n<r;)t[n]=e[n];return t}(e,L)}else{var N=Fe(e),A=N==l||N==c;if(Xe(e))return function(e,t){if(t)return e.slice();var n=new e.constructor(e.length);return e.copy(n),n}(e,t);if(N==p||N==i||A&&!C){if(H(e))return C?e:{};if(L=function(e){return"function"!=typeof e.constructor||De(e)?{}:function(e){return Ve(e)?oe(e):{}}(re(e))}(A?{}:e),!t)return function(e,t){return Me(e,Ie(e),t)}(e,function(e,t){return e&&Me(t,qe(t),e)}(L,e))}else{if(!T[N])return C?e:{};L=function(e,t,n,r){var o=e.constructor;switch(t){case y:return Le(e);case a:case s:return new o(+e);case b:return function(e,t){var n=t?Le(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,r);case g:case _:case w:case E:case S:case P:case O:case R:case k:return function(e,t){var n=t?Le(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}(e,r);case u:return function(e,t,n){return U(t?n(Y(e),!0):Y(e),W,new e.constructor)}(e,r,n);case f:case m:return new o(e);case d:return function(e){var t=new e.constructor(e.source,j.exec(e));return t.lastIndex=e.lastIndex,t}(e);case h:return function(e,t,n){return U(t?n(X(e),!0):X(e),D,new e.constructor)}(e,r,n);case v:return function(e){return Ee?Object(Ee.call(e)):{}}(e)}}(e,N,xe,t)}}x||(x=new Re);var I=x.get(e);if(I)return I;if(x.set(e,L),!M)var F=n?function(e){return function(e,t,n){var r=t(e);return Ye(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,qe,Ie)}(e):qe(e);return function(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););}(F||e,function(o,i){F&&(o=e[i=o]),je(L,i,xe(o,t,n,r,i,e,x))}),L}function Te(e){return!(!Ve(e)||function(e){return!!J&&J in e}(e))&&(ze(e)||H(e)?Z:C).test(Ue(e))}function Le(e){var t=new e.constructor(e.byteLength);return new ne(t).set(new ne(e)),t}function Me(e,t,n,r){n||(n={});for(var o=-1,i=t.length;++o<i;){var a=t[o],s=r?r(n[a],e[a],a,n,e):void 0;je(n,a,void 0===s?e[a]:s)}return n}function Ne(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function Ae(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Te(n)?n:void 0}Se.prototype.clear=function(){this.__data__=me?me(null):{}},Se.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},Se.prototype.get=function(e){var t=this.__data__;if(me){var n=t[e];return n===r?void 0:n}return K.call(t,e)?t[e]:void 0},Se.prototype.has=function(e){var t=this.__data__;return me?void 0!==t[e]:K.call(t,e)},Se.prototype.set=function(e,t){return this.__data__[e]=me&&void 0===t?r:t,this},Pe.prototype.clear=function(){this.__data__=[]},Pe.prototype.delete=function(e){var t=this.__data__,n=Ce(t,e);return!(n<0||(n==t.length-1?t.pop():ae.call(t,n,1),0))},Pe.prototype.get=function(e){var t=this.__data__,n=Ce(t,e);return n<0?void 0:t[n][1]},Pe.prototype.has=function(e){return Ce(this.__data__,e)>-1},Pe.prototype.set=function(e,t){var n=this.__data__,r=Ce(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},Oe.prototype.clear=function(){this.__data__={hash:new Se,map:new(fe||Pe),string:new Se}},Oe.prototype.delete=function(e){return Ne(this,e).delete(e)},Oe.prototype.get=function(e){return Ne(this,e).get(e)},Oe.prototype.has=function(e){return Ne(this,e).has(e)},Oe.prototype.set=function(e,t){return Ne(this,e).set(e,t),this},Re.prototype.clear=function(){this.__data__=new Pe},Re.prototype.delete=function(e){return this.__data__.delete(e)},Re.prototype.get=function(e){return this.__data__.get(e)},Re.prototype.has=function(e){return this.__data__.has(e)},Re.prototype.set=function(e,t){var r=this.__data__;if(r instanceof Pe){var o=r.__data__;if(!fe||o.length<n-1)return o.push([e,t]),this;r=this.__data__=new Oe(o)}return r.set(e,t),this};var Ie=se?B(se,Object):function(){return[]},Fe=function(e){return Q.call(e)};function We(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||x.test(e))&&e>-1&&e%1==0&&e<t}function De(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||q)}function Ue(e){if(null!=e){try{return $.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function He(e,t){return e===t||e!=e&&t!=t}(ue&&Fe(new ue(new ArrayBuffer(1)))!=b||fe&&Fe(new fe)!=u||pe&&"[object Promise]"!=Fe(pe.resolve())||de&&Fe(new de)!=h||he&&"[object WeakMap]"!=Fe(new he))&&(Fe=function(e){var t=Q.call(e),n=t==p?e.constructor:void 0,r=n?Ue(n):void 0;if(r)switch(r){case ve:return b;case ye:return u;case be:return"[object Promise]";case ge:return h;case _e:return"[object WeakMap]"}return t});var Ye=Array.isArray;function Be(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}(e.length)&&!ze(e)}var Xe=le||function(){return!1};function ze(e){var t=Ve(e)?Q.call(e):"";return t==l||t==c}function Ve(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function qe(e){return Be(e)?ke(e):function(e){if(!De(e))return ce(e);var t=[];for(var n in Object(e))K.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)}e.exports=function(e){return xe(e,!0,!0)}}).call(this,n(106)(e))},function(e,t,n){e.exports=n(1)(277)},function(e,t){var n="Expected a function",r="__lodash_hash_undefined__",o=1/0,i="[object Function]",a="[object GeneratorFunction]",s="[object Symbol]",l=/^\./,c=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,u=/\\(\\)?/g,f=/^\[object .+?Constructor\]$/,p="object"==typeof global&&global&&global.Object===Object&&global,d="object"==typeof self&&self&&self.Object===Object&&self,h=p||d||Function("return this")();var m=Array.prototype,v=Function.prototype,y=Object.prototype,b=h["__core-js_shared__"],g=function(){var e=/[^.]+$/.exec(b&&b.keys&&b.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),_=v.toString,w=y.hasOwnProperty,E=y.toString,S=RegExp("^"+_.call(w).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),P=h.Symbol,O=m.splice,R=I(h,"Map"),k=I(Object,"create"),j=P?P.prototype:void 0,C=j?j.toString:void 0;function x(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function T(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function L(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function M(e,t){for(var n=e.length;n--;)if(U(e[n][0],t))return n;return-1}function N(e){return!(!Y(e)||function(e){return!!g&&g in e}(e))&&(function(e){var t=Y(e)?E.call(e):"";return t==i||t==a}(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e)?S:f).test(function(e){if(null!=e){try{return _.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}function A(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function I(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return N(n)?n:void 0}x.prototype.clear=function(){this.__data__=k?k(null):{}},x.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},x.prototype.get=function(e){var t=this.__data__;if(k){var n=t[e];return n===r?void 0:n}return w.call(t,e)?t[e]:void 0},x.prototype.has=function(e){var t=this.__data__;return k?void 0!==t[e]:w.call(t,e)},x.prototype.set=function(e,t){return this.__data__[e]=k&&void 0===t?r:t,this},T.prototype.clear=function(){this.__data__=[]},T.prototype.delete=function(e){var t=this.__data__,n=M(t,e);return!(n<0||(n==t.length-1?t.pop():O.call(t,n,1),0))},T.prototype.get=function(e){var t=this.__data__,n=M(t,e);return n<0?void 0:t[n][1]},T.prototype.has=function(e){return M(this.__data__,e)>-1},T.prototype.set=function(e,t){var n=this.__data__,r=M(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},L.prototype.clear=function(){this.__data__={hash:new x,map:new(R||T),string:new x}},L.prototype.delete=function(e){return A(this,e).delete(e)},L.prototype.get=function(e){return A(this,e).get(e)},L.prototype.has=function(e){return A(this,e).has(e)},L.prototype.set=function(e,t){return A(this,e).set(e,t),this};var F=D(function(e){e=function(e){return null==e?"":function(e){if("string"==typeof e)return e;if(B(e))return C?C.call(e):"";var t=e+"";return"0"==t&&1/e==-o?"-0":t}(e)}(e);var t=[];return l.test(e)&&t.push(""),e.replace(c,function(e,n,r,o){t.push(r?o.replace(u,"$1"):n||e)}),t});function W(e){if("string"==typeof e||B(e))return e;var t=e+"";return"0"==t&&1/e==-o?"-0":t}function D(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError(n);var r=function(){var n=arguments,o=t?t.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var a=e.apply(this,n);return r.cache=i.set(o,a),a};return r.cache=new(D.Cache||L),r}function U(e,t){return e===t||e!=e&&t!=t}D.Cache=L;var H=Array.isArray;function Y(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function B(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&E.call(e)==s}e.exports=function(e){return H(e)?function(e,t){for(var n=-1,r=e?e.length:0,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}(e,W):B(e)?[e]:function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}(F(e))}},function(e,t,n){"use strict";var r=Array.isArray,o=Object.keys,i=Object.prototype.hasOwnProperty;e.exports=function(e,t){try{return function e(t,n){if(t===n)return!0;var a,s,l,c=r(t),u=r(n);if(c&&u){if((s=t.length)!=n.length)return!1;for(a=0;a<s;a++)if(!e(t[a],n[a]))return!1;return!0}if(c!=u)return!1;var f=t instanceof Date,p=n instanceof Date;if(f!=p)return!1;if(f&&p)return t.getTime()==n.getTime();var d=t instanceof RegExp,h=n instanceof RegExp;if(d!=h)return!1;if(d&&h)return t.toString()==n.toString();if(t instanceof Object&&n instanceof Object){var m=o(t);if((s=m.length)!==o(n).length)return!1;for(a=0;a<s;a++)if(!i.call(n,m[a]))return!1;for(a=0;a<s;a++)if(!("_owner"===(l=m[a])&&t.$$typeof&&t._store||e(t[l],n[l])))return!1;return!0}return!1}(e,t)}catch(e){if(e.message&&e.message.match(/stack|recursion/i))return console.warn("Warning: react-fast-compare does not handle circular references.",e.name,e.message),!1;throw e}}},function(e,t,n){e.exports=n(1)(59)},function(e,t,n){e.exports=function(){"use strict";var e=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var n=Object.prototype.toString.call(e);return"[object RegExp]"===n||"[object Date]"===n||function(e){return e.$$typeof===t}(e)}(e)},t="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function n(e,t){return!1!==t.clone&&t.isMergeableObject(e)?o(function(e){return Array.isArray(e)?[]:{}}(e),e,t):e}function r(e,t,r){return e.concat(t).map(function(e){return n(e,r)})}function o(t,i,a){(a=a||{}).arrayMerge=a.arrayMerge||r,a.isMergeableObject=a.isMergeableObject||e;var s=Array.isArray(i),l=Array.isArray(t),c=s===l;return c?s?a.arrayMerge(t,i,a):function(e,t,r){var i={};return r.isMergeableObject(e)&&Object.keys(e).forEach(function(t){i[t]=n(e[t],r)}),Object.keys(t).forEach(function(a){r.isMergeableObject(t[a])&&e[a]?i[a]=o(e[a],t[a],r):i[a]=n(t[a],r)}),i}(t,i,a):n(i,a)}return o.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,n){return o(e,n,t)},{})},o}()},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=void 0,i=void 0,a=void 0,s=[];return function(){var l=function(e){return"function"==typeof e?e():e}(t),c=(new Date).getTime(),u=!o||c-o>l;o=c;for(var f=arguments.length,p=Array(f),d=0;d<f;d++)p[d]=arguments[d];if(u&&n.leading)return n.accumulate?Promise.resolve(e.call(this,[p])).then(function(e){return e[0]}):Promise.resolve(e.call.apply(e,[this].concat(p)));if(i?clearTimeout(a):i=function(){var e={};return e.promise=new Promise(function(t,n){e.resolve=t,e.reject=n}),e}(),s.push(p),a=setTimeout(function(){var t=i;clearTimeout(a),Promise.resolve(n.accumulate?e.call(this,s):e.apply(this,s[s.length-1])).then(t.resolve,t.reject),s=[],i=null}.bind(this),l),n.accumulate){var h=function(){var e=s.length-1;return{v:i.promise.then(function(t){return t[e]})}}();if("object"===(void 0===h?"undefined":r(h)))return h.v}return i.promise}}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n(10),i=n(35),a=n(4),s=n(12),l=n(36),c=n(37),u=n(5),f=n(8),p=function(){function e(){}return e.showErrors=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];e.forEach(function(e){Array.isArray(e)?e.forEach(function(e){return f.toast.error(e)}):f.toast.error(e)})},e.showInfo=function(e){f.toast.info(e)},e}(),d=function(){function e(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.value=e,this.errors=void 0==t[0]||null==t[0]?[]:t}return Object.defineProperty(e.prototype,"hasErrors",{get:function(){return null!=this.errors&&Array.isArray(this.errors)&&this.errors.length>0},enumerable:!0,configurable:!0}),e}(),h=n(7),m=n.n(h),v=n(9),y=n(38),b=n.n(y);function g(e){return JSON.parse(JSON.stringify(e))}function _(){return"object"==typeof process&&process.versions&&!!process.versions.node}var w,E=n(17),S=function(){return(S=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},P=function(){function e(){}return e.reset=function(){this.isInitialized=!1,this.gameReady=!1,this.data={}},e.init=function(e){if(this.isInitialized)throw Error("Globals is already initialized.");this.data=e||{public:{},private:{}},this.isInitialized=!0,E.NSerializeJson.options.useDotSeparatorInPath=!0},e.setGameReady=function(e){this.gameReady=e},e.isGameReady=function(){return this.gameReady},e.throwIfNotInitialized=function(){if(!this.isInitialized)throw Error("Globals is not initialized. You have to call Session.init before.")},e.getData=function(){return this.throwIfNotInitialized(),this.data},e.setData=function(e){this.throwIfNotInitialized();var t=this.data;this.data=S({},t,e)},Object.defineProperty(e,"serviceUser",{get:function(){return this.getData().public.serviceUser},set:function(e){this.setData({public:{serviceUser:e}})},enumerable:!0,configurable:!0}),Object.defineProperty(e,"isAuthenticated",{get:function(){return null!=this.serviceUser},enumerable:!0,configurable:!0}),e.isInitialized=!1,e.gameReady=!1,e.data={},e}(),O=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},R=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},k=function(){function e(){}return e.requestJson=function(e){return O(this,void 0,Promise,function(){var t,n,r,o,i;return R(this,function(a){switch(a.label){case 0:t=null,n=null,e.url=Object(v.transformUrl)(e.url),r=function(e,t){return t?e+"?"+b()(t):e},_()&&(o={headers:{Cookie:P.getData().private.cookie}}),a.label=1;case 1:switch(a.trys.push([1,13,,14]),e.method){case"GET":return[3,2];case"POST":return[3,4];case"PUT":return[3,6];case"PATCH":return[3,8];case"DELETE":return[3,10]}return[3,12];case 2:return[4,m.a.get(r(e.url,e.data),o)];case 3:return t=a.sent(),[3,12];case 4:return[4,m.a.post(e.url,e.data,o)];case 5:return t=a.sent(),[3,12];case 6:return[4,m.a.put(e.url,e.data,o)];case 7:return t=a.sent(),[3,12];case 8:return[4,m.a.patch(e.url,e.data,o)];case 9:return t=a.sent(),[3,12];case 10:return[4,m.a.delete(r(e.url,e.data),o)];case 11:return t=a.sent(),[3,12];case 12:return n=new(d.bind.apply(d,[void 0,t.data.value].concat(t.data.errors))),[3,14];case 13:return i=a.sent(),n=new d(null,i.message),[3,14];case 14:return n.hasErrors&&p.showErrors.apply(p,n.errors),[2,n]}})})},e.sendFormData=function(e){return O(this,void 0,Promise,function(){var t,n,r,o;return R(this,function(i){switch(i.label){case 0:t=null,n=null,e.url=Object(v.transformUrl)(e.url),r={headers:{"Content-Type":"multipart/form-data"}},i.label=1;case 1:switch(i.trys.push([1,9,,10]),e.method){case"POST":return[3,2];case"PUT":return[3,4];case"PATCH":return[3,6]}return[3,8];case 2:return[4,m.a.post(e.url,e.data,r)];case 3:return t=i.sent(),[3,8];case 4:return[4,m.a.put(e.url,e.data,r)];case 5:return t=i.sent(),[3,8];case 6:return[4,m.a.patch(e.url,e.data,r)];case 7:return t=i.sent(),[3,8];case 8:return n=new(d.bind.apply(d,[void 0,t.data.value].concat(t.data.errors))),[3,10];case 9:return o=i.sent(),n=new d(null,o.message),[3,10];case 10:return n.hasErrors&&p.showErrors.apply(p,n.errors),[2,n]}})})},e}(),j=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),C=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},x=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},T=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return j(t,e),t.login=function(e){return C(this,void 0,Promise,function(){var t;return x(this,function(n){switch(n.label){case 0:return[4,this.requestJson({url:"api/Account/Login",method:"POST",data:e})];case 1:return(t=n.sent()).hasErrors||(P.serviceUser=t.value),[2,t]}})})},t.logout=function(){return C(this,void 0,Promise,function(){var e;return x(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"api/Account/Logout",method:"POST"})];case 1:return(e=t.sent()).hasErrors||(P.serviceUser=null),[2,e]}})})},t}(k),L=n(2),M=n.n(L),N=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),A=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},I=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},F=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},W=function(e){function t(t){var n=e.call(this,t)||this;return n.state={logoutAction:!1},n}return N(t,e),t.prototype.onClickSignOut=function(e){return I(this,void 0,void 0,function(){return F(this,function(t){switch(t.label){case 0:return e.preventDefault(),[4,T.logout()];case 1:return t.sent(),this.setState({logoutAction:!0}),[2]}})})},t.prototype.componentDidMount=function(){},t.prototype.componentDidUpdate=function(){},t.prototype.render=function(){return this.state.logoutAction&&window.location.reload(),r.createElement("nav",{className:"navbar navbar-expand-md navbar-light bg-light"},r.createElement(a.NavLink,{exact:!0,to:"/",className:"navbar-brand"},"JG"),r.createElement("button",{className:"navbar-toggler",type:"button","data-toggle":"collapse","data-target":"#navbarNav","aria-controls":"navbarNav","aria-expanded":"false","aria-label":"Toggle navigation"},r.createElement("span",{className:"navbar-toggler-icon"})),r.createElement("div",{className:"collapse navbar-collapse",id:"navbarNav"},r.createElement("ul",{className:"navbar-nav"},r.createElement("li",{className:"nav-item active"},r.createElement(a.NavLink,{exact:!0,to:"/",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Home")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/portfolio",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Portfolio")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/reading",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Reading")))))},A([M.a],t.prototype,"onClickSignOut",null),t}(r.Component),D=Object(u.withRouter)(W),U=(n(79),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),H=function(e){function t(t){return e.call(this,t)||this}return U(t,e),t.prototype.render=function(){return r.createElement("footer",{className:"footer text-center"})},t}(r.Component),Y=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),B=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Y(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement("div",{id:"authorizedLayout",className:"layout"},r.createElement(D,null),r.createElement("div",{className:"container container-content"},this.props.children),r.createElement(f.ToastContainer,null),r.createElement(H,null)))},t}(r.Component),X=(n(80),n(16)),z=n.n(X),V=n(22),q=n.n(V),G=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),J=function(e){function t(t){var n=e.call(this,t)||this;return n.unlisten=n.props.history.listen(function(e,t){P.currentLocation=e.pathname,"/"==P.currentLocation?(P.prevLocation="",P.nextLocation="/portfolio"):"/portfolio"==P.currentLocation?(P.prevLocation="/",P.nextLocation="/reading"):"/reading"==P.currentLocation&&(P.prevLocation="/portfolio",P.nextLocation="/"),n.JGWGame.send("GameController","UpdatePageNavigation","{ currentLocation: "+P.currentLocation+", nextLocation: "+P.nextLocation+", prevLocation: "+P.prevLocation+" }"),n.JGWGame.send("GameController","UpdatePageWidth",document.getElementsByClassName("scrollbar-container")[0].clientWidth.toString())}),n}return G(t,e),t.prototype.componentDidMount=function(){var e=this;P.currentLocation=this.props.location.pathname,P.setGameReady(!1),"undefined"!=typeof window&&(this.JGWGame=new V.UnityContent("JayceeGriffithWebsiteGame/Build.json","JayceeGriffithWebsiteGame/UnityLoader.js"),this.JGWGame.on("OnReady",function(){P.setGameReady(!0),document.getElementById("preloader").classList.add("hidden"),document.getElementById("unityGame").classList.add("disablepointer"),e.JGWGame.send("GameController","Connected")}),this.JGWGame.on("GetPageNavigation",function(){"/"==P.currentLocation?(P.prevLocation="",P.nextLocation="/portfolio"):"/portfolio"==P.currentLocation?(P.prevLocation="/",P.nextLocation="/reading"):"/reading"==P.currentLocation&&(P.prevLocation="/portfolio",P.nextLocation="/"),e.JGWGame.send("GameController","UpdatePageNavigation","{ currentLocation: "+P.currentLocation+", nextLocation: "+P.nextLocation+", prevLocation: "+P.prevLocation+" }")}),this.JGWGame.on("GetPageWidth",function(){e.JGWGame.send("GameController","UpdatePageWidth",document.getElementsByClassName("scrollbar-container")[0].clientWidth.toString()),console.log(document.getElementsByClassName("scrollbar-container")[0].clientWidth.toString())}),this.JGWGame.on("SetPage",function(t){t!=P.currentLocation&&e.props.history.push(t)}),this.JGWGame.on("OpenNewTab",function(e){window.open(e,"_blank").focus()}),z.a.render(r.createElement(q.a,{unityContent:this.JGWGame}),document.getElementById("unityGame")))},t.prototype.componentDidUpdate=function(e){},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props;e.match,e.location,e.history;return r.createElement("div",{id:"unityGame",className:"unityGame"})},t}(r.Component),$=Object(a.withRouter)(J),K=n(39),Q=n.n(K),Z=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ee=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Z(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement("div",{id:"guestLayout",className:"layout"},r.createElement(D,null),r.createElement("div",{className:"container container-content"},r.createElement("div",{style:{height:"75%;"}},r.createElement(Q.a,null,this.props.children))),r.createElement(f.ToastContainer,null),r.createElement($,null),r.createElement(H,null)))},t}(r.Component),te=(n(91),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),ne=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},re=function(e){function t(t){var n=e.call(this,t)||this;return n.renderKey=0,n}return te(t,e),t.prototype.forceUpdate=function(){this.renderKey=Math.random()},ne([M.a],t.prototype,"forceUpdate",null),t}(r.Component),oe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ie=function(e){function t(t){return e.call(this,t)||this}return oe(t,e),t.prototype.render=function(){var e={display:"none"};return _()||(e={display:this.props.show?"block":"none"}),r.createElement("div",{key:this.renderKey,className:"loader-bg",style:e},r.createElement("div",{className:"sk-circle"},r.createElement("div",{className:"sk-circle1 sk-child"}),r.createElement("div",{className:"sk-circle2 sk-child"}),r.createElement("div",{className:"sk-circle3 sk-child"}),r.createElement("div",{className:"sk-circle4 sk-child"}),r.createElement("div",{className:"sk-circle5 sk-child"}),r.createElement("div",{className:"sk-circle6 sk-child"}),r.createElement("div",{className:"sk-circle7 sk-child"}),r.createElement("div",{className:"sk-circle8 sk-child"}),r.createElement("div",{className:"sk-circle9 sk-child"}),r.createElement("div",{className:"sk-circle10 sk-child"}),r.createElement("div",{className:"sk-circle11 sk-child"}),r.createElement("div",{className:"sk-circle12 sk-child"})))},t}(re),ae=function(){return(ae=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},se=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},le=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};!function(e){var t,n=this;!function(e){e.Init="LOGIN_INIT",e.Request="LOGIN_REQUEST",e.Success="LOGIN_SUCCESS",e.Failure="LOGIN_FAILURE"}(t=e.Actions||(e.Actions={})),e.actionCreators={init:function(){return function(e,r){return se(n,void 0,void 0,function(){return le(this,function(n){return e({type:t.Init}),[2]})})}},loginRequest:function(e){return function(r,o){return se(n,void 0,void 0,function(){var n;return le(this,function(o){switch(o.label){case 0:return r({type:t.Request}),[4,T.login(e)];case 1:return(n=o.sent()).hasErrors?(r({type:t.Failure}),[2]):(r({type:t.Success,payload:n.value}),[2])}})})}}};var r={indicators:{operationLoading:!1,loginSuccess:!1}};e.reducer=function(e,n){var o=n,i=function(){return g(e.indicators)};switch(o.type){case t.Init:return r;case t.Request:return(a=i()).operationLoading=!0,ae({},e,{indicators:a});case t.Success:return(a=i()).operationLoading=!1,a.loginSuccess=!0,ae({},e,{indicators:a});case t.Failure:var a;return(a=i()).operationLoading=!1,ae({},e,{indicators:a});default:}return e||r}}(w||(w={}));n(30);var ce,ue=n(3),fe=n(40),pe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),de=function(){return(de=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},he=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},me=function(e){function t(t){return e.call(this,t)||this}return pe(t,e),t.prototype.isValid=function(){return this.validator.isValid()},t.prototype.emptyForm=function(){!function(e){Array.from(e.querySelectorAll("input, select, textarea")).forEach(function(e){var t=e.getAttribute("type");"checkbox"===t||"radio"===t?e.checked=!1:e.value=""})}(this.elForm)},t.prototype.getData=function(){return E.NSerializeJson.serializeForm(this.elForm)},t.prototype.componentDidMount=function(){this.validator=new fe.NValTippy(this.elForm)},t.prototype.render=function(){var e=this;return r.createElement("form",de({},this.props,{ref:function(t){return e.elForm=t}}),this.props.children)},he([M.a],t.prototype,"isValid",null),he([M.a],t.prototype,"emptyForm",null),he([M.a],t.prototype,"getData",null),t}(r.Component),ve=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ye=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},be=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},ge=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},_e=function(e){function t(t){return e.call(this,t)||this}return ve(t,e),t.prototype.componentDidMount=function(){this.props.init(),this.elLoader&&this.elLoader.forceUpdate()},t.prototype.onClickSubmitBtn=function(e){return be(this,void 0,void 0,function(){var t;return ge(this,function(n){return e.preventDefault(),this.elForm.isValid()&&(t=this.elForm.getData(),this.props.loginRequest(t)),[2]})})},t.prototype.render=function(){var e=this;return this.props.indicators.loginSuccess?r.createElement(u.Redirect,{to:"/"}):r.createElement("div",{id:"loginPage"},r.createElement(ue.Helmet,null,r.createElement("title",null,"Login page - Jaycee Griffith")),r.createElement(ie,{ref:function(t){return e.elLoader=t},show:this.props.indicators.operationLoading}),r.createElement("div",{id:"loginContainer"},r.createElement("p",{className:"text-center"},"Type any login and password to enter."),r.createElement(me,{ref:function(t){return e.elForm=t}},r.createElement("div",{className:"form-group"},r.createElement("label",{htmlFor:"inputLogin"},"Login"),r.createElement("input",{type:"text",name:"login","data-value-type":"string",className:"form-control",id:"inputLogin","data-val-required":"true","data-msg-required":"Login is required."})),r.createElement("div",{className:"form-group"},r.createElement("label",{htmlFor:"inputLogin"},"Password"),r.createElement("input",{type:"password",name:"password","data-value-type":"string",className:"form-control",id:"inputPassword","data-val-required":"true","data-msg-required":"Password is required."})),r.createElement("div",{className:"form-inline"},r.createElement("button",{className:"btn btn-success",onClick:this.onClickSubmitBtn},"Sign in")))))},ye([M.a],t.prototype,"onClickSubmitBtn",null),t}(r.Component),we=Object(o.connect)(function(e){return e.login},w.actionCreators)(_e),Ee=Object(u.withRouter)(we),Se=function(){return(Se=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Pe=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]])}return n},Oe=function(e){var t=e.component,n=e.layout,o=e.path,i=Pe(e,["component","layout","path"]),a="/admin"===o,s="/login"===o;return!P.isAuthenticated&&a?r.createElement(u.Redirect,{to:"/login"}):P.isAuthenticated&&s?r.createElement(u.Redirect,{to:"/"}):r.createElement(u.Route,Se({},i,{render:function(e){return r.createElement(n,null,r.createElement(t,Se({},e)))}}))},Re=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ke=function(e){function t(t){return e.call(this,t)||this}return Re(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Home")),r.createElement("div",{className:"jumbotron p-3 p-md-5 rounded bg-white"},r.createElement("div",{className:"mobile-only-content col-md-6 px-0"},r.createElement("h1",{className:"display-4 font-italic"},"Welcome to my Web",r.createElement("del",null,"site")," game."),r.createElement("p",{className:"lead my-3"},"Navigate by ",r.createElement("b",null,"tilting")," your device"),r.createElement("p",{className:"lead mb-0"},r.createElement("span",null,"Make sure to check out my ",r.createElement(a.NavLink,{exact:!0,to:"/portfolio"},"portfolio")))),r.createElement("div",{className:"desktop-only-content col-md-6 px-0"},r.createElement("h1",{className:"display-4 font-italic"},"Welcome to my Web",r.createElement("del",null,"site")," game."),r.createElement("p",{className:"lead my-3"},"Navigate with ",r.createElement("b",null,"wasd")," or the ",r.createElement("b",null,"arrow keys")),r.createElement("p",{className:"lead my-3"},"Jump with ",r.createElement("b",null,"space")),r.createElement("p",{className:"lead mb-0"},r.createElement("span",null,"Fly by pressing ",r.createElement("b",null,"f"),", try not to get lost! ;)")),r.createElement("p",{className:"lead mb-0"},r.createElement("span",null,"Too slow? Hold ",r.createElement("b",null,"shift"),".")),r.createElement("p",{className:"lead mb-0"},r.createElement("span",null,"Make sure to check out my ",r.createElement(a.NavLink,{exact:!0,to:"/portfolio"},"portfolio"))))))},t}(r.Component),je=n(41),Ce=n.n(je),xe=n(42),Te=n.n(xe),Le=n(43),Me=n.n(Le),Ne=n(44),Ae=n.n(Ne),Ie=n(45),Fe=n.n(Ie),We=n(46),De=n.n(We),Ue=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),He=(n(16),n(92).Carousel),Ye=function(e){function t(t){return e.call(this,t)||this}return Ue(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Portfolio")),r.createElement("br",null),r.createElement("br",null),r.createElement("div",{className:"text-center"},r.createElement("h2",null,"Here is a few things that I've done")),r.createElement("div",null,r.createElement(He,{className:"col-md",showArrows:!0,showThumbs:!1,infiniteLoop:!0,swipeable:!1},r.createElement("div",null,r.createElement("img",{src:Te.a,className:"w-75"}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Cinema 4D Kitten Fully Rigged "),r.createElement("span",null,"Feel free to download the kitten | "),r.createElement("a",{href:"https://drive.google.com/open?id=1w56ctmWSgPDhRB7fKY-v-waFzBPImjZy",target:"_blank"},"Kitten Red_Final.zip"))),r.createElement("div",null,r.createElement("img",{src:Ce.a,className:"w-75"}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Cinema 4D Kitten Fully Rigged "),r.createElement("span",null,"Feel free to download the kitten | "),r.createElement("a",{href:"https://drive.google.com/open?id=1w56ctmWSgPDhRB7fKY-v-waFzBPImjZy",target:"_blank"},"Kitten Red_Final.zip"))),r.createElement("div",null,r.createElement("img",{src:Fe.a,className:"w-75"}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Download and play Life of Gooba | "),r.createElement("a",{href:"https://jgriffith3433.itch.io/lifeofgooba",target:"_blank"},"Itch.io game page"))),r.createElement("div",null,r.createElement("img",{src:Me.a,className:"w-75"}),r.createElement("p",{className:"legend"},"Low Poly Character Modeling")),r.createElement("div",null,r.createElement("img",{src:De.a,className:"w-75"}),r.createElement("p",{className:"legend"},"UDK training simulation")),r.createElement("div",null,r.createElement("img",{src:Ae.a,className:"w-75"}),r.createElement("p",{className:"legend"},"3ds Max Smiling Boy")),r.createElement("div",null,r.createElement("iframe",{style:{marginTop:"50px"},width:"560",height:"560",src:"https://www.youtube.com/embed/j2jXD46B4Vw",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),r.createElement("p",{className:"legend"},r.createElement("span",null,"To play the Space Shooter Game, download and extract the zip file. Then use internet explorer and download the web player, don't worry it's safe and comes directly from Unity3d.com | "),r.createElement("a",{href:"https://drive.google.com/open?id=1Y2UwkA_pACRiDt2OCTH38uRfwbM_1AZW",target:"_blank"},"spaceshooter.zip"))),r.createElement("div",null,r.createElement("iframe",{style:{marginTop:"50px"},width:"560",height:"560",src:"https://www.youtube.com/embed/ns9sM42IP-I",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),r.createElement("p",{className:"legend"},r.createElement("span",null,"To play the Hoop Jones Game, download and extract the zip file. Then use internet explorer and download the web player, don't worry it's safe and comes directly from Unity3d.com | "),r.createElement("a",{href:"https://drive.google.com/open?id=1hyRouxDJZufhvFK6tULyUaqJVrcTnrkw",target:"_blank"},"hoopjones.zip"))))),r.createElement("div",{className:"text-center externallinks"},r.createElement("span",null,r.createElement("b",null,"External profile links")),r.createElement("p",{className:"text-center"},r.createElement("span",null,"Github | "),r.createElement("a",{href:"https://github.com/jgriffith3433",target:"_blank"},"http://github.com/jgriffith3433")),r.createElement("p",{className:"text-center"},r.createElement("span",null,"Sound Cloud | "),r.createElement("a",{href:"https://soundcloud.com/jacobsgriffith",target:"_blank"},"https://soundcloud.com/jacobsgriffith")),r.createElement("p",{className:"text-center"},r.createElement("span",null,"Stack Overflow | "),r.createElement("a",{href:"https://stackoverflow.com/users/941632/jacobsgriffith",target:"_blank"},"https://stackoverflow.com/users/941632/jacobsgriffith")),r.createElement("p",{className:"text-center"},r.createElement("span",null,"Itch.io | "),r.createElement("a",{href:"https://jgriffith3433.itch.io/lifeofgooba",target:"_blank"},"https://jgriffith3433.itch.io/lifeofgooba")),r.createElement("p",{className:"text-center"},r.createElement("span",null,"Kickstarter | "),r.createElement("a",{href:"https://www.kickstarter.com/profile/jgriffith3433",target:"_blank"},"https://www.kickstarter.com/profile/jgriffith3433"))))},t}(r.Component),Be=Object(a.withRouter)(Ye),Xe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ze=function(e){function t(t){return e.call(this,t)||this}return Xe(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Traveling")))},t}(r.Component),Ve=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),qe=function(e){function t(t){return e.call(this,t)||this}return Ve(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Summer 2018")))},t}(r.Component),Ge=n(47),Je=n.n(Ge),$e=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ke=function(e){function t(t){return e.call(this,t)||this}return $e(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Reading")),r.createElement("br",null),r.createElement("br",null),r.createElement("div",{className:"text-center"},r.createElement("h2",null,"I love the star wars books")),r.createElement("div",{className:"text-center"},r.createElement("p",null,"They are even better than the movies and you can read them chronologically"),r.createElement("img",{src:Je.a,alt:"Star Wars Books",className:"img-fluid"})),r.createElement("div",{className:"text-center"},r.createElement("h3",null,"Something, something, something... Complete.")),r.createElement("div",{className:"text-center"},r.createElement("ul",null,r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/B00JN8H2TC/ref=cm_sw_em_r_mt_dp_U_MU1uCbF9FCBSZ",target:"_blank"},"Into the Void: Star Wars (Dawn of the Jedi)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345541324/ref=cm_sw_em_r_mt_dp_U_C41uCb9FHQ4BH",target:"_blank"},"Star Wars: Lost Tribe of the Sith - The Collected Stories (Star Wars: Lost Tribe of the Sith - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511352/ref=cm_sw_em_r_mt_dp_U_k51uCbDBCV9PR",target:"_blank"},"Star Wars: The Old Republic - Revan (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511395/ref=cm_sw_em_r_mt_dp_U_P51uCbPA6BPE7",target:"_blank"},"Star Wars: The Old Republic - Deceived (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345518594/ref=cm_sw_em_r_mt_dp_U_A61uCbNSRBSFT",target:"_blank"},"Star Wars: Red Harvest")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511336/ref=cm_sw_em_r_mt_dp_U_s71uCb3T663RH",target:"_blank"},"Fatal Alliance (Star Wars: The Old Republic) (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345529421/ref=cm_sw_em_r_mt_dp_U_Z71uCbW0C197J",target:"_blank"},"Annihilation: Star Wars Legends (The Old Republic) (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345522648/ref=cm_sw_em_r_mt_dp_U_q81uCbKK0TD18",target:"_blank"},"Star Wars: Knight Errant")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345477375/ref=cm_sw_em_r_mt_dp_U_s91uCbRXD4FG9",target:"_blank"},"Path of Destruction (Star Wars: Darth Bane, Book 1)")),r.createElement("span",null," | "),r.createElement("span",null,"Currently Reading")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345477499/ref=cm_sw_em_r_mt_dp_U_u91uCb5930RYF",target:"_blank"},"Rule of Two (Star Wars: Darth Bane, Book 2)")),r.createElement("span",null," | "),r.createElement("span",null,"Queued")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511573/ref=cm_sw_em_r_mt_dp_U_q91uCb786RBNS",target:"_blank"},"Dynasty of Evil (Star Wars: Darth Bane, Book 3)")),r.createElement("span",null," | "),r.createElement("span",null,"Queued")))))},t}(r.Component),Qe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ze=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},et=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},tt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Qe(t,e),t.search=function(e){return void 0===e&&(e=null),Ze(this,void 0,Promise,function(){return et(this,function(t){switch(t.label){case 0:return null==e&&(e=""),[4,this.requestJson({url:"/api/Person/Search?term="+e,method:"GET"})];case 1:return[2,t.sent()]}})})},t.update=function(e){return Ze(this,void 0,Promise,function(){return et(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person",method:"PATCH",data:e})];case 1:return[2,t.sent()]}})})},t.delete=function(e){return Ze(this,void 0,Promise,function(){return et(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person/"+e,method:"DELETE"})];case 1:return[2,t.sent()]}})})},t.add=function(e){return Ze(this,void 0,Promise,function(){return et(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person/Add",method:"POST",data:e})];case 1:return[2,t.sent()]}})})},t}(k),nt=function(){return(nt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},rt=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},ot=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};!function(e){var t,n=this;!function(e){e.SearchRequest="PERSON_SEARCH_REQUEST",e.SearchResponse="PERSON_SEARCH_RESPONSE",e.AddRequest="PERSON_ADD_REQUEST",e.AddResponse="PERSON_ADD_RESPONSE",e.UpdateRequest="PERSON_UPDATE_REQUEST",e.UpdateResponse="PERSON_UPDATE_RESPONSE",e.DeleteRequest="PERSON_DELETE_REQUEST",e.DeleteResponse="PERSON_DELETE_RESPONSE"}(t=e.Actions||(e.Actions={})),e.actionCreators={searchRequest:function(e){return function(r,o){return rt(n,void 0,void 0,function(){var n=this;return ot(this,function(o){switch(o.label){case 0:return[4,Object(v.wait)(function(o){return rt(n,void 0,void 0,function(){var n;return ot(this,function(o){switch(o.label){case 0:return r({type:t.SearchRequest}),[4,tt.search(e)];case 1:return(n=o.sent()).hasErrors||r({type:t.SearchResponse,payload:n.value}),[2]}})})})];case 1:return o.sent(),[2]}})})}},addRequest:function(e){return function(r,o){return rt(n,void 0,void 0,function(){var n;return ot(this,function(o){switch(o.label){case 0:return r({type:t.AddRequest}),[4,tt.add(e)];case 1:return(n=o.sent()).hasErrors||(e.id=n.value,r({type:t.AddResponse,payload:e})),[2]}})})}},updateRequest:function(e){return function(r,o){return rt(n,void 0,void 0,function(){return ot(this,function(n){switch(n.label){case 0:return r({type:t.UpdateRequest}),[4,tt.update(e)];case 1:return n.sent().hasErrors||r({type:t.UpdateResponse,payload:e}),[2]}})})}},deleteRequest:function(e){return function(r,o){return rt(n,void 0,void 0,function(){return ot(this,function(n){switch(n.label){case 0:return r({type:t.DeleteRequest}),[4,tt.delete(e)];case 1:return n.sent().hasErrors||r({type:t.DeleteResponse,id:e}),[2]}})})}}};var r={people:[],indicators:{operationLoading:!1}};e.reducer=function(e,n){var o=n,i=function(){return g(e.indicators)};switch(o.type){case t.SearchRequest:return(s=i()).operationLoading=!0,nt({},e,{indicators:s});case t.SearchResponse:return(s=i()).operationLoading=!1,nt({},e,{indicators:s,people:o.payload});case t.UpdateRequest:return(s=i()).operationLoading=!0,nt({},e,{indicators:s});case t.UpdateResponse:(s=i()).operationLoading=!1;var a=(l=g(e.people)).filter(function(e){return e.id===o.payload.id})[0];return a.firstName=o.payload.firstName,a.lastName=o.payload.lastName,nt({},e,{indicators:s,people:l});case t.AddRequest:return(s=i()).operationLoading=!0,nt({},e,{indicators:s});case t.AddResponse:return(s=i()).operationLoading=!1,(l=g(e.people)).push(o.payload),nt({},e,{indicators:s,people:l});case t.DeleteRequest:return(s=i()).operationLoading=!0,nt({},e,{indicators:s});case t.DeleteResponse:var s;(s=i()).operationLoading=!1;var l=g(e.people).filter(function(e){return e.id!==o.id});return nt({},e,{indicators:s,people:l});default:}return e||r}}(ce||(ce={}));var it=n(48),at=n.n(it),st=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),lt=function(){return(lt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ct=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},ut=function(e){function t(t){return e.call(this,t)||this}return st(t,e),t.prototype.setFirstPage=function(){this.elFirstPageBtn.click()},t.prototype.setLastPage=function(){this.elLastPageBtn.click()},t.prototype.render=function(){var e=this;return r.createElement(at.a,{total:this.props.totalResults,limit:this.props.limitPerPage,currentPage:this.props.currentPage},function(t){var n=t.pages,o=t.currentPage,i=t.hasNextPage,a=t.hasPreviousPage,s=t.previousPage,l=t.nextPage,c=t.totalPages,u=t.getPageItemProps;return r.createElement("ul",{className:"pagination"},r.createElement("li",null,r.createElement("span",lt({},u({pageValue:1,onPageChange:e.props.onChangePage}),{ref:function(t){return e.elFirstPageBtn=t}}),"first")),a&&r.createElement("li",null,r.createElement("span",lt({},u({pageValue:s,onPageChange:e.props.onChangePage})),"<")),n.map(function(t){return r.createElement("li",{key:t,className:t===o?"active":""},r.createElement("span",lt({},u({pageValue:t,onPageChange:e.props.onChangePage})),t))}),i&&r.createElement("li",null,r.createElement("span",lt({},u({pageValue:l,onPageChange:e.props.onChangePage})),">")),r.createElement("li",null,r.createElement("span",lt({},u({pageValue:c,onPageChange:e.props.onChangePage}),{ref:function(t){return e.elLastPageBtn=t}}),"last")))})},ct([M.a],t.prototype,"setFirstPage",null),ct([M.a],t.prototype,"setLastPage",null),t}(r.Component),ft=n(49),pt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),dt=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},ht=function(e){function t(t){return e.call(this,t)||this}return pt(t,e),t.prototype.emptyForm=function(){this.elForm&&this.elForm.emptyForm()},t.prototype.componentDidMount=function(){},t.prototype.render=function(){var e=this;return r.createElement(ft.Formik,{enableReinitialize:!0,initialValues:{firstName:this.props.data.firstName||"",lastName:this.props.data.lastName||""},onSubmit:function(e,t){t.setSubmitting}},function(t){var n=t.values,o=(t.errors,t.touched,t.handleChange),i=t.handleBlur;t.handleSubmit,t.isSubmitting;return r.createElement(me,{className:"form",ref:function(t){return e.elForm=t}},r.createElement("input",{type:"hidden",name:"id",defaultValue:(e.props.data.id||0).toString()}),r.createElement("div",{className:"form-group"},r.createElement("label",{className:"control-label required",htmlFor:"person__firstName"},"First name"),r.createElement("input",{type:"text",className:"form-control",id:"person__firstName",name:"firstName","data-value-type":"string","data-val-required":"true","data-msg-required":"First name is required.",value:n.firstName,onChange:o,onBlur:i})),r.createElement("div",{className:"form-group"},r.createElement("label",{className:"control-label required",htmlFor:"person__lastName"},"Last name"),r.createElement("input",{type:"text",className:"form-control",id:"person__lastName",name:"lastName","data-value-type":"string","data-val-required":"true","data-msg-required":"Last name is required.",value:n.lastName,onChange:o,onBlur:i})))})},dt([M.a],t.prototype,"emptyForm",null),t}(r.Component),mt=n(50),vt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),yt=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},bt=function(e){function t(t){return e.call(this,t)||this}return vt(t,e),t.prototype.show=function(){this.modalPlugin.show()},t.prototype.hide=function(){this.modalPlugin.hide()},t.prototype.componentDidMount=function(){var e=this;this.modalPlugin=new mt.Modal(this.elModal),this.props.onShow&&this.elModal.addEventListener("show.bs.modal",function(){return e.props.onShow()}),this.props.onHide&&this.elModal.addEventListener("hide.bs.modal",function(){return e.props.onHide()})},t.prototype.componentWillUnmount=function(){this.modalPlugin.hide()},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"modal fade",tabIndex:-1,role:"dialog",ref:function(t){return e.elModal=t}},r.createElement("div",{className:"modal-dialog",role:"document"},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("button",{type:"button",className:"close","data-dismiss":"modal","aria-label":"Close"},r.createElement("span",{"aria-hidden":"true"},"×")),r.createElement("h4",{className:"modal-title"},this.props.title)),r.createElement("div",{className:"modal-body"},this.props.children),r.createElement("div",{className:"modal-footer"},this.props.buttons))))},yt([M.a],t.prototype,"show",null),yt([M.a],t.prototype,"hide",null),t}(r.Component),gt=n(51),_t=n.n(gt),wt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Et=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},St=function(e){function t(t){var n=e.call(this,t)||this;return n.state={searchTerm:"",pageNum:1,limitPerPage:5,rowOffset:0,modelForEdit:{}},n.debouncedSearch=_t()(function(e){t.searchRequest(e)},500),n}return wt(t,e),t.prototype.componentWillMount=function(){this.props.searchRequest()},t.prototype.componentWillUnmount=function(){this.elModalAdd&&this.elModalAdd.hide(),this.elModalEdit&&this.elModalEdit.hide(),this.elModalDelete&&this.elModalDelete.hide()},t.prototype.onChangePage=function(e){var t=Math.ceil((e-1)*this.state.limitPerPage);this.setState({pageNum:e,rowOffset:t})},t.prototype.onClickShowAddModal=function(e){this.elModalAdd.show()},t.prototype.onClickShowEditModal=function(e,t){this.setState({modelForEdit:t}),this.elModalEdit.show()},t.prototype.onClickShowDeleteModal=function(e,t){this.setState({modelForEdit:t}),this.elModalDelete.show()},t.prototype.onClickPersonEditorAdd__saveBtn=function(e){e.preventDefault(),this.personEditorAdd.elForm.isValid()&&(this.props.addRequest(this.personEditorAdd.elForm.getData()),this.pagingBar.setLastPage(),this.elModalAdd.hide())},t.prototype.onClickPersonEditorEdit__saveBtn=function(e){if(this.personEditorEdit.elForm.isValid()){var t=this.personEditorEdit.elForm.getData();this.props.updateRequest(t),this.elModalEdit.hide()}},t.prototype.onClickPersonEditorDelete__saveBtn=function(e){this.props.deleteRequest(this.state.modelForEdit.id),this.elModalDelete.hide()},t.prototype.renderRow=function(e){var t=this;return r.createElement("tr",{key:e.id},r.createElement("td",null,e.firstName),r.createElement("td",null,e.lastName),r.createElement("td",null,r.createElement("button",{className:"btn btn-info",onClick:function(n){return t.onClickShowEditModal(n,e)}},"Edit")," ",r.createElement("button",{className:"btn btn-danger",onClick:function(n){return t.onClickShowDeleteModal(n,e)}},"Delete")))},t.prototype.renderRows=function(e){var t=this;return e.slice(this.state.rowOffset,this.state.rowOffset+this.state.limitPerPage).map(function(e){return t.renderRow(e)})},t.prototype.onChangeSearchInput=function(e){var t=e.currentTarget.value;this.debouncedSearch(t),this.pagingBar.setFirstPage()},t.prototype.render=function(){var e=this;return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Portfolio")),r.createElement(ie,{show:this.props.indicators.operationLoading}),r.createElement("div",{className:"panel panel-default"},r.createElement("div",{className:"panel-body row"},r.createElement("div",{className:"col-sm-1"},r.createElement("button",{className:"btn btn-success",onClick:this.onClickShowAddModal},"Add")),r.createElement("div",{className:"col-sm-11"},r.createElement("input",{type:"text",className:"form-control",defaultValue:"",onChange:this.onChangeSearchInput,placeholder:"Search for people..."})))),r.createElement("table",{className:"table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"First name"),r.createElement("th",null,"Last name"),r.createElement("th",null))),r.createElement("tbody",null,this.renderRows(this.props.people))),r.createElement(bt,{ref:function(t){return e.elModalAdd=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-primary",onClick:this.onClickPersonEditorAdd__saveBtn},"Save")),title:"Add person",onHide:function(){e.personEditorAdd&&e.personEditorAdd.emptyForm()}},r.createElement(ht,{ref:function(t){return e.personEditorAdd=t},data:{}})),r.createElement(bt,{ref:function(t){return e.elModalEdit=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-primary",onClick:this.onClickPersonEditorEdit__saveBtn},"Save")),title:"Edit person: "+this.state.modelForEdit.firstName+" "+this.state.modelForEdit.lastName,onHide:function(){e.personEditorEdit&&e.setState({modelForEdit:{}})}},r.createElement(ht,{ref:function(t){return e.personEditorEdit=t},data:this.state.modelForEdit})),r.createElement(bt,{ref:function(t){return e.elModalDelete=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-danger",onClick:this.onClickPersonEditorDelete__saveBtn},"Delete")),title:"Delete person: "+this.state.modelForEdit.firstName+" "+this.state.modelForEdit.lastName},r.createElement("p",null,"Do you really want to delete this person?")),r.createElement(ut,{ref:function(t){return e.pagingBar=t},totalResults:this.props.people.length,limitPerPage:this.state.limitPerPage,currentPage:this.state.pageNum,onChangePage:this.onChangePage}))},Et([M.a],t.prototype,"onChangePage",null),Et([M.a],t.prototype,"onClickShowAddModal",null),Et([M.a],t.prototype,"onClickShowEditModal",null),Et([M.a],t.prototype,"onClickShowDeleteModal",null),Et([M.a],t.prototype,"onClickPersonEditorAdd__saveBtn",null),Et([M.a],t.prototype,"onClickPersonEditorEdit__saveBtn",null),Et([M.a],t.prototype,"onClickPersonEditorDelete__saveBtn",null),Et([M.a],t.prototype,"renderRow",null),Et([M.a],t.prototype,"renderRows",null),Et([M.a],t.prototype,"onChangeSearchInput",null),t}(r.Component),Pt=Object(o.connect)(function(e){return e.person},ce.actionCreators)(St),Ot=Object(u.withRouter)(Pt),Rt=r.createElement(a.Switch,null,r.createElement(Oe,{layout:ee,exact:!0,path:"/login",component:Ee}),r.createElement(Oe,{layout:ee,exact:!0,path:"/",component:ke}),r.createElement(Oe,{layout:ee,exact:!0,path:"/portfolio",component:Be}),r.createElement(Oe,{layout:ee,exact:!0,path:"/traveling",component:ze}),r.createElement(Oe,{layout:ee,exact:!0,path:"/traveling/summer2018",component:qe}),r.createElement(Oe,{layout:ee,exact:!0,path:"/reading",component:Ke}),r.createElement(Oe,{layout:B,exact:!0,path:"/admin",component:Ot})),kt=n(13),jt=n(52),Ct=n.n(jt),xt={login:w.reducer,person:ce.reducer},Tt=function(){return(Tt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function Lt(e,t){var n="undefined"==typeof window?null:window,r=n&&n.__REDUX_DEVTOOLS_EXTENSION__;return Object(kt.compose)(Object(kt.applyMiddleware)(Ct.a,Object(s.routerMiddleware)(e)),r?r():function(e){return e})(kt.createStore)(function(e,t){return Object(kt.combineReducers)(Tt({},e,{router:Mt(t)}))}(xt,e),t)}var Mt=function(e){var t={location:e.location,action:e.action};return function(e,n){return void 0===e&&(e=t),void 0===n&&(n={}),n.type===s.LOCATION_CHANGE?Tt({},e,n.payload):e}};var Nt=function(){var e=ue.Helmet.renderStatic(),t="";for(var n in e)e.hasOwnProperty(n)&&(t+=e[n].toString());return t},At=function(e,t,n){return{completedTasks:v.completedTasks,nodeSession:e,initialReduxState:t,helmetStrings:n}};t.default=Object(c.createServerRenderer)(function(e){return P.reset(),P.init(e.data),new Promise(function(t,n){var c=e.baseUrl.substring(0,e.baseUrl.length-1),u=e.url.substring(c.length),f=Lt(Object(l.createMemoryHistory)());f.dispatch(Object(s.replace)(u));var p={},d=r.createElement(o.Provider,{store:f},r.createElement(a.StaticRouter,{basename:c,context:p,location:e.location.path,children:Rt})),h=function(){return Object(i.renderToString)(d)};h(),p.url?t({redirectUrl:p.url,globals:At(e.data,f.getState(),Nt())}):e.domainTasks.then(function(){t({html:h(),globals:At(e.data,f.getState(),Nt())})},n)})})}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiLi92ZW5kb3JcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmluZC1kZWNvcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1oZWxtZXQvbGliL0hlbG1ldC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC10b2FzdGlmeS9saWIvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvZG9tYWluLXdhaXQvZGlzdC9janMvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbGliL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvaGlzdG9yeS9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2xpYi9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWR1eC9saWIvcmVkdXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9oaXN0b3J5L0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbm9kZV9tb2R1bGVzL2hpc3Rvcnkvbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9uc2VyaWFsaXplanNvbi9kaXN0L2Nqcy9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbm9kZV9tb2R1bGVzL2hpc3RvcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvaW52YXJpYW50LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXVuaXR5LXdlYmdsL3NvdXJjZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL25vZGVfbW9kdWxlcy9oaXN0b3J5L0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXVuaXR5LXdlYmdsL3NvdXJjZS9lbnVtcy9Vbml0eVZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWwvbGliL2Nzc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWwvbGliL0NTU1RyYW5zbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZWFzeS1zd2lwZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWwvbGliL2NvbXBvbmVudHMvVGh1bWJzLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL3NlcnZlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9oaXN0b3J5L2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL2FzcG5ldC1wcmVyZW5kZXJpbmcvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvanNvbi10by11cmwvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wZXJmZWN0LXNjcm9sbGJhci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9udmFsLXRpcHB5L2Rpc3QvY2pzL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvaW1hZ2VzL2tpdHRlbmZhY2UuanBnIiwid2VicGFjazovLy8uL0NsaWVudEFwcC9pbWFnZXMva2l0dGVuZnVsbC5qcGciLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2ltYWdlcy9uaWNjb2xvLnBuZyIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvaW1hZ2VzL2JveS5qcGciLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2ltYWdlcy9nb29iYS5qcGciLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2ltYWdlcy9zd2F0dHJhaW5lci5qcGciLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2ltYWdlcy9zdGFyd2Fyc2Jvb2tzLmpwZyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXBhZ2luYXRpbmcvZGlzdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zvcm1pay9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwMy1uYXRpdmUvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hd2Vzb21lLWRlYm91bmNlLXByb21pc2UvYXdlc29tZS1kZWJvdW5jZS1wcm9taXNlLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvbGliL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9janMvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvY2pzL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL1JvdXRlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vSGFzaFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvTWVtb3J5Um91dGVyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9OYXZMaW5rLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL1JvdXRlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9Qcm9tcHQuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvUHJvbXB0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9SZWRpcmVjdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL1N0YXRpY1JvdXRlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vU3dpdGNoLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL1N3aXRjaC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZ2VuZXJhdGVQYXRoLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2dlbmVyYXRlUGF0aC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL21hdGNoUGF0aC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgLi92ZW5kb3IiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci93aXRoUm91dGVyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdW5pdHktd2ViZ2wvc291cmNlL1VuaXR5Q29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdW5pdHktd2ViZ2wvc291cmNlL2NvbXBvbmVudHMvVW5pdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXVuaXR5LXdlYmdsL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdW5pdHktd2ViZ2wvbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC11bml0eS13ZWJnbC9zb3VyY2Uvc2VydmljZXMvVW5pdHlMb2FkZXJTZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wZXJmZWN0LXNjcm9sbGJhci9saWIvc2Nyb2xsYmFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wZXJmZWN0LXNjcm9sbGJhci9kaXN0L3BlcmZlY3Qtc2Nyb2xsYmFyLmNvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVzcG9uc2l2ZS1jYXJvdXNlbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWwvbGliL2NvbXBvbmVudHMvQ2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSAuL3ZlbmRvciIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZWFzeS1zd2lwZS9saWIvcmVhY3Qtc3dpcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWwvbGliL2RpbWVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWwvbGliL2N1c3RvbVByb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZm9ybWlrL2Rpc3QvZm9ybWlrLmNqcy5wcm9kdWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZm9ybWlrL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLXJlYWN0LWNvbnRleHQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY29udGV4dC9saWIvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2d1ZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLmNsb25lZGVlcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gudG9wYXRoL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1mYXN0LWNvbXBhcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIC4vdmVuZG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwbWVyZ2UvZGlzdC91bWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYm91bmNlLXByb21pc2UvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvVWkudHMiLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL21vZGVscy9SZXN1bHQudHMiLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL3V0aWxzLnRzIiwid2VicGFjazovLy8uL0NsaWVudEFwcC9zdG9yZS9Mb2dpblN0b3JlLnRzIiwid2VicGFjazovLy8uL0NsaWVudEFwcC9HbG9iYWxzLnRzIiwid2VicGFjazovLy8uL0NsaWVudEFwcC9zZXJ2aWNlcy9TZXJ2aWNlQmFzZS50cyIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvc2VydmljZXMvQWNjb3VudFNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2NvbXBvbmVudHMvc2hhcmVkL1RvcE1lbnUudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9jb21wb25lbnRzL3NoYXJlZC9Gb290ZXIudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9sYXlvdXRzL0F1dGhvcml6ZWRMYXlvdXQudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9jb21wb25lbnRzL3NoYXJlZC9Vbml0eUdhbWUudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9sYXlvdXRzL0d1ZXN0TGF5b3V0LnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvY29tcG9uZW50cy9zaGFyZWQvQXBwQ29tcG9uZW50LnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvY29tcG9uZW50cy9zaGFyZWQvTG9hZGVyLnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvc3RvcmUvUGVyc29uU3RvcmUudHMiLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2NvbXBvbmVudHMvc2hhcmVkL0Zvcm0udHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9wYWdlcy9Mb2dpblBhZ2UudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9jb21wb25lbnRzL3NoYXJlZC9BcHBSb3V0ZS50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL3BhZ2VzL0hvbWVQYWdlLnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvcGFnZXMvUG9ydGZvbGlvUGFnZS50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL3BhZ2VzL1RyYXZlbGluZ1BhZ2UudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9wYWdlcy9TdW1tZXIyMDE4UGFnZS50c3giLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL3BhZ2VzL1JlYWRpbmdQYWdlLnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvc2VydmljZXMvUGVyc29uU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvY29tcG9uZW50cy9zaGFyZWQvUGFnaW5nQmFyLnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvY29tcG9uZW50cy9wZXJzb24vUGVyc29uRWRpdG9yLnRzeCIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvY29tcG9uZW50cy9zaGFyZWQvTW9kYWxDb21wb25lbnQudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9wYWdlcy9BZG1pblBhZ2UudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9yb3V0ZXMudHN4Iiwid2VicGFjazovLy8uL0NsaWVudEFwcC9zdG9yZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9DbGllbnRBcHAvY29uZmlndXJlU3RvcmUudHMiLCJ3ZWJwYWNrOi8vLy4vQ2xpZW50QXBwL2Jvb3Qtc2VydmVyLnRzeCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJlcXVpcmUiLCJjb25zdGFudHMiLCJ0YXJnZXQiLCJwcm9wZXJ0eUtleSIsImRlc2NyaXB0b3IiLCJ0eXBlT2ZGdW5jdGlvbiIsIlR5cGVFcnJvciIsImNvbmZpZ3VyYWJsZSIsImJvb2xUcnVlIiwiYm91bmQiLCJ0aGlzIiwid3JpdGFibGUiLCJkZWZhdWx0Iiwid2l0aFJvdXRlciIsIm1hdGNoUGF0aCIsImdlbmVyYXRlUGF0aCIsIlN3aXRjaCIsIlN0YXRpY1JvdXRlciIsIlJvdXRlciIsIlJvdXRlIiwiUmVkaXJlY3QiLCJQcm9tcHQiLCJOYXZMaW5rIiwiTWVtb3J5Um91dGVyIiwiTGluayIsIkhhc2hSb3V0ZXIiLCJCcm93c2VyUm91dGVyIiwidW5kZWZpbmVkIiwiX0Jyb3dzZXJSb3V0ZXIzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9IYXNoUm91dGVyMyIsIl9MaW5rMyIsIl9NZW1vcnlSb3V0ZXIzIiwiX05hdkxpbmszIiwiX1Byb21wdDMiLCJfUmVkaXJlY3QzIiwiX1JvdXRlMyIsIl9Sb3V0ZXIzIiwiX1N0YXRpY1JvdXRlcjMiLCJfU3dpdGNoMyIsIl9nZW5lcmF0ZVBhdGgzIiwiX21hdGNoUGF0aDMiLCJfd2l0aFJvdXRlcjMiLCJvYmoiLCJhZGRMZWFkaW5nU2xhc2giLCJwYXRoIiwiY2hhckF0Iiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdWJzdHIiLCJoYXNCYXNlbmFtZSIsInByZWZpeCIsIlJlZ0V4cCIsInRlc3QiLCJzdHJpcEJhc2VuYW1lIiwibGVuZ3RoIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwic2xpY2UiLCJwYXJzZVBhdGgiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2giLCJoYXNoSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoSW5kZXgiLCJjcmVhdGVQYXRoIiwibG9jYXRpb24iLCJsb2NhdGlvbnNBcmVFcXVhbCIsImNyZWF0ZUxvY2F0aW9uIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJfcmVzb2x2ZVBhdGhuYW1lMiIsIl92YWx1ZUVxdWFsMiIsIl9QYXRoVXRpbHMiLCJzdGF0ZSIsImN1cnJlbnRMb2NhdGlvbiIsImRlY29kZVVSSSIsImUiLCJVUklFcnJvciIsImEiLCJiIiwid2FybmluZyIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJjcmVhdGVIYXNoSGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiX0xvY2F0aW9uVXRpbHMiLCJfY3JlYXRlQnJvd3Nlckhpc3RvcnkzIiwiX2NyZWF0ZUhhc2hIaXN0b3J5MyIsIl9jcmVhdGVNZW1vcnlIaXN0b3J5MyIsIl93YXJuaW5nMiIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiYWN0aW9uIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwicmVzdWx0IiwiYXBwZW5kTGlzdGVuZXIiLCJmbiIsImlzQWN0aXZlIiwibGlzdGVuZXIiLCJhcHBseSIsInB1c2giLCJmaWx0ZXIiLCJpdGVtIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJmb3JFYWNoIiwiX1JvdXRlcjIiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJVbml0eVZlcnNpb25fMSIsIlVuaXR5VmVyc2lvbiIsIlVuaXR5Q29udGVudF8xIiwiVW5pdHlDb250ZW50IiwiVW5pdHlfMSIsImNhblVzZURPTSIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJub2RlIiwiZXZlbnQiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImdldENvbmZpcm1hdGlvbiIsIm1lc3NhZ2UiLCJjb25maXJtIiwic3VwcG9ydHNIaXN0b3J5IiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5Iiwic3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSIsInN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsIl9yZWFjdDIiLCJfcHJvcFR5cGVzMiIsIl9pbnZhcmlhbnQyIiwiX2hpc3RvcnkiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsImlzTW9kaWZpZWRFdmVudCIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3RlbXAiLCJfdGhpcyIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJjb25jYXQiLCJoYW5kbGVDbGljayIsInByb3BzIiwib25DbGljayIsImRlZmF1bHRQcmV2ZW50ZWQiLCJidXR0b24iLCJwcmV2ZW50RGVmYXVsdCIsImNvbnRleHQiLCJyb3V0ZXIiLCJfdGhpcyRwcm9wcyIsInJlcGxhY2UiLCJ0byIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHMiLCJyZW5kZXIiLCJfcHJvcHMiLCJpbm5lclJlZiIsImtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJocmVmIiwiY3JlYXRlSHJlZiIsInJlZiIsIkNvbXBvbmVudCIsInByb3BUeXBlcyIsImZ1bmMiLCJzdHJpbmciLCJib29sIiwib25lT2ZUeXBlIiwiaXNSZXF1aXJlZCIsImRlZmF1bHRQcm9wcyIsImNvbnRleHRUeXBlcyIsInNoYXBlIiwiX1JvdXRlMiIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiYXJnIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJfY2xhc3NuYW1lczIiLCJDQVJPVVNFTCIsImlzU2xpZGVyIiwiY2Fyb3VzZWwiLCJjYXJvdXNlbC1zbGlkZXIiLCJXUkFQUEVSIiwiYXhpcyIsInRodW1icy13cmFwcGVyIiwic2xpZGVyLXdyYXBwZXIiLCJheGlzLWhvcml6b250YWwiLCJheGlzLXZlcnRpY2FsIiwiU0xJREVSIiwiaXNTd2lwaW5nIiwidGh1bWJzIiwic2xpZGVyIiwiYW5pbWF0ZWQiLCJJVEVNIiwic2VsZWN0ZWQiLCJ0aHVtYiIsInNsaWRlIiwiQVJST1dfUFJFViIsImRpc2FibGVkIiwiY29udHJvbC1hcnJvdyBjb250cm9sLXByZXYiLCJjb250cm9sLWRpc2FibGVkIiwiQVJST1dfTkVYVCIsImNvbnRyb2wtYXJyb3cgY29udHJvbC1uZXh0IiwiRE9UIiwiZG90IiwicG9zaXRpb24iLCJqb2luIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiX3JlYWN0U3dpcGUiLCJfcmVhY3RTd2lwZTIiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3JlYWN0IiwiX2Nzc0NsYXNzZXMyIiwiX2RpbWVuc2lvbnMiLCJfQ1NTVHJhbnNsYXRlMiIsIl9yZWFjdEVhc3lTd2lwZTIiLCJUaHVtYnMiLCJfQ29tcG9uZW50IiwiZ2V0UHJvdG90eXBlT2YiLCJfaW5pdGlhbGlzZVByb3BzIiwic2VsZWN0ZWRJdGVtIiwiaGFzTW91bnQiLCJmaXJzdEl0ZW0iLCJpdGVtU2l6ZSIsInZpc2libGVJdGVtcyIsImxhc3RQb3NpdGlvbiIsInNob3dBcnJvd3MiLCJpbWFnZXMiLCJnZXRJbWFnZXMiLCJuZXh0UHJvcHMiLCJzZXR1cFRodW1icyIsInNldFN0YXRlIiwiZ2V0Rmlyc3RJdGVtIiwiY2hpbGRyZW4iLCJwcmV2UHJvcHMiLCJ1cGRhdGVTaXplcyIsImRlc3Ryb3lUaHVtYnMiLCJDaGlsZHJlbiIsIm1hcCIsImluZGV4IiwiaW1nIiwidHlwZSIsInRvQXJyYXkiLCJpbWFnZSIsImNvbnNvbGUiLCJ3YXJuIiwiX3RoaXMyIiwiaXRlbUNsYXNzIiwidGh1bWJQcm9wcyIsInNldFRodW1ic1JlZiIsImNsYXNzTmFtZSIsImhhbmRsZUNsaWNrSXRlbSIsIm9uS2V5RG93biIsImNsb25lRWxlbWVudCIsIm9uTG9hZCIsInNldE1vdW50U3RhdGUiLCJyb2xlIiwidGFiSW5kZXgiLCJpdGVtTGlzdFN0eWxlcyIsImhhc1ByZXYiLCJoYXNOZXh0IiwiY3VycmVudFBvc2l0aW9uIiwidHJhbnNmb3JtUHJvcCIsInRyYW5zaXRpb25UaW1lIiwiV2Via2l0VHJhbnNmb3JtIiwiTW96VHJhbnNmb3JtIiwiTXNUcmFuc2Zvcm0iLCJPVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJXZWJraXRUcmFuc2l0aW9uRHVyYXRpb24iLCJNb3pUcmFuc2l0aW9uRHVyYXRpb24iLCJNc1RyYW5zaXRpb25EdXJhdGlvbiIsIk9UcmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJtc1RyYW5zaXRpb25EdXJhdGlvbiIsInNldEl0ZW1zV3JhcHBlclJlZiIsInNsaWRlUmlnaHQiLCJ0YWdOYW1lIiwic3dpcGluZyIsIm9uU3dpcGVMZWZ0Iiwic2xpZGVMZWZ0Iiwib25Td2lwZVJpZ2h0Iiwib25Td2lwZU1vdmUiLCJvblN3aXBlU3RhcnQiLCJvblN3aXBlRW5kIiwic3R5bGUiLCJzZXRJdGVtc0xpc3RSZWYiLCJyZW5kZXJJdGVtcyIsImRpc3BsYXlOYW1lIiwicHJvcHNUeXBlcyIsImVsZW1lbnQiLCJudW1iZXIiLCJ0aHVtYldpZHRoIiwiX3RoaXMzIiwiaXRlbXNXcmFwcGVyUmVmIiwiaXRlbXNMaXN0UmVmIiwidGh1bWJzUmVmIiwidG90YWwiLCJ3cmFwcGVyU2l6ZSIsImNsaWVudFdpZHRoIiwib3V0ZXJXaWR0aCIsIk1hdGgiLCJmbG9vciIsIl9zdGF0ZSIsImtleUNvZGUiLCJoYW5kbGVyIiwib25TZWxlY3RJdGVtIiwiZGVsdGFYIiwibGFzdExlZnRCb3VuZGFyeSIsInByb3AiLCJwb3NpdGlvbnMiLCJtb3ZlVG8iLCJfc2Nyb2xsYmFyMiIsIkRlYm91bmNlQ2FjaGUiLCJvbmx5UmVzb2x2ZXNMYXN0IiwiZGVib3VuY2UiLCJfZGVib3VuY2VQcm9taXNlMiIsIndhaXQiLCJvcHRpb25zIiwiYXN5bmNGdW5jdGlvbiIsImNhbmNlbFByZXZpb3VzIiwiX21ha2VDYW5jZWxhYmxlIiwicHJvbWlzZSIsImhhc0NhbmNlbGVkXyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidGhlbiIsInZhbCIsImVycm9yIiwiY2FuY2VsIiwibWFrZUNhbmNlbGFibGUiLCJnZXREZWJvdW5jZWRGdW5jdGlvbiIsImtleU9wdGlvbnMiLCJvbmx5UmVzb2x2ZXNMYXN0T3B0aW9uIiwib3RoZXJPcHRpb25zIiwiYXJyIiwiaXNBcnJheSIsImFycjIiLCJmcm9tIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiZGVib3VuY2VDYWNoZSIsImRlYm91bmNlZEZ1bmMiLCJEZWZhdWx0T3B0aW9ucyIsImZpbmFsT3B0aW9ucyIsImNvbXBvbmVudFdpbGxNb3VudCIsImJhc2VuYW1lIiwiZm9yY2VSZWZyZXNoIiwia2V5TGVuZ3RoIiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiIsIl9ET01VdGlscyIsImdldEhpc3RvcnlTdGF0ZSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3JlZiIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJyYW5kb20iLCJ0b1N0cmluZyIsInRyYW5zaXRpb25NYW5hZ2VyIiwibmV4dFN0YXRlIiwiaGFuZGxlUG9wU3RhdGUiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJyZXZlcnRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwiaW5pdGlhbExvY2F0aW9uIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsImdldEhhc2hQYXRoIiwic3Vic3RyaW5nIiwicmVwbGFjZUhhc2hQYXRoIiwiY2FuR29XaXRob3V0UmVsb2FkIiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJpZ25vcmVQYXRoIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJhbGxQYXRocyIsImxhc3RJbmRleE9mIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIm1pbiIsIm1heCIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsImVudHJpZXMiLCJlbnRyeSIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwic3BsaWNlIiwiY2FuR28iLCJvbmVPZiIsIl9NZW1vcnlSb3V0ZXIyIiwiX0xpbmsyIiwiZXhhY3QiLCJzdHJpY3QiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImdldElzQWN0aXZlIiwiYXJpYUN1cnJlbnQiLCJyZXN0IiwiZXNjYXBlZFBhdGgiLCJfcmVmMiIsIm1hdGNoIiwiYXJpYS1jdXJyZW50IiwiX1Byb21wdDIiLCJfUmVkaXJlY3QyIiwiX1N0YXRpY1JvdXRlcjIiLCJfU3dpdGNoMiIsIl9nZW5lcmF0ZVBhdGgyIiwiX21hdGNoUGF0aDIiLCJfd2l0aFJvdXRlcjIiLCJidWlsZEpzb25QYXRoIiwidW5pdHlMb2FkZXJKc1BhdGgiLCJ1bml0eUNvbmZpZyIsIl91bml0eUNvbmZpZyIsInVuaXF1ZUlEIiwidW5pdHlFdmVudHMiLCJ1bml0eVZlcnNpb24iLCJVTklUWV8yMDE4IiwiYWRqdXN0T25XaW5kb3dSZXNpemUiLCJpZCIsInNldENvbXBvbmVudEluc3RhbmNlIiwidW5pdHlDb21wb25lbnRJbnN0YW5jZSIsInVuaXR5Q29tcG9uZW50Iiwic2V0VW5pdHlJbnN0YW5jZSIsInVuaXR5SW5zdGFuY2UiLCJzZXRGdWxsc2NyZWVuIiwiZnVsbHNjcmVlbiIsIlNldEZ1bGxzY3JlZW4iLCJzZW5kIiwiZ2FtZU9iamVjdE5hbWUiLCJtZXRob2ROYW1lIiwicGFyYW1ldGVyIiwiU2VuZE1lc3NhZ2UiLCJvbiIsImV2ZW50TmFtZSIsImV2ZW50Q2FsbGJhY2siLCJSZWFjdFVuaXR5V2ViR0wiLCJ0cmlnZ2VyVW5pdHlFdmVudCIsImV2ZW50VmFsdWUiLCJfaSIsIl9fZXh0ZW5kcyIsImV4dGVuZFN0YXRpY3MiLCJfXyIsIl9faW1wb3J0U3RhciIsImsiLCJSZWFjdCIsIlVuaXR5TG9hZGVyU2VydmljZV8xIiwiVW5pdHkiLCJfc3VwZXIiLCJ1bml0eUxvYWRlclNlcnZpY2UiLCJvbldpbmRvd1Jlc2l6ZUJpbmRpbmciLCJvbldpbmRvd1Jlc2l6ZSIsInVuaXR5Q29udGVudCIsIm9uUHJvZ3Jlc3MiLCJwcm9ncmVzc2lvbiIsImFkanVzdENhbnZhc1RvQ29udGFpbmVyIiwiX3dpZHRoIiwiaHRtbEVsZW1lbnQiLCJvZmZzZXRXaWR0aCIsIl9oZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJfY2FudmFzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJoZWlnaHQiLCJ3aWR0aCIsImNvbXBvbmVudERpZE1vdW50IiwiYXBwZW5kIiwiVW5pdHlMb2FkZXIiLCJpbnN0YW50aWF0ZSIsIk1vZHVsZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicSIsImZvciIsInUiLCJ2IiwidyIsIngiLCJ5IiwieiIsIkEiLCJCIiwiQyIsIkQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJFIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkYiLCJyZWZzIiwidXBkYXRlciIsIkciLCJIIiwiaXNSZWFjdENvbXBvbmVudCIsImZvcmNlVXBkYXRlIiwiSSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSiIsImN1cnJlbnQiLCJLIiwiTCIsIl9fc2VsZiIsIl9fc291cmNlIiwiTSIsImciLCJoIiwiZiIsIiQkdHlwZW9mIiwiX293bmVyIiwiTiIsIk8iLCJQIiwiUSIsInBvcCIsImtleVByZWZpeCIsImNvdW50IiwiUiIsIlMiLCJUIiwibmV4dCIsImRvbmUiLCI9IiwiOiIsImVzY2FwZSIsIlUiLCJWIiwiVyIsIlgiLCJvbmx5IiwiY3JlYXRlUmVmIiwiUHVyZUNvbXBvbmVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfZGVmYXVsdFZhbHVlIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX2NoYW5nZWRCaXRzIiwiX2NoYW5nZWRCaXRzMiIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJ1bnN0YWJsZV9Bc3luY01vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsInZlcnNpb24iLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiWSIsIloiLCJ2YWxpZGF0ZUZvcm1hdCIsImZvcm1hdCIsImNvbmRpdGlvbiIsIkVycm9yIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsIlVuaXR5TG9hZGVyU2VydmljZSIsImRvY3VtZW50SGVhZCIsInVuaXR5TG9hZGVyU2NyaXB0IiwiYXN5bmMiLCJzcmMiLCJvbmxvYWQiLCJhcHBlbmRDaGlsZCIsIl9wcm9wVHlwZXMiLCJfcGVyZmVjdFNjcm9sbGJhcjIiLCJoYW5kbGVyTmFtZUJ5RXZlbnQiLCJwcy1zY3JvbGwteSIsInBzLXNjcm9sbC14IiwicHMtc2Nyb2xsLXVwIiwicHMtc2Nyb2xsLWRvd24iLCJwcy1zY3JvbGwtbGVmdCIsInBzLXNjcm9sbC1yaWdodCIsInBzLXktcmVhY2gtc3RhcnQiLCJwcy15LXJlYWNoLWVuZCIsInBzLXgtcmVhY2gtc3RhcnQiLCJwcy14LXJlYWNoLWVuZCIsImZyZWV6ZSIsIlNjcm9sbEJhciIsImhhbmRsZVJlZiIsIl9oYW5kbGVyQnlFdmVudCIsIl9wcyIsIl9jb250YWluZXIiLCJvcHRpb24iLCJfdXBkYXRlRXZlbnRIb29rIiwidXBkYXRlIiwiZGVzdHJveSIsInByZXZDYWxsYmFjayIsInByZXZIYW5kbGVyIiwiY29udGFpbmVyUmVmIiwiY29tcG9uZW50IiwiQ29tcCIsIm9uU2Nyb2xsWSIsIm9uU2Nyb2xsWCIsIm9uU2Nyb2xsVXAiLCJvblNjcm9sbERvd24iLCJvblNjcm9sbExlZnQiLCJvblNjcm9sbFJpZ2h0Iiwib25ZUmVhY2hTdGFydCIsIm9uWVJlYWNoRW5kIiwib25YUmVhY2hTdGFydCIsIm9uWFJlYWNoRW5kIiwiUHJvcFR5cGVzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInNldCIsImRpdiIsImVsTWF0Y2hlcyIsIkVsZW1lbnQiLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJxdWVyeSIsInJlbW92ZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInF1ZXJ5Q2hpbGRyZW4iLCJzZWxlY3RvciIsImNoaWxkIiwiY2xzIiwibWFpbiIsInJhaWwiLCJjb25zdW1pbmciLCJmb2N1cyIsImNsaWNraW5nIiwiYWN0aXZlIiwic2Nyb2xsaW5nIiwic2Nyb2xsaW5nQ2xhc3NUaW1lb3V0IiwiYWRkU2Nyb2xsaW5nQ2xhc3MiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImNsZWFyVGltZW91dCIsImFkZCIsInJlbW92ZVNjcm9sbGluZ0NsYXNzIiwic2V0VGltZW91dCIsImlzQWxpdmUiLCJzZXR0aW5ncyIsInNjcm9sbGluZ1RocmVzaG9sZCIsIkV2ZW50RWxlbWVudCIsImhhbmRsZXJzIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiaXNFbXB0eSIsInVuYmluZCIsInRoaXMkMSIsInVuYmluZEFsbCIsImV2ZXJ5IiwiRXZlbnRNYW5hZ2VyIiwiZXZlbnRFbGVtZW50cyIsImNyZWF0ZUV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJldnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJldmVudEVsZW1lbnQiLCJlZSIsIm9uY2UiLCJvbmNlSGFuZGxlciIsInByb2Nlc3NTY3JvbGxEaWZmIiwiZGlmZiIsInVzZVNjcm9sbGluZ0NsYXNzIiwiZm9yY2VGaXJlUmVhY2hFdmVudCIsImZpZWxkcyIsImNvbnRlbnRIZWlnaHQiLCJjb250YWluZXJIZWlnaHQiLCJzY3JvbGxUb3AiLCJ1cCIsImRvd24iLCJyZWFjaCIsImRpc3BhdGNoRXZlbnQiLCJzZXRTY3JvbGxpbmdDbGFzc0luc3RhbnRseSIsInByb2Nlc3NTY3JvbGxEaWZmJDEiLCJ0b0ludCIsInBhcnNlSW50IiwiZW52IiwiaXNXZWJLaXQiLCJkb2N1bWVudEVsZW1lbnQiLCJzdXBwb3J0c1RvdWNoIiwiRG9jdW1lbnRUb3VjaCIsInN1cHBvcnRzSWVQb2ludGVyIiwibXNNYXhUb3VjaFBvaW50cyIsImlzQ2hyb21lIiwidXBkYXRlR2VvbWV0cnkiLCJyb3VuZGVkU2Nyb2xsVG9wIiwiY29udGFpbmVyV2lkdGgiLCJjbGllbnRIZWlnaHQiLCJjb250ZW50V2lkdGgiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsInNjcm9sbGJhclhSYWlsIiwiZWwiLCJzY3JvbGxiYXJZUmFpbCIsInN1cHByZXNzU2Nyb2xsWCIsInNjcm9sbFhNYXJnaW5PZmZzZXQiLCJzY3JvbGxiYXJYQWN0aXZlIiwicmFpbFhXaWR0aCIsInJhaWxYTWFyZ2luV2lkdGgiLCJyYWlsWFJhdGlvIiwic2Nyb2xsYmFyWFdpZHRoIiwiZ2V0VGh1bWJTaXplIiwic2Nyb2xsYmFyWExlZnQiLCJuZWdhdGl2ZVNjcm9sbEFkanVzdG1lbnQiLCJzY3JvbGxMZWZ0Iiwic3VwcHJlc3NTY3JvbGxZIiwic2Nyb2xsWU1hcmdpbk9mZnNldCIsInNjcm9sbGJhcllBY3RpdmUiLCJyYWlsWUhlaWdodCIsInJhaWxZTWFyZ2luSGVpZ2h0IiwicmFpbFlSYXRpbyIsInNjcm9sbGJhcllIZWlnaHQiLCJzY3JvbGxiYXJZVG9wIiwieFJhaWxPZmZzZXQiLCJpc1J0bCIsImxlZnQiLCJpc1Njcm9sbGJhclhVc2luZ0JvdHRvbSIsImJvdHRvbSIsInNjcm9sbGJhclhCb3R0b20iLCJ0b3AiLCJzY3JvbGxiYXJYVG9wIiwieVJhaWxPZmZzZXQiLCJpc1Njcm9sbGJhcllVc2luZ1JpZ2h0IiwicmlnaHQiLCJzY3JvbGxiYXJZUmlnaHQiLCJzY3JvbGxiYXJZT3V0ZXJXaWR0aCIsInNjcm9sbGJhcllMZWZ0Iiwic2Nyb2xsYmFyWCIsInJhaWxCb3JkZXJYV2lkdGgiLCJzY3JvbGxiYXJZIiwicmFpbEJvcmRlcllXaWR0aCIsInVwZGF0ZUNzcyIsInRodW1iU2l6ZSIsIm1pblNjcm9sbGJhckxlbmd0aCIsIm1heFNjcm9sbGJhckxlbmd0aCIsImJpbmRNb3VzZVNjcm9sbEhhbmRsZXIiLCJwYWdlWSIsInN0YXJ0aW5nU2Nyb2xsVG9wIiwic3RhcnRpbmdNb3VzZVBhZ2VZIiwic2Nyb2xsQnkiLCJtb3VzZU1vdmVIYW5kbGVyIiwic3RvcFByb3BhZ2F0aW9uIiwibW91c2VVcEhhbmRsZXIiLCJvd25lckRvY3VtZW50IiwiY2xpY2stcmFpbCIsImRpcmVjdGlvbiIsInBhZ2VZT2Zmc2V0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFnZVgiLCJwYWdlWE9mZnNldCIsImRyYWctdGh1bWIiLCJrZXlib2FyZCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImFjdGl2ZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJzaGFkb3dSb290IiwiaXNFZGl0YWJsZSIsImRlbHRhWSIsIndoaWNoIiwid2hlZWxQcm9wYWdhdGlvbiIsInNob3VsZFByZXZlbnREZWZhdWx0Iiwid2hlZWwiLCJtb3VzZXdoZWVsSGFuZGxlciIsIndoZWVsRGVsdGFYIiwid2hlZWxEZWx0YVkiLCJkZWx0YU1vZGUiLCJ3aGVlbERlbHRhIiwiZ2V0RGVsdGFGcm9tRXZlbnQiLCJxdWVyeVNlbGVjdG9yIiwiY3Vyc29yIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJtYXhTY3JvbGxUb3AiLCJtYXhTY3JvbGxMZWZ0Iiwic2hvdWxkQmVDb25zdW1lZEJ5Q2hpbGQiLCJzaG91bGRQcmV2ZW50IiwidXNlQm90aFdoZWVsQXhlcyIsIndoZWVsU3BlZWQiLCJpc1RvcCIsImlzQm90dG9tIiwiaXNMZWZ0IiwiaXNSaWdodCIsImFicyIsIm9ud2hlZWwiLCJvbm1vdXNld2hlZWwiLCJ0b3VjaCIsInN0YXJ0T2Zmc2V0Iiwic3RhcnRUaW1lIiwic3BlZWQiLCJlYXNpbmdMb29wIiwidG91Y2hTdGFydCIsInRvdWNoTW92ZSIsInRvdWNoRW5kIiwiUG9pbnRlckV2ZW50IiwiTVNQb2ludGVyRXZlbnQiLCJhcHBseVRvdWNoTW92ZSIsImRpZmZlcmVuY2VYIiwiZGlmZmVyZW5jZVkiLCJnZXRUb3VjaCIsInRhcmdldFRvdWNoZXMiLCJzaG91bGRIYW5kbGUiLCJwb2ludGVyVHlwZSIsImJ1dHRvbnMiLCJNU1BPSU5URVJfVFlQRV9NT1VTRSIsIkRhdGUiLCJnZXRUaW1lIiwiY2xlYXJJbnRlcnZhbCIsImN1cnJlbnRPZmZzZXQiLCJjdXJyZW50VGltZSIsInRpbWVHYXAiLCJtYWduaXR1ZGVYIiwibWFnbml0dWRlWSIsInNjcm9sbFkiLCJzd2lwZUVhc2luZyIsInNldEludGVydmFsIiwiaXNJbml0aWFsaXplZCIsIlBlcmZlY3RTY3JvbGxiYXIiLCJ1c2VyU2V0dGluZ3MiLCJub2RlTmFtZSIsImJsdXIiLCJpc05lZ2F0aXZlU2Nyb2xsIiwib3JpZ2luYWxTY3JvbGxMZWZ0Iiwic2V0QXR0cmlidXRlIiwicmFpbFhTdHlsZSIsImlzTmFOIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImRpc3BsYXkiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJyYWlsWVN0eWxlIiwic3R5bGVzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwiaGFuZGxlck5hbWUiLCJsYXN0U2Nyb2xsVG9wIiwibGFzdFNjcm9sbExlZnQiLCJvblNjcm9sbCIsInJlbW92ZVBzQ2xhc3NlcyIsInNwbGl0IiwiQ2Fyb3VzZWwiLCJfQ2Fyb3VzZWwyIiwiX1RodW1iczIiLCJfcmVhY3REb20yIiwiY3VzdG9tUHJvcFR5cGVzIiwibmV3T2JqIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJub29wIiwiaW5pdGlhbGl6ZWQiLCJpc01vdXNlRW50ZXJlZCIsImF1dG9QbGF5Iiwic2V0dXBDYXJvdXNlbCIsInNldHVwQXV0b1BsYXkiLCJkZXN0cm95QXV0b1BsYXkiLCJwcmV2U3RhdGUiLCJyZXNldFBvc2l0aW9uIiwiZGVzdHJveUNhcm91c2VsIiwiYmluZEV2ZW50cyIsImluaXRpYWxJbWFnZSIsImdldEluaXRpYWxJbWFnZSIsInVuYmluZEV2ZW50cyIsImNhcm91c2VsV3JhcHBlciIsImNhcm91c2VsV3JhcHBlclJlZiIsInN0b3BPbkhvdmVyIiwic3RhcnRPbkxlYXZlIiwiY2xlYXJBdXRvUGxheSIsInVzZUtleWJvYXJkQXJyb3dzIiwibmF2aWdhdGVXaXRoS2V5Ym9hcmQiLCJpbmZpbml0ZUxvb3AiLCJjaGlsZHJlbkxlbmd0aCIsImNlbnRlck1vZGUiLCJjZW50ZXJTbGlkZVBlcmNlbnRhZ2UiLCJpc0Nsb25lIiwic2xpZGVQcm9wcyIsInNldEl0ZW1zUmVmIiwibWluV2lkdGgiLCJfdGhpczQiLCJzaG93SW5kaWNhdG9ycyIsImNoYW5nZUl0ZW0iLCJzaG93U3RhdHVzIiwic3RhdHVzRm9ybWF0dGVyIiwic2hvd1RodW1icyIsImhhbmRsZUNsaWNrVGh1bWIiLCJpc0hvcml6b250YWwiLCJjYW5TaG93QXJyb3dzIiwiZ2V0UG9zaXRpb24iLCJpdGVtc0Nsb25lIiwiZmlyc3RDbG9uZSIsInNoaWZ0IiwibGFzdENsb25lIiwic3dpcGVyUHJvcHMiLCJ0b2xlcmFuY2UiLCJzd2lwZVNjcm9sbFRvbGVyYW5jZSIsImNvbnRhaW5lclN0eWxlcyIsIm9uU3dpcGVCYWNrd2FyZHMiLCJvblN3aXBlRm9yd2FyZCIsImR5bmFtaWNIZWlnaHQiLCJpdGVtSGVpZ2h0IiwiZ2V0VmFyaWFibGVJbWFnZUhlaWdodCIsIm9uU3dpcGVVcCIsInZlcnRpY2FsU3dpcGUiLCJvblN3aXBlRG93biIsInNldENhcm91c2VsV3JhcHBlclJlZiIsIm9uQ2xpY2tQcmV2Iiwic3dpcGVhYmxlIiwic2V0TGlzdFJlZiIsImFsbG93TW91c2VFdmVudHMiLCJlbXVsYXRlVG91Y2giLCJvbkNsaWNrTmV4dCIsInJlbmRlckNvbnRyb2xzIiwicmVuZGVyU3RhdHVzIiwicmVuZGVyVGh1bWJzIiwib25DbGlja0l0ZW0iLCJvbkNsaWNrVGh1bWIiLCJvbkNoYW5nZSIsInVuaXQiLCJpbnRlcnZhbCIsIl90aGlzNSIsImxpc3RSZWYiLCJpdGVtc1JlZiIsInRpbWVyIiwiaW5jcmVtZW50IiwicmVzZXRBdXRvUGxheSIsInByZXZLZXkiLCJkZWNyZW1lbnQiLCJjYW5jZWxDbGljayIsImhhbmRsZU9uQ2hhbmdlIiwic2VsZWN0SXRlbSIsImZpbmFsQm91bmRyeSIsImF4aXNEZWx0YSIsImhhbmRsZWREZWx0YSIsInNldFBvc2l0aW9uIiwiaGFzTW92ZWQiLCJmb3JjZVJlZmxvdyIsImxpc3QiLCJmaW5kRE9NTm9kZSIsIm9mZnNldExlZnQiLCJmcm9tU3dpcGUiLCJuZWVkQ2xvbmVkU2xpZGUiLCJvbGRQb3NpdGlvbiIsIm5ld0luZGV4IiwiY2IiLCJjb21wbGV0ZSIsIm9uSW1hZ2VMb2FkIiwic2V0SGFzU3VwcG9ydFRvQ2FwdHVyZU9wdGlvbiIsInN1cHBvcnRzQ2FwdHVyZU9wdGlvbiIsImhhc1N1cHBvcnQiLCJnZXRTYWZlRXZlbnRIYW5kbGVyT3B0cyIsImNhcHR1cmUiLCJfZXZlbnQkdG91Y2hlcyQiLCJ0b3VjaGVzIiwic2NyZWVuWCIsInNjcmVlblkiLCJSZWFjdFN3aXBlIiwiX2hhbmRsZVN3aXBlU3RhcnQiLCJfaGFuZGxlU3dpcGVNb3ZlIiwiX2hhbmRsZVN3aXBlRW5kIiwiX29uTW91c2VEb3duIiwiX29uTW91c2VNb3ZlIiwiX29uTW91c2VVcCIsInN3aXBlciIsInBhc3NpdmUiLCJtb3VzZURvd24iLCJfZ2V0UG9zaXRpb24iLCJtb3ZlU3RhcnQiLCJfZ2V0UG9zaXRpb24yIiwibW92aW5nIiwibW92ZVBvc2l0aW9uIiwib25Nb3VzZURvd24iLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoRW5kIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwiX2ludGVyb3BEZWZhdWx0IiwiZXgiLCJfYSIsInRzbGliXzEiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsImNsb25lRGVlcCIsInRvUGF0aCIsImlzRXF1YWwiLCJkZWVwbWVyZ2UiLCJGb3JtaWtQcm92aWRlciIsIkZvcm1pa0NvbnN1bWVyIiwiY29ubmVjdCIsImZvcm1payIsIl9fYXNzaWduIiwiV3JhcHBlZENvbXBvbmVudCIsImdldEluIiwiZGVmIiwic2V0SW4iLCJyZXMiLCJyZXNWYWwiLCJwYXRoQXJyYXkiLCJjdXJyZW50UGF0aCIsImN1cnJlbnRPYmoiLCJuZXh0UGF0aCIsImlzSW50ZWdlciIsIk51bWJlciIsInNldE5lc3RlZE9iamVjdFZhbHVlcyIsInZpc2l0ZWQiLCJyZXNwb25zZSIsIldlYWtNYXAiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJTdHJpbmciLCJpc1N0cmluZyIsImlzRW1wdHlDaGlsZHJlbiIsImlzUHJvbWlzZSIsIkZvcm1payIsImhjQ2FjaGUiLCJoYkNhY2hlIiwicmVnaXN0ZXJGaWVsZCIsInVucmVnaXN0ZXJGaWVsZCIsInNldEVycm9ycyIsImVycm9ycyIsInNldFRvdWNoZWQiLCJ0b3VjaGVkIiwidmFsaWRhdGVPbkJsdXIiLCJydW5WYWxpZGF0aW9ucyIsInZhbHVlcyIsInNldFZhbHVlcyIsInZhbGlkYXRlT25DaGFuZ2UiLCJzZXRTdGF0dXMiLCJzdGF0dXMiLCJzZXRFcnJvciIsInNldFN1Ym1pdHRpbmciLCJpc1N1Ym1pdHRpbmciLCJkaWRNb3VudCIsInZhbGlkYXRlRmllbGQiLCJmaWVsZCIsImlzVmFsaWRhdGluZyIsInJ1blNpbmdsZUZpZWxkTGV2ZWxWYWxpZGF0aW9uIiwidmFsaWRhdGUiLCJydW5WYWxpZGF0aW9uU2NoZW1hIiwidmFsaWRhdGlvblNjaGVtYSIsInNjaGVtYSIsInZhbGlkYXRlWXVwU2NoZW1hIiwiZXJyIiwieXVwVG9Gb3JtRXJyb3JzIiwiYWxsIiwicnVuRmllbGRMZXZlbFZhbGlkYXRpb25zIiwicnVuVmFsaWRhdGVIYW5kbGVyIiwiZmllbGRFcnJvcnMiLCJzY2hlbWFFcnJvcnMiLCJoYW5kbGVyRXJyb3JzIiwiY29tYmluZWRFcnJvcnMiLCJhcnJheU1lcmdlIiwiaGFuZGxlQ2hhbmdlIiwiZXZlbnRPclBhdGgiLCJleGVjdXRlQ2hhbmdlIiwiZXZlbnRPclRleHRWYWx1ZSIsIm1heWJlUGF0aCIsInBhcnNlZCIsInBlcnNpc3QiLCJuYW1lXzEiLCJjaGVja2VkIiwib3V0ZXJIVE1MIiwicGFyc2VGbG9hdCIsInNldEZpZWxkVmFsdWUiLCJzaG91bGRWYWxpZGF0ZSIsImhhbmRsZVN1Ym1pdCIsInN1Ym1pdEZvcm0iLCJzdWJtaXRDb3VudCIsImV4ZWN1dGVTdWJtaXQiLCJvblN1Ym1pdCIsImdldEZvcm1pa0FjdGlvbnMiLCJoYW5kbGVCbHVyIiwiZXZlbnRPclN0cmluZyIsImV4ZWN1dGVCbHVyIiwic2V0RmllbGRUb3VjaGVkIiwic2V0RmllbGRFcnJvciIsInJlc2V0Rm9ybSIsIm5leHRWYWx1ZXMiLCJpbml0aWFsVmFsdWVzIiwiaGFuZGxlUmVzZXQiLCJvblJlc2V0IiwibWF5YmVQcm9taXNlZE9uUmVzZXQiLCJzZXRGb3JtaWtTdGF0ZSIsInZhbGlkYXRlRm9ybSIsImdldEZvcm1pa0NvbXB1dGVkUHJvcHMiLCJpc0luaXRpYWxWYWxpZCIsImRpcnR5IiwiaXNWYWxpZCIsImdldEZvcm1pa0JhZyIsImdldEZvcm1pa0NvbnRleHQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJlbmFibGVSZWluaXRpYWxpemUiLCJmaWVsZEtleXNXaXRoVmFsaWRhdGlvbiIsImZpZWxkVmFsaWRhdGlvbnMiLCJmaWVsZEVycm9yc0xpc3QiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyciIsIm1heWJlUHJvbWlzZWRFcnJvcnMiLCJjdHgiLCJ5dXBFcnJvciIsImlubmVyIiwic3luYyIsInZhbGlkYXRlRGF0YSIsImFib3J0RWFybHkiLCJkZXN0aW5hdGlvbiIsInNob3VsZENsb25lIiwiY2xvbmUiLCJpc01lcmdlYWJsZU9iamVjdCIsIkZpZWxkIiwiRmllbGRJbm5lciIsIl9iIiwiX19yZXN0IiwicmVzdE9mRm9ybWlrIiwib25CbHVyIiwiYmFnIiwiZm9ybSIsIkZvcm0iLCJtb3ZlIiwiYXJyYXkiLCJjb3B5Iiwic3dhcCIsImluZGV4QSIsImluZGV4QiIsImluc2VydCIsIkZpZWxkQXJyYXkiLCJGaWVsZEFycmF5SW5uZXIiLCJ1cGRhdGVBcnJheUZpZWxkIiwiYWx0ZXJUb3VjaGVkIiwiYWx0ZXJFcnJvcnMiLCJoYW5kbGVQdXNoIiwiaGFuZGxlU3dhcCIsImhhbmRsZU1vdmUiLCJoYW5kbGVJbnNlcnQiLCJoYW5kbGVSZXBsYWNlIiwidW5zaGlmdCIsImhhbmRsZVVuc2hpZnQiLCJoYW5kbGVSZW1vdmUiLCJ0bXAiLCJhcnJheUhlbHBlcnMiLCJGYXN0RmllbGQiLCJGYXN0RmllbGRJbm5lciIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInNob3VsZFVwZGF0ZSIsIkVycm9yTWVzc2FnZSIsIkVycm9yTWVzc2FnZUltcGwiLCJ3aXRoRm9ybWlrIiwibWFwUHJvcHNUb1ZhbHVlcyIsInZhbmlsbGFQcm9wcyIsImNvbmZpZyIsImNvbXBvbmVudERpc3BsYXlOYW1lIiwiYWN0aW9ucyIsInJlbmRlckZvcm1Db21wb25lbnQiLCJmb3JtaWtQcm9wcyIsImdldEFjdGl2ZUVsZW1lbnQiLCJkb2MiLCJib2R5IiwiX19kZWNvcmF0ZSIsIl9fcGFyYW0iLCJfX21ldGFkYXRhIiwiX19hd2FpdGVyIiwiX19nZW5lcmF0b3IiLCJfX2V4cG9ydFN0YXIiLCJfX3ZhbHVlcyIsIl9fcmVhZCIsIl9fc3ByZWFkIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJfX2FzeW5jRGVsZWdhdG9yIiwiX19hc3luY1ZhbHVlcyIsIl9fbWFrZVRlbXBsYXRlT2JqZWN0IiwiZmFjdG9yeSIsInJvb3QiLCJnbG9iYWwiLCJjcmVhdGVFeHBvcnRlciIsInByZXZpb3VzIiwiZXhwb3J0ZXIiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJkZWNvcmF0b3JzIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJtZXRhZGF0YSIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiZnVsZmlsbGVkIiwic3RlcCIsInJlamVjdGVkIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwidGhyb3ciLCJyZXR1cm4iLCJvcCIsImFyIiwiYXN5bmNJdGVyYXRvciIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJjb29rZWQiLCJyYXciLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2JqZWN0UHJvdG90eXBlIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiX2ltcGxlbWVudGF0aW9uMiIsIl9ndWQyIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiZGVmYXVsdFZhbHVlIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsImVtaXR0ZXIiLCJvZmYiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm9sZFZhbHVlIiwib2JqZWN0SXMiLCJfQ29tcG9uZW50MiIsIl90ZW1wMiIsIl9sZW4yIiwiX2tleTIiLCJnZXRWYWx1ZSIsIm9uVXBkYXRlIiwib2JzZXJ2ZWRCaXRzIiwib25seUNoaWxkIiwiTEFSR0VfQVJSQVlfU0laRSIsIkhBU0hfVU5ERUZJTkVEIiwiTUFYX1NBRkVfSU5URUdFUiIsImFyZ3NUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJvYmplY3RUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJzeW1ib2xUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVGbGFncyIsInJlSXNIb3N0Q3RvciIsInJlSXNVaW50IiwiY2xvbmVhYmxlVGFncyIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsIkZ1bmN0aW9uIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiYWRkTWFwRW50cnkiLCJwYWlyIiwiYWRkU2V0RW50cnkiLCJhcnJheVJlZHVjZSIsIml0ZXJhdGVlIiwiYWNjdW11bGF0b3IiLCJpbml0QWNjdW0iLCJpc0hvc3RPYmplY3QiLCJtYXBUb0FycmF5Iiwic2l6ZSIsIm92ZXJBcmciLCJzZXRUb0FycmF5IiwiYXJyYXlQcm90byIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsIm1hc2tTcmNLZXkiLCJ1aWQiLCJleGVjIiwiSUVfUFJPVE8iLCJmdW5jVG9TdHJpbmciLCJvYmplY3RUb1N0cmluZyIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiZ2V0UHJvdG90eXBlIiwib2JqZWN0Q3JlYXRlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJuYXRpdmVHZXRTeW1ib2xzIiwibmF0aXZlSXNCdWZmZXIiLCJpc0J1ZmZlciIsIm5hdGl2ZUtleXMiLCJEYXRhVmlldyIsImdldE5hdGl2ZSIsIk1hcCIsIlNldCIsIm5hdGl2ZUNyZWF0ZSIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsIkhhc2giLCJjbGVhciIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU3RhY2siLCJfX2RhdGFfXyIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc09iamVjdExpa2UiLCJpc0FycmF5TGlrZSIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNBcmd1bWVudHMiLCJiYXNlVGltZXMiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiZXEiLCJhc3NvY0luZGV4T2YiLCJiYXNlQ2xvbmUiLCJpc0RlZXAiLCJpc0Z1bGwiLCJjdXN0b21pemVyIiwic3RhY2siLCJpc0FyciIsImlucHV0IiwiaW5pdENsb25lQXJyYXkiLCJjb3B5QXJyYXkiLCJ0YWciLCJnZXRUYWciLCJpc0Z1bmMiLCJidWZmZXIiLCJjbG9uZUJ1ZmZlciIsImlzUHJvdG90eXBlIiwicHJvdG8iLCJiYXNlQ3JlYXRlIiwiaW5pdENsb25lT2JqZWN0IiwiY29weU9iamVjdCIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsImJhc2VBc3NpZ24iLCJjbG9uZUZ1bmMiLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwidHlwZWRBcnJheSIsImNsb25lVHlwZWRBcnJheSIsImNsb25lTWFwIiwicmVnZXhwIiwibGFzdEluZGV4IiwiY2xvbmVSZWdFeHAiLCJjbG9uZVNldCIsInN5bWJvbCIsImNsb25lU3ltYm9sIiwiaW5pdENsb25lQnlUYWciLCJzdGFja2VkIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsIm9mZnNldCIsImFycmF5UHVzaCIsImJhc2VHZXRBbGxLZXlzIiwiZ2V0QWxsS2V5cyIsImFycmF5RWFjaCIsInN1YlZhbHVlIiwiYmFzZUlzTmF0aXZlIiwiaXNNYXNrZWQiLCJhcnJheUJ1ZmZlciIsImdldE1hcERhdGEiLCJkYXRhIiwiaXNLZXlhYmxlIiwiaGFzIiwiY2FjaGUiLCJwYWlycyIsIm90aGVyIiwiQXJyYXlCdWZmZXIiLCJjdG9yU3RyaW5nIiwiaXNMZW5ndGgiLCJiYXNlS2V5cyIsIkZVTkNfRVJST1JfVEVYVCIsIklORklOSVRZIiwicmVMZWFkaW5nRG90IiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN5bWJvbFRvU3RyaW5nIiwic3RyaW5nVG9QYXRoIiwibWVtb2l6ZSIsImlzU3ltYm9sIiwiYmFzZVRvU3RyaW5nIiwicXVvdGUiLCJ0b0tleSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsImFycmF5TWFwIiwia2V5TGlzdCIsImhhc1Byb3AiLCJlcXVhbCIsImFyckEiLCJhcnJCIiwiZGF0ZUEiLCJkYXRlQiIsInJlZ2V4cEEiLCJyZWdleHBCIiwiX3N0b3JlIiwiaXNOb25OdWxsT2JqZWN0Iiwic3RyaW5nVmFsdWUiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJpc1JlYWN0RWxlbWVudCIsImlzU3BlY2lhbCIsImNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIiwiZW1wdHlUYXJnZXQiLCJkZWZhdWx0QXJyYXlNZXJnZSIsInNvdXJjZUlzQXJyYXkiLCJ0YXJnZXRJc0FycmF5Iiwic291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCIsIm1lcmdlT2JqZWN0IiwibGFzdENhbGxBdCIsImRlZmVycmVkIiwicGVuZGluZ0FyZ3MiLCJjdXJyZW50V2FpdCIsImdldFdhaXQiLCJpc0NvbGQiLCJsZWFkaW5nIiwiYWNjdW11bGF0ZSIsImRlZmVyIiwidGhpc0RlZmVycmVkIiwiX3JldCIsImFyZ3NJbmRleCIsInJlc3VsdHMiLCJVaV9VaSIsIlVpIiwic2hvd0Vycm9ycyIsIm1lc3NhZ2VzIiwicmVhY3RfdG9hc3RpZnlfbGliZnJvbV9kbGxfcmVmZXJlbmNlX3ZlbmRvciIsInNob3dJbmZvIiwiaW5mbyIsIlJlc3VsdCIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImlzTm9kZSIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIkxvZ2luU3RvcmVfTG9naW5TdG9yZSIsIkNsaWVudEFwcF9HbG9iYWxzIiwiR2xvYmFscyIsInJlc2V0IiwiZ2FtZVJlYWR5IiwiaW5pdCIsInB1YmxpYyIsInByaXZhdGUiLCJkaXN0X2Nqc2Zyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3IiLCJ1c2VEb3RTZXBhcmF0b3JJblBhdGgiLCJzZXRHYW1lUmVhZHkiLCJpc0dhbWVSZWFkeSIsInRocm93SWZOb3RJbml0aWFsaXplZCIsImdldERhdGEiLCJzZXREYXRhIiwib2xkRGF0YSIsInNlcnZpY2VVc2VyIiwiU2VydmljZUJhc2VfU2VydmljZUJhc2UiLCJTZXJ2aWNlQmFzZSIsInJlcXVlc3RKc29uIiwib3B0cyIsImF4aW9zUmVzdWx0IiwidXJsIiwiY2pzZnJvbV9kbGxfcmVmZXJlbmNlX3ZlbmRvciIsInByb2Nlc3NRdWVyeSIsImpzb25fdG9fdXJsZnJvbV9kbGxfcmVmZXJlbmNlX3ZlbmRvcl9kZWZhdWx0IiwiYXhpb3NSZXF1ZXN0Q29uZmlnIiwiaGVhZGVycyIsIkNvb2tpZSIsImNvb2tpZSIsIm1ldGhvZCIsImF4aW9zZnJvbV9kbGxfcmVmZXJlbmNlX3ZlbmRvcl9kZWZhdWx0IiwicG9zdCIsInB1dCIsInBhdGNoIiwiZGVsZXRlIiwibW9kZWxzX1Jlc3VsdCIsImVycm9yXzEiLCJoYXNFcnJvcnMiLCJzZW5kRm9ybURhdGEiLCJheGlvc09wdHMiLCJDb250ZW50LVR5cGUiLCJlcnJvcl8yIiwiQWNjb3VudFNlcnZpY2UiLCJsb2dpbiIsImxvZ2luTW9kZWwiLCJsb2dvdXQiLCJUb3BNZW51X1RvcE1lbnUiLCJUb3BNZW51IiwibG9nb3V0QWN0aW9uIiwiVG9wTWVudV9leHRlbmRzIiwib25DbGlja1NpZ25PdXQiLCJzZXJ2aWNlc19BY2NvdW50U2VydmljZSIsInJlbG9hZCIsInJlYWN0ZnJvbV9kbGxfcmVmZXJlbmNlX3ZlbmRvciIsInJlYWN0X3JvdXRlcl9kb20iLCJkYXRhLXRvZ2dsZSIsImRhdGEtdGFyZ2V0IiwiYXJpYS1jb250cm9scyIsImFyaWEtZXhwYW5kZWQiLCJhcmlhLWxhYmVsIiwiZm9udFNpemUiLCJiaW5kX2RlY29yYXRvcl9kZWZhdWx0Iiwic2hhcmVkX1RvcE1lbnUiLCJyZWFjdF9yb3V0ZXJmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yIiwiRm9vdGVyIiwiRm9vdGVyX2V4dGVuZHMiLCJBdXRob3JpemVkTGF5b3V0IiwiQXV0aG9yaXplZExheW91dF9leHRlbmRzIiwic2hhcmVkX0Zvb3RlciIsIlVuaXR5R2FtZV9Vbml0eUdhbWUiLCJVbml0eUdhbWUiLCJuZXh0TG9jYXRpb24iLCJKR1dHYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIlVuaXR5R2FtZV9leHRlbmRzIiwiZ2V0RWxlbWVudEJ5SWQiLCJsb2ciLCJwYWdlIiwib3BlbiIsInJlYWN0X2RvbWZyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3JfZGVmYXVsdCIsInNvdXJjZV9kZWZhdWx0Iiwic2hhcmVkX1VuaXR5R2FtZSIsIkd1ZXN0TGF5b3V0IiwiR3Vlc3RMYXlvdXRfZXh0ZW5kcyIsImxpYl9kZWZhdWx0Iiwic2hhcmVkX0FwcENvbXBvbmVudCIsIkFwcENvbXBvbmVudCIsInJlbmRlcktleSIsIkFwcENvbXBvbmVudF9leHRlbmRzIiwiQXBwQ29tcG9uZW50X2RlY29yYXRlIiwiTG9hZGVyIiwiTG9hZGVyX2V4dGVuZHMiLCJjc3MiLCJzaG93IiwiTG9naW5TdG9yZSIsIkFjdGlvbnMiLCJhY3Rpb25DcmVhdG9ycyIsImRpc3BhdGNoIiwiZ2V0U3RhdGUiLCJMb2dpblN0b3JlX2F3YWl0ZXIiLCJJbml0IiwibG9naW5SZXF1ZXN0IiwibW9kZWwiLCJSZXF1ZXN0IiwiRmFpbHVyZSIsIlN1Y2Nlc3MiLCJwYXlsb2FkIiwiaW5pdGlhbFN0YXRlIiwiaW5kaWNhdG9ycyIsIm9wZXJhdGlvbkxvYWRpbmciLCJsb2dpblN1Y2Nlc3MiLCJyZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiaW5jb21pbmdBY3Rpb24iLCJjbG9uZUluZGljYXRvcnMiLCJMb2dpblN0b3JlX2Fzc2lnbiIsIlBlcnNvblN0b3JlX1BlcnNvblN0b3JlIiwiRm9ybV9Gb3JtIiwiRm9ybV9leHRlbmRzIiwidmFsaWRhdG9yIiwiZW1wdHlGb3JtIiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0VHlwZSIsImdldEF0dHJpYnV0ZSIsImVsRm9ybSIsInNlcmlhbGl6ZUZvcm0iLCJudmFsX3RpcHB5X2Rpc3RfY2pzZnJvbV9kbGxfcmVmZXJlbmNlX3ZlbmRvciIsIkZvcm1fYXNzaWduIiwiRm9ybV9kZWNvcmF0ZSIsIkxvZ2luUGFnZV9Mb2dpblBhZ2UiLCJMb2dpblBhZ2UiLCJMb2dpblBhZ2VfZXh0ZW5kcyIsImVsTG9hZGVyIiwib25DbGlja1N1Ym1pdEJ0biIsIkhlbG1ldGZyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3IiLCJzaGFyZWRfTG9hZGVyIiwiaHRtbEZvciIsImRhdGEtdmFsdWUtdHlwZSIsImRhdGEtdmFsLXJlcXVpcmVkIiwiZGF0YS1tc2ctcmVxdWlyZWQiLCJMb2dpblBhZ2VfZGVjb3JhdGUiLCJsaWJmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yIiwicGFnZXNfTG9naW5QYWdlIiwiQXBwUm91dGUiLCJMYXlvdXQiLCJsYXlvdXQiLCJQYXRoIiwiaXNBZG1pblBhdGgiLCJpc0xvZ2luUGF0aCIsImlzQXV0aGVudGljYXRlZCIsIkFwcFJvdXRlX2Fzc2lnbiIsIkhvbWVQYWdlIiwiSG9tZVBhZ2VfZXh0ZW5kcyIsIlBvcnRmb2xpb1BhZ2VfUG9ydGZvbGlvUGFnZSIsIlBvcnRmb2xpb1BhZ2UiLCJQb3J0Zm9saW9QYWdlX2V4dGVuZHMiLCJraXR0ZW5mdWxsX2RlZmF1bHQiLCJraXR0ZW5mYWNlX2RlZmF1bHQiLCJnb29iYV9kZWZhdWx0IiwibmljY29sb19kZWZhdWx0Iiwic3dhdHRyYWluZXJfZGVmYXVsdCIsImJveV9kZWZhdWx0IiwiZnJhbWVCb3JkZXIiLCJhbGxvdyIsImFsbG93RnVsbFNjcmVlbiIsInBhZ2VzX1BvcnRmb2xpb1BhZ2UiLCJUcmF2ZWxpbmdQYWdlIiwiVHJhdmVsaW5nUGFnZV9leHRlbmRzIiwiU3VtbWVyMjAxOFBhZ2UiLCJTdW1tZXIyMDE4UGFnZV9leHRlbmRzIiwiUmVhZGluZ1BhZ2UiLCJSZWFkaW5nUGFnZV9leHRlbmRzIiwic3RhcndhcnNib29rc19kZWZhdWx0IiwiYWx0IiwiUGVyc29uU2VydmljZSIsIlBlcnNvblNlcnZpY2VfZXh0ZW5kcyIsInRlcm0iLCJQZXJzb25TdG9yZSIsInNlYXJjaFJlcXVlc3QiLCJQZXJzb25TdG9yZV9hd2FpdGVyIiwidHJhbnNmb3JtVXJsIiwiU2VhcmNoUmVxdWVzdCIsInNlcnZpY2VzX1BlcnNvblNlcnZpY2UiLCJTZWFyY2hSZXNwb25zZSIsImFkZFJlcXVlc3QiLCJBZGRSZXF1ZXN0IiwiQWRkUmVzcG9uc2UiLCJ1cGRhdGVSZXF1ZXN0IiwiVXBkYXRlUmVxdWVzdCIsIlVwZGF0ZVJlc3BvbnNlIiwiZGVsZXRlUmVxdWVzdCIsIkRlbGV0ZVJlcXVlc3QiLCJEZWxldGVSZXNwb25zZSIsInBlb3BsZSIsIlBlcnNvblN0b3JlX2Fzc2lnbiIsIml0ZW1Ub1VwZGF0ZSIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiUGFnaW5nQmFyX1BhZ2luZ0JhciIsIlBhZ2luZ0JhciIsIlBhZ2luZ0Jhcl9leHRlbmRzIiwic2V0Rmlyc3RQYWdlIiwiZWxGaXJzdFBhZ2VCdG4iLCJjbGljayIsInNldExhc3RQYWdlIiwiZWxMYXN0UGFnZUJ0biIsImRpc3Rmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yX2RlZmF1bHQiLCJ0b3RhbFJlc3VsdHMiLCJsaW1pdCIsImxpbWl0UGVyUGFnZSIsImN1cnJlbnRQYWdlIiwicGFnZXMiLCJoYXNOZXh0UGFnZSIsImhhc1ByZXZpb3VzUGFnZSIsInByZXZpb3VzUGFnZSIsIm5leHRQYWdlIiwidG90YWxQYWdlcyIsImdldFBhZ2VJdGVtUHJvcHMiLCJQYWdpbmdCYXJfYXNzaWduIiwicGFnZVZhbHVlIiwib25QYWdlQ2hhbmdlIiwib25DaGFuZ2VQYWdlIiwiUGFnaW5nQmFyX2RlY29yYXRlIiwicGVyc29uX1BlcnNvbkVkaXRvciIsIlBlcnNvbkVkaXRvciIsIlBlcnNvbkVkaXRvcl9leHRlbmRzIiwiZGlzdCIsIlBlcnNvbkVkaXRvcl9kZWNvcmF0ZSIsIk1vZGFsQ29tcG9uZW50X01vZGFsQ29tcG9uZW50IiwiTW9kYWxDb21wb25lbnQiLCJNb2RhbENvbXBvbmVudF9leHRlbmRzIiwibW9kYWxQbHVnaW4iLCJoaWRlIiwiYm9vdHN0cmFwM19uYXRpdmVmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yIiwiZWxNb2RhbCIsIm9uU2hvdyIsIm9uSGlkZSIsImRhdGEtZGlzbWlzcyIsImFyaWEtaGlkZGVuIiwidGl0bGUiLCJNb2RhbENvbXBvbmVudF9kZWNvcmF0ZSIsIkFkbWluUGFnZV9BZG1pblBhZ2UiLCJBZG1pblBhZ2UiLCJzZWFyY2hUZXJtIiwicGFnZU51bSIsInJvd09mZnNldCIsIm1vZGVsRm9yRWRpdCIsImRlYm91bmNlZFNlYXJjaCIsImF3ZXNvbWVfZGVib3VuY2VfcHJvbWlzZV9kZWZhdWx0IiwiQWRtaW5QYWdlX2V4dGVuZHMiLCJlbE1vZGFsQWRkIiwiZWxNb2RhbEVkaXQiLCJlbE1vZGFsRGVsZXRlIiwiY2VpbCIsIm9uQ2xpY2tTaG93QWRkTW9kYWwiLCJvbkNsaWNrU2hvd0VkaXRNb2RhbCIsIm9uQ2xpY2tTaG93RGVsZXRlTW9kYWwiLCJvbkNsaWNrUGVyc29uRWRpdG9yQWRkX19zYXZlQnRuIiwicGVyc29uRWRpdG9yQWRkIiwicGFnaW5nQmFyIiwib25DbGlja1BlcnNvbkVkaXRvckVkaXRfX3NhdmVCdG4iLCJwZXJzb25FZGl0b3JFZGl0Iiwib25DbGlja1BlcnNvbkVkaXRvckRlbGV0ZV9fc2F2ZUJ0biIsInJlbmRlclJvdyIsInBlcnNvbiIsInJlbmRlclJvd3MiLCJvbkNoYW5nZVNlYXJjaElucHV0IiwiY3VycmVudFRhcmdldCIsInBsYWNlaG9sZGVyIiwiQWRtaW5QYWdlX2RlY29yYXRlIiwiQWRtaW5QYWdlX2NvbXBvbmVudCIsInBhZ2VzX0FkbWluUGFnZSIsInJvdXRlcyIsImxheW91dHNfR3Vlc3RMYXlvdXQiLCJwYWdlc19Ib21lUGFnZSIsInBhZ2VzX1RyYXZlbGluZ1BhZ2UiLCJwYWdlc19TdW1tZXIyMDE4UGFnZSIsInBhZ2VzX1JlYWRpbmdQYWdlIiwibGF5b3V0c19BdXRob3JpemVkTGF5b3V0IiwicmVkdWNlcnMiLCJjb25maWd1cmVTdG9yZSIsIndpbmRvd0lmRGVmaW5lZCIsImRldlRvb2xzRXh0ZW5zaW9uIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsInJlZHV4ZnJvbV9kbGxfcmVmZXJlbmNlX3ZlbmRvciIsInJlZHV4X3RodW5rX2xpYmZyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3JfZGVmYXVsdCIsImNvbm5lY3RlZF9yZWFjdF9yb3V0ZXJfbGliZnJvbV9kbGxfcmVmZXJlbmNlX3ZlbmRvciIsImNyZWF0ZVN0b3JlV2l0aE1pZGRsZXdhcmUiLCJhbGxSZWR1Y2VycyIsImNvbmZpZ3VyZVN0b3JlX2Fzc2lnbiIsInJvdXRlclJlZHVjZXIiLCJidWlsZFJvb3RSZWR1Y2VyIiwicmVuZGVySGVsbWV0IiwiaGVsbWV0RGF0YSIsInJlbmRlclN0YXRpYyIsImhlbG1ldFN0cmluZ3MiLCJjcmVhdGVHbG9iYWxzIiwibm9kZVNlc3Npb24iLCJpbml0aWFsUmVkdXhTdGF0ZSIsImNvbXBsZXRlZFRhc2tzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImFzcG5ldF9wcmVyZW5kZXJpbmdmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yIiwicGFyYW1zIiwiYmFzZVVybCIsInVybEFmdGVyQmFzZW5hbWUiLCJzdG9yZSIsImhpc3Rvcnlmcm9tX2RsbF9yZWZlcmVuY2VfdmVuZG9yIiwicm91dGVyQ29udGV4dCIsImFwcCIsInJlbmRlckFwcCIsInNlcnZlcmZyb21fZGxsX3JlZmVyZW5jZV92ZW5kb3IiLCJyZWRpcmVjdFVybCIsImdsb2JhbHMiLCJkb21haW5UYXNrcyIsImh0bWwiXSwibWFwcGluZ3MiOiI2REFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBMERBLE9B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aEIsR0FBY00sRUFBTzFYLEtBQU02WCxFQUFNL00sV0FBWWtNLFFBTzlEVSxFQUFPVyxZQUFZcCtDLEtBQUssV0FFcEJGLEdBQ0l1K0MsS0FBTUwsSUFDTkcsUUFBU2hCLEdBQWNNLEVBQU8xWCxLQUFNNlgsRUFBTS9NLFdBQVlrTSxTQUczRGg5QyIsImZpbGUiOiJtYWluLXNlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiZGlzdC9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDExMik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg0KTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3ZlbmRvclwiKTsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25zdGFudHM7XG4oZnVuY3Rpb24gKGNvbnN0YW50cykge1xuICAgIGNvbnN0YW50cy50eXBlT2ZGdW5jdGlvbiA9ICdmdW5jdGlvbic7XG4gICAgY29uc3RhbnRzLmJvb2xUcnVlID0gdHJ1ZTtcbn0pKGNvbnN0YW50cyB8fCAoY29uc3RhbnRzID0ge30pKTtcbmZ1bmN0aW9uIGJpbmQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcikge1xuICAgIGlmICghZGVzY3JpcHRvciB8fCAodHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgIT09IGNvbnN0YW50cy50eXBlT2ZGdW5jdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9ubHkgbWV0aG9kcyBjYW4gYmUgZGVjb3JhdGVkIHdpdGggQGJpbmQuIDxcIiArIHByb3BlcnR5S2V5ICsgXCI+IGlzIG5vdCBhIG1ldGhvZCFcIik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogY29uc3RhbnRzLmJvb2xUcnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBib3VuZCA9IGRlc2NyaXB0b3IudmFsdWUuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIC8vIENyZWRpdHMgdG8gaHR0cHM6Ly9naXRodWIuY29tL2FuZHJleXBvcHAvYXV0b2JpbmQtZGVjb3JhdG9yIGZvciBtZW1vaXppbmcgdGhlIHJlc3VsdCBvZiBiaW5kIGFnYWluc3QgYSBzeW1ib2wgb24gdGhlIGluc3RhbmNlLlxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BlcnR5S2V5LCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGJvdW5kLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogY29uc3RhbnRzLmJvb2xUcnVlLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBjb25zdGFudHMuYm9vbFRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGJvdW5kO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMuYmluZCA9IGJpbmQ7XG5leHBvcnRzLmRlZmF1bHQgPSBiaW5kO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMzAxKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMud2l0aFJvdXRlciA9IGV4cG9ydHMubWF0Y2hQYXRoID0gZXhwb3J0cy5nZW5lcmF0ZVBhdGggPSBleHBvcnRzLlN3aXRjaCA9IGV4cG9ydHMuU3RhdGljUm91dGVyID0gZXhwb3J0cy5Sb3V0ZXIgPSBleHBvcnRzLlJvdXRlID0gZXhwb3J0cy5SZWRpcmVjdCA9IGV4cG9ydHMuUHJvbXB0ID0gZXhwb3J0cy5OYXZMaW5rID0gZXhwb3J0cy5NZW1vcnlSb3V0ZXIgPSBleHBvcnRzLkxpbmsgPSBleHBvcnRzLkhhc2hSb3V0ZXIgPSBleHBvcnRzLkJyb3dzZXJSb3V0ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfQnJvd3NlclJvdXRlcjIgPSByZXF1aXJlKFwiLi9Ccm93c2VyUm91dGVyXCIpO1xuXG52YXIgX0Jyb3dzZXJSb3V0ZXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQnJvd3NlclJvdXRlcjIpO1xuXG52YXIgX0hhc2hSb3V0ZXIyID0gcmVxdWlyZShcIi4vSGFzaFJvdXRlclwiKTtcblxudmFyIF9IYXNoUm91dGVyMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0hhc2hSb3V0ZXIyKTtcblxudmFyIF9MaW5rMiA9IHJlcXVpcmUoXCIuL0xpbmtcIik7XG5cbnZhciBfTGluazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaW5rMik7XG5cbnZhciBfTWVtb3J5Um91dGVyMiA9IHJlcXVpcmUoXCIuL01lbW9yeVJvdXRlclwiKTtcblxudmFyIF9NZW1vcnlSb3V0ZXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWVtb3J5Um91dGVyMik7XG5cbnZhciBfTmF2TGluazIgPSByZXF1aXJlKFwiLi9OYXZMaW5rXCIpO1xuXG52YXIgX05hdkxpbmszID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTmF2TGluazIpO1xuXG52YXIgX1Byb21wdDIgPSByZXF1aXJlKFwiLi9Qcm9tcHRcIik7XG5cbnZhciBfUHJvbXB0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Byb21wdDIpO1xuXG52YXIgX1JlZGlyZWN0MiA9IHJlcXVpcmUoXCIuL1JlZGlyZWN0XCIpO1xuXG52YXIgX1JlZGlyZWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlZGlyZWN0Mik7XG5cbnZhciBfUm91dGUyID0gcmVxdWlyZShcIi4vUm91dGVcIik7XG5cbnZhciBfUm91dGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGUyKTtcblxudmFyIF9Sb3V0ZXIyID0gcmVxdWlyZShcIi4vUm91dGVyXCIpO1xuXG52YXIgX1JvdXRlcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZXIyKTtcblxudmFyIF9TdGF0aWNSb3V0ZXIyID0gcmVxdWlyZShcIi4vU3RhdGljUm91dGVyXCIpO1xuXG52YXIgX1N0YXRpY1JvdXRlcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdGF0aWNSb3V0ZXIyKTtcblxudmFyIF9Td2l0Y2gyID0gcmVxdWlyZShcIi4vU3dpdGNoXCIpO1xuXG52YXIgX1N3aXRjaDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Td2l0Y2gyKTtcblxudmFyIF9nZW5lcmF0ZVBhdGgyID0gcmVxdWlyZShcIi4vZ2VuZXJhdGVQYXRoXCIpO1xuXG52YXIgX2dlbmVyYXRlUGF0aDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZW5lcmF0ZVBhdGgyKTtcblxudmFyIF9tYXRjaFBhdGgyID0gcmVxdWlyZShcIi4vbWF0Y2hQYXRoXCIpO1xuXG52YXIgX21hdGNoUGF0aDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXRjaFBhdGgyKTtcblxudmFyIF93aXRoUm91dGVyMiA9IHJlcXVpcmUoXCIuL3dpdGhSb3V0ZXJcIik7XG5cbnZhciBfd2l0aFJvdXRlcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aXRoUm91dGVyMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuQnJvd3NlclJvdXRlciA9IF9Ccm93c2VyUm91dGVyMy5kZWZhdWx0O1xuZXhwb3J0cy5IYXNoUm91dGVyID0gX0hhc2hSb3V0ZXIzLmRlZmF1bHQ7XG5leHBvcnRzLkxpbmsgPSBfTGluazMuZGVmYXVsdDtcbmV4cG9ydHMuTWVtb3J5Um91dGVyID0gX01lbW9yeVJvdXRlcjMuZGVmYXVsdDtcbmV4cG9ydHMuTmF2TGluayA9IF9OYXZMaW5rMy5kZWZhdWx0O1xuZXhwb3J0cy5Qcm9tcHQgPSBfUHJvbXB0My5kZWZhdWx0O1xuZXhwb3J0cy5SZWRpcmVjdCA9IF9SZWRpcmVjdDMuZGVmYXVsdDtcbmV4cG9ydHMuUm91dGUgPSBfUm91dGUzLmRlZmF1bHQ7XG5leHBvcnRzLlJvdXRlciA9IF9Sb3V0ZXIzLmRlZmF1bHQ7XG5leHBvcnRzLlN0YXRpY1JvdXRlciA9IF9TdGF0aWNSb3V0ZXIzLmRlZmF1bHQ7XG5leHBvcnRzLlN3aXRjaCA9IF9Td2l0Y2gzLmRlZmF1bHQ7XG5leHBvcnRzLmdlbmVyYXRlUGF0aCA9IF9nZW5lcmF0ZVBhdGgzLmRlZmF1bHQ7XG5leHBvcnRzLm1hdGNoUGF0aCA9IF9tYXRjaFBhdGgzLmRlZmF1bHQ7XG5leHBvcnRzLndpdGhSb3V0ZXIgPSBfd2l0aFJvdXRlcjMuZGVmYXVsdDsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg4NCk7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoNyk7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMTk1KTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgyMjkpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDE4Nyk7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMTQzKTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgYWRkTGVhZGluZ1NsYXNoID0gZXhwb3J0cy5hZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxudmFyIHN0cmlwTGVhZGluZ1NsYXNoID0gZXhwb3J0cy5zdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG52YXIgaGFzQmFzZW5hbWUgPSBleHBvcnRzLmhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZXhwb3J0cy5zdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG52YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZXhwb3J0cy5zdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxudmFyIHBhcnNlUGF0aCA9IGV4cG9ydHMucGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG52YXIgY3JlYXRlUGF0aCA9IGV4cG9ydHMuY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDI2NCk7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMTQ4KTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZXNvbHZlUGF0aG5hbWUgPSByZXF1aXJlKCdyZXNvbHZlLXBhdGhuYW1lJyk7XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc29sdmVQYXRobmFtZSk7XG5cbnZhciBfdmFsdWVFcXVhbCA9IHJlcXVpcmUoJ3ZhbHVlLWVxdWFsJyk7XG5cbnZhciBfdmFsdWVFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWx1ZUVxdWFsKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlTG9jYXRpb24gPSBleHBvcnRzLmNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9ICgwLCBfUGF0aFV0aWxzLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gKDAsIF9yZXNvbHZlUGF0aG5hbWUyLmRlZmF1bHQpKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG52YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmICgwLCBfdmFsdWVFcXVhbDIuZGVmYXVsdCkoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIF9fREVWX18gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChfX0RFVl9fKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgxMzIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDI0Mik7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jcmVhdGVQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGV4cG9ydHMuY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGV4cG9ydHMuY3JlYXRlSGFzaEhpc3RvcnkgPSBleHBvcnRzLmNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gdW5kZWZpbmVkO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjcmVhdGVMb2NhdGlvbicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnbG9jYXRpb25zQXJlRXF1YWwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbDtcbiAgfVxufSk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdwYXJzZVBhdGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGF0aFV0aWxzLnBhcnNlUGF0aDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NyZWF0ZVBhdGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGF0aFV0aWxzLmNyZWF0ZVBhdGg7XG4gIH1cbn0pO1xuXG52YXIgX2NyZWF0ZUJyb3dzZXJIaXN0b3J5MiA9IHJlcXVpcmUoJy4vY3JlYXRlQnJvd3Nlckhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVCcm93c2VySGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVCcm93c2VySGlzdG9yeTIpO1xuXG52YXIgX2NyZWF0ZUhhc2hIaXN0b3J5MiA9IHJlcXVpcmUoJy4vY3JlYXRlSGFzaEhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVIYXNoSGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVIYXNoSGlzdG9yeTIpO1xuXG52YXIgX2NyZWF0ZU1lbW9yeUhpc3RvcnkyID0gcmVxdWlyZSgnLi9jcmVhdGVNZW1vcnlIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNZW1vcnlIaXN0b3J5Mik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBfY3JlYXRlQnJvd3Nlckhpc3RvcnkzLmRlZmF1bHQ7XG5leHBvcnRzLmNyZWF0ZUhhc2hIaXN0b3J5ID0gX2NyZWF0ZUhhc2hIaXN0b3J5My5kZWZhdWx0O1xuZXhwb3J0cy5jcmVhdGVNZW1vcnlIaXN0b3J5ID0gX2NyZWF0ZU1lbW9yeUhpc3RvcnkzLmRlZmF1bHQ7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMTkpOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICB2YXIgc2V0UHJvbXB0ID0gZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKTtcblxuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb25maXJtVHJhbnNpdGlvblRvID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX1JvdXRlciA9IHJlcXVpcmUoXCJyZWFjdC1yb3V0ZXIvUm91dGVyXCIpO1xuXG52YXIgX1JvdXRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfUm91dGVyMi5kZWZhdWx0OyAvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0cyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFVuaXR5VmVyc2lvbl8xID0gcmVxdWlyZShcIi4vZW51bXMvVW5pdHlWZXJzaW9uXCIpO1xuZXhwb3J0cy5Vbml0eVZlcnNpb24gPSBVbml0eVZlcnNpb25fMS5Vbml0eVZlcnNpb247XG52YXIgVW5pdHlDb250ZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVW5pdHlDb250ZW50XCIpKTtcbmV4cG9ydHMuVW5pdHlDb250ZW50ID0gVW5pdHlDb250ZW50XzEuZGVmYXVsdDtcbnZhciBVbml0eV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvVW5pdHlcIikpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVW5pdHlfMS5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjYW5Vc2VET00gPSBleHBvcnRzLmNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbnZhciBhZGRFdmVudExpc3RlbmVyID0gZXhwb3J0cy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG52YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIGdldENvbmZpcm1hdGlvbiA9IGV4cG9ydHMuZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbnZhciBzdXBwb3J0c0hpc3RvcnkgPSBleHBvcnRzLnN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG52YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGV4cG9ydHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbnZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGV4cG9ydHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbnZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZXhwb3J0cy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZShcImludmFyaWFudFwiKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9oaXN0b3J5ID0gcmVxdWlyZShcImhpc3RvcnlcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIV90aGlzLnByb3BzLnRhcmdldCAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgaGlzdG9yeSA9IF90aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvO1xuXG5cbiAgICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIExpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVwbGFjZSA9IF9wcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgaW5uZXJSZWYgPSBfcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgW1wicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KSh0byAhPT0gdW5kZWZpbmVkLCAnWW91IG11c3Qgc3BlY2lmeSB0aGUgXCJ0b1wiIHByb3BlcnR5Jyk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcblxuICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/ICgwLCBfaGlzdG9yeS5jcmVhdGVMb2NhdGlvbikodG8sIG51bGwsIG51bGwsIGhpc3RvcnkubG9jYXRpb24pIDogdG87XG5cbiAgICB2YXIgaHJlZiA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgb25DbGljazogdGhpcy5oYW5kbGVDbGljaywgaHJlZjogaHJlZiwgcmVmOiBpbm5lclJlZiB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICB0YXJnZXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICByZXBsYWNlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHRvOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSlcbn07XG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVwbGFjZTogZmFsc2Vcbn07XG5MaW5rLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICBoaXN0b3J5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICAgIHB1c2g6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjcmVhdGVIcmVmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IExpbms7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfUm91dGUgPSByZXF1aXJlKFwicmVhY3Qtcm91dGVyL1JvdXRlXCIpO1xuXG52YXIgX1JvdXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX1JvdXRlMi5kZWZhdWx0OyAvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0cyIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFVuaXR5VmVyc2lvbjtcbihmdW5jdGlvbiAoVW5pdHlWZXJzaW9uKSB7XG4gICAgLyoqXG4gICAgICogVW5pdHkgNS42LnhcbiAgICAgKi9cbiAgICBVbml0eVZlcnNpb25bVW5pdHlWZXJzaW9uW1wiVU5JVFlfNV82XCJdID0gMF0gPSBcIlVOSVRZXzVfNlwiO1xuICAgIC8qKlxuICAgICAqIFVuaXR5IDIwMTdcbiAgICAgKi9cbiAgICBVbml0eVZlcnNpb25bVW5pdHlWZXJzaW9uW1wiVU5JVFlfMjAxN1wiXSA9IDFdID0gXCJVTklUWV8yMDE3XCI7XG4gICAgLyoqXG4gICAgICogVW5pdHkgMjAxOFxuICAgICAqL1xuICAgIFVuaXR5VmVyc2lvbltVbml0eVZlcnNpb25bXCJVTklUWV8yMDE4XCJdID0gMl0gPSBcIlVOSVRZXzIwMThcIjtcbn0pKFVuaXR5VmVyc2lvbiA9IGV4cG9ydHMuVW5pdHlWZXJzaW9uIHx8IChleHBvcnRzLlVuaXR5VmVyc2lvbiA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Vbml0eVZlcnNpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jbGFzc25hbWVzID0gcmVxdWlyZShcImNsYXNzbmFtZXNcIik7XG5cbnZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIENBUk9VU0VMOiBmdW5jdGlvbiBDQVJPVVNFTChpc1NsaWRlcikge1xuICAgICAgICByZXR1cm4gKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICBcImNhcm91c2VsXCI6IHRydWUsXG4gICAgICAgICAgICBcImNhcm91c2VsLXNsaWRlclwiOiBpc1NsaWRlclxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgV1JBUFBFUjogZnVuY3Rpb24gV1JBUFBFUihpc1NsaWRlciwgYXhpcykge1xuICAgICAgICByZXR1cm4gKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICBcInRodW1icy13cmFwcGVyXCI6ICFpc1NsaWRlcixcbiAgICAgICAgICAgIFwic2xpZGVyLXdyYXBwZXJcIjogaXNTbGlkZXIsXG4gICAgICAgICAgICBcImF4aXMtaG9yaXpvbnRhbFwiOiBheGlzID09PSBcImhvcml6b250YWxcIixcbiAgICAgICAgICAgIFwiYXhpcy12ZXJ0aWNhbFwiOiBheGlzICE9PSBcImhvcml6b250YWxcIlxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgU0xJREVSOiBmdW5jdGlvbiBTTElERVIoaXNTbGlkZXIsIGlzU3dpcGluZykge1xuICAgICAgICByZXR1cm4gKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICBcInRodW1ic1wiOiAhaXNTbGlkZXIsXG4gICAgICAgICAgICBcInNsaWRlclwiOiBpc1NsaWRlcixcbiAgICAgICAgICAgIFwiYW5pbWF0ZWRcIjogIWlzU3dpcGluZ1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgSVRFTTogZnVuY3Rpb24gSVRFTShpc1NsaWRlciwgc2VsZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgXCJ0aHVtYlwiOiAhaXNTbGlkZXIsXG4gICAgICAgICAgICBcInNsaWRlXCI6IGlzU2xpZGVyLFxuICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiBzZWxlY3RlZFxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgQVJST1dfUFJFVjogZnVuY3Rpb24gQVJST1dfUFJFVihkaXNhYmxlZCkge1xuICAgICAgICByZXR1cm4gKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICBcImNvbnRyb2wtYXJyb3cgY29udHJvbC1wcmV2XCI6IHRydWUsXG4gICAgICAgICAgICBcImNvbnRyb2wtZGlzYWJsZWRcIjogZGlzYWJsZWRcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIEFSUk9XX05FWFQ6IGZ1bmN0aW9uIEFSUk9XX05FWFQoZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoe1xuICAgICAgICAgICAgXCJjb250cm9sLWFycm93IGNvbnRyb2wtbmV4dFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJjb250cm9sLWRpc2FibGVkXCI6IGRpc2FibGVkXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBET1Q6IGZ1bmN0aW9uIERPVChzZWxlY3RlZCkge1xuICAgICAgICByZXR1cm4gKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICBcImRvdFwiOiB0cnVlLFxuICAgICAgICAgICAgJ3NlbGVjdGVkJzogc2VsZWN0ZWRcbiAgICAgICAgfSk7XG4gICAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBheGlzKSB7XG4gICAgdmFyIHBvc2l0aW9uQ3NzID0gYXhpcyA9PT0gJ2hvcml6b250YWwnID8gW3Bvc2l0aW9uLCAwLCAwXSA6IFswLCBwb3NpdGlvbiwgMF07XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zbGF0ZTNkJztcblxuICAgIHZhciB0cmFuc2xhdGVkUG9zaXRpb24gPSAnKCcgKyBwb3NpdGlvbkNzcy5qb2luKCcsJykgKyAnKSc7XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvblByb3AgKyB0cmFuc2xhdGVkUG9zaXRpb247XG59OyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAnLi9yZWFjdC1zd2lwZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgnLi9yZWFjdC1zd2lwZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdFN3aXBlKTtcbiAgICBnbG9iYWwuaW5kZXggPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdFN3aXBlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0U3dpcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RTd2lwZSk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydHMuZGVmYXVsdCA9IF9yZWFjdFN3aXBlMi5kZWZhdWx0O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY3NzQ2xhc3NlcyA9IHJlcXVpcmUoJy4uL2Nzc0NsYXNzZXMnKTtcblxudmFyIF9jc3NDbGFzc2VzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nzc0NsYXNzZXMpO1xuXG52YXIgX2RpbWVuc2lvbnMgPSByZXF1aXJlKCcuLi9kaW1lbnNpb25zJyk7XG5cbnZhciBfQ1NTVHJhbnNsYXRlID0gcmVxdWlyZSgnLi4vQ1NTVHJhbnNsYXRlJyk7XG5cbnZhciBfQ1NTVHJhbnNsYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NTU1RyYW5zbGF0ZSk7XG5cbnZhciBfcmVhY3RFYXN5U3dpcGUgPSByZXF1aXJlKCdyZWFjdC1lYXN5LXN3aXBlJyk7XG5cbnZhciBfcmVhY3RFYXN5U3dpcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RFYXN5U3dpcGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUaHVtYnMgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhUaHVtYnMsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gVGh1bWJzKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaHVtYnMpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUaHVtYnMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUaHVtYnMpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX2luaXRpYWxpc2VQcm9wcy5jYWxsKF90aGlzKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNlbGVjdGVkSXRlbTogcHJvcHMuc2VsZWN0ZWRJdGVtLFxuICAgICAgICAgICAgaGFzTW91bnQ6IGZhbHNlLFxuICAgICAgICAgICAgZmlyc3RJdGVtOiAwLFxuICAgICAgICAgICAgaXRlbVNpemU6IG51bGwsXG4gICAgICAgICAgICB2aXNpYmxlSXRlbXM6IDAsXG4gICAgICAgICAgICBsYXN0UG9zaXRpb246IDAsXG4gICAgICAgICAgICBzaG93QXJyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgIGltYWdlczogX3RoaXMuZ2V0SW1hZ2VzKClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhUaHVtYnMsIFt7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KG5leHRQcm9wcykge1xuICAgICAgICAgICAgdGhpcy5zZXR1cFRodW1icygpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgICAgICAgICBpZiAocHJvcHMuc2VsZWN0ZWRJdGVtICE9PSB0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW06IHByb3BzLnNlbGVjdGVkSXRlbSxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RJdGVtOiB0aGlzLmdldEZpcnN0SXRlbShwcm9wcy5zZWxlY3RlZEl0ZW0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvcHMuY2hpbGRyZW4gIT09IHRoaXMucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VzOiB0aGlzLmdldEltYWdlcygpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5jaGlsZHJlbiA9PT0gcHJldlByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgY2FwdHVyZSBhbnkgc2l6ZSBjaGFuZ2VzIGZvciBhcnJvdyBhZGp1c3RtZW50cyBldGMuXG4gICAgICAgICAgICAvLyB1c3VhbGx5IGluIHRoZSBzYW1lIHJlbmRlciBjeWNsZSBzbyB3ZSBkb24ndCBzZWUgYW55IGZsaWNrZXJzXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemVzKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0cm95VGh1bWJzKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NldHVwVGh1bWJzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwVGh1bWJzKCkge1xuICAgICAgICAgICAgLy8gYXMgdGhlIHdpZHRocyBhcmUgY2FsY3VsYXRlZCwgd2UgbmVlZCB0byByZXNpemVcbiAgICAgICAgICAgIC8vIHRoZSBjYXJvdXNlbCB3aGVuIHRoZSB3aW5kb3cgaXMgcmVzaXplZFxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy51cGRhdGVTaXplcyk7XG4gICAgICAgICAgICAvLyBpc3N1ZSAjMiAtIGltYWdlIGxvYWRpbmcgc21hbGxlclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIHRoaXMudXBkYXRlU2l6ZXMpO1xuXG4gICAgICAgICAgICAvLyB3aGVuIHRoZSBjb21wb25lbnQgaXMgcmVuZGVyZWQgd2UgbmVlZCB0byBjYWxjdWxhdGVcbiAgICAgICAgICAgIC8vIHRoZSBjb250YWluZXIgc2l6ZSB0byBhZGp1c3QgdGhlIHJlc3BvbnNpdmUgYmVoYXZpb3VyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemVzKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3lUaHVtYnMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveVRodW1icygpIHtcbiAgICAgICAgICAgIC8vIHJlbW92aW5nIGxpc3RlbmVyc1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy51cGRhdGVTaXplcyk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgdGhpcy51cGRhdGVTaXplcyk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldEltYWdlcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbWFnZXMoKSB7XG4gICAgICAgICAgICB2YXIgaW1hZ2VzID0gX3JlYWN0LkNoaWxkcmVuLm1hcCh0aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW1nID0gaXRlbTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBpdGVtIGlzIG5vdCBhbiBpbWFnZSwgdHJ5IHRvIGZpbmQgdGhlIGZpcnN0IGltYWdlIGluIHRoZSBpdGVtJ3MgY2hpbGRyZW4uXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSAhPT0gXCJpbWdcIikge1xuICAgICAgICAgICAgICAgICAgICBpbWcgPSBfcmVhY3QuQ2hpbGRyZW4udG9BcnJheShpdGVtLnByb3BzLmNoaWxkcmVuKS5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRyZW4udHlwZSA9PT0gXCJpbWdcIjtcbiAgICAgICAgICAgICAgICAgICAgfSlbMF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFpbWcgfHwgaW1nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaW1nO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpbWFnZXMuZmlsdGVyKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbWFnZSAhPT0gbnVsbDtcbiAgICAgICAgICAgIH0pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTm8gaW1hZ2VzIGZvdW5kISBDYW5cXCd0IGJ1aWxkIHRoZSB0aHVtYiBsaXN0IHdpdGhvdXQgaW1hZ2VzLiBJZiB5b3UgZG9uXFwndCBuZWVkIHRodW1icywgc2V0IHNob3dUaHVtYnM9e2ZhbHNlfSBpbiB0aGUgQ2Fyb3VzZWwuIE5vdGUgdGhhdCBpdFxcJ3Mgbm90IHBvc3NpYmxlIHRvIGdldCBpbWFnZXMgcmVuZGVyZWQgaW5zaWRlIGN1c3RvbSBjb21wb25lbnRzLiBNb3JlIGluZm8gYXQgaHR0cHM6Ly9naXRodWIuY29tL2xlYW5kcm93ZC9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2Jsb2IvbWFzdGVyL1RST1VCTEVTSE9PVElORy5tZCcpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpbWFnZXM7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldEZpcnN0SXRlbScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaXJzdEl0ZW0oc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgICAgICB2YXIgZmlyc3RJdGVtID0gc2VsZWN0ZWRJdGVtO1xuXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRJdGVtID49IHRoaXMuc3RhdGUubGFzdFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgZmlyc3RJdGVtID0gdGhpcy5zdGF0ZS5sYXN0UG9zaXRpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEl0ZW0gPCB0aGlzLnN0YXRlLmZpcnN0SXRlbSArIHRoaXMuc3RhdGUudmlzaWJsZUl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgZmlyc3RJdGVtID0gdGhpcy5zdGF0ZS5maXJzdEl0ZW07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEl0ZW0gPCB0aGlzLnN0YXRlLmZpcnN0SXRlbSkge1xuICAgICAgICAgICAgICAgIGZpcnN0SXRlbSA9IHNlbGVjdGVkSXRlbTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZpcnN0SXRlbTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVySXRlbXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVySXRlbXMoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuaW1hZ2VzLm1hcChmdW5jdGlvbiAoaW1nLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtQ2xhc3MgPSBfY3NzQ2xhc3NlczIuZGVmYXVsdC5JVEVNKGZhbHNlLCBpbmRleCA9PT0gX3RoaXMyLnN0YXRlLnNlbGVjdGVkSXRlbSAmJiBfdGhpczIuc3RhdGUuaGFzTW91bnQpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRodW1iUHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc2V0VGh1bWJzUmVmKGUsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBpdGVtQ2xhc3MsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF90aGlzMi5oYW5kbGVDbGlja0l0ZW0uYmluZChfdGhpczIsIGluZGV4LCBfdGhpczIucHJvcHMuY2hpbGRyZW5baW5kZXhdKSxcbiAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duOiBfdGhpczIuaGFuZGxlQ2xpY2tJdGVtLmJpbmQoX3RoaXMyLCBpbmRleCwgX3RoaXMyLnByb3BzLmNoaWxkcmVuW2luZGV4XSlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGltZyA9IF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoaW1nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkxvYWQ6IF90aGlzMi5zZXRNb3VudFN0YXRlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHMoe30sIHRodW1iUHJvcHMsIHsgcm9sZTogJ2J1dHRvbicsIHRhYkluZGV4OiAwIH0pLFxuICAgICAgICAgICAgICAgICAgICBpbWdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc2hvdyBsZWZ0IGFycm93P1xuICAgICAgICAgICAgdmFyIGhhc1ByZXYgPSB0aGlzLnN0YXRlLnNob3dBcnJvd3MgJiYgdGhpcy5zdGF0ZS5maXJzdEl0ZW0gPiAwO1xuICAgICAgICAgICAgLy8gc2hvdyByaWdodCBhcnJvd1xuICAgICAgICAgICAgdmFyIGhhc05leHQgPSB0aGlzLnN0YXRlLnNob3dBcnJvd3MgJiYgdGhpcy5zdGF0ZS5maXJzdEl0ZW0gPCB0aGlzLnN0YXRlLmxhc3RQb3NpdGlvbjtcbiAgICAgICAgICAgIC8vIG9iaiB0byBob2xkIHRoZSB0cmFuc2Zvcm1hdGlvbnMgYW5kIHN0eWxlc1xuICAgICAgICAgICAgdmFyIGl0ZW1MaXN0U3R5bGVzID0ge307XG5cbiAgICAgICAgICAgIHZhciBjdXJyZW50UG9zaXRpb24gPSAtdGhpcy5zdGF0ZS5maXJzdEl0ZW0gKiB0aGlzLnN0YXRlLml0ZW1TaXplICsgJ3B4JztcblxuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybVByb3AgPSAoMCwgX0NTU1RyYW5zbGF0ZTIuZGVmYXVsdCkoY3VycmVudFBvc2l0aW9uLCB0aGlzLnByb3BzLmF4aXMpO1xuXG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvblRpbWUgPSB0aGlzLnByb3BzLnRyYW5zaXRpb25UaW1lICsgJ21zJztcblxuICAgICAgICAgICAgaXRlbUxpc3RTdHlsZXMgPSB7XG4gICAgICAgICAgICAgICAgJ1dlYmtpdFRyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3AsXG4gICAgICAgICAgICAgICAgJ01velRyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3AsXG4gICAgICAgICAgICAgICAgJ01zVHJhbnNmb3JtJzogdHJhbnNmb3JtUHJvcCxcbiAgICAgICAgICAgICAgICAnT1RyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3AsXG4gICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3AsXG4gICAgICAgICAgICAgICAgJ21zVHJhbnNmb3JtJzogdHJhbnNmb3JtUHJvcCxcbiAgICAgICAgICAgICAgICAnV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uJzogdHJhbnNpdGlvblRpbWUsXG4gICAgICAgICAgICAgICAgJ01velRyYW5zaXRpb25EdXJhdGlvbic6IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICAgICAgICAgICdNc1RyYW5zaXRpb25EdXJhdGlvbic6IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICAgICAgICAgICdPVHJhbnNpdGlvbkR1cmF0aW9uJzogdHJhbnNpdGlvblRpbWUsXG4gICAgICAgICAgICAgICAgJ3RyYW5zaXRpb25EdXJhdGlvbic6IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICAgICAgICAgICdtc1RyYW5zaXRpb25EdXJhdGlvbic6IHRyYW5zaXRpb25UaW1lXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IF9jc3NDbGFzc2VzMi5kZWZhdWx0LkNBUk9VU0VMKGZhbHNlKSB9LFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IF9jc3NDbGFzc2VzMi5kZWZhdWx0LldSQVBQRVIoZmFsc2UpLCByZWY6IHRoaXMuc2V0SXRlbXNXcmFwcGVyUmVmIH0sXG4gICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7IHR5cGU6ICdidXR0b24nLCBjbGFzc05hbWU6IF9jc3NDbGFzc2VzMi5kZWZhdWx0LkFSUk9XX1BSRVYoIWhhc1ByZXYpLCBvbkNsaWNrOiB0aGlzLnNsaWRlUmlnaHQgfSksXG4gICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0RWFzeVN3aXBlMi5kZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgeyB0YWdOYW1lOiAndWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbTogdGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5TTElERVIoZmFsc2UsIHRoaXMuc3RhdGUuc3dpcGluZyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Td2lwZUxlZnQ6IHRoaXMuc2xpZGVMZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU3dpcGVSaWdodDogdGhpcy5zbGlkZVJpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU3dpcGVNb3ZlOiB0aGlzLm9uU3dpcGVNb3ZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU3dpcGVTdGFydDogdGhpcy5vblN3aXBlU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Td2lwZUVuZDogdGhpcy5vblN3aXBlRW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBpdGVtTGlzdFN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6IHRoaXMuc2V0SXRlbXNMaXN0UmVmIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckl0ZW1zKClcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHsgdHlwZTogJ2J1dHRvbicsIGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMyLmRlZmF1bHQuQVJST1dfTkVYVCghaGFzTmV4dCksIG9uQ2xpY2s6IHRoaXMuc2xpZGVMZWZ0IH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUaHVtYnM7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5UaHVtYnMuZGlzcGxheU5hbWUgPSAnVGh1bWJzJztcblRodW1icy5wcm9wc1R5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgICB0cmFuc2l0aW9uVGltZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgc2VsZWN0ZWRJdGVtOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICB0aHVtYldpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxufTtcblRodW1icy5kZWZhdWx0UHJvcHMgPSB7XG4gICAgc2VsZWN0ZWRJdGVtOiAwLFxuICAgIHRyYW5zaXRpb25UaW1lOiAzNTAsXG4gICAgYXhpczogJ2hvcml6b250YWwnXG59O1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB0aGlzLnNldEl0ZW1zV3JhcHBlclJlZiA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIF90aGlzMy5pdGVtc1dyYXBwZXJSZWYgPSBub2RlO1xuICAgIH07XG5cbiAgICB0aGlzLnNldEl0ZW1zTGlzdFJlZiA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIF90aGlzMy5pdGVtc0xpc3RSZWYgPSBub2RlO1xuICAgIH07XG5cbiAgICB0aGlzLnNldFRodW1ic1JlZiA9IGZ1bmN0aW9uIChub2RlLCBpbmRleCkge1xuICAgICAgICBpZiAoIV90aGlzMy50aHVtYnNSZWYpIHtcbiAgICAgICAgICAgIF90aGlzMy50aHVtYnNSZWYgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczMudGh1bWJzUmVmW2luZGV4XSA9IG5vZGU7XG4gICAgfTtcblxuICAgIHRoaXMudXBkYXRlU2l6ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX3RoaXMzLnByb3BzLmNoaWxkcmVuIHx8ICFfdGhpczMuaXRlbXNXcmFwcGVyUmVmKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG90YWwgPSBfdGhpczMucHJvcHMuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICB2YXIgd3JhcHBlclNpemUgPSBfdGhpczMuaXRlbXNXcmFwcGVyUmVmLmNsaWVudFdpZHRoO1xuICAgICAgICB2YXIgaXRlbVNpemUgPSBfdGhpczMucHJvcHMudGh1bWJXaWR0aCA/IF90aGlzMy5wcm9wcy50aHVtYldpZHRoIDogKDAsIF9kaW1lbnNpb25zLm91dGVyV2lkdGgpKF90aGlzMy50aHVtYnNSZWZbMF0pO1xuICAgICAgICB2YXIgdmlzaWJsZUl0ZW1zID0gTWF0aC5mbG9vcih3cmFwcGVyU2l6ZSAvIGl0ZW1TaXplKTtcbiAgICAgICAgdmFyIGxhc3RQb3NpdGlvbiA9IHRvdGFsIC0gdmlzaWJsZUl0ZW1zO1xuICAgICAgICB2YXIgc2hvd0Fycm93cyA9IHZpc2libGVJdGVtcyA8IHRvdGFsO1xuICAgICAgICBfdGhpczMuc2V0U3RhdGUoZnVuY3Rpb24gKF9zdGF0ZSwgcHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaXRlbVNpemU6IGl0ZW1TaXplLFxuICAgICAgICAgICAgICAgIHZpc2libGVJdGVtczogdmlzaWJsZUl0ZW1zLFxuICAgICAgICAgICAgICAgIGZpcnN0SXRlbTogc2hvd0Fycm93cyA/IF90aGlzMy5nZXRGaXJzdEl0ZW0ocHJvcHMuc2VsZWN0ZWRJdGVtKSA6IDAsXG4gICAgICAgICAgICAgICAgbGFzdFBvc2l0aW9uOiBsYXN0UG9zaXRpb24sXG4gICAgICAgICAgICAgICAgc2hvd0Fycm93czogc2hvd0Fycm93c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuc2V0TW91bnRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnNldFN0YXRlKHsgaGFzTW91bnQ6IHRydWUgfSk7XG4gICAgICAgIF90aGlzMy51cGRhdGVTaXplcygpO1xuICAgIH07XG5cbiAgICB0aGlzLmhhbmRsZUNsaWNrSXRlbSA9IGZ1bmN0aW9uIChpbmRleCwgaXRlbSwgZSkge1xuICAgICAgICBpZiAoIWUua2V5Q29kZSB8fCBlLmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBfdGhpczMucHJvcHMub25TZWxlY3RJdGVtO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGluZGV4LCBpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm9uU3dpcGVTdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHN3aXBpbmc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMub25Td2lwZUVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHN3aXBpbmc6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICB0aGlzLm9uU3dpcGVNb3ZlID0gZnVuY3Rpb24gKGRlbHRhWCkge1xuICAgICAgICB2YXIgbGVmdEJvdW5kYXJ5ID0gMDtcblxuICAgICAgICB2YXIgY3VycmVudFBvc2l0aW9uID0gLV90aGlzMy5zdGF0ZS5maXJzdEl0ZW0gKiBfdGhpczMuc3RhdGUuaXRlbVNpemU7XG4gICAgICAgIHZhciBsYXN0TGVmdEJvdW5kYXJ5ID0gLV90aGlzMy5zdGF0ZS52aXNpYmxlSXRlbXMgKiBfdGhpczMuc3RhdGUuaXRlbVNpemU7XG5cbiAgICAgICAgLy8gcHJldmVudCB1c2VyIGZyb20gc3dpcGluZyBsZWZ0IG91dCBvZiBib3VuZGFyaWVzXG4gICAgICAgIGlmIChjdXJyZW50UG9zaXRpb24gPT09IGxlZnRCb3VuZGFyeSAmJiBkZWx0YVggPiAwKSB7XG4gICAgICAgICAgICBkZWx0YVggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJldmVudCB1c2VyIGZyb20gc3dpcGluZyByaWdodCBvdXQgb2YgYm91bmRhcmllc1xuICAgICAgICBpZiAoY3VycmVudFBvc2l0aW9uID09PSBsYXN0TGVmdEJvdW5kYXJ5ICYmIGRlbHRhWCA8IDApIHtcbiAgICAgICAgICAgIGRlbHRhWCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgd3JhcHBlclNpemUgPSBfdGhpczMuaXRlbXNXcmFwcGVyUmVmLmNsaWVudFdpZHRoO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBjdXJyZW50UG9zaXRpb24gKyAxMDAgLyAod3JhcHBlclNpemUgLyBkZWx0YVgpICsgJyUnO1xuXG4gICAgICAgIC8vIGlmIDNkIGlzbid0IGF2YWlsYWJsZSB3ZSB3aWxsIHVzZSBsZWZ0IHRvIG1vdmVcbiAgICAgICAgaWYgKF90aGlzMy5pdGVtc0xpc3RSZWYpIHtcbiAgICAgICAgICAgIFsnV2Via2l0VHJhbnNmb3JtJywgJ01velRyYW5zZm9ybScsICdNc1RyYW5zZm9ybScsICdPVHJhbnNmb3JtJywgJ3RyYW5zZm9ybScsICdtc1RyYW5zZm9ybSddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgICAgICBfdGhpczMuaXRlbXNMaXN0UmVmLnN0eWxlW3Byb3BdID0gKDAsIF9DU1NUcmFuc2xhdGUyLmRlZmF1bHQpKHBvc2l0aW9uLCBfdGhpczMucHJvcHMuYXhpcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNsaWRlUmlnaHQgPSBmdW5jdGlvbiAocG9zaXRpb25zKSB7XG4gICAgICAgIF90aGlzMy5tb3ZlVG8oX3RoaXMzLnN0YXRlLmZpcnN0SXRlbSAtICh0eXBlb2YgcG9zaXRpb25zID09PSAnbnVtYmVyJyA/IHBvc2l0aW9ucyA6IDEpKTtcbiAgICB9O1xuXG4gICAgdGhpcy5zbGlkZUxlZnQgPSBmdW5jdGlvbiAocG9zaXRpb25zKSB7XG4gICAgICAgIF90aGlzMy5tb3ZlVG8oX3RoaXMzLnN0YXRlLmZpcnN0SXRlbSArICh0eXBlb2YgcG9zaXRpb25zID09PSAnbnVtYmVyJyA/IHBvc2l0aW9ucyA6IDEpKTtcbiAgICB9O1xuXG4gICAgdGhpcy5tb3ZlVG8gPSBmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgLy8gcG9zaXRpb24gY2FuJ3QgYmUgbG93ZXIgdGhhbiAwXG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPCAwID8gMCA6IHBvc2l0aW9uO1xuICAgICAgICAvLyBwb3NpdGlvbiBjYW4ndCBiZSBoaWdoZXIgdGhhbiBsYXN0IHBvc3Rpb25cbiAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA+PSBfdGhpczMubGFzdFBvc2l0aW9uID8gX3RoaXMzLmxhc3RQb3NpdGlvbiA6IHBvc2l0aW9uO1xuXG4gICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBmaXJzdEl0ZW06IHBvc2l0aW9uLFxuICAgICAgICAgICAgLy8gaWYgaXQncyBub3QgYSBzbGlkZXIsIHdlIGRvbid0IG5lZWQgdG8gc2V0IHBvc2l0aW9uIGhlcmVcbiAgICAgICAgICAgIHNlbGVjdGVkSXRlbTogX3RoaXMzLnN0YXRlLnNlbGVjdGVkSXRlbVxuICAgICAgICB9KTtcbiAgICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVGh1bWJzOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDQ4MSk7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMjYwKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg0NzgpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDE4Nik7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3Njcm9sbGJhciA9IHJlcXVpcmUoJy4vc2Nyb2xsYmFyJyk7XG5cbnZhciBfc2Nyb2xsYmFyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Njcm9sbGJhcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9zY3JvbGxiYXIyLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgyNDYpOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhNmUxOGQyOTdmNDk5NzI4MjcwNjIzYmFhMDk0MzJiLmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImExZDU4Y2YxOWI3N2ZiNmY2OTE3YmVmYjQ3MmNkYzhkLmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjg4YzMzMjExMmU4ZTNlYzFhNzg3NTE2Yzc1YmJhNGFkLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImYyMTViOGFiNTY1YzA5ZTNkYTgzNTc1NDQwNTY5NjEyLmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImYyZjMwZGM3NzA0YjkzY2Q0MTRkYmEyNTMzZjdhMGY3LmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjYyNTRkYTkxMzU3ODQyMWRjNjIwNjVmZWRlMDZmM2U5LmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjZhNTBjYjMwZTZkMDQ2NGFiYTQ1ZWMxNDI2MzA1OGQyLmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDE4OSk7IiwiJ3VzZSBzdHJpY3QnXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mb3JtaWsuY2pzLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mb3JtaWsuY2pzLmRldmVsb3BtZW50LmpzJyk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMjUzKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkRlYm91bmNlQ2FjaGUgPSBleHBvcnRzLm9ubHlSZXNvbHZlc0xhc3QgPSBleHBvcnRzLmRlYm91bmNlID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2RlYm91bmNlUHJvbWlzZSA9IHJlcXVpcmUoJ2RlYm91bmNlLXByb21pc2UnKTtcblxudmFyIF9kZWJvdW5jZVByb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVib3VuY2VQcm9taXNlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLy8gV2UgdXNlIERlYm91bmNlUHJvbWlzZSBhcyBhIGRlcGVuZGVuY3kgYXMgaXQgZG9lcyBhIGdyZWF0IGxvdy1sZXZlbCBqb2Jcbi8vIFRoZSBiZWhhdmlvciBvZiB0aGUgbGliIGlzIHRvIHJldHVybiB0aGUgc2FtZSBwcm9taXNlIGZvciBhbGwgZnVuY3Rpb24gY2FsbHNcbnZhciBkZWJvdW5jZSA9IGV4cG9ydHMuZGVib3VuY2UgPSBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHJldHVybiAoMCwgX2RlYm91bmNlUHJvbWlzZTIuZGVmYXVsdCkoZnVuYywgd2FpdCwgb3B0aW9ucyk7XG59O1xuXG4vLyBHaXZlbiBhIGZ1bmN0aW9uIHJldHVybmluZyBwcm9taXNlcywgd3JhcCBpdCBzbyB0aGF0IG9ubHkgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbSBsYXN0IGNhbGwgd2lsbCBhY3R1YWxseSByZXNvbHZlXG4vLyBUaGlzIGlzIHVzZWZ1bCB0byBpZ25vcmUgZm9ybWVyIGFzeW5jIHJlc3VsdHMgYW5kIGhhbmRsZSBjb25jdXJyZW5jeSBpc3N1ZXNcbnZhciBvbmx5UmVzb2x2ZXNMYXN0ID0gZXhwb3J0cy5vbmx5UmVzb2x2ZXNMYXN0ID0gZnVuY3Rpb24gb25seVJlc29sdmVzTGFzdChhc3luY0Z1bmN0aW9uKSB7XG4gIC8vIEluc3BpcmVkIGZyb20gaHR0cHM6Ly9yZWFjdGpzLm9yZy9ibG9nLzIwMTUvMTIvMTYvaXNtb3VudGVkLWFudGlwYXR0ZXJuLmh0bWxcbiAgdmFyIG1ha2VDYW5jZWxhYmxlID0gZnVuY3Rpb24gbWFrZUNhbmNlbGFibGUocHJvbWlzZSkge1xuICAgIHZhciBoYXNDYW5jZWxlZF8gPSBmYWxzZTtcbiAgICB2YXIgd3JhcHBlZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICByZXR1cm4gaGFzQ2FuY2VsZWRfID8gdW5kZWZpbmVkIDogcmVzb2x2ZSh2YWwpO1xuICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBoYXNDYW5jZWxlZF8gPyB1bmRlZmluZWQgOiByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb21pc2U6IHdyYXBwZWRQcm9taXNlLFxuICAgICAgY2FuY2VsOiBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIGhhc0NhbmNlbGVkXyA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY2FuY2VsUHJldmlvdXMgPSB2b2lkIDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgY2FuY2VsUHJldmlvdXMgJiYgY2FuY2VsUHJldmlvdXMoKTtcblxuICAgIHZhciBfbWFrZUNhbmNlbGFibGUgPSBtYWtlQ2FuY2VsYWJsZShhc3luY0Z1bmN0aW9uLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKSksXG4gICAgICAgIHByb21pc2UgPSBfbWFrZUNhbmNlbGFibGUucHJvbWlzZSxcbiAgICAgICAgY2FuY2VsID0gX21ha2VDYW5jZWxhYmxlLmNhbmNlbDtcblxuICAgIGNhbmNlbFByZXZpb3VzID0gY2FuY2VsO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xufTtcblxuLy8gV2UgY3JlYXRlIGEgZGVib3VuY2luZyBmdW5jdGlvbiBjYWNoZSwgYmVjYXVzZSB3aGVuIHdyYXBwaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbixcbi8vIHdlIG1heSBhY3R1YWxseSB3YW50IHRvIHJvdXRlIHRoZSBmdW5jdGlvbiBjYWxsIHRvIGRpZmZlcmVudCBkZWJvdW5jZWQgZnVuY3Rpb25zIGRlcGVuZGluZyBmdW5jdGlvbiBwYWFtZXRlcnNcblxudmFyIERlYm91bmNlQ2FjaGUgPSBleHBvcnRzLkRlYm91bmNlQ2FjaGUgPSBmdW5jdGlvbiBEZWJvdW5jZUNhY2hlKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZWJvdW5jZUNhY2hlKTtcblxuICB0aGlzLmdldERlYm91bmNlZEZ1bmN0aW9uID0gZnVuY3Rpb24gKGZ1bmMsIHdhaXQsIG9wdGlvbnMsIGFyZ3MpIHtcbiAgICB2YXIga2V5T3B0aW9ucyA9IG9wdGlvbnMua2V5LFxuICAgICAgICBvbmx5UmVzb2x2ZXNMYXN0T3B0aW9uID0gb3B0aW9ucy5vbmx5UmVzb2x2ZXNMYXN0LFxuICAgICAgICBvdGhlck9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgWydrZXknLCAnb25seVJlc29sdmVzTGFzdCddKTtcblxuICAgIHZhciBrZXkgPSBrZXlPcHRpb25zLmFwcGx5KHVuZGVmaW5lZCwgX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3MpKTtcbiAgICAvLyBJZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIGRvZXMgbm90IGV4aXN0IGZvciB0aGlzIGtleSwgd2UgY3JlYXRlIG9uZSBvbiB0aGUgZmx5IGFuZCByZXR1cm4gaXRcbiAgICBpZiAoIV90aGlzLmRlYm91bmNlQ2FjaGVba2V5XSkge1xuICAgICAgdmFyIGRlYm91bmNlZEZ1bmMgPSBkZWJvdW5jZShmdW5jLCB3YWl0LCBvdGhlck9wdGlvbnMpO1xuICAgICAgaWYgKG9ubHlSZXNvbHZlc0xhc3RPcHRpb24pIHtcbiAgICAgICAgZGVib3VuY2VkRnVuYyA9IG9ubHlSZXNvbHZlc0xhc3QoZGVib3VuY2VkRnVuYyk7XG4gICAgICB9XG4gICAgICBfdGhpcy5kZWJvdW5jZUNhY2hlW2tleV0gPSBkZWJvdW5jZWRGdW5jO1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXMuZGVib3VuY2VDYWNoZVtrZXldO1xuICB9O1xuXG4gIHRoaXMuZGVib3VuY2VDYWNoZSA9IHt9O1xufTtcblxudmFyIERlZmF1bHRPcHRpb25zID0ge1xuICAvLyBCeSBkZWZhdWx0LCB0aGUga2V5IGlzIG51bGwsIHdoaWNoIG1lYW5zIHRoYXQgYWxsIHRoZSBmdW5jdGlvbiBjYWxsc1xuICAvLyB3aWxsIHNoYXJlIHRoZSBzYW1lIGRlYm91bmNlZCBmdW5jdGlvblxuICAvLyBQcm92aWRpbmcgYSBrZXkgZnVuY3Rpb24gcGVybWl0IHRvIHVzZSB0aGUgY2FsbCBhcmd1bWVudHNcbiAgLy8gYW5kIHJvdXRlIHRvIGEgZGlzdGluY3QgZGVib3VuY2VkIGZ1bmN0aW9uXG4gIGtleTogZnVuY3Rpb24ga2V5KCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8vIEJ5IGRlZmF1bHQsIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHdpbGwgb25seSByZXNvbHZlXG4gIC8vIHRoZSBsYXN0IHByb21pc2UgaXQgcmV0dXJuZWRcbiAgLy8gRm9ybWVyIGNhbGxzIHdpbGwgc3RheSB1bnJlc29sdmVkLCBzbyB0aGF0IHlvdSBkb24ndCBoYXZlXG4gIC8vIHRvIGhhbmRsZSBjb25jdXJyZW5jeSBpc3N1ZXMgaW4geW91ciBjb2RlXG4gIG9ubHlSZXNvbHZlc0xhc3Q6IHRydWVcbn07XG5cbmZ1bmN0aW9uIEF3ZXNvbWVEZWJvdW5jZVByb21pc2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgZmluYWxPcHRpb25zID0gX2V4dGVuZHMoe30sIERlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgdmFyIGRlYm91bmNlQ2FjaGUgPSBuZXcgRGVib3VuY2VDYWNoZSgpO1xuICByZXR1cm4gZnVuY3Rpb24gQXdlc29tZURlYm91bmNlUHJvbWlzZVdyYXBwZXIoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRlYm91bmNlZEZuID0gZGVib3VuY2VDYWNoZS5nZXREZWJvdW5jZWRGdW5jdGlvbihmdW5jLCB3YWl0LCBmaW5hbE9wdGlvbnMsIGFyZ3MpO1xuICAgIHJldHVybiBkZWJvdW5jZWRGbi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBBd2Vzb21lRGVib3VuY2VQcm9taXNlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMzA5KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZShcIndhcm5pbmdcIik7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfaGlzdG9yeSA9IHJlcXVpcmUoXCJoaXN0b3J5XCIpO1xuXG52YXIgX1JvdXRlciA9IHJlcXVpcmUoXCIuL1JvdXRlclwiKTtcblxudmFyIF9Sb3V0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG52YXIgQnJvd3NlclJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJvd3NlclJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9ICgwLCBfaGlzdG9yeS5jcmVhdGVCcm93c2VySGlzdG9yeSkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUm91dGVyMi5kZWZhdWx0LCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Ccm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBmb3JjZVJlZnJlc2g6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBrZXlMZW5ndGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gQnJvd3NlclJvdXRlcjsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgxNDApOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDE0MSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKF9ET01VdGlscy5jYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNIaXN0b3J5KSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhKDAsIF9ET01VdGlscy5zdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyAoMCwgX1BhdGhVdGlscy5zdHJpcFRyYWlsaW5nU2xhc2gpKCgwLCBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCkocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghYmFzZW5hbWUgfHwgKDAsIF9QYXRoVXRpbHMuaGFzQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcEJhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKCgwLCBfRE9NVXRpbHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCkoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgKDAsIF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gpKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2gpKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmICgwLCBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbCkocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKSh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gWygwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUhhc2hIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IF9QYXRoVXRpbHMuY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoODcpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKFwid2FybmluZ1wiKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKFwicHJvcC10eXBlc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9oaXN0b3J5ID0gcmVxdWlyZShcImhpc3RvcnlcIik7XG5cbnZhciBfUm91dGVyID0gcmVxdWlyZShcIi4vUm91dGVyXCIpO1xuXG52YXIgX1JvdXRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG52YXIgSGFzaFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGFzaFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9ICgwLCBfaGlzdG9yeS5jcmVhdGVIYXNoSGlzdG9yeSkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUm91dGVyMi5kZWZhdWx0LCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5IYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGhhc2hUeXBlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKSxcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IEhhc2hSb3V0ZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfTWVtb3J5Um91dGVyID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci9NZW1vcnlSb3V0ZXJcIik7XG5cbnZhciBfTWVtb3J5Um91dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01lbW9yeVJvdXRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9NZW1vcnlSb3V0ZXIyLmRlZmF1bHQ7IC8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMjg0KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKFwicHJvcC10eXBlc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9Sb3V0ZSA9IHJlcXVpcmUoXCIuL1JvdXRlXCIpO1xuXG52YXIgX1JvdXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRlKTtcblxudmFyIF9MaW5rID0gcmVxdWlyZShcIi4vTGlua1wiKTtcblxudmFyIF9MaW5rMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xpbmspO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbnZhciBOYXZMaW5rID0gZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciB0byA9IF9yZWYudG8sXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBnZXRJc0FjdGl2ZSA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcInRvXCIsIFwiZXhhY3RcIiwgXCJzdHJpY3RcIiwgXCJsb2NhdGlvblwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwic3R5bGVcIiwgXCJpc0FjdGl2ZVwiLCBcImFyaWEtY3VycmVudFwiXSk7XG5cbiAgdmFyIHBhdGggPSAodHlwZW9mIHRvID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodG8pKSA9PT0gXCJvYmplY3RcIiA/IHRvLnBhdGhuYW1lIDogdG87XG5cbiAgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcbiAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1JvdXRlMi5kZWZhdWx0LCB7XG4gICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgZXhhY3Q6IGV4YWN0LFxuICAgIHN0cmljdDogc3RyaWN0LFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoID0gX3JlZjIubWF0Y2g7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGdldElzQWN0aXZlID8gZ2V0SXNBY3RpdmUobWF0Y2gsIGxvY2F0aW9uKSA6IG1hdGNoKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9MaW5rMi5kZWZhdWx0LCBfZXh0ZW5kcyh7XG4gICAgICAgIHRvOiB0byxcbiAgICAgICAgY2xhc3NOYW1lOiBpc0FjdGl2ZSA/IFtjbGFzc05hbWUsIGFjdGl2ZUNsYXNzTmFtZV0uZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0pLmpvaW4oXCIgXCIpIDogY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFjdGl2ZVN0eWxlKSA6IHN0eWxlLFxuICAgICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsXG4gICAgICB9LCByZXN0KSk7XG4gICAgfVxuICB9KTtcbn07XG5cbk5hdkxpbmsucHJvcFR5cGVzID0ge1xuICB0bzogX0xpbmsyLmRlZmF1bHQucHJvcFR5cGVzLnRvLFxuICBleGFjdDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzdHJpY3Q6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgbG9jYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhY3RpdmVTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgaXNBY3RpdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgXCJhcmlhLWN1cnJlbnRcIjogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKVxufTtcblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogXCJhY3RpdmVcIixcbiAgXCJhcmlhLWN1cnJlbnRcIjogXCJwYWdlXCJcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5hdkxpbms7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMTU0KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9Qcm9tcHQgPSByZXF1aXJlKFwicmVhY3Qtcm91dGVyL1Byb21wdFwiKTtcblxudmFyIF9Qcm9tcHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHJvbXB0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX1Byb21wdDIuZGVmYXVsdDsgLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHMiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgyODgpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX1JlZGlyZWN0ID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci9SZWRpcmVjdFwiKTtcblxudmFyIF9SZWRpcmVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZWRpcmVjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9SZWRpcmVjdDIuZGVmYXVsdDsgLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHMiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgyODkpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX1N0YXRpY1JvdXRlciA9IHJlcXVpcmUoXCJyZWFjdC1yb3V0ZXIvU3RhdGljUm91dGVyXCIpO1xuXG52YXIgX1N0YXRpY1JvdXRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdGF0aWNSb3V0ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfU3RhdGljUm91dGVyMi5kZWZhdWx0OyAvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0cyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDI5MSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfU3dpdGNoID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci9Td2l0Y2hcIik7XG5cbnZhciBfU3dpdGNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N3aXRjaCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9Td2l0Y2gyLmRlZmF1bHQ7IC8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMjkyKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9nZW5lcmF0ZVBhdGggPSByZXF1aXJlKFwicmVhY3Qtcm91dGVyL2dlbmVyYXRlUGF0aFwiKTtcblxudmFyIF9nZW5lcmF0ZVBhdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2VuZXJhdGVQYXRoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX2dlbmVyYXRlUGF0aDIuZGVmYXVsdDsgLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHMiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSgxNTIpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX21hdGNoUGF0aCA9IHJlcXVpcmUoXCJyZWFjdC1yb3V0ZXIvbWF0Y2hQYXRoXCIpO1xuXG52YXIgX21hdGNoUGF0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXRjaFBhdGgpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfbWF0Y2hQYXRoMi5kZWZhdWx0OyAvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0cyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDg4KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF93aXRoUm91dGVyID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci93aXRoUm91dGVyXCIpO1xuXG52YXIgX3dpdGhSb3V0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2l0aFJvdXRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF93aXRoUm91dGVyMi5kZWZhdWx0OyAvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0cyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDI5Myk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVW5pdHlWZXJzaW9uXzEgPSByZXF1aXJlKFwiLi9lbnVtcy9Vbml0eVZlcnNpb25cIik7XG5yZXF1aXJlKFwiLi9UeXBlc1wiKTtcbnZhciBVbml0eUNvbnRlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBVbml0eSBjb250ZW50IG9iamVjdC4gVGhpcyBvYmplY3QgY2FuIGJlIHVzZWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYnVpbGRKc29uUGF0aCB0aGUgcmVsYXRpdmUgcGF0aCB0byB0aGUgYnVpbGQganNvbiBmaWxlIGdlbmVyYXRlZCBieSBVbml0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdHlMb2FkZXJKc1BhdGggdGhlIHJlbGF0aXZlIHBhdGggdG8gdGhlIHVuaXR5IGxvYWRlciBqYXZhc2NyaXB0IGZpbGUuXG4gICAgICogQHBhcmFtIHtJVW5pdHlDb25maWd9IHVuaXR5Q29uZmlnIHRoZSBVbml0eSBjb25maWd1cmF0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHN0YXJ0IHRoZSBwbGF5ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gVW5pdHlDb250ZW50KGJ1aWxkSnNvblBhdGgsIHVuaXR5TG9hZGVySnNQYXRoLCB1bml0eUNvbmZpZykge1xuICAgICAgICB2YXIgX3VuaXR5Q29uZmlnID0gdW5pdHlDb25maWcgfHwge307XG4gICAgICAgIHRoaXMuYnVpbGRKc29uUGF0aCA9IGJ1aWxkSnNvblBhdGg7XG4gICAgICAgIHRoaXMudW5pdHlMb2FkZXJKc1BhdGggPSB1bml0eUxvYWRlckpzUGF0aDtcbiAgICAgICAgdGhpcy51bmlxdWVJRCA9ICsrVW5pdHlDb250ZW50LnVuaXF1ZUlEO1xuICAgICAgICB0aGlzLnVuaXR5RXZlbnRzID0gW107XG4gICAgICAgIHRoaXMudW5pdHlDb25maWcgPSB7XG4gICAgICAgICAgICBtb2R1bGVzOiBfdW5pdHlDb25maWcubW9kdWxlcyB8fCB7fSxcbiAgICAgICAgICAgIHVuaXR5VmVyc2lvbjogX3VuaXR5Q29uZmlnLnVuaXR5VmVyc2lvbiB8fCBVbml0eVZlcnNpb25fMS5Vbml0eVZlcnNpb24uVU5JVFlfMjAxOCxcbiAgICAgICAgICAgIGFkanVzdE9uV2luZG93UmVzaXplOiBfdW5pdHlDb25maWcuYWRqdXN0T25XaW5kb3dSZXNpemUsXG4gICAgICAgICAgICBpZDogX3VuaXR5Q29uZmlnLmlkIHx8IFwibmlsbFwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJpbmRzIGEgdW5pdHkgY29tcG9uZW50IHRvIHRoaXMgY29udGVudC5cbiAgICAgKiBAcGFyYW0gdW5pdHlDb21wb25lbnRJbnN0YW5jZSB0aGUgdW5pdHkgY29tcG9uZW50IHRoYXQgd2lsbCBiZSBiaW5kZWQgdG8gdGhpcyBjb250ZW50LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBVbml0eUNvbnRlbnQucHJvdG90eXBlLnNldENvbXBvbmVudEluc3RhbmNlID0gZnVuY3Rpb24gKHVuaXR5Q29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy51bml0eUNvbXBvbmVudCA9IHVuaXR5Q29tcG9uZW50SW5zdGFuY2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBCaW5kcyBhIHVuaXR5IHBsYXllciB0byB0aGlzIGNvbnRlbnQuXG4gICAgICogQHBhcmFtIHVuaXR5UGxheWVySW5zdGFuY2UgdGhlIHVuaXR5IGNvbXBvbmVudCB0aGF0IHdpbGwgYmUgYmluZGVkIHRvIHRoaXMgY29udGVudC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgVW5pdHlDb250ZW50LnByb3RvdHlwZS5zZXRVbml0eUluc3RhbmNlID0gZnVuY3Rpb24gKHVuaXR5SW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy51bml0eUluc3RhbmNlID0gdW5pdHlJbnN0YW5jZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHVuaXR5IHBsYXllcnMgZnVsbHNjcmVlbiBtb2RlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZnVsbHNjcmVlblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBVbml0eUNvbnRlbnQucHJvdG90eXBlLnNldEZ1bGxzY3JlZW4gPSBmdW5jdGlvbiAoZnVsbHNjcmVlbikge1xuICAgICAgICBpZiAodGhpcy51bml0eUluc3RhbmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudW5pdHlJbnN0YW5jZS5TZXRGdWxsc2NyZWVuKGZ1bGxzY3JlZW4gPT09IHRydWUgPyAxIDogMCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNlbmRzIGFuIGV2ZW50IHRvIHRoZSBVbml0eSBwbGF5ZXIgdGhhdCB3aWxsIHRyaWdnZXIgYSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZ2FtZU9iamVjdE5hbWUgdGhlIG5hbWUgb2YgdGhlIGdhbWUgb2JqZWN0IGluIHlvdXIgVW5pdHkgc2NlbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgdGhlIG5hbWUgb2YgdGhlIHB1YmxpYyBtZXRob2Qgb24gdGhlIGdhbWUgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7YW55fSBwYXJhbWV0ZXIgYW4gb3B0aW9uYWwgcGFyYW1ldGVyIHRvIHBhc3MgYWxvbmcgdG8gdGhlIG1ldGhvZC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgVW5pdHlDb250ZW50LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGdhbWVPYmplY3ROYW1lLCBtZXRob2ROYW1lLCBwYXJhbWV0ZXIpIHtcbiAgICAgICAgaWYgKHRoaXMudW5pdHlJbnN0YW5jZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtZXRlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHRoaXMudW5pdHlJbnN0YW5jZS5TZW5kTWVzc2FnZShnYW1lT2JqZWN0TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuaXR5SW5zdGFuY2UuU2VuZE1lc3NhZ2UoZ2FtZU9iamVjdE5hbWUsIG1ldGhvZE5hbWUsIHBhcmFtZXRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhbiBldmVudCBsaXN0ZW5lciBmb3IgdGhlIFVuaXR5IHBsYXllci4gVGhlc2UgY2FuIGJlXG4gICAgICogc3lzdGVtIGV2ZW50cyBsaWtlIHdoZW4gdGhlIHBsYXllciBpcyBpbml0aWFsaXplZCBvciBsb2FkZXIgYW5kXG4gICAgICogeW91ciBjdXN0b20gZXZlbnRzIGZyb20gVW5pdHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSB0aGUgZXZlbnQgbmFtZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGV2ZW50Q2FsbGJhY2sgdGhlIGV2ZW50IGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge2FueX0gVGhlIEZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIFVuaXR5Q29udGVudC5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBldmVudENhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMudW5pdHlFdmVudHMucHVzaCh7XG4gICAgICAgICAgICBldmVudE5hbWU6IGV2ZW50TmFtZSxcbiAgICAgICAgICAgIGV2ZW50Q2FsbGJhY2s6IGV2ZW50Q2FsbGJhY2tcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93LlJlYWN0VW5pdHlXZWJHTCA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHdpbmRvdy5SZWFjdFVuaXR5V2ViR0wgPSB7fTtcbiAgICAgICAgd2luZG93LlJlYWN0VW5pdHlXZWJHTFtldmVudE5hbWVdID0gZnVuY3Rpb24gKHBhcmFtZXRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50Q2FsbGJhY2socGFyYW1ldGVyKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIGFuIGV2ZW50IHRoYXQgaGFzIGJlZW4gcmVnaXN0ZXJlZCBieSB0aGUgb25cbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIHRoZSBldmVudCBuYW1lXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXZlbnRWYWx1ZSB0aGUgZXZlbnQgdmFsdWVcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgVW5pdHlDb250ZW50LnByb3RvdHlwZS50cmlnZ2VyVW5pdHlFdmVudCA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGV2ZW50VmFsdWUpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMudW5pdHlFdmVudHMubGVuZ3RoOyBfaSsrKVxuICAgICAgICAgICAgaWYgKHRoaXMudW5pdHlFdmVudHNbX2ldLmV2ZW50TmFtZSA9PT0gZXZlbnROYW1lKVxuICAgICAgICAgICAgICAgIHRoaXMudW5pdHlFdmVudHNbX2ldLmV2ZW50Q2FsbGJhY2soZXZlbnRWYWx1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiB0aGUgc3RhdGlzIHVuaXF1ZSBJRCBrZWVwcyB0cmFjayBvZiB0aGVcbiAgICAgKiB1bmlxdWUgSUQncyBtYWRlIGJ5IG90aGVyIGluc3RhbmNlcy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgVW5pdHlDb250ZW50LnVuaXF1ZUlEID0gMDtcbiAgICByZXR1cm4gVW5pdHlDb250ZW50O1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFVuaXR5Q29udGVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuaXR5Q29udGVudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xuICAgIHJlc3VsdFtcImRlZmF1bHRcIl0gPSBtb2Q7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUmVhY3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBVbml0eUxvYWRlclNlcnZpY2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vc2VydmljZXMvVW5pdHlMb2FkZXJTZXJ2aWNlXCIpKTtcbnJlcXVpcmUoXCIuLi9UeXBlc1wiKTtcbnZhciBVbml0eSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVW5pdHksIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZWQgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBAcGFyYW0ge0lVbml0eVByb3BzfSBwcm9wc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIFVuaXR5KHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbXBvbmVudCBzdGF0ZS5cbiAgICAgICAgICogQHR5cGUge0lVbml0eVN0YXRlfVxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICBfdGhpcy51bml0eUxvYWRlclNlcnZpY2UgPSBuZXcgVW5pdHlMb2FkZXJTZXJ2aWNlXzEuZGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5vbldpbmRvd1Jlc2l6ZUJpbmRpbmcgPSBfdGhpcy5vbldpbmRvd1Jlc2l6ZS5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMudW5pdHlDb250ZW50ID0gX3RoaXMucHJvcHMudW5pdHlDb250ZW50O1xuICAgICAgICBfdGhpcy51bml0eUNvbnRlbnQuc2V0Q29tcG9uZW50SW5zdGFuY2UoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFuIGV2ZW50IHRoYXQgaXMgdHJpZ2dlcmVkIGJ5IHRoZSBVbml0eSBwbGF5ZXIuIFRoaXMgdHJhY2tzXG4gICAgICogdGhlIGxvYWRpbmcgcHJvZ3Jlc3Npb24gb2YgdGhlIHBsYXllci4gSXQgd2lsbCBzZW5kICcxJyB3aGVuXG4gICAgICogdGhlIGxvYWRpbmcgaXMgY29tcGxldGVkLlxuICAgICAqIEBwYXJhbSB7VW5pdHlJbnN0YW5jZX0gdW5pdHlJbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwcm9ncmVzc2lvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgVW5pdHkucHJvdG90eXBlLm9uUHJvZ3Jlc3MgPSBmdW5jdGlvbiAodW5pdHlJbnN0YW5jZSwgcHJvZ3Jlc3Npb24pIHtcbiAgICAgICAgdGhpcy51bml0eUNvbnRlbnQudHJpZ2dlclVuaXR5RXZlbnQoXCJwcm9ncmVzc1wiLCBwcm9ncmVzc2lvbik7XG4gICAgICAgIGlmIChwcm9ncmVzc2lvbiA9PT0gMSlcbiAgICAgICAgICAgIHRoaXMudW5pdHlDb250ZW50LnRyaWdnZXJVbml0eUV2ZW50KFwibG9hZGVkXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgd2luZG93IGlzIHJlc2l6ZWQuXG4gICAgICovXG4gICAgVW5pdHkucHJvdG90eXBlLm9uV2luZG93UmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51bml0eUNvbnRlbnQudW5pdHlDb25maWcuYWRqdXN0T25XaW5kb3dSZXNpemUgPT09IHRydWUpXG4gICAgICAgICAgICB0aGlzLmFkanVzdENhbnZhc1RvQ29udGFpbmVyKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTaW5jZSB0aGUgVW5pdHkgY2FudmFzIGl0c2VsZiBkb2VzIG5vdCByZXNwb25kIHRvIHRoZSByZXNpemluZ1xuICAgICAqIG9mIGl0J3MgY29udGFpbmVyIHdlIGhhdmUgdG8gbWFudWFsbHkgZG8gdGhpcy4gQSB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICogb2YgMTAwJSBkb2VzIG5vdCBzZWVtIHRvIHdvcmssIHNvIHdlIGhhdmUgdG8gZmV0Y2ggaXQncyBwYXJlbnQnc1xuICAgICAqIHNpemUgdG8gYWRqZWN0IHRoZSBjYW52YXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBVbml0eS5wcm90b3R5cGUuYWRqdXN0Q2FudmFzVG9Db250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfd2lkdGggPSB0aGlzLmh0bWxFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICB2YXIgX2hlaWdodCA9IHRoaXMuaHRtbEVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB2YXIgX2NhbnZhcyA9IHRoaXMuaHRtbEVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJjYW52YXNcIilbMF07XG4gICAgICAgIGlmIChfY2FudmFzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoX2NhbnZhcy5oZWlnaHQgIT09IF9oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBfY2FudmFzLmhlaWdodCA9IF9oZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX2NhbnZhcy53aWR0aCAhPT0gX3dpZHRoKSB7XG4gICAgICAgICAgICAgICAgX2NhbnZhcy53aWR0aCA9IF93aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5pdGlhbHppZWQgdGhlIFVuaXR5IHBsYXllciB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgVW5pdHkucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uV2luZG93UmVzaXplQmluZGluZyk7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICB0aGlzLnVuaXR5TG9hZGVyU2VydmljZS5hcHBlbmQodGhpcy5wcm9wcy51bml0eUNvbnRlbnQudW5pdHlMb2FkZXJKc1BhdGgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnVuaXR5Q29udGVudC5zZXRVbml0eUluc3RhbmNlKFVuaXR5TG9hZGVyLmluc3RhbnRpYXRlKFwiX19SZWFjdFVuaXR5V2ViR0xfXCIgKyBfdGhpcy5wcm9wcy51bml0eUNvbnRlbnQudW5pcXVlSUQgKyBcIl9fXCIsIF90aGlzLnByb3BzLnVuaXR5Q29udGVudC5idWlsZEpzb25QYXRoLCB7XG4gICAgICAgICAgICAgICAgb25Qcm9ncmVzczogX3RoaXMub25Qcm9ncmVzcy5iaW5kKF90aGlzKSxcbiAgICAgICAgICAgICAgICBNb2R1bGU6IF90aGlzLnByb3BzLnVuaXR5Q29udGVudC51bml0eUNvbmZpZy5tb2R1bGVzLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogV2lsbCByZW1vdmUgZXZlbnQgbGlzdGVuZXJzIGFuZCBjbGVhbiB1cCBzeXN0ZW1zIHdoZW4gdGhlXG4gICAgICogY29tcG9uZW50IGlzIGFib3V0IHRvIHVubW91bnQuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIFVuaXR5LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vbldpbmRvd1Jlc2l6ZUJpbmRpbmcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgdW5pdHkgd3JhcHBlciBhbmQgcGxheWVyLlxuICAgICAqIEByZXR1cm5zIHtSZWFjdC5SZWFjdE5vZGV9IGVsZW1lbnRcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgVW5pdHkucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSB8fCBcIlwiLFxuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiAocmVmKSB7IHJldHVybiAoX3RoaXMuaHRtbEVsZW1lbnQgPSByZWYpOyB9LFxuICAgICAgICAgICAgaWQ6IFwiX19SZWFjdFVuaXR5V2ViR0xfXCIgKyB0aGlzLnByb3BzLnVuaXR5Q29udGVudC51bmlxdWVJRCArIFwiX19cIixcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMucHJvcHMud2lkdGggfHwgXCI4MDBweFwiLFxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5wcm9wcy5oZWlnaHQgfHwgXCI2MDBweFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFVuaXR5O1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFVuaXR5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5pdHkuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjQuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHE9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHQ9cj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyx1PXI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNix2PXI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHc9cj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgseD1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx5PXI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHo9cj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxBPXI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsQj1cbnI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyO3ImJlN5bWJvbC5mb3IoXCJyZWFjdC50aW1lb3V0XCIpO3ZhciBDPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZSs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7bighMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGUpfVxudmFyIEU9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O2Z1bmN0aW9uIEYoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RX1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9EKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRygpe31cbkcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RX12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7ayhJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT10fWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGUsYyl7aWYoUC5sZW5ndGgpe3ZhciBkPVAucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHQ6Y2FzZSB1Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrVChkLGgpO2crPVMoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj1DJiZhW0NdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLFxuaD0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitUKGQsaCsrKSxnKz1TKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFUoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gVihhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9XKGEsYyxlLHEudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKE4oYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxjLnB1c2goYSkpfWZ1bmN0aW9uIFcoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxjLGQpO251bGw9PWF8fFMoYSxcIlwiLFYsYik7UihiKX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1coYSxjLG51bGwsYixlKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsZSk7bnVsbD09YXx8UyhhLFwiXCIsVSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLHEudGhhdFJldHVybnNOdWxsLG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1coYSxiLG51bGwscS50aGF0UmV0dXJuc0FyZ3VtZW50KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtOKGEpP3ZvaWQgMDpEKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpGLFB1cmVDb21wb25lbnQ6SCxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6eixcbl9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9kZWZhdWx0VmFsdWU6YSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfY2hhbmdlZEJpdHM6MCxfY2hhbmdlZEJpdHMyOjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp5LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkIscmVuZGVyOmF9fSxGcmFnbWVudDp2LFN0cmljdE1vZGU6dyx1bnN0YWJsZV9Bc3luY01vZGU6QSx1bnN0YWJsZV9Qcm9maWxlcjp4LGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe251bGw9PT1hfHx2b2lkIDA9PT1hP0QoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGQ9ayh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1KLmN1cnJlbnQpO3ZvaWQgMCE9PVxuYi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBsPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihsPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1sP2xbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtsPUFycmF5KGMpO2Zvcih2YXIgbT0wO208YzttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjQuMVwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpKLFxuYXNzaWduOmt9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHQ/Wi5kZWZhdWx0Olo7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSg1Nik7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5T2JqZWN0OyIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFVuaXR5TG9hZGVyU2VydmljZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVbml0eUxvYWRlclNlcnZpY2UoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGRvY3VtZW50IGhlYWQuXG4gICAgICAgICAqIEB0eXBlIHtIVE1MSGVhZEVsZW1lbnR9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRvY3VtZW50SGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwZW5kcyB0aGUgVW5pdHkgbG9hZGVyIHNjcmlwdCB0byB0aGUgd2luZG93LiBXaGVuIGl0J3MgbG9hZGVkIGEgY2FsbGJhY2sgd2lsbFxuICAgICAqIGJlIHRyaWdnZXJlZC4gTk9URTogVGhpcyBjYW4ndCBiZSBhIHByb21pc3NlIGR1ZSB0byBKYXZhU2NyaXB0IGNvbXBhdGliaWx0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIHRoZSBwYXRoIHRvIHRoZSBVbml0eSBsb2FkZXIgZmlsZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uTG9hZCB3aGVuIHRoZSBzY3JpcHQgaXMgbG9hZGVkXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIFVuaXR5TG9hZGVyU2VydmljZS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKHNvdXJjZSwgb25Mb2FkKSB7XG4gICAgICAgIHRoaXMudW5pdHlMb2FkZXJTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICB0aGlzLnVuaXR5TG9hZGVyU2NyaXB0LnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiO1xuICAgICAgICB0aGlzLnVuaXR5TG9hZGVyU2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgdGhpcy51bml0eUxvYWRlclNjcmlwdC5zcmMgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMudW5pdHlMb2FkZXJTY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb25Mb2FkKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZG9jdW1lbnRIZWFkLmFwcGVuZENoaWxkKHRoaXMudW5pdHlMb2FkZXJTY3JpcHQpO1xuICAgIH07XG4gICAgcmV0dXJuIFVuaXR5TG9hZGVyU2VydmljZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBVbml0eUxvYWRlclNlcnZpY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Vbml0eUxvYWRlclNlcnZpY2UuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3BlcmZlY3RTY3JvbGxiYXIgPSByZXF1aXJlKCdwZXJmZWN0LXNjcm9sbGJhcicpO1xuXG52YXIgX3BlcmZlY3RTY3JvbGxiYXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGVyZmVjdFNjcm9sbGJhcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGhhbmRsZXJOYW1lQnlFdmVudCA9IHtcbiAgJ3BzLXNjcm9sbC15JzogJ29uU2Nyb2xsWScsXG4gICdwcy1zY3JvbGwteCc6ICdvblNjcm9sbFgnLFxuICAncHMtc2Nyb2xsLXVwJzogJ29uU2Nyb2xsVXAnLFxuICAncHMtc2Nyb2xsLWRvd24nOiAnb25TY3JvbGxEb3duJyxcbiAgJ3BzLXNjcm9sbC1sZWZ0JzogJ29uU2Nyb2xsTGVmdCcsXG4gICdwcy1zY3JvbGwtcmlnaHQnOiAnb25TY3JvbGxSaWdodCcsXG4gICdwcy15LXJlYWNoLXN0YXJ0JzogJ29uWVJlYWNoU3RhcnQnLFxuICAncHMteS1yZWFjaC1lbmQnOiAnb25ZUmVhY2hFbmQnLFxuICAncHMteC1yZWFjaC1zdGFydCc6ICdvblhSZWFjaFN0YXJ0JyxcbiAgJ3BzLXgtcmVhY2gtZW5kJzogJ29uWFJlYWNoRW5kJ1xufTtcbk9iamVjdC5mcmVlemUoaGFuZGxlck5hbWVCeUV2ZW50KTtcblxudmFyIFNjcm9sbEJhciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTY3JvbGxCYXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbEJhcihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY3JvbGxCYXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNjcm9sbEJhci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcm9sbEJhcikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmhhbmRsZVJlZiA9IF90aGlzLmhhbmRsZVJlZi5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5faGFuZGxlckJ5RXZlbnQgPSB7fTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsQmFyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLl9wcyA9IG5ldyBfcGVyZmVjdFNjcm9sbGJhcjIuZGVmYXVsdCh0aGlzLl9jb250YWluZXIsIHRoaXMucHJvcHMub3B0aW9uKTtcbiAgICAgIC8vIGhvb2sgdXAgZXZlbnRzXG4gICAgICB0aGlzLl91cGRhdGVFdmVudEhvb2soKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB0aGlzLl91cGRhdGVFdmVudEhvb2socHJldlByb3BzKTtcbiAgICAgIHRoaXMuX3BzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gdW5ob29rIHVwIGV2ZW5zXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLl9oYW5kbGVyQnlFdmVudCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IF90aGlzMi5faGFuZGxlckJ5RXZlbnRba2V5XTtcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBfdGhpczIuX2NvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKGtleSwgdmFsdWUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLl9oYW5kbGVyQnlFdmVudCA9IHt9O1xuICAgICAgdGhpcy5fcHMuZGVzdHJveSgpO1xuICAgICAgdGhpcy5fcHMgPSBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ191cGRhdGVFdmVudEhvb2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlRXZlbnRIb29rKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBwcmV2UHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICAvLyBob29rIHVwIGV2ZW50c1xuICAgICAgT2JqZWN0LmtleXMoaGFuZGxlck5hbWVCeUV2ZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gX3RoaXMzLnByb3BzW2hhbmRsZXJOYW1lQnlFdmVudFtrZXldXTtcbiAgICAgICAgdmFyIHByZXZDYWxsYmFjayA9IHByZXZQcm9wc1toYW5kbGVyTmFtZUJ5RXZlbnRba2V5XV07XG4gICAgICAgIGlmIChjYWxsYmFjayAhPT0gcHJldkNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKHByZXZDYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIHByZXZIYW5kbGVyID0gX3RoaXMzLl9oYW5kbGVyQnlFdmVudFtrZXldO1xuICAgICAgICAgICAgX3RoaXMzLl9jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihrZXksIHByZXZIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICBfdGhpczMuX2hhbmRsZXJCeUV2ZW50W2tleV0gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKF90aGlzMy5fY29udGFpbmVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpczMuX2NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGtleSwgaGFuZGxlciwgZmFsc2UpO1xuICAgICAgICAgICAgX3RoaXMzLl9oYW5kbGVyQnlFdmVudFtrZXldID0gaGFuZGxlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZVNjcm9sbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbCgpIHtcbiAgICAgIHRoaXMuX3BzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZVJlZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVJlZihyZWYpIHtcbiAgICAgIHRoaXMuX2NvbnRhaW5lciA9IHJlZjtcbiAgICAgIHRoaXMucHJvcHMuY29udGFpbmVyUmVmKHJlZik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG4gICAgICB2YXIgQ29tcCA9IGNvbXBvbmVudDtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBDb21wLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZSwgY2xhc3NOYW1lOiAnc2Nyb2xsYmFyLWNvbnRhaW5lciAnICsgY2xhc3NOYW1lLCByZWY6IHRoaXMuaGFuZGxlUmVmIH0sXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JvbGxCYXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTY3JvbGxCYXI7XG5cblxuU2Nyb2xsQmFyLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiAnJyxcbiAgc3R5bGU6IHVuZGVmaW5lZCxcbiAgb3B0aW9uOiB1bmRlZmluZWQsXG4gIGNvbnRhaW5lclJlZjogZnVuY3Rpb24gY29udGFpbmVyUmVmKCkge30sXG4gIG9uU2Nyb2xsWTogdW5kZWZpbmVkLFxuICBvblNjcm9sbFg6IHVuZGVmaW5lZCxcbiAgb25TY3JvbGxVcDogdW5kZWZpbmVkLFxuICBvblNjcm9sbERvd246IHVuZGVmaW5lZCxcbiAgb25TY3JvbGxMZWZ0OiB1bmRlZmluZWQsXG4gIG9uU2Nyb2xsUmlnaHQ6IHVuZGVmaW5lZCxcbiAgb25ZUmVhY2hTdGFydDogdW5kZWZpbmVkLFxuICBvbllSZWFjaEVuZDogdW5kZWZpbmVkLFxuICBvblhSZWFjaFN0YXJ0OiB1bmRlZmluZWQsXG4gIG9uWFJlYWNoRW5kOiB1bmRlZmluZWQsXG4gIGNvbXBvbmVudDogJ2Rpdidcbn07XG5cblNjcm9sbEJhci5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLlByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5Qcm9wVHlwZXMuc3RyaW5nLFxuICBzdHlsZTogX3Byb3BUeXBlcy5Qcm9wVHlwZXMub2JqZWN0LFxuICBvcHRpb246IF9wcm9wVHlwZXMuUHJvcFR5cGVzLm9iamVjdCxcbiAgY29udGFpbmVyUmVmOiBfcHJvcFR5cGVzLlByb3BUeXBlcy5mdW5jLFxuICBvblNjcm9sbFk6IF9wcm9wVHlwZXMuUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2Nyb2xsWDogX3Byb3BUeXBlcy5Qcm9wVHlwZXMuZnVuYyxcbiAgb25TY3JvbGxVcDogX3Byb3BUeXBlcy5Qcm9wVHlwZXMuZnVuYyxcbiAgb25TY3JvbGxEb3duOiBfcHJvcFR5cGVzLlByb3BUeXBlcy5mdW5jLFxuICBvblNjcm9sbExlZnQ6IF9wcm9wVHlwZXMuUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2Nyb2xsUmlnaHQ6IF9wcm9wVHlwZXMuUHJvcFR5cGVzLmZ1bmMsXG4gIG9uWVJlYWNoU3RhcnQ6IF9wcm9wVHlwZXMuUHJvcFR5cGVzLmZ1bmMsXG4gIG9uWVJlYWNoRW5kOiBfcHJvcFR5cGVzLlByb3BUeXBlcy5mdW5jLFxuICBvblhSZWFjaFN0YXJ0OiBfcHJvcFR5cGVzLlByb3BUeXBlcy5mdW5jLFxuICBvblhSZWFjaEVuZDogX3Byb3BUeXBlcy5Qcm9wVHlwZXMuZnVuYyxcbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLlByb3BUeXBlcy5zdHJpbmdcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvKiFcbiAqIHBlcmZlY3Qtc2Nyb2xsYmFyIHYxLjQuMFxuICogKGMpIDIwMTggSHl1bmplIEp1blxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gZ2V0KGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIHNldChlbGVtZW50LCBvYmopIHtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIHZhciB2YWwgPSBvYmpba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHZhbCA9IHZhbCArIFwicHhcIjtcbiAgICB9XG4gICAgZWxlbWVudC5zdHlsZVtrZXldID0gdmFsO1xuICB9XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5mdW5jdGlvbiBkaXYoY2xhc3NOYW1lKSB7XG4gIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2LmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgcmV0dXJuIGRpdjtcbn1cblxudmFyIGVsTWF0Y2hlcyA9XG4gIHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAoRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyB8fFxuICAgIEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuICAgIEVsZW1lbnQucHJvdG90eXBlLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuICAgIEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yKTtcblxuZnVuY3Rpb24gbWF0Y2hlcyhlbGVtZW50LCBxdWVyeSkge1xuICBpZiAoIWVsTWF0Y2hlcykge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gZWxlbWVudCBtYXRjaGluZyBtZXRob2Qgc3VwcG9ydGVkJyk7XG4gIH1cblxuICByZXR1cm4gZWxNYXRjaGVzLmNhbGwoZWxlbWVudCwgcXVlcnkpO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5yZW1vdmUpIHtcbiAgICBlbGVtZW50LnJlbW92ZSgpO1xuICB9IGVsc2Uge1xuICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcXVlcnlDaGlsZHJlbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGVsZW1lbnQuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gbWF0Y2hlcyhjaGlsZCwgc2VsZWN0b3IpOyB9XG4gICk7XG59XG5cbnZhciBjbHMgPSB7XG4gIG1haW46ICdwcycsXG4gIGVsZW1lbnQ6IHtcbiAgICB0aHVtYjogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIChcInBzX190aHVtYi1cIiArIHgpOyB9LFxuICAgIHJhaWw6IGZ1bmN0aW9uICh4KSB7IHJldHVybiAoXCJwc19fcmFpbC1cIiArIHgpOyB9LFxuICAgIGNvbnN1bWluZzogJ3BzX19jaGlsZC0tY29uc3VtZScsXG4gIH0sXG4gIHN0YXRlOiB7XG4gICAgZm9jdXM6ICdwcy0tZm9jdXMnLFxuICAgIGNsaWNraW5nOiAncHMtLWNsaWNraW5nJyxcbiAgICBhY3RpdmU6IGZ1bmN0aW9uICh4KSB7IHJldHVybiAoXCJwcy0tYWN0aXZlLVwiICsgeCk7IH0sXG4gICAgc2Nyb2xsaW5nOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gKFwicHMtLXNjcm9sbGluZy1cIiArIHgpOyB9LFxuICB9LFxufTtcblxuLypcbiAqIEhlbHBlciBtZXRob2RzXG4gKi9cbnZhciBzY3JvbGxpbmdDbGFzc1RpbWVvdXQgPSB7IHg6IG51bGwsIHk6IG51bGwgfTtcblxuZnVuY3Rpb24gYWRkU2Nyb2xsaW5nQ2xhc3MoaSwgeCkge1xuICB2YXIgY2xhc3NMaXN0ID0gaS5lbGVtZW50LmNsYXNzTGlzdDtcbiAgdmFyIGNsYXNzTmFtZSA9IGNscy5zdGF0ZS5zY3JvbGxpbmcoeCk7XG5cbiAgaWYgKGNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgY2xlYXJUaW1lb3V0KHNjcm9sbGluZ0NsYXNzVGltZW91dFt4XSk7XG4gIH0gZWxzZSB7XG4gICAgY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVNjcm9sbGluZ0NsYXNzKGksIHgpIHtcbiAgc2Nyb2xsaW5nQ2xhc3NUaW1lb3V0W3hdID0gc2V0VGltZW91dChcbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBpLmlzQWxpdmUgJiYgaS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xzLnN0YXRlLnNjcm9sbGluZyh4KSk7IH0sXG4gICAgaS5zZXR0aW5ncy5zY3JvbGxpbmdUaHJlc2hvbGRcbiAgKTtcbn1cblxuZnVuY3Rpb24gc2V0U2Nyb2xsaW5nQ2xhc3NJbnN0YW50bHkoaSwgeCkge1xuICBhZGRTY3JvbGxpbmdDbGFzcyhpLCB4KTtcbiAgcmVtb3ZlU2Nyb2xsaW5nQ2xhc3MoaSwgeCk7XG59XG5cbnZhciBFdmVudEVsZW1lbnQgPSBmdW5jdGlvbiBFdmVudEVsZW1lbnQoZWxlbWVudCkge1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICB0aGlzLmhhbmRsZXJzID0ge307XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBpc0VtcHR5OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbkV2ZW50RWxlbWVudC5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIGJpbmQgKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICBpZiAodHlwZW9mIHRoaXMuaGFuZGxlcnNbZXZlbnROYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLmhhbmRsZXJzW2V2ZW50TmFtZV0gPSBbXTtcbiAgfVxuICB0aGlzLmhhbmRsZXJzW2V2ZW50TmFtZV0ucHVzaChoYW5kbGVyKTtcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVsZW1lbnQucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCAoZXZlbnROYW1lLCB0YXJnZXQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB0aGlzLmhhbmRsZXJzW2V2ZW50TmFtZV0gPSB0aGlzLmhhbmRsZXJzW2V2ZW50TmFtZV0uZmlsdGVyKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgaWYgKHRhcmdldCAmJiBoYW5kbGVyICE9PSB0YXJnZXQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB0aGlzJDEuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG59O1xuXG5FdmVudEVsZW1lbnQucHJvdG90eXBlLnVuYmluZEFsbCA9IGZ1bmN0aW9uIHVuYmluZEFsbCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzJDEuaGFuZGxlcnMpIHtcbiAgICB0aGlzJDEudW5iaW5kKG5hbWUpO1xuICB9XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuaXNFbXB0eS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuaGFuZGxlcnMpLmV2ZXJ5KFxuICAgIGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHRoaXMkMS5oYW5kbGVyc1trZXldLmxlbmd0aCA9PT0gMDsgfVxuICApO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEV2ZW50RWxlbWVudC5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgRXZlbnRNYW5hZ2VyID0gZnVuY3Rpb24gRXZlbnRNYW5hZ2VyKCkge1xuICB0aGlzLmV2ZW50RWxlbWVudHMgPSBbXTtcbn07XG5cbkV2ZW50TWFuYWdlci5wcm90b3R5cGUuZXZlbnRFbGVtZW50ID0gZnVuY3Rpb24gZXZlbnRFbGVtZW50IChlbGVtZW50KSB7XG4gIHZhciBlZSA9IHRoaXMuZXZlbnRFbGVtZW50cy5maWx0ZXIoZnVuY3Rpb24gKGVlKSB7IHJldHVybiBlZS5lbGVtZW50ID09PSBlbGVtZW50OyB9KVswXTtcbiAgaWYgKCFlZSkge1xuICAgIGVlID0gbmV3IEV2ZW50RWxlbWVudChlbGVtZW50KTtcbiAgICB0aGlzLmV2ZW50RWxlbWVudHMucHVzaChlZSk7XG4gIH1cbiAgcmV0dXJuIGVlO1xufTtcblxuRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCAoZWxlbWVudCwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gIHRoaXMuZXZlbnRFbGVtZW50KGVsZW1lbnQpLmJpbmQoZXZlbnROYW1lLCBoYW5kbGVyKTtcbn07XG5cbkV2ZW50TWFuYWdlci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kIChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgdmFyIGVlID0gdGhpcy5ldmVudEVsZW1lbnQoZWxlbWVudCk7XG4gIGVlLnVuYmluZChldmVudE5hbWUsIGhhbmRsZXIpO1xuXG4gIGlmIChlZS5pc0VtcHR5KSB7XG4gICAgLy8gcmVtb3ZlXG4gICAgdGhpcy5ldmVudEVsZW1lbnRzLnNwbGljZSh0aGlzLmV2ZW50RWxlbWVudHMuaW5kZXhPZihlZSksIDEpO1xuICB9XG59O1xuXG5FdmVudE1hbmFnZXIucHJvdG90eXBlLnVuYmluZEFsbCA9IGZ1bmN0aW9uIHVuYmluZEFsbCAoKSB7XG4gIHRoaXMuZXZlbnRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnVuYmluZEFsbCgpOyB9KTtcbiAgdGhpcy5ldmVudEVsZW1lbnRzID0gW107XG59O1xuXG5FdmVudE1hbmFnZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlIChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgdmFyIGVlID0gdGhpcy5ldmVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciBvbmNlSGFuZGxlciA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICBlZS51bmJpbmQoZXZlbnROYW1lLCBvbmNlSGFuZGxlcik7XG4gICAgaGFuZGxlcihldnQpO1xuICB9O1xuICBlZS5iaW5kKGV2ZW50TmFtZSwgb25jZUhhbmRsZXIpO1xufTtcblxuZnVuY3Rpb24gY3JlYXRlRXZlbnQobmFtZSkge1xuICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBuZXcgQ3VzdG9tRXZlbnQobmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQobmFtZSwgZmFsc2UsIGZhbHNlLCB1bmRlZmluZWQpO1xuICAgIHJldHVybiBldnQ7XG4gIH1cbn1cblxudmFyIHByb2Nlc3NTY3JvbGxEaWZmID0gZnVuY3Rpb24oXG4gIGksXG4gIGF4aXMsXG4gIGRpZmYsXG4gIHVzZVNjcm9sbGluZ0NsYXNzLFxuICBmb3JjZUZpcmVSZWFjaEV2ZW50XG4pIHtcbiAgaWYgKCB1c2VTY3JvbGxpbmdDbGFzcyA9PT0gdm9pZCAwICkgdXNlU2Nyb2xsaW5nQ2xhc3MgPSB0cnVlO1xuICBpZiAoIGZvcmNlRmlyZVJlYWNoRXZlbnQgPT09IHZvaWQgMCApIGZvcmNlRmlyZVJlYWNoRXZlbnQgPSBmYWxzZTtcblxuICB2YXIgZmllbGRzO1xuICBpZiAoYXhpcyA9PT0gJ3RvcCcpIHtcbiAgICBmaWVsZHMgPSBbXG4gICAgICAnY29udGVudEhlaWdodCcsXG4gICAgICAnY29udGFpbmVySGVpZ2h0JyxcbiAgICAgICdzY3JvbGxUb3AnLFxuICAgICAgJ3knLFxuICAgICAgJ3VwJyxcbiAgICAgICdkb3duJyBdO1xuICB9IGVsc2UgaWYgKGF4aXMgPT09ICdsZWZ0Jykge1xuICAgIGZpZWxkcyA9IFtcbiAgICAgICdjb250ZW50V2lkdGgnLFxuICAgICAgJ2NvbnRhaW5lcldpZHRoJyxcbiAgICAgICdzY3JvbGxMZWZ0JyxcbiAgICAgICd4JyxcbiAgICAgICdsZWZ0JyxcbiAgICAgICdyaWdodCcgXTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgcHJvcGVyIGF4aXMgc2hvdWxkIGJlIHByb3ZpZGVkJyk7XG4gIH1cblxuICBwcm9jZXNzU2Nyb2xsRGlmZiQxKGksIGRpZmYsIGZpZWxkcywgdXNlU2Nyb2xsaW5nQ2xhc3MsIGZvcmNlRmlyZVJlYWNoRXZlbnQpO1xufTtcblxuZnVuY3Rpb24gcHJvY2Vzc1Njcm9sbERpZmYkMShcbiAgaSxcbiAgZGlmZixcbiAgcmVmLFxuICB1c2VTY3JvbGxpbmdDbGFzcyxcbiAgZm9yY2VGaXJlUmVhY2hFdmVudFxuKSB7XG4gIHZhciBjb250ZW50SGVpZ2h0ID0gcmVmWzBdO1xuICB2YXIgY29udGFpbmVySGVpZ2h0ID0gcmVmWzFdO1xuICB2YXIgc2Nyb2xsVG9wID0gcmVmWzJdO1xuICB2YXIgeSA9IHJlZlszXTtcbiAgdmFyIHVwID0gcmVmWzRdO1xuICB2YXIgZG93biA9IHJlZls1XTtcbiAgaWYgKCB1c2VTY3JvbGxpbmdDbGFzcyA9PT0gdm9pZCAwICkgdXNlU2Nyb2xsaW5nQ2xhc3MgPSB0cnVlO1xuICBpZiAoIGZvcmNlRmlyZVJlYWNoRXZlbnQgPT09IHZvaWQgMCApIGZvcmNlRmlyZVJlYWNoRXZlbnQgPSBmYWxzZTtcblxuICB2YXIgZWxlbWVudCA9IGkuZWxlbWVudDtcblxuICAvLyByZXNldCByZWFjaFxuICBpLnJlYWNoW3ldID0gbnVsbDtcblxuICAvLyAxIGZvciBzdWJwaXhlbCByb3VuZGluZ1xuICBpZiAoZWxlbWVudFtzY3JvbGxUb3BdIDwgMSkge1xuICAgIGkucmVhY2hbeV0gPSAnc3RhcnQnO1xuICB9XG5cbiAgLy8gMSBmb3Igc3VicGl4ZWwgcm91bmRpbmdcbiAgaWYgKGVsZW1lbnRbc2Nyb2xsVG9wXSA+IGlbY29udGVudEhlaWdodF0gLSBpW2NvbnRhaW5lckhlaWdodF0gLSAxKSB7XG4gICAgaS5yZWFjaFt5XSA9ICdlbmQnO1xuICB9XG5cbiAgaWYgKGRpZmYpIHtcbiAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoKFwicHMtc2Nyb2xsLVwiICsgeSkpKTtcblxuICAgIGlmIChkaWZmIDwgMCkge1xuICAgICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUV2ZW50KChcInBzLXNjcm9sbC1cIiArIHVwKSkpO1xuICAgIH0gZWxzZSBpZiAoZGlmZiA+IDApIHtcbiAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudCgoXCJwcy1zY3JvbGwtXCIgKyBkb3duKSkpO1xuICAgIH1cblxuICAgIGlmICh1c2VTY3JvbGxpbmdDbGFzcykge1xuICAgICAgc2V0U2Nyb2xsaW5nQ2xhc3NJbnN0YW50bHkoaSwgeSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGkucmVhY2hbeV0gJiYgKGRpZmYgfHwgZm9yY2VGaXJlUmVhY2hFdmVudCkpIHtcbiAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoKFwicHMtXCIgKyB5ICsgXCItcmVhY2gtXCIgKyAoaS5yZWFjaFt5XSkpKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9JbnQoeCkge1xuICByZXR1cm4gcGFyc2VJbnQoeCwgMTApIHx8IDA7XG59XG5cbmZ1bmN0aW9uIGlzRWRpdGFibGUoZWwpIHtcbiAgcmV0dXJuIChcbiAgICBtYXRjaGVzKGVsLCAnaW5wdXQsW2NvbnRlbnRlZGl0YWJsZV0nKSB8fFxuICAgIG1hdGNoZXMoZWwsICdzZWxlY3QsW2NvbnRlbnRlZGl0YWJsZV0nKSB8fFxuICAgIG1hdGNoZXMoZWwsICd0ZXh0YXJlYSxbY29udGVudGVkaXRhYmxlXScpIHx8XG4gICAgbWF0Y2hlcyhlbCwgJ2J1dHRvbixbY29udGVudGVkaXRhYmxlXScpXG4gICk7XG59XG5cbmZ1bmN0aW9uIG91dGVyV2lkdGgoZWxlbWVudCkge1xuICB2YXIgc3R5bGVzID0gZ2V0KGVsZW1lbnQpO1xuICByZXR1cm4gKFxuICAgIHRvSW50KHN0eWxlcy53aWR0aCkgK1xuICAgIHRvSW50KHN0eWxlcy5wYWRkaW5nTGVmdCkgK1xuICAgIHRvSW50KHN0eWxlcy5wYWRkaW5nUmlnaHQpICtcbiAgICB0b0ludChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoKSArXG4gICAgdG9JbnQoc3R5bGVzLmJvcmRlclJpZ2h0V2lkdGgpXG4gICk7XG59XG5cbnZhciBlbnYgPSB7XG4gIGlzV2ViS2l0OlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAnV2Via2l0QXBwZWFyYW5jZScgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLFxuICBzdXBwb3J0c1RvdWNoOlxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fFxuICAgICAgKHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpKSxcbiAgc3VwcG9ydHNJZVBvaW50ZXI6XG4gICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMsXG4gIGlzQ2hyb21lOlxuICAgIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgL0Nocm9tZS9pLnRlc3QobmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQpLFxufTtcblxudmFyIHVwZGF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oaSkge1xuICB2YXIgZWxlbWVudCA9IGkuZWxlbWVudDtcbiAgdmFyIHJvdW5kZWRTY3JvbGxUb3AgPSBNYXRoLmZsb29yKGVsZW1lbnQuc2Nyb2xsVG9wKTtcblxuICBpLmNvbnRhaW5lcldpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgaS5jb250YWluZXJIZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgaS5jb250ZW50V2lkdGggPSBlbGVtZW50LnNjcm9sbFdpZHRoO1xuICBpLmNvbnRlbnRIZWlnaHQgPSBlbGVtZW50LnNjcm9sbEhlaWdodDtcblxuICBpZiAoIWVsZW1lbnQuY29udGFpbnMoaS5zY3JvbGxiYXJYUmFpbCkpIHtcbiAgICAvLyBjbGVhbiB1cCBhbmQgYXBwZW5kXG4gICAgcXVlcnlDaGlsZHJlbihlbGVtZW50LCBjbHMuZWxlbWVudC5yYWlsKCd4JykpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiByZW1vdmUoZWwpOyB9XG4gICAgKTtcbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKGkuc2Nyb2xsYmFyWFJhaWwpO1xuICB9XG4gIGlmICghZWxlbWVudC5jb250YWlucyhpLnNjcm9sbGJhcllSYWlsKSkge1xuICAgIC8vIGNsZWFuIHVwIGFuZCBhcHBlbmRcbiAgICBxdWVyeUNoaWxkcmVuKGVsZW1lbnQsIGNscy5lbGVtZW50LnJhaWwoJ3knKSkuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHJlbW92ZShlbCk7IH1cbiAgICApO1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoaS5zY3JvbGxiYXJZUmFpbCk7XG4gIH1cblxuICBpZiAoXG4gICAgIWkuc2V0dGluZ3Muc3VwcHJlc3NTY3JvbGxYICYmXG4gICAgaS5jb250YWluZXJXaWR0aCArIGkuc2V0dGluZ3Muc2Nyb2xsWE1hcmdpbk9mZnNldCA8IGkuY29udGVudFdpZHRoXG4gICkge1xuICAgIGkuc2Nyb2xsYmFyWEFjdGl2ZSA9IHRydWU7XG4gICAgaS5yYWlsWFdpZHRoID0gaS5jb250YWluZXJXaWR0aCAtIGkucmFpbFhNYXJnaW5XaWR0aDtcbiAgICBpLnJhaWxYUmF0aW8gPSBpLmNvbnRhaW5lcldpZHRoIC8gaS5yYWlsWFdpZHRoO1xuICAgIGkuc2Nyb2xsYmFyWFdpZHRoID0gZ2V0VGh1bWJTaXplKFxuICAgICAgaSxcbiAgICAgIHRvSW50KGkucmFpbFhXaWR0aCAqIGkuY29udGFpbmVyV2lkdGggLyBpLmNvbnRlbnRXaWR0aClcbiAgICApO1xuICAgIGkuc2Nyb2xsYmFyWExlZnQgPSB0b0ludChcbiAgICAgIChpLm5lZ2F0aXZlU2Nyb2xsQWRqdXN0bWVudCArIGVsZW1lbnQuc2Nyb2xsTGVmdCkgKlxuICAgICAgICAoaS5yYWlsWFdpZHRoIC0gaS5zY3JvbGxiYXJYV2lkdGgpIC9cbiAgICAgICAgKGkuY29udGVudFdpZHRoIC0gaS5jb250YWluZXJXaWR0aClcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGkuc2Nyb2xsYmFyWEFjdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKFxuICAgICFpLnNldHRpbmdzLnN1cHByZXNzU2Nyb2xsWSAmJlxuICAgIGkuY29udGFpbmVySGVpZ2h0ICsgaS5zZXR0aW5ncy5zY3JvbGxZTWFyZ2luT2Zmc2V0IDwgaS5jb250ZW50SGVpZ2h0XG4gICkge1xuICAgIGkuc2Nyb2xsYmFyWUFjdGl2ZSA9IHRydWU7XG4gICAgaS5yYWlsWUhlaWdodCA9IGkuY29udGFpbmVySGVpZ2h0IC0gaS5yYWlsWU1hcmdpbkhlaWdodDtcbiAgICBpLnJhaWxZUmF0aW8gPSBpLmNvbnRhaW5lckhlaWdodCAvIGkucmFpbFlIZWlnaHQ7XG4gICAgaS5zY3JvbGxiYXJZSGVpZ2h0ID0gZ2V0VGh1bWJTaXplKFxuICAgICAgaSxcbiAgICAgIHRvSW50KGkucmFpbFlIZWlnaHQgKiBpLmNvbnRhaW5lckhlaWdodCAvIGkuY29udGVudEhlaWdodClcbiAgICApO1xuICAgIGkuc2Nyb2xsYmFyWVRvcCA9IHRvSW50KFxuICAgICAgcm91bmRlZFNjcm9sbFRvcCAqXG4gICAgICAgIChpLnJhaWxZSGVpZ2h0IC0gaS5zY3JvbGxiYXJZSGVpZ2h0KSAvXG4gICAgICAgIChpLmNvbnRlbnRIZWlnaHQgLSBpLmNvbnRhaW5lckhlaWdodClcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGkuc2Nyb2xsYmFyWUFjdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGkuc2Nyb2xsYmFyWExlZnQgPj0gaS5yYWlsWFdpZHRoIC0gaS5zY3JvbGxiYXJYV2lkdGgpIHtcbiAgICBpLnNjcm9sbGJhclhMZWZ0ID0gaS5yYWlsWFdpZHRoIC0gaS5zY3JvbGxiYXJYV2lkdGg7XG4gIH1cbiAgaWYgKGkuc2Nyb2xsYmFyWVRvcCA+PSBpLnJhaWxZSGVpZ2h0IC0gaS5zY3JvbGxiYXJZSGVpZ2h0KSB7XG4gICAgaS5zY3JvbGxiYXJZVG9wID0gaS5yYWlsWUhlaWdodCAtIGkuc2Nyb2xsYmFyWUhlaWdodDtcbiAgfVxuXG4gIHVwZGF0ZUNzcyhlbGVtZW50LCBpKTtcblxuICBpZiAoaS5zY3JvbGxiYXJYQWN0aXZlKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNscy5zdGF0ZS5hY3RpdmUoJ3gnKSk7XG4gIH0gZWxzZSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNscy5zdGF0ZS5hY3RpdmUoJ3gnKSk7XG4gICAgaS5zY3JvbGxiYXJYV2lkdGggPSAwO1xuICAgIGkuc2Nyb2xsYmFyWExlZnQgPSAwO1xuICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IDA7XG4gIH1cbiAgaWYgKGkuc2Nyb2xsYmFyWUFjdGl2ZSkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbHMuc3RhdGUuYWN0aXZlKCd5JykpO1xuICB9IGVsc2Uge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbHMuc3RhdGUuYWN0aXZlKCd5JykpO1xuICAgIGkuc2Nyb2xsYmFyWUhlaWdodCA9IDA7XG4gICAgaS5zY3JvbGxiYXJZVG9wID0gMDtcbiAgICBlbGVtZW50LnNjcm9sbFRvcCA9IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldFRodW1iU2l6ZShpLCB0aHVtYlNpemUpIHtcbiAgaWYgKGkuc2V0dGluZ3MubWluU2Nyb2xsYmFyTGVuZ3RoKSB7XG4gICAgdGh1bWJTaXplID0gTWF0aC5tYXgodGh1bWJTaXplLCBpLnNldHRpbmdzLm1pblNjcm9sbGJhckxlbmd0aCk7XG4gIH1cbiAgaWYgKGkuc2V0dGluZ3MubWF4U2Nyb2xsYmFyTGVuZ3RoKSB7XG4gICAgdGh1bWJTaXplID0gTWF0aC5taW4odGh1bWJTaXplLCBpLnNldHRpbmdzLm1heFNjcm9sbGJhckxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIHRodW1iU2l6ZTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ3NzKGVsZW1lbnQsIGkpIHtcbiAgdmFyIHhSYWlsT2Zmc2V0ID0geyB3aWR0aDogaS5yYWlsWFdpZHRoIH07XG4gIHZhciByb3VuZGVkU2Nyb2xsVG9wID0gTWF0aC5mbG9vcihlbGVtZW50LnNjcm9sbFRvcCk7XG5cbiAgaWYgKGkuaXNSdGwpIHtcbiAgICB4UmFpbE9mZnNldC5sZWZ0ID1cbiAgICAgIGkubmVnYXRpdmVTY3JvbGxBZGp1c3RtZW50ICtcbiAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCArXG4gICAgICBpLmNvbnRhaW5lcldpZHRoIC1cbiAgICAgIGkuY29udGVudFdpZHRoO1xuICB9IGVsc2Uge1xuICAgIHhSYWlsT2Zmc2V0LmxlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7XG4gIH1cbiAgaWYgKGkuaXNTY3JvbGxiYXJYVXNpbmdCb3R0b20pIHtcbiAgICB4UmFpbE9mZnNldC5ib3R0b20gPSBpLnNjcm9sbGJhclhCb3R0b20gLSByb3VuZGVkU2Nyb2xsVG9wO1xuICB9IGVsc2Uge1xuICAgIHhSYWlsT2Zmc2V0LnRvcCA9IGkuc2Nyb2xsYmFyWFRvcCArIHJvdW5kZWRTY3JvbGxUb3A7XG4gIH1cbiAgc2V0KGkuc2Nyb2xsYmFyWFJhaWwsIHhSYWlsT2Zmc2V0KTtcblxuICB2YXIgeVJhaWxPZmZzZXQgPSB7IHRvcDogcm91bmRlZFNjcm9sbFRvcCwgaGVpZ2h0OiBpLnJhaWxZSGVpZ2h0IH07XG4gIGlmIChpLmlzU2Nyb2xsYmFyWVVzaW5nUmlnaHQpIHtcbiAgICBpZiAoaS5pc1J0bCkge1xuICAgICAgeVJhaWxPZmZzZXQucmlnaHQgPVxuICAgICAgICBpLmNvbnRlbnRXaWR0aCAtXG4gICAgICAgIChpLm5lZ2F0aXZlU2Nyb2xsQWRqdXN0bWVudCArIGVsZW1lbnQuc2Nyb2xsTGVmdCkgLVxuICAgICAgICBpLnNjcm9sbGJhcllSaWdodCAtXG4gICAgICAgIGkuc2Nyb2xsYmFyWU91dGVyV2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHlSYWlsT2Zmc2V0LnJpZ2h0ID0gaS5zY3JvbGxiYXJZUmlnaHQgLSBlbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpLmlzUnRsKSB7XG4gICAgICB5UmFpbE9mZnNldC5sZWZ0ID1cbiAgICAgICAgaS5uZWdhdGl2ZVNjcm9sbEFkanVzdG1lbnQgK1xuICAgICAgICBlbGVtZW50LnNjcm9sbExlZnQgK1xuICAgICAgICBpLmNvbnRhaW5lcldpZHRoICogMiAtXG4gICAgICAgIGkuY29udGVudFdpZHRoIC1cbiAgICAgICAgaS5zY3JvbGxiYXJZTGVmdCAtXG4gICAgICAgIGkuc2Nyb2xsYmFyWU91dGVyV2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHlSYWlsT2Zmc2V0LmxlZnQgPSBpLnNjcm9sbGJhcllMZWZ0ICsgZWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgIH1cbiAgfVxuICBzZXQoaS5zY3JvbGxiYXJZUmFpbCwgeVJhaWxPZmZzZXQpO1xuXG4gIHNldChpLnNjcm9sbGJhclgsIHtcbiAgICBsZWZ0OiBpLnNjcm9sbGJhclhMZWZ0LFxuICAgIHdpZHRoOiBpLnNjcm9sbGJhclhXaWR0aCAtIGkucmFpbEJvcmRlclhXaWR0aCxcbiAgfSk7XG4gIHNldChpLnNjcm9sbGJhclksIHtcbiAgICB0b3A6IGkuc2Nyb2xsYmFyWVRvcCxcbiAgICBoZWlnaHQ6IGkuc2Nyb2xsYmFyWUhlaWdodCAtIGkucmFpbEJvcmRlcllXaWR0aCxcbiAgfSk7XG59XG5cbnZhciBjbGlja1JhaWwgPSBmdW5jdGlvbihpKSB7XG4gIGkuZXZlbnQuYmluZChpLnNjcm9sbGJhclksICdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5zdG9wUHJvcGFnYXRpb24oKTsgfSk7XG4gIGkuZXZlbnQuYmluZChpLnNjcm9sbGJhcllSYWlsLCAnbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgcG9zaXRpb25Ub3AgPVxuICAgICAgZS5wYWdlWSAtXG4gICAgICB3aW5kb3cucGFnZVlPZmZzZXQgLVxuICAgICAgaS5zY3JvbGxiYXJZUmFpbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgdmFyIGRpcmVjdGlvbiA9IHBvc2l0aW9uVG9wID4gaS5zY3JvbGxiYXJZVG9wID8gMSA6IC0xO1xuXG4gICAgaS5lbGVtZW50LnNjcm9sbFRvcCArPSBkaXJlY3Rpb24gKiBpLmNvbnRhaW5lckhlaWdodDtcbiAgICB1cGRhdGVHZW9tZXRyeShpKTtcblxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0pO1xuXG4gIGkuZXZlbnQuYmluZChpLnNjcm9sbGJhclgsICdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5zdG9wUHJvcGFnYXRpb24oKTsgfSk7XG4gIGkuZXZlbnQuYmluZChpLnNjcm9sbGJhclhSYWlsLCAnbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgcG9zaXRpb25MZWZ0ID1cbiAgICAgIGUucGFnZVggLVxuICAgICAgd2luZG93LnBhZ2VYT2Zmc2V0IC1cbiAgICAgIGkuc2Nyb2xsYmFyWFJhaWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICB2YXIgZGlyZWN0aW9uID0gcG9zaXRpb25MZWZ0ID4gaS5zY3JvbGxiYXJYTGVmdCA/IDEgOiAtMTtcblxuICAgIGkuZWxlbWVudC5zY3JvbGxMZWZ0ICs9IGRpcmVjdGlvbiAqIGkuY29udGFpbmVyV2lkdGg7XG4gICAgdXBkYXRlR2VvbWV0cnkoaSk7XG5cbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9KTtcbn07XG5cbnZhciBkcmFnVGh1bWIgPSBmdW5jdGlvbihpKSB7XG4gIGJpbmRNb3VzZVNjcm9sbEhhbmRsZXIoaSwgW1xuICAgICdjb250YWluZXJXaWR0aCcsXG4gICAgJ2NvbnRlbnRXaWR0aCcsXG4gICAgJ3BhZ2VYJyxcbiAgICAncmFpbFhXaWR0aCcsXG4gICAgJ3Njcm9sbGJhclgnLFxuICAgICdzY3JvbGxiYXJYV2lkdGgnLFxuICAgICdzY3JvbGxMZWZ0JyxcbiAgICAneCcsXG4gICAgJ3Njcm9sbGJhclhSYWlsJyBdKTtcbiAgYmluZE1vdXNlU2Nyb2xsSGFuZGxlcihpLCBbXG4gICAgJ2NvbnRhaW5lckhlaWdodCcsXG4gICAgJ2NvbnRlbnRIZWlnaHQnLFxuICAgICdwYWdlWScsXG4gICAgJ3JhaWxZSGVpZ2h0JyxcbiAgICAnc2Nyb2xsYmFyWScsXG4gICAgJ3Njcm9sbGJhcllIZWlnaHQnLFxuICAgICdzY3JvbGxUb3AnLFxuICAgICd5JyxcbiAgICAnc2Nyb2xsYmFyWVJhaWwnIF0pO1xufTtcblxuZnVuY3Rpb24gYmluZE1vdXNlU2Nyb2xsSGFuZGxlcihcbiAgaSxcbiAgcmVmXG4pIHtcbiAgdmFyIGNvbnRhaW5lckhlaWdodCA9IHJlZlswXTtcbiAgdmFyIGNvbnRlbnRIZWlnaHQgPSByZWZbMV07XG4gIHZhciBwYWdlWSA9IHJlZlsyXTtcbiAgdmFyIHJhaWxZSGVpZ2h0ID0gcmVmWzNdO1xuICB2YXIgc2Nyb2xsYmFyWSA9IHJlZls0XTtcbiAgdmFyIHNjcm9sbGJhcllIZWlnaHQgPSByZWZbNV07XG4gIHZhciBzY3JvbGxUb3AgPSByZWZbNl07XG4gIHZhciB5ID0gcmVmWzddO1xuICB2YXIgc2Nyb2xsYmFyWVJhaWwgPSByZWZbOF07XG5cbiAgdmFyIGVsZW1lbnQgPSBpLmVsZW1lbnQ7XG5cbiAgdmFyIHN0YXJ0aW5nU2Nyb2xsVG9wID0gbnVsbDtcbiAgdmFyIHN0YXJ0aW5nTW91c2VQYWdlWSA9IG51bGw7XG4gIHZhciBzY3JvbGxCeSA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbW91c2VNb3ZlSGFuZGxlcihlKSB7XG4gICAgZWxlbWVudFtzY3JvbGxUb3BdID1cbiAgICAgIHN0YXJ0aW5nU2Nyb2xsVG9wICsgc2Nyb2xsQnkgKiAoZVtwYWdlWV0gLSBzdGFydGluZ01vdXNlUGFnZVkpO1xuICAgIGFkZFNjcm9sbGluZ0NsYXNzKGksIHkpO1xuICAgIHVwZGF0ZUdlb21ldHJ5KGkpO1xuXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZVVwSGFuZGxlcigpIHtcbiAgICByZW1vdmVTY3JvbGxpbmdDbGFzcyhpLCB5KTtcbiAgICBpW3Njcm9sbGJhcllSYWlsXS5jbGFzc0xpc3QucmVtb3ZlKGNscy5zdGF0ZS5jbGlja2luZyk7XG4gICAgaS5ldmVudC51bmJpbmQoaS5vd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgbW91c2VNb3ZlSGFuZGxlcik7XG4gIH1cblxuICBpLmV2ZW50LmJpbmQoaVtzY3JvbGxiYXJZXSwgJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgc3RhcnRpbmdTY3JvbGxUb3AgPSBlbGVtZW50W3Njcm9sbFRvcF07XG4gICAgc3RhcnRpbmdNb3VzZVBhZ2VZID0gZVtwYWdlWV07XG4gICAgc2Nyb2xsQnkgPVxuICAgICAgKGlbY29udGVudEhlaWdodF0gLSBpW2NvbnRhaW5lckhlaWdodF0pIC9cbiAgICAgIChpW3JhaWxZSGVpZ2h0XSAtIGlbc2Nyb2xsYmFyWUhlaWdodF0pO1xuXG4gICAgaS5ldmVudC5iaW5kKGkub3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScsIG1vdXNlTW92ZUhhbmRsZXIpO1xuICAgIGkuZXZlbnQub25jZShpLm93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgbW91c2VVcEhhbmRsZXIpO1xuXG4gICAgaVtzY3JvbGxiYXJZUmFpbF0uY2xhc3NMaXN0LmFkZChjbHMuc3RhdGUuY2xpY2tpbmcpO1xuXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH0pO1xufVxuXG52YXIga2V5Ym9hcmQgPSBmdW5jdGlvbihpKSB7XG4gIHZhciBlbGVtZW50ID0gaS5lbGVtZW50O1xuXG4gIHZhciBlbGVtZW50SG92ZXJlZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hdGNoZXMoZWxlbWVudCwgJzpob3ZlcicpOyB9O1xuICB2YXIgc2Nyb2xsYmFyRm9jdXNlZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hdGNoZXMoaS5zY3JvbGxiYXJYLCAnOmZvY3VzJykgfHwgbWF0Y2hlcyhpLnNjcm9sbGJhclksICc6Zm9jdXMnKTsgfTtcblxuICBmdW5jdGlvbiBzaG91bGRQcmV2ZW50RGVmYXVsdChkZWx0YVgsIGRlbHRhWSkge1xuICAgIHZhciBzY3JvbGxUb3AgPSBNYXRoLmZsb29yKGVsZW1lbnQuc2Nyb2xsVG9wKTtcbiAgICBpZiAoZGVsdGFYID09PSAwKSB7XG4gICAgICBpZiAoIWkuc2Nyb2xsYmFyWUFjdGl2ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIChzY3JvbGxUb3AgPT09IDAgJiYgZGVsdGFZID4gMCkgfHxcbiAgICAgICAgKHNjcm9sbFRvcCA+PSBpLmNvbnRlbnRIZWlnaHQgLSBpLmNvbnRhaW5lckhlaWdodCAmJiBkZWx0YVkgPCAwKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiAhaS5zZXR0aW5ncy53aGVlbFByb3BhZ2F0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzY3JvbGxMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgIGlmIChkZWx0YVkgPT09IDApIHtcbiAgICAgIGlmICghaS5zY3JvbGxiYXJYQWN0aXZlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgKHNjcm9sbExlZnQgPT09IDAgJiYgZGVsdGFYIDwgMCkgfHxcbiAgICAgICAgKHNjcm9sbExlZnQgPj0gaS5jb250ZW50V2lkdGggLSBpLmNvbnRhaW5lcldpZHRoICYmIGRlbHRhWCA+IDApXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuICFpLnNldHRpbmdzLndoZWVsUHJvcGFnYXRpb247XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaS5ldmVudC5iaW5kKGkub3duZXJEb2N1bWVudCwgJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChcbiAgICAgIChlLmlzRGVmYXVsdFByZXZlbnRlZCAmJiBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB8fFxuICAgICAgZS5kZWZhdWx0UHJldmVudGVkXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFlbGVtZW50SG92ZXJlZCgpICYmICFzY3JvbGxiYXJGb2N1c2VkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgID8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICAgICAgOiBpLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoYWN0aXZlRWxlbWVudCkge1xuICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQudGFnTmFtZSA9PT0gJ0lGUkFNRScpIHtcbiAgICAgICAgYWN0aXZlRWxlbWVudCA9IGFjdGl2ZUVsZW1lbnQuY29udGVudERvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnbyBkZWVwZXIgaWYgZWxlbWVudCBpcyBhIHdlYmNvbXBvbmVudFxuICAgICAgICB3aGlsZSAoYWN0aXZlRWxlbWVudC5zaGFkb3dSb290KSB7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudCA9IGFjdGl2ZUVsZW1lbnQuc2hhZG93Um9vdC5hY3RpdmVFbGVtZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNFZGl0YWJsZShhY3RpdmVFbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlbHRhWCA9IDA7XG4gICAgdmFyIGRlbHRhWSA9IDA7XG5cbiAgICBzd2l0Y2ggKGUud2hpY2gpIHtcbiAgICAgIGNhc2UgMzc6IC8vIGxlZnRcbiAgICAgICAgaWYgKGUubWV0YUtleSkge1xuICAgICAgICAgIGRlbHRhWCA9IC1pLmNvbnRlbnRXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChlLmFsdEtleSkge1xuICAgICAgICAgIGRlbHRhWCA9IC1pLmNvbnRhaW5lcldpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbHRhWCA9IC0zMDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzg6IC8vIHVwXG4gICAgICAgIGlmIChlLm1ldGFLZXkpIHtcbiAgICAgICAgICBkZWx0YVkgPSBpLmNvbnRlbnRIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5hbHRLZXkpIHtcbiAgICAgICAgICBkZWx0YVkgPSBpLmNvbnRhaW5lckhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWx0YVkgPSAzMDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzk6IC8vIHJpZ2h0XG4gICAgICAgIGlmIChlLm1ldGFLZXkpIHtcbiAgICAgICAgICBkZWx0YVggPSBpLmNvbnRlbnRXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChlLmFsdEtleSkge1xuICAgICAgICAgIGRlbHRhWCA9IGkuY29udGFpbmVyV2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsdGFYID0gMzA7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQwOiAvLyBkb3duXG4gICAgICAgIGlmIChlLm1ldGFLZXkpIHtcbiAgICAgICAgICBkZWx0YVkgPSAtaS5jb250ZW50SGVpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKGUuYWx0S2V5KSB7XG4gICAgICAgICAgZGVsdGFZID0gLWkuY29udGFpbmVySGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbHRhWSA9IC0zMDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzI6IC8vIHNwYWNlIGJhclxuICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgIGRlbHRhWSA9IGkuY29udGFpbmVySGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbHRhWSA9IC1pLmNvbnRhaW5lckhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzM6IC8vIHBhZ2UgdXBcbiAgICAgICAgZGVsdGFZID0gaS5jb250YWluZXJIZWlnaHQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzNDogLy8gcGFnZSBkb3duXG4gICAgICAgIGRlbHRhWSA9IC1pLmNvbnRhaW5lckhlaWdodDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM2OiAvLyBob21lXG4gICAgICAgIGRlbHRhWSA9IGkuY29udGVudEhlaWdodDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM1OiAvLyBlbmRcbiAgICAgICAgZGVsdGFZID0gLWkuY29udGVudEhlaWdodDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGkuc2V0dGluZ3Muc3VwcHJlc3NTY3JvbGxYICYmIGRlbHRhWCAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaS5zZXR0aW5ncy5zdXBwcmVzc1Njcm9sbFkgJiYgZGVsdGFZICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZWxlbWVudC5zY3JvbGxUb3AgLT0gZGVsdGFZO1xuICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCArPSBkZWx0YVg7XG4gICAgdXBkYXRlR2VvbWV0cnkoaSk7XG5cbiAgICBpZiAoc2hvdWxkUHJldmVudERlZmF1bHQoZGVsdGFYLCBkZWx0YVkpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciB3aGVlbCA9IGZ1bmN0aW9uKGkpIHtcbiAgdmFyIGVsZW1lbnQgPSBpLmVsZW1lbnQ7XG5cbiAgZnVuY3Rpb24gc2hvdWxkUHJldmVudERlZmF1bHQoZGVsdGFYLCBkZWx0YVkpIHtcbiAgICB2YXIgcm91bmRlZFNjcm9sbFRvcCA9IE1hdGguZmxvb3IoZWxlbWVudC5zY3JvbGxUb3ApO1xuICAgIHZhciBpc1RvcCA9IGVsZW1lbnQuc2Nyb2xsVG9wID09PSAwO1xuICAgIHZhciBpc0JvdHRvbSA9XG4gICAgICByb3VuZGVkU2Nyb2xsVG9wICsgZWxlbWVudC5vZmZzZXRIZWlnaHQgPT09IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgIHZhciBpc0xlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQgPT09IDA7XG4gICAgdmFyIGlzUmlnaHQgPVxuICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ICsgZWxlbWVudC5vZmZzZXRXaWR0aCA9PT0gZWxlbWVudC5zY3JvbGxXaWR0aDtcblxuICAgIHZhciBoaXRzQm91bmQ7XG5cbiAgICAvLyBwaWNrIGF4aXMgd2l0aCBwcmltYXJ5IGRpcmVjdGlvblxuICAgIGlmIChNYXRoLmFicyhkZWx0YVkpID4gTWF0aC5hYnMoZGVsdGFYKSkge1xuICAgICAgaGl0c0JvdW5kID0gaXNUb3AgfHwgaXNCb3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpdHNCb3VuZCA9IGlzTGVmdCB8fCBpc1JpZ2h0O1xuICAgIH1cblxuICAgIHJldHVybiBoaXRzQm91bmQgPyAhaS5zZXR0aW5ncy53aGVlbFByb3BhZ2F0aW9uIDogdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERlbHRhRnJvbUV2ZW50KGUpIHtcbiAgICB2YXIgZGVsdGFYID0gZS5kZWx0YVg7XG4gICAgdmFyIGRlbHRhWSA9IC0xICogZS5kZWx0YVk7XG5cbiAgICBpZiAodHlwZW9mIGRlbHRhWCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGRlbHRhWSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIE9TIFggU2FmYXJpXG4gICAgICBkZWx0YVggPSAtMSAqIGUud2hlZWxEZWx0YVggLyA2O1xuICAgICAgZGVsdGFZID0gZS53aGVlbERlbHRhWSAvIDY7XG4gICAgfVxuXG4gICAgaWYgKGUuZGVsdGFNb2RlICYmIGUuZGVsdGFNb2RlID09PSAxKSB7XG4gICAgICAvLyBGaXJlZm94IGluIGRlbHRhTW9kZSAxOiBMaW5lIHNjcm9sbGluZ1xuICAgICAgZGVsdGFYICo9IDEwO1xuICAgICAgZGVsdGFZICo9IDEwO1xuICAgIH1cblxuICAgIGlmIChkZWx0YVggIT09IGRlbHRhWCAmJiBkZWx0YVkgIT09IGRlbHRhWSAvKiBOYU4gY2hlY2tzICovKSB7XG4gICAgICAvLyBJRSBpbiBzb21lIG1vdXNlIGRyaXZlcnNcbiAgICAgIGRlbHRhWCA9IDA7XG4gICAgICBkZWx0YVkgPSBlLndoZWVsRGVsdGE7XG4gICAgfVxuXG4gICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgIC8vIHJldmVyc2UgYXhpcyB3aXRoIHNoaWZ0IGtleVxuICAgICAgcmV0dXJuIFstZGVsdGFZLCAtZGVsdGFYXTtcbiAgICB9XG4gICAgcmV0dXJuIFtkZWx0YVgsIGRlbHRhWV07XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRCZUNvbnN1bWVkQnlDaGlsZCh0YXJnZXQsIGRlbHRhWCwgZGVsdGFZKSB7XG4gICAgLy8gRklYTUU6IHRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciA8c2VsZWN0PiBpc3N1ZSBpbiBGRiBhbmQgSUUgIzU3MVxuICAgIGlmICghZW52LmlzV2ViS2l0ICYmIGVsZW1lbnQucXVlcnlTZWxlY3Rvcignc2VsZWN0OmZvY3VzJykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICghZWxlbWVudC5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGN1cnNvciA9IHRhcmdldDtcblxuICAgIHdoaWxlIChjdXJzb3IgJiYgY3Vyc29yICE9PSBlbGVtZW50KSB7XG4gICAgICBpZiAoY3Vyc29yLmNsYXNzTGlzdC5jb250YWlucyhjbHMuZWxlbWVudC5jb25zdW1pbmcpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3R5bGUgPSBnZXQoY3Vyc29yKTtcbiAgICAgIHZhciBvdmVyZmxvdyA9IFtzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1ldLmpvaW4oXG4gICAgICAgICcnXG4gICAgICApO1xuXG4gICAgICAvLyBpZiBzY3JvbGxhYmxlXG4gICAgICBpZiAob3ZlcmZsb3cubWF0Y2goLyhzY3JvbGx8YXV0bykvKSkge1xuICAgICAgICB2YXIgbWF4U2Nyb2xsVG9wID0gY3Vyc29yLnNjcm9sbEhlaWdodCAtIGN1cnNvci5jbGllbnRIZWlnaHQ7XG4gICAgICAgIGlmIChtYXhTY3JvbGxUb3AgPiAwKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIShjdXJzb3Iuc2Nyb2xsVG9wID09PSAwICYmIGRlbHRhWSA+IDApICYmXG4gICAgICAgICAgICAhKGN1cnNvci5zY3JvbGxUb3AgPT09IG1heFNjcm9sbFRvcCAmJiBkZWx0YVkgPCAwKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBtYXhTY3JvbGxMZWZ0ID0gY3Vyc29yLnNjcm9sbFdpZHRoIC0gY3Vyc29yLmNsaWVudFdpZHRoO1xuICAgICAgICBpZiAobWF4U2Nyb2xsTGVmdCA+IDApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhKGN1cnNvci5zY3JvbGxMZWZ0ID09PSAwICYmIGRlbHRhWCA8IDApICYmXG4gICAgICAgICAgICAhKGN1cnNvci5zY3JvbGxMZWZ0ID09PSBtYXhTY3JvbGxMZWZ0ICYmIGRlbHRhWCA+IDApXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY3Vyc29yID0gY3Vyc29yLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2V3aGVlbEhhbmRsZXIoZSkge1xuICAgIHZhciByZWYgPSBnZXREZWx0YUZyb21FdmVudChlKTtcbiAgICB2YXIgZGVsdGFYID0gcmVmWzBdO1xuICAgIHZhciBkZWx0YVkgPSByZWZbMV07XG5cbiAgICBpZiAoc2hvdWxkQmVDb25zdW1lZEJ5Q2hpbGQoZS50YXJnZXQsIGRlbHRhWCwgZGVsdGFZKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzaG91bGRQcmV2ZW50ID0gZmFsc2U7XG4gICAgaWYgKCFpLnNldHRpbmdzLnVzZUJvdGhXaGVlbEF4ZXMpIHtcbiAgICAgIC8vIGRlbHRhWCB3aWxsIG9ubHkgYmUgdXNlZCBmb3IgaG9yaXpvbnRhbCBzY3JvbGxpbmcgYW5kIGRlbHRhWSB3aWxsXG4gICAgICAvLyBvbmx5IGJlIHVzZWQgZm9yIHZlcnRpY2FsIHNjcm9sbGluZyAtIHRoaXMgaXMgdGhlIGRlZmF1bHRcbiAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wIC09IGRlbHRhWSAqIGkuc2V0dGluZ3Mud2hlZWxTcGVlZDtcbiAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCArPSBkZWx0YVggKiBpLnNldHRpbmdzLndoZWVsU3BlZWQ7XG4gICAgfSBlbHNlIGlmIChpLnNjcm9sbGJhcllBY3RpdmUgJiYgIWkuc2Nyb2xsYmFyWEFjdGl2ZSkge1xuICAgICAgLy8gb25seSB2ZXJ0aWNhbCBzY3JvbGxiYXIgaXMgYWN0aXZlIGFuZCB1c2VCb3RoV2hlZWxBeGVzIG9wdGlvbiBpc1xuICAgICAgLy8gYWN0aXZlLCBzbyBsZXQncyBzY3JvbGwgdmVydGljYWwgYmFyIHVzaW5nIGJvdGggbW91c2Ugd2hlZWwgYXhlc1xuICAgICAgaWYgKGRlbHRhWSkge1xuICAgICAgICBlbGVtZW50LnNjcm9sbFRvcCAtPSBkZWx0YVkgKiBpLnNldHRpbmdzLndoZWVsU3BlZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNjcm9sbFRvcCArPSBkZWx0YVggKiBpLnNldHRpbmdzLndoZWVsU3BlZWQ7XG4gICAgICB9XG4gICAgICBzaG91bGRQcmV2ZW50ID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGkuc2Nyb2xsYmFyWEFjdGl2ZSAmJiAhaS5zY3JvbGxiYXJZQWN0aXZlKSB7XG4gICAgICAvLyB1c2VCb3RoV2hlZWxBeGVzIGFuZCBvbmx5IGhvcml6b250YWwgYmFyIGlzIGFjdGl2ZSwgc28gdXNlIGJvdGhcbiAgICAgIC8vIHdoZWVsIGF4ZXMgZm9yIGhvcml6b250YWwgYmFyXG4gICAgICBpZiAoZGVsdGFYKSB7XG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCArPSBkZWx0YVggKiBpLnNldHRpbmdzLndoZWVsU3BlZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNjcm9sbExlZnQgLT0gZGVsdGFZICogaS5zZXR0aW5ncy53aGVlbFNwZWVkO1xuICAgICAgfVxuICAgICAgc2hvdWxkUHJldmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgdXBkYXRlR2VvbWV0cnkoaSk7XG5cbiAgICBzaG91bGRQcmV2ZW50ID0gc2hvdWxkUHJldmVudCB8fCBzaG91bGRQcmV2ZW50RGVmYXVsdChkZWx0YVgsIGRlbHRhWSk7XG4gICAgaWYgKHNob3VsZFByZXZlbnQgJiYgIWUuY3RybEtleSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHdpbmRvdy5vbndoZWVsICE9PSAndW5kZWZpbmVkJykge1xuICAgIGkuZXZlbnQuYmluZChlbGVtZW50LCAnd2hlZWwnLCBtb3VzZXdoZWVsSGFuZGxlcik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdy5vbm1vdXNld2hlZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaS5ldmVudC5iaW5kKGVsZW1lbnQsICdtb3VzZXdoZWVsJywgbW91c2V3aGVlbEhhbmRsZXIpO1xuICB9XG59O1xuXG52YXIgdG91Y2ggPSBmdW5jdGlvbihpKSB7XG4gIGlmICghZW52LnN1cHBvcnRzVG91Y2ggJiYgIWVudi5zdXBwb3J0c0llUG9pbnRlcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBlbGVtZW50ID0gaS5lbGVtZW50O1xuXG4gIGZ1bmN0aW9uIHNob3VsZFByZXZlbnQoZGVsdGFYLCBkZWx0YVkpIHtcbiAgICB2YXIgc2Nyb2xsVG9wID0gTWF0aC5mbG9vcihlbGVtZW50LnNjcm9sbFRvcCk7XG4gICAgdmFyIHNjcm9sbExlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgdmFyIG1hZ25pdHVkZVggPSBNYXRoLmFicyhkZWx0YVgpO1xuICAgIHZhciBtYWduaXR1ZGVZID0gTWF0aC5hYnMoZGVsdGFZKTtcblxuICAgIGlmIChtYWduaXR1ZGVZID4gbWFnbml0dWRlWCkge1xuICAgICAgLy8gdXNlciBpcyBwZXJoYXBzIHRyeWluZyB0byBzd2lwZSB1cC9kb3duIHRoZSBwYWdlXG5cbiAgICAgIGlmIChcbiAgICAgICAgKGRlbHRhWSA8IDAgJiYgc2Nyb2xsVG9wID09PSBpLmNvbnRlbnRIZWlnaHQgLSBpLmNvbnRhaW5lckhlaWdodCkgfHxcbiAgICAgICAgKGRlbHRhWSA+IDAgJiYgc2Nyb2xsVG9wID09PSAwKVxuICAgICAgKSB7XG4gICAgICAgIC8vIHNldCBwcmV2ZW50IGZvciBtb2JpbGUgQ2hyb21lIHJlZnJlc2hcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zY3JvbGxZID09PSAwICYmIGRlbHRhWSA+IDAgJiYgZW52LmlzQ2hyb21lO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobWFnbml0dWRlWCA+IG1hZ25pdHVkZVkpIHtcbiAgICAgIC8vIHVzZXIgaXMgcGVyaGFwcyB0cnlpbmcgdG8gc3dpcGUgbGVmdC9yaWdodCBhY3Jvc3MgdGhlIHBhZ2VcblxuICAgICAgaWYgKFxuICAgICAgICAoZGVsdGFYIDwgMCAmJiBzY3JvbGxMZWZ0ID09PSBpLmNvbnRlbnRXaWR0aCAtIGkuY29udGFpbmVyV2lkdGgpIHx8XG4gICAgICAgIChkZWx0YVggPiAwICYmIHNjcm9sbExlZnQgPT09IDApXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseVRvdWNoTW92ZShkaWZmZXJlbmNlWCwgZGlmZmVyZW5jZVkpIHtcbiAgICBlbGVtZW50LnNjcm9sbFRvcCAtPSBkaWZmZXJlbmNlWTtcbiAgICBlbGVtZW50LnNjcm9sbExlZnQgLT0gZGlmZmVyZW5jZVg7XG5cbiAgICB1cGRhdGVHZW9tZXRyeShpKTtcbiAgfVxuXG4gIHZhciBzdGFydE9mZnNldCA9IHt9O1xuICB2YXIgc3RhcnRUaW1lID0gMDtcbiAgdmFyIHNwZWVkID0ge307XG4gIHZhciBlYXNpbmdMb29wID0gbnVsbDtcblxuICBmdW5jdGlvbiBnZXRUb3VjaChlKSB7XG4gICAgaWYgKGUudGFyZ2V0VG91Y2hlcykge1xuICAgICAgcmV0dXJuIGUudGFyZ2V0VG91Y2hlc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTWF5YmUgSUUgcG9pbnRlclxuICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSGFuZGxlKGUpIHtcbiAgICBpZiAoZS5wb2ludGVyVHlwZSAmJiBlLnBvaW50ZXJUeXBlID09PSAncGVuJyAmJiBlLmJ1dHRvbnMgPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGUudGFyZ2V0VG91Y2hlcyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgZS5wb2ludGVyVHlwZSAmJlxuICAgICAgZS5wb2ludGVyVHlwZSAhPT0gJ21vdXNlJyAmJlxuICAgICAgZS5wb2ludGVyVHlwZSAhPT0gZS5NU1BPSU5URVJfVFlQRV9NT1VTRVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoU3RhcnQoZSkge1xuICAgIGlmICghc2hvdWxkSGFuZGxlKGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRvdWNoID0gZ2V0VG91Y2goZSk7XG5cbiAgICBzdGFydE9mZnNldC5wYWdlWCA9IHRvdWNoLnBhZ2VYO1xuICAgIHN0YXJ0T2Zmc2V0LnBhZ2VZID0gdG91Y2gucGFnZVk7XG5cbiAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIGlmIChlYXNpbmdMb29wICE9PSBudWxsKSB7XG4gICAgICBjbGVhckludGVydmFsKGVhc2luZ0xvb3ApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEJlQ29uc3VtZWRCeUNoaWxkKHRhcmdldCwgZGVsdGFYLCBkZWx0YVkpIHtcbiAgICBpZiAoIWVsZW1lbnQuY29udGFpbnModGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBjdXJzb3IgPSB0YXJnZXQ7XG5cbiAgICB3aGlsZSAoY3Vyc29yICYmIGN1cnNvciAhPT0gZWxlbWVudCkge1xuICAgICAgaWYgKGN1cnNvci5jbGFzc0xpc3QuY29udGFpbnMoY2xzLmVsZW1lbnQuY29uc3VtaW5nKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0eWxlID0gZ2V0KGN1cnNvcik7XG4gICAgICB2YXIgb3ZlcmZsb3cgPSBbc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZXS5qb2luKFxuICAgICAgICAnJ1xuICAgICAgKTtcblxuICAgICAgLy8gaWYgc2Nyb2xsYWJsZVxuICAgICAgaWYgKG92ZXJmbG93Lm1hdGNoKC8oc2Nyb2xsfGF1dG8pLykpIHtcbiAgICAgICAgdmFyIG1heFNjcm9sbFRvcCA9IGN1cnNvci5zY3JvbGxIZWlnaHQgLSBjdXJzb3IuY2xpZW50SGVpZ2h0O1xuICAgICAgICBpZiAobWF4U2Nyb2xsVG9wID4gMCkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICEoY3Vyc29yLnNjcm9sbFRvcCA9PT0gMCAmJiBkZWx0YVkgPiAwKSAmJlxuICAgICAgICAgICAgIShjdXJzb3Iuc2Nyb2xsVG9wID09PSBtYXhTY3JvbGxUb3AgJiYgZGVsdGFZIDwgMClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgbWF4U2Nyb2xsTGVmdCA9IGN1cnNvci5zY3JvbGxMZWZ0IC0gY3Vyc29yLmNsaWVudFdpZHRoO1xuICAgICAgICBpZiAobWF4U2Nyb2xsTGVmdCA+IDApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhKGN1cnNvci5zY3JvbGxMZWZ0ID09PSAwICYmIGRlbHRhWCA8IDApICYmXG4gICAgICAgICAgICAhKGN1cnNvci5zY3JvbGxMZWZ0ID09PSBtYXhTY3JvbGxMZWZ0ICYmIGRlbHRhWCA+IDApXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY3Vyc29yID0gY3Vyc29yLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hNb3ZlKGUpIHtcbiAgICBpZiAoc2hvdWxkSGFuZGxlKGUpKSB7XG4gICAgICB2YXIgdG91Y2ggPSBnZXRUb3VjaChlKTtcblxuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSB7IHBhZ2VYOiB0b3VjaC5wYWdlWCwgcGFnZVk6IHRvdWNoLnBhZ2VZIH07XG5cbiAgICAgIHZhciBkaWZmZXJlbmNlWCA9IGN1cnJlbnRPZmZzZXQucGFnZVggLSBzdGFydE9mZnNldC5wYWdlWDtcbiAgICAgIHZhciBkaWZmZXJlbmNlWSA9IGN1cnJlbnRPZmZzZXQucGFnZVkgLSBzdGFydE9mZnNldC5wYWdlWTtcblxuICAgICAgaWYgKHNob3VsZEJlQ29uc3VtZWRCeUNoaWxkKGUudGFyZ2V0LCBkaWZmZXJlbmNlWCwgZGlmZmVyZW5jZVkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBwbHlUb3VjaE1vdmUoZGlmZmVyZW5jZVgsIGRpZmZlcmVuY2VZKTtcbiAgICAgIHN0YXJ0T2Zmc2V0ID0gY3VycmVudE9mZnNldDtcblxuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICAgIHZhciB0aW1lR2FwID0gY3VycmVudFRpbWUgLSBzdGFydFRpbWU7XG4gICAgICBpZiAodGltZUdhcCA+IDApIHtcbiAgICAgICAgc3BlZWQueCA9IGRpZmZlcmVuY2VYIC8gdGltZUdhcDtcbiAgICAgICAgc3BlZWQueSA9IGRpZmZlcmVuY2VZIC8gdGltZUdhcDtcbiAgICAgICAgc3RhcnRUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaG91bGRQcmV2ZW50KGRpZmZlcmVuY2VYLCBkaWZmZXJlbmNlWSkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB0b3VjaEVuZCgpIHtcbiAgICBpZiAoaS5zZXR0aW5ncy5zd2lwZUVhc2luZykge1xuICAgICAgY2xlYXJJbnRlcnZhbChlYXNpbmdMb29wKTtcbiAgICAgIGVhc2luZ0xvb3AgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGkuaXNJbml0aWFsaXplZCkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoZWFzaW5nTG9vcCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzcGVlZC54ICYmICFzcGVlZC55KSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChlYXNpbmdMb29wKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5hYnMoc3BlZWQueCkgPCAwLjAxICYmIE1hdGguYWJzKHNwZWVkLnkpIDwgMC4wMSkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoZWFzaW5nTG9vcCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwbHlUb3VjaE1vdmUoc3BlZWQueCAqIDMwLCBzcGVlZC55ICogMzApO1xuXG4gICAgICAgIHNwZWVkLnggKj0gMC44O1xuICAgICAgICBzcGVlZC55ICo9IDAuODtcbiAgICAgIH0sIDEwKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZW52LnN1cHBvcnRzVG91Y2gpIHtcbiAgICBpLmV2ZW50LmJpbmQoZWxlbWVudCwgJ3RvdWNoc3RhcnQnLCB0b3VjaFN0YXJ0KTtcbiAgICBpLmV2ZW50LmJpbmQoZWxlbWVudCwgJ3RvdWNobW92ZScsIHRvdWNoTW92ZSk7XG4gICAgaS5ldmVudC5iaW5kKGVsZW1lbnQsICd0b3VjaGVuZCcsIHRvdWNoRW5kKTtcbiAgfSBlbHNlIGlmIChlbnYuc3VwcG9ydHNJZVBvaW50ZXIpIHtcbiAgICBpZiAod2luZG93LlBvaW50ZXJFdmVudCkge1xuICAgICAgaS5ldmVudC5iaW5kKGVsZW1lbnQsICdwb2ludGVyZG93bicsIHRvdWNoU3RhcnQpO1xuICAgICAgaS5ldmVudC5iaW5kKGVsZW1lbnQsICdwb2ludGVybW92ZScsIHRvdWNoTW92ZSk7XG4gICAgICBpLmV2ZW50LmJpbmQoZWxlbWVudCwgJ3BvaW50ZXJ1cCcsIHRvdWNoRW5kKTtcbiAgICB9IGVsc2UgaWYgKHdpbmRvdy5NU1BvaW50ZXJFdmVudCkge1xuICAgICAgaS5ldmVudC5iaW5kKGVsZW1lbnQsICdNU1BvaW50ZXJEb3duJywgdG91Y2hTdGFydCk7XG4gICAgICBpLmV2ZW50LmJpbmQoZWxlbWVudCwgJ01TUG9pbnRlck1vdmUnLCB0b3VjaE1vdmUpO1xuICAgICAgaS5ldmVudC5iaW5kKGVsZW1lbnQsICdNU1BvaW50ZXJVcCcsIHRvdWNoRW5kKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0U2V0dGluZ3MgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICBoYW5kbGVyczogWydjbGljay1yYWlsJywgJ2RyYWctdGh1bWInLCAna2V5Ym9hcmQnLCAnd2hlZWwnLCAndG91Y2gnXSxcbiAgbWF4U2Nyb2xsYmFyTGVuZ3RoOiBudWxsLFxuICBtaW5TY3JvbGxiYXJMZW5ndGg6IG51bGwsXG4gIHNjcm9sbGluZ1RocmVzaG9sZDogMTAwMCxcbiAgc2Nyb2xsWE1hcmdpbk9mZnNldDogMCxcbiAgc2Nyb2xsWU1hcmdpbk9mZnNldDogMCxcbiAgc3VwcHJlc3NTY3JvbGxYOiBmYWxzZSxcbiAgc3VwcHJlc3NTY3JvbGxZOiBmYWxzZSxcbiAgc3dpcGVFYXNpbmc6IHRydWUsXG4gIHVzZUJvdGhXaGVlbEF4ZXM6IGZhbHNlLFxuICB3aGVlbFByb3BhZ2F0aW9uOiB0cnVlLFxuICB3aGVlbFNwZWVkOiAxLFxufSk7IH07XG5cbnZhciBoYW5kbGVycyA9IHtcbiAgJ2NsaWNrLXJhaWwnOiBjbGlja1JhaWwsXG4gICdkcmFnLXRodW1iJzogZHJhZ1RodW1iLFxuICBrZXlib2FyZDoga2V5Ym9hcmQsXG4gIHdoZWVsOiB3aGVlbCxcbiAgdG91Y2g6IHRvdWNoLFxufTtcblxudmFyIFBlcmZlY3RTY3JvbGxiYXIgPSBmdW5jdGlvbiBQZXJmZWN0U2Nyb2xsYmFyKGVsZW1lbnQsIHVzZXJTZXR0aW5ncykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcbiAgaWYgKCB1c2VyU2V0dGluZ3MgPT09IHZvaWQgMCApIHVzZXJTZXR0aW5ncyA9IHt9O1xuXG4gIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50KTtcbiAgfVxuXG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5ub2RlTmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignbm8gZWxlbWVudCBpcyBzcGVjaWZpZWQgdG8gaW5pdGlhbGl6ZSBQZXJmZWN0U2Nyb2xsYmFyJyk7XG4gIH1cblxuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXG4gIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbHMubWFpbik7XG5cbiAgdGhpcy5zZXR0aW5ncyA9IGRlZmF1bHRTZXR0aW5ncygpO1xuICBmb3IgKHZhciBrZXkgaW4gdXNlclNldHRpbmdzKSB7XG4gICAgdGhpcyQxLnNldHRpbmdzW2tleV0gPSB1c2VyU2V0dGluZ3Nba2V5XTtcbiAgfVxuXG4gIHRoaXMuY29udGFpbmVyV2lkdGggPSBudWxsO1xuICB0aGlzLmNvbnRhaW5lckhlaWdodCA9IG51bGw7XG4gIHRoaXMuY29udGVudFdpZHRoID0gbnVsbDtcbiAgdGhpcy5jb250ZW50SGVpZ2h0ID0gbnVsbDtcblxuICB2YXIgZm9jdXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xzLnN0YXRlLmZvY3VzKTsgfTtcbiAgdmFyIGJsdXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xzLnN0YXRlLmZvY3VzKTsgfTtcblxuICB0aGlzLmlzUnRsID0gZ2V0KGVsZW1lbnQpLmRpcmVjdGlvbiA9PT0gJ3J0bCc7XG4gIHRoaXMuaXNOZWdhdGl2ZVNjcm9sbCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9yaWdpbmFsU2Nyb2xsTGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICBlbGVtZW50LnNjcm9sbExlZnQgPSAtMTtcbiAgICByZXN1bHQgPSBlbGVtZW50LnNjcm9sbExlZnQgPCAwO1xuICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IG9yaWdpbmFsU2Nyb2xsTGVmdDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KSgpO1xuICB0aGlzLm5lZ2F0aXZlU2Nyb2xsQWRqdXN0bWVudCA9IHRoaXMuaXNOZWdhdGl2ZVNjcm9sbFxuICAgID8gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICA6IDA7XG4gIHRoaXMuZXZlbnQgPSBuZXcgRXZlbnRNYW5hZ2VyKCk7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcblxuICB0aGlzLnNjcm9sbGJhclhSYWlsID0gZGl2KGNscy5lbGVtZW50LnJhaWwoJ3gnKSk7XG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zY3JvbGxiYXJYUmFpbCk7XG4gIHRoaXMuc2Nyb2xsYmFyWCA9IGRpdihjbHMuZWxlbWVudC50aHVtYigneCcpKTtcbiAgdGhpcy5zY3JvbGxiYXJYUmFpbC5hcHBlbmRDaGlsZCh0aGlzLnNjcm9sbGJhclgpO1xuICB0aGlzLnNjcm9sbGJhclguc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIDApO1xuICB0aGlzLmV2ZW50LmJpbmQodGhpcy5zY3JvbGxiYXJYLCAnZm9jdXMnLCBmb2N1cyk7XG4gIHRoaXMuZXZlbnQuYmluZCh0aGlzLnNjcm9sbGJhclgsICdibHVyJywgYmx1cik7XG4gIHRoaXMuc2Nyb2xsYmFyWEFjdGl2ZSA9IG51bGw7XG4gIHRoaXMuc2Nyb2xsYmFyWFdpZHRoID0gbnVsbDtcbiAgdGhpcy5zY3JvbGxiYXJYTGVmdCA9IG51bGw7XG4gIHZhciByYWlsWFN0eWxlID0gZ2V0KHRoaXMuc2Nyb2xsYmFyWFJhaWwpO1xuICB0aGlzLnNjcm9sbGJhclhCb3R0b20gPSBwYXJzZUludChyYWlsWFN0eWxlLmJvdHRvbSwgMTApO1xuICBpZiAoaXNOYU4odGhpcy5zY3JvbGxiYXJYQm90dG9tKSkge1xuICAgIHRoaXMuaXNTY3JvbGxiYXJYVXNpbmdCb3R0b20gPSBmYWxzZTtcbiAgICB0aGlzLnNjcm9sbGJhclhUb3AgPSB0b0ludChyYWlsWFN0eWxlLnRvcCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pc1Njcm9sbGJhclhVc2luZ0JvdHRvbSA9IHRydWU7XG4gIH1cbiAgdGhpcy5yYWlsQm9yZGVyWFdpZHRoID1cbiAgICB0b0ludChyYWlsWFN0eWxlLmJvcmRlckxlZnRXaWR0aCkgKyB0b0ludChyYWlsWFN0eWxlLmJvcmRlclJpZ2h0V2lkdGgpO1xuICAvLyBTZXQgcmFpbCB0byBkaXNwbGF5OmJsb2NrIHRvIGNhbGN1bGF0ZSBtYXJnaW5zXG4gIHNldCh0aGlzLnNjcm9sbGJhclhSYWlsLCB7IGRpc3BsYXk6ICdibG9jaycgfSk7XG4gIHRoaXMucmFpbFhNYXJnaW5XaWR0aCA9XG4gICAgdG9JbnQocmFpbFhTdHlsZS5tYXJnaW5MZWZ0KSArIHRvSW50KHJhaWxYU3R5bGUubWFyZ2luUmlnaHQpO1xuICBzZXQodGhpcy5zY3JvbGxiYXJYUmFpbCwgeyBkaXNwbGF5OiAnJyB9KTtcbiAgdGhpcy5yYWlsWFdpZHRoID0gbnVsbDtcbiAgdGhpcy5yYWlsWFJhdGlvID0gbnVsbDtcblxuICB0aGlzLnNjcm9sbGJhcllSYWlsID0gZGl2KGNscy5lbGVtZW50LnJhaWwoJ3knKSk7XG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zY3JvbGxiYXJZUmFpbCk7XG4gIHRoaXMuc2Nyb2xsYmFyWSA9IGRpdihjbHMuZWxlbWVudC50aHVtYigneScpKTtcbiAgdGhpcy5zY3JvbGxiYXJZUmFpbC5hcHBlbmRDaGlsZCh0aGlzLnNjcm9sbGJhclkpO1xuICB0aGlzLnNjcm9sbGJhclkuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIDApO1xuICB0aGlzLmV2ZW50LmJpbmQodGhpcy5zY3JvbGxiYXJZLCAnZm9jdXMnLCBmb2N1cyk7XG4gIHRoaXMuZXZlbnQuYmluZCh0aGlzLnNjcm9sbGJhclksICdibHVyJywgYmx1cik7XG4gIHRoaXMuc2Nyb2xsYmFyWUFjdGl2ZSA9IG51bGw7XG4gIHRoaXMuc2Nyb2xsYmFyWUhlaWdodCA9IG51bGw7XG4gIHRoaXMuc2Nyb2xsYmFyWVRvcCA9IG51bGw7XG4gIHZhciByYWlsWVN0eWxlID0gZ2V0KHRoaXMuc2Nyb2xsYmFyWVJhaWwpO1xuICB0aGlzLnNjcm9sbGJhcllSaWdodCA9IHBhcnNlSW50KHJhaWxZU3R5bGUucmlnaHQsIDEwKTtcbiAgaWYgKGlzTmFOKHRoaXMuc2Nyb2xsYmFyWVJpZ2h0KSkge1xuICAgIHRoaXMuaXNTY3JvbGxiYXJZVXNpbmdSaWdodCA9IGZhbHNlO1xuICAgIHRoaXMuc2Nyb2xsYmFyWUxlZnQgPSB0b0ludChyYWlsWVN0eWxlLmxlZnQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNTY3JvbGxiYXJZVXNpbmdSaWdodCA9IHRydWU7XG4gIH1cbiAgdGhpcy5zY3JvbGxiYXJZT3V0ZXJXaWR0aCA9IHRoaXMuaXNSdGwgPyBvdXRlcldpZHRoKHRoaXMuc2Nyb2xsYmFyWSkgOiBudWxsO1xuICB0aGlzLnJhaWxCb3JkZXJZV2lkdGggPVxuICAgIHRvSW50KHJhaWxZU3R5bGUuYm9yZGVyVG9wV2lkdGgpICsgdG9JbnQocmFpbFlTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCk7XG4gIHNldCh0aGlzLnNjcm9sbGJhcllSYWlsLCB7IGRpc3BsYXk6ICdibG9jaycgfSk7XG4gIHRoaXMucmFpbFlNYXJnaW5IZWlnaHQgPVxuICAgIHRvSW50KHJhaWxZU3R5bGUubWFyZ2luVG9wKSArIHRvSW50KHJhaWxZU3R5bGUubWFyZ2luQm90dG9tKTtcbiAgc2V0KHRoaXMuc2Nyb2xsYmFyWVJhaWwsIHsgZGlzcGxheTogJycgfSk7XG4gIHRoaXMucmFpbFlIZWlnaHQgPSBudWxsO1xuICB0aGlzLnJhaWxZUmF0aW8gPSBudWxsO1xuXG4gIHRoaXMucmVhY2ggPSB7XG4gICAgeDpcbiAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA8PSAwXG4gICAgICAgID8gJ3N0YXJ0J1xuICAgICAgICA6IGVsZW1lbnQuc2Nyb2xsTGVmdCA+PSB0aGlzLmNvbnRlbnRXaWR0aCAtIHRoaXMuY29udGFpbmVyV2lkdGhcbiAgICAgICAgICA/ICdlbmQnXG4gICAgICAgICAgOiBudWxsLFxuICAgIHk6XG4gICAgICBlbGVtZW50LnNjcm9sbFRvcCA8PSAwXG4gICAgICAgID8gJ3N0YXJ0J1xuICAgICAgICA6IGVsZW1lbnQuc2Nyb2xsVG9wID49IHRoaXMuY29udGVudEhlaWdodCAtIHRoaXMuY29udGFpbmVySGVpZ2h0XG4gICAgICAgICAgPyAnZW5kJ1xuICAgICAgICAgIDogbnVsbCxcbiAgfTtcblxuICB0aGlzLmlzQWxpdmUgPSB0cnVlO1xuXG4gIHRoaXMuc2V0dGluZ3MuaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlck5hbWUpIHsgcmV0dXJuIGhhbmRsZXJzW2hhbmRsZXJOYW1lXSh0aGlzJDEpOyB9KTtcblxuICB0aGlzLmxhc3RTY3JvbGxUb3AgPSBNYXRoLmZsb29yKGVsZW1lbnQuc2Nyb2xsVG9wKTsgLy8gZm9yIG9uU2Nyb2xsIG9ubHlcbiAgdGhpcy5sYXN0U2Nyb2xsTGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDsgLy8gZm9yIG9uU2Nyb2xsIG9ubHlcbiAgdGhpcy5ldmVudC5iaW5kKHRoaXMuZWxlbWVudCwgJ3Njcm9sbCcsIGZ1bmN0aW9uIChlKSB7IHJldHVybiB0aGlzJDEub25TY3JvbGwoZSk7IH0pO1xuICB1cGRhdGVHZW9tZXRyeSh0aGlzKTtcbn07XG5cblBlcmZlY3RTY3JvbGxiYXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIGlmICghdGhpcy5pc0FsaXZlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gUmVjYWxjdWF0ZSBuZWdhdGl2ZSBzY3JvbGxMZWZ0IGFkanVzdG1lbnRcbiAgdGhpcy5uZWdhdGl2ZVNjcm9sbEFkanVzdG1lbnQgPSB0aGlzLmlzTmVnYXRpdmVTY3JvbGxcbiAgICA/IHRoaXMuZWxlbWVudC5zY3JvbGxXaWR0aCAtIHRoaXMuZWxlbWVudC5jbGllbnRXaWR0aFxuICAgIDogMDtcblxuICAvLyBSZWNhbGN1bGF0ZSByYWlsIG1hcmdpbnNcbiAgc2V0KHRoaXMuc2Nyb2xsYmFyWFJhaWwsIHsgZGlzcGxheTogJ2Jsb2NrJyB9KTtcbiAgc2V0KHRoaXMuc2Nyb2xsYmFyWVJhaWwsIHsgZGlzcGxheTogJ2Jsb2NrJyB9KTtcbiAgdGhpcy5yYWlsWE1hcmdpbldpZHRoID1cbiAgICB0b0ludChnZXQodGhpcy5zY3JvbGxiYXJYUmFpbCkubWFyZ2luTGVmdCkgK1xuICAgIHRvSW50KGdldCh0aGlzLnNjcm9sbGJhclhSYWlsKS5tYXJnaW5SaWdodCk7XG4gIHRoaXMucmFpbFlNYXJnaW5IZWlnaHQgPVxuICAgIHRvSW50KGdldCh0aGlzLnNjcm9sbGJhcllSYWlsKS5tYXJnaW5Ub3ApICtcbiAgICB0b0ludChnZXQodGhpcy5zY3JvbGxiYXJZUmFpbCkubWFyZ2luQm90dG9tKTtcblxuICAvLyBIaWRlIHNjcm9sbGJhcnMgbm90IHRvIGFmZmVjdCBzY3JvbGxXaWR0aCBhbmQgc2Nyb2xsSGVpZ2h0XG4gIHNldCh0aGlzLnNjcm9sbGJhclhSYWlsLCB7IGRpc3BsYXk6ICdub25lJyB9KTtcbiAgc2V0KHRoaXMuc2Nyb2xsYmFyWVJhaWwsIHsgZGlzcGxheTogJ25vbmUnIH0pO1xuXG4gIHVwZGF0ZUdlb21ldHJ5KHRoaXMpO1xuXG4gIHByb2Nlc3NTY3JvbGxEaWZmKHRoaXMsICd0b3AnLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIHByb2Nlc3NTY3JvbGxEaWZmKHRoaXMsICdsZWZ0JywgMCwgZmFsc2UsIHRydWUpO1xuXG4gIHNldCh0aGlzLnNjcm9sbGJhclhSYWlsLCB7IGRpc3BsYXk6ICcnIH0pO1xuICBzZXQodGhpcy5zY3JvbGxiYXJZUmFpbCwgeyBkaXNwbGF5OiAnJyB9KTtcbn07XG5cblBlcmZlY3RTY3JvbGxiYXIucHJvdG90eXBlLm9uU2Nyb2xsID0gZnVuY3Rpb24gb25TY3JvbGwgKGUpIHtcbiAgaWYgKCF0aGlzLmlzQWxpdmUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB1cGRhdGVHZW9tZXRyeSh0aGlzKTtcbiAgcHJvY2Vzc1Njcm9sbERpZmYodGhpcywgJ3RvcCcsIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgLSB0aGlzLmxhc3RTY3JvbGxUb3ApO1xuICBwcm9jZXNzU2Nyb2xsRGlmZihcbiAgICB0aGlzLFxuICAgICdsZWZ0JyxcbiAgICB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCAtIHRoaXMubGFzdFNjcm9sbExlZnRcbiAgKTtcblxuICB0aGlzLmxhc3RTY3JvbGxUb3AgPSBNYXRoLmZsb29yKHRoaXMuZWxlbWVudC5zY3JvbGxUb3ApO1xuICB0aGlzLmxhc3RTY3JvbGxMZWZ0ID0gdGhpcy5lbGVtZW50LnNjcm9sbExlZnQ7XG59O1xuXG5QZXJmZWN0U2Nyb2xsYmFyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gIGlmICghdGhpcy5pc0FsaXZlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5ldmVudC51bmJpbmRBbGwoKTtcbiAgcmVtb3ZlKHRoaXMuc2Nyb2xsYmFyWCk7XG4gIHJlbW92ZSh0aGlzLnNjcm9sbGJhclkpO1xuICByZW1vdmUodGhpcy5zY3JvbGxiYXJYUmFpbCk7XG4gIHJlbW92ZSh0aGlzLnNjcm9sbGJhcllSYWlsKTtcbiAgdGhpcy5yZW1vdmVQc0NsYXNzZXMoKTtcblxuICAvLyB1bnNldCBlbGVtZW50c1xuICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICB0aGlzLnNjcm9sbGJhclggPSBudWxsO1xuICB0aGlzLnNjcm9sbGJhclkgPSBudWxsO1xuICB0aGlzLnNjcm9sbGJhclhSYWlsID0gbnVsbDtcbiAgdGhpcy5zY3JvbGxiYXJZUmFpbCA9IG51bGw7XG5cbiAgdGhpcy5pc0FsaXZlID0gZmFsc2U7XG59O1xuXG5QZXJmZWN0U2Nyb2xsYmFyLnByb3RvdHlwZS5yZW1vdmVQc0NsYXNzZXMgPSBmdW5jdGlvbiByZW1vdmVQc0NsYXNzZXMgKCkge1xuICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gdGhpcy5lbGVtZW50LmNsYXNzTmFtZVxuICAgIC5zcGxpdCgnICcpXG4gICAgLmZpbHRlcihmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW5hbWUubWF0Y2goL15wcyhbLV9dLit8KSQvKTsgfSlcbiAgICAuam9pbignICcpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQZXJmZWN0U2Nyb2xsYmFyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5UaHVtYnMgPSBleHBvcnRzLkNhcm91c2VsID0gdW5kZWZpbmVkO1xuXG52YXIgX0Nhcm91c2VsID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL0Nhcm91c2VsJyk7XG5cbnZhciBfQ2Fyb3VzZWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2Fyb3VzZWwpO1xuXG52YXIgX1RodW1icyA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9UaHVtYnMnKTtcblxudmFyIF9UaHVtYnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGh1bWJzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5DYXJvdXNlbCA9IF9DYXJvdXNlbDIuZGVmYXVsdDtcbmV4cG9ydHMuVGh1bWJzID0gX1RodW1iczIuZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jc3NDbGFzc2VzID0gcmVxdWlyZSgnLi4vY3NzQ2xhc3NlcycpO1xuXG52YXIgX2Nzc0NsYXNzZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3NzQ2xhc3Nlcyk7XG5cbnZhciBfQ1NTVHJhbnNsYXRlID0gcmVxdWlyZSgnLi4vQ1NTVHJhbnNsYXRlJyk7XG5cbnZhciBfQ1NTVHJhbnNsYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NTU1RyYW5zbGF0ZSk7XG5cbnZhciBfcmVhY3RFYXN5U3dpcGUgPSByZXF1aXJlKCdyZWFjdC1lYXN5LXN3aXBlJyk7XG5cbnZhciBfcmVhY3RFYXN5U3dpcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RFYXN5U3dpcGUpO1xuXG52YXIgX1RodW1icyA9IHJlcXVpcmUoJy4vVGh1bWJzJyk7XG5cbnZhciBfVGh1bWJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RodW1icyk7XG5cbnZhciBfY3VzdG9tUHJvcFR5cGVzID0gcmVxdWlyZSgnLi4vY3VzdG9tUHJvcFR5cGVzJyk7XG5cbnZhciBjdXN0b21Qcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfY3VzdG9tUHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxudmFyIGRlZmF1bHRTdGF0dXNGb3JtYXR0ZXIgPSBmdW5jdGlvbiBkZWZhdWx0U3RhdHVzRm9ybWF0dGVyKGN1cnJlbnQsIHRvdGFsKSB7XG4gICAgcmV0dXJuIGN1cnJlbnQgKyAnIG9mICcgKyB0b3RhbDtcbn07XG5cbnZhciBDYXJvdXNlbCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKENhcm91c2VsLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIENhcm91c2VsKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYXJvdXNlbCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENhcm91c2VsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ2Fyb3VzZWwpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX2luaXRpYWxpc2VQcm9wcy5jYWxsKF90aGlzKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgICAgICAgICAgIHNlbGVjdGVkSXRlbTogcHJvcHMuc2VsZWN0ZWRJdGVtLFxuICAgICAgICAgICAgaGFzTW91bnQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNNb3VzZUVudGVyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgYXV0b1BsYXk6IHByb3BzLmF1dG9QbGF5XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIFt7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldHVwQ2Fyb3VzZWwoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMuc2VsZWN0ZWRJdGVtICE9PSB0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2l6ZXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVUbyhuZXh0UHJvcHMuc2VsZWN0ZWRJdGVtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5leHRQcm9wcy5hdXRvUGxheSAhPT0gdGhpcy5zdGF0ZS5hdXRvUGxheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBhdXRvUGxheTogbmV4dFByb3BzLmF1dG9QbGF5XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMyLnN0YXRlLmF1dG9QbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIuc2V0dXBBdXRvUGxheSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmRlc3Ryb3lBdXRvUGxheSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgICAgIGlmICghcHJldlByb3BzLmNoaWxkcmVuICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIXRoaXMuc3RhdGUuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldHVwQ2Fyb3VzZWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmV2U3RhdGUuc3dpcGluZyAmJiAhdGhpcy5zdGF0ZS5zd2lwaW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc3RvcHBlZCBzd2lwaW5nLCBlbnN1cmUgd2UgYXJlIGhlYWRpbmcgdG8gdGhlIG5ldy9jdXJyZW50IHNsaWRlIGFuZCBub3Qgc3R1Y2tcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lDYXJvdXNlbCgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZXR1cENhcm91c2VsJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwQ2Fyb3VzZWwoKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuYXV0b1BsYXkgJiYgX3JlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pID4gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBBdXRvUGxheSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplZDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBpbml0aWFsSW1hZ2UgPSB0aGlzLmdldEluaXRpYWxJbWFnZSgpO1xuICAgICAgICAgICAgaWYgKGluaXRpYWxJbWFnZSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIGl0J3MgYSBjYXJvdXNlbCBvZiBpbWFnZXMsIHdlIHNldCB0aGUgbW91bnQgc3RhdGUgYWZ0ZXIgdGhlIGZpcnN0IGltYWdlIGlzIGxvYWRlZFxuICAgICAgICAgICAgICAgIGluaXRpYWxJbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5zZXRNb3VudFN0YXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRNb3VudFN0YXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3lDYXJvdXNlbCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95Q2Fyb3VzZWwoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95QXV0b1BsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2V0dXBBdXRvUGxheScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cEF1dG9QbGF5KCkge1xuICAgICAgICAgICAgdGhpcy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgdmFyIGNhcm91c2VsV3JhcHBlciA9IHRoaXMuY2Fyb3VzZWxXcmFwcGVyUmVmO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5zdG9wT25Ib3ZlciAmJiBjYXJvdXNlbFdyYXBwZXIpIHtcbiAgICAgICAgICAgICAgICBjYXJvdXNlbFdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHRoaXMuc3RvcE9uSG92ZXIpO1xuICAgICAgICAgICAgICAgIGNhcm91c2VsV3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5zdGFydE9uTGVhdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZXN0cm95QXV0b1BsYXknLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveUF1dG9QbGF5KCkge1xuICAgICAgICAgICAgdGhpcy5jbGVhckF1dG9QbGF5KCk7XG4gICAgICAgICAgICB2YXIgY2Fyb3VzZWxXcmFwcGVyID0gdGhpcy5jYXJvdXNlbFdyYXBwZXJSZWY7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnN0b3BPbkhvdmVyICYmIGNhcm91c2VsV3JhcHBlcikge1xuICAgICAgICAgICAgICAgIGNhcm91c2VsV3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5zdG9wT25Ib3Zlcik7XG4gICAgICAgICAgICAgICAgY2Fyb3VzZWxXcmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLnN0YXJ0T25MZWF2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2JpbmRFdmVudHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYmluZEV2ZW50cygpIHtcbiAgICAgICAgICAgIC8vIGFzIHRoZSB3aWR0aHMgYXJlIGNhbGN1bGF0ZWQsIHdlIG5lZWQgdG8gcmVzaXplXG4gICAgICAgICAgICAvLyB0aGUgY2Fyb3VzZWwgd2hlbiB0aGUgd2luZG93IGlzIHJlc2l6ZWRcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMudXBkYXRlU2l6ZXMpO1xuICAgICAgICAgICAgLy8gaXNzdWUgIzIgLSBpbWFnZSBsb2FkaW5nIHNtYWxsZXJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCB0aGlzLnVwZGF0ZVNpemVzKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudXNlS2V5Ym9hcmRBcnJvd3MpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLm5hdmlnYXRlV2l0aEtleWJvYXJkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndW5iaW5kRXZlbnRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmluZEV2ZW50cygpIHtcbiAgICAgICAgICAgIC8vIHJlbW92aW5nIGxpc3RlbmVyc1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy51cGRhdGVTaXplcyk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgdGhpcy51cGRhdGVTaXplcyk7XG5cbiAgICAgICAgICAgIHZhciBpbml0aWFsSW1hZ2UgPSB0aGlzLmdldEluaXRpYWxJbWFnZSgpO1xuICAgICAgICAgICAgaWYgKGluaXRpYWxJbWFnZSkge1xuICAgICAgICAgICAgICAgIGluaXRpYWxJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCB0aGlzLnNldE1vdW50U3RhdGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy51c2VLZXlib2FyZEFycm93cykge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMubmF2aWdhdGVXaXRoS2V5Ym9hcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRQb3NpdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQb3NpdGlvbihpbmRleCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuaW5maW5pdGVMb29wKSB7XG4gICAgICAgICAgICAgICAgLy8gaW5kZXggaGFzIHRvIGJlIGFkZGVkIGJ5IDEgYmVjYXVzZSBvZiB0aGUgZmlyc3QgY2xvbmVkIHNsaWRlXG4gICAgICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjaGlsZHJlbkxlbmd0aCA9IF9yZWFjdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNlbnRlck1vZGUgJiYgdGhpcy5wcm9wcy5heGlzID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvc2l0aW9uID0gLWluZGV4ICogdGhpcy5wcm9wcy5jZW50ZXJTbGlkZVBlcmNlbnRhZ2U7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RQb3NpdGlvbiA9IGNoaWxkcmVuTGVuZ3RoIC0gMTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCAmJiAoaW5kZXggIT09IGxhc3RQb3NpdGlvbiB8fCB0aGlzLnByb3BzLmluZmluaXRlTG9vcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvc2l0aW9uICs9ICgxMDAgLSB0aGlzLnByb3BzLmNlbnRlclNsaWRlUGVyY2VudGFnZSkgLyAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IGxhc3RQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9zaXRpb24gKz0gMTAwIC0gdGhpcy5wcm9wcy5jZW50ZXJTbGlkZVBlcmNlbnRhZ2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRQb3NpdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIC1pbmRleCAqIDEwMDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVySXRlbXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVySXRlbXMoaXNDbG9uZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBfcmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZVByb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLnNldEl0ZW1zUmVmKGUsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnaXRlbUtleScgKyBpbmRleCArIChpc0Nsb25lID8gJ2Nsb25lJyA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBfY3NzQ2xhc3NlczIuZGVmYXVsdC5JVEVNKHRydWUsIGluZGV4ID09PSBfdGhpczMuc3RhdGUuc2VsZWN0ZWRJdGVtKSxcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogX3RoaXMzLmhhbmRsZUNsaWNrSXRlbS5iaW5kKF90aGlzMywgaW5kZXgsIGl0ZW0pXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChfdGhpczMucHJvcHMuY2VudGVyTW9kZSAmJiBfdGhpczMucHJvcHMuYXhpcyA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlUHJvcHMuc3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogX3RoaXMzLnByb3BzLmNlbnRlclNsaWRlUGVyY2VudGFnZSArICclJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVQcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyQ29udHJvbHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ29udHJvbHMoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb3BzLnNob3dJbmRpY2F0b3JzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAndWwnLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29udHJvbC1kb3RzJyB9LFxuICAgICAgICAgICAgICAgIF9yZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnbGknLCB7IGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMyLmRlZmF1bHQuRE9UKGluZGV4ID09PSBfdGhpczQuc3RhdGUuc2VsZWN0ZWRJdGVtKSwgb25DbGljazogX3RoaXM0LmNoYW5nZUl0ZW0sIG9uS2V5RG93bjogX3RoaXM0LmNoYW5nZUl0ZW0sIHZhbHVlOiBpbmRleCwga2V5OiBpbmRleCwgcm9sZTogJ2J1dHRvbicsIHRhYkluZGV4OiAwIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXJTdGF0dXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyU3RhdHVzKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByb3BzLnNob3dTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdwJyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2Nhcm91c2VsLXN0YXR1cycgfSxcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnN0YXR1c0Zvcm1hdHRlcih0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbSArIDEsIF9yZWFjdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlclRodW1icycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJUaHVtYnMoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMuc2hvd1RodW1icyB8fCBfcmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbikgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIF9UaHVtYnMyLmRlZmF1bHQsXG4gICAgICAgICAgICAgICAgeyByZWY6IHRoaXMuc2V0VGh1bWJzUmVmLCBvblNlbGVjdEl0ZW06IHRoaXMuaGFuZGxlQ2xpY2tUaHVtYiwgc2VsZWN0ZWRJdGVtOiB0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbSwgdHJhbnNpdGlvblRpbWU6IHRoaXMucHJvcHMudHJhbnNpdGlvblRpbWUsIHRodW1iV2lkdGg6IHRoaXMucHJvcHMudGh1bWJXaWR0aCB9LFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMuY2hpbGRyZW4gfHwgX3JlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpc0hvcml6b250YWwgPSB0aGlzLnByb3BzLmF4aXMgPT09ICdob3Jpem9udGFsJztcblxuICAgICAgICAgICAgdmFyIGNhblNob3dBcnJvd3MgPSB0aGlzLnByb3BzLnNob3dBcnJvd3MgJiYgX3JlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pID4gMTtcblxuICAgICAgICAgICAgLy8gc2hvdyBsZWZ0IGFycm93P1xuICAgICAgICAgICAgdmFyIGhhc1ByZXYgPSBjYW5TaG93QXJyb3dzICYmICh0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbSA+IDAgfHwgdGhpcy5wcm9wcy5pbmZpbml0ZUxvb3ApO1xuICAgICAgICAgICAgLy8gc2hvdyByaWdodCBhcnJvd1xuICAgICAgICAgICAgdmFyIGhhc05leHQgPSBjYW5TaG93QXJyb3dzICYmICh0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbSA8IF9yZWFjdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKSAtIDEgfHwgdGhpcy5wcm9wcy5pbmZpbml0ZUxvb3ApO1xuICAgICAgICAgICAgLy8gb2JqIHRvIGhvbGQgdGhlIHRyYW5zZm9ybWF0aW9ucyBhbmQgc3R5bGVzXG4gICAgICAgICAgICB2YXIgaXRlbUxpc3RTdHlsZXMgPSB7fTtcblxuICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW0pO1xuXG4gICAgICAgICAgICAvLyBpZiAzZCBpcyBhdmFpbGFibGUsIGxldCdzIHRha2UgYWR2YW50YWdlIG9mIHRoZSBwZXJmb3JtYW5jZSBvZiB0cmFuc2Zvcm1cbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1Qcm9wID0gKDAsIF9DU1NUcmFuc2xhdGUyLmRlZmF1bHQpKGN1cnJlbnRQb3NpdGlvbiArICclJywgdGhpcy5wcm9wcy5heGlzKTtcblxuICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25UaW1lID0gdGhpcy5wcm9wcy50cmFuc2l0aW9uVGltZSArICdtcyc7XG5cbiAgICAgICAgICAgIGl0ZW1MaXN0U3R5bGVzID0ge1xuICAgICAgICAgICAgICAgICdXZWJraXRUcmFuc2Zvcm0nOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICAgICAgICAgICdNb3pUcmFuc2Zvcm0nOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICAgICAgICAgICdNc1RyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3AsXG4gICAgICAgICAgICAgICAgJ09UcmFuc2Zvcm0nOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICAgICAgICAgICdtc1RyYW5zZm9ybSc6IHRyYW5zZm9ybVByb3BcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5zd2lwaW5nKSB7XG4gICAgICAgICAgICAgICAgaXRlbUxpc3RTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgaXRlbUxpc3RTdHlsZXMsIHtcbiAgICAgICAgICAgICAgICAgICAgJ1dlYmtpdFRyYW5zaXRpb25EdXJhdGlvbic6IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICAgICAgICAgICAgICAnTW96VHJhbnNpdGlvbkR1cmF0aW9uJzogdHJhbnNpdGlvblRpbWUsXG4gICAgICAgICAgICAgICAgICAgICdNc1RyYW5zaXRpb25EdXJhdGlvbic6IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICAgICAgICAgICAgICAnT1RyYW5zaXRpb25EdXJhdGlvbic6IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICAgICAgICAgICAgICAndHJhbnNpdGlvbkR1cmF0aW9uJzogdHJhbnNpdGlvblRpbWUsXG4gICAgICAgICAgICAgICAgICAgICdtc1RyYW5zaXRpb25EdXJhdGlvbic6IHRyYW5zaXRpb25UaW1lXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpdGVtc0Nsb25lID0gdGhpcy5yZW5kZXJJdGVtcyh0cnVlKTtcbiAgICAgICAgICAgIHZhciBmaXJzdENsb25lID0gaXRlbXNDbG9uZS5zaGlmdCgpO1xuICAgICAgICAgICAgdmFyIGxhc3RDbG9uZSA9IGl0ZW1zQ2xvbmUucG9wKCk7XG5cbiAgICAgICAgICAgIHZhciBzd2lwZXJQcm9wcyA9IHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW06IHRoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMyLmRlZmF1bHQuU0xJREVSKHRydWUsIHRoaXMuc3RhdGUuc3dpcGluZyksXG4gICAgICAgICAgICAgICAgb25Td2lwZU1vdmU6IHRoaXMub25Td2lwZU1vdmUsXG4gICAgICAgICAgICAgICAgb25Td2lwZVN0YXJ0OiB0aGlzLm9uU3dpcGVTdGFydCxcbiAgICAgICAgICAgICAgICBvblN3aXBlRW5kOiB0aGlzLm9uU3dpcGVFbmQsXG4gICAgICAgICAgICAgICAgc3R5bGU6IGl0ZW1MaXN0U3R5bGVzLFxuICAgICAgICAgICAgICAgIHRvbGVyYW5jZTogdGhpcy5wcm9wcy5zd2lwZVNjcm9sbFRvbGVyYW5jZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lclN0eWxlcyA9IHt9O1xuXG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgc3dpcGVyUHJvcHMub25Td2lwZUxlZnQgPSB0aGlzLm9uU3dpcGVCYWNrd2FyZHM7XG4gICAgICAgICAgICAgICAgc3dpcGVyUHJvcHMub25Td2lwZVJpZ2h0ID0gdGhpcy5vblN3aXBlRm9yd2FyZDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmR5bmFtaWNIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1IZWlnaHQgPSB0aGlzLmdldFZhcmlhYmxlSW1hZ2VIZWlnaHQodGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBzd2lwZXJQcm9wcy5zdHlsZS5oZWlnaHQgPSBpdGVtSGVpZ2h0IHx8ICdhdXRvJztcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGVzLmhlaWdodCA9IGl0ZW1IZWlnaHQgfHwgJ2F1dG8nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3dpcGVyUHJvcHMub25Td2lwZVVwID0gdGhpcy5wcm9wcy52ZXJ0aWNhbFN3aXBlID09PSAnbmF0dXJhbCcgPyB0aGlzLm9uU3dpcGVGb3J3YXJkIDogdGhpcy5vblN3aXBlQmFja3dhcmRzO1xuICAgICAgICAgICAgICAgIHN3aXBlclByb3BzLm9uU3dpcGVEb3duID0gdGhpcy5wcm9wcy52ZXJ0aWNhbFN3aXBlID09PSAnbmF0dXJhbCcgPyB0aGlzLm9uU3dpcGVCYWNrd2FyZHMgOiB0aGlzLm9uU3dpcGVGb3J3YXJkO1xuICAgICAgICAgICAgICAgIHN3aXBlclByb3BzLnN0eWxlLmhlaWdodCA9IHRoaXMuc3RhdGUuaXRlbVNpemU7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGVzLmhlaWdodCA9IHRoaXMuc3RhdGUuaXRlbVNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLCByZWY6IHRoaXMuc2V0Q2Fyb3VzZWxXcmFwcGVyUmVmIH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMyLmRlZmF1bHQuQ0FST1VTRUwodHJ1ZSksIHN0eWxlOiB7IHdpZHRoOiB0aGlzLnByb3BzLndpZHRoIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHsgdHlwZTogJ2J1dHRvbicsIGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMyLmRlZmF1bHQuQVJST1dfUFJFVighaGFzUHJldiksIG9uQ2xpY2s6IHRoaXMub25DbGlja1ByZXYgfSksXG4gICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMyLmRlZmF1bHQuV1JBUFBFUih0cnVlLCB0aGlzLnByb3BzLmF4aXMpLCBzdHlsZTogY29udGFpbmVyU3R5bGVzLCByZWY6IHRoaXMuc2V0SXRlbXNXcmFwcGVyUmVmIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnN3aXBlYWJsZSA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdEVhc3lTd2lwZTIuZGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ05hbWU6ICd1bCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogdGhpcy5zZXRMaXN0UmVmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgc3dpcGVyUHJvcHMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dNb3VzZUV2ZW50czogdGhpcy5wcm9wcy5lbXVsYXRlVG91Y2ggfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5pbmZpbml0ZUxvb3AgJiYgbGFzdENsb25lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVySXRlbXMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmluZmluaXRlTG9vcCAmJiBmaXJzdENsb25lXG4gICAgICAgICAgICAgICAgICAgICAgICApIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMyLmRlZmF1bHQuU0xJREVSKHRydWUsIHRoaXMuc3RhdGUuc3dpcGluZyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogdGhpcy5zZXRMaXN0UmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogaXRlbUxpc3RTdHlsZXMgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmluZmluaXRlTG9vcCAmJiBsYXN0Q2xvbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJJdGVtcygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaW5maW5pdGVMb29wICYmIGZpcnN0Q2xvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHsgdHlwZTogJ2J1dHRvbicsIGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMyLmRlZmF1bHQuQVJST1dfTkVYVCghaGFzTmV4dCksIG9uQ2xpY2s6IHRoaXMub25DbGlja05leHQgfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyQ29udHJvbHMoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTdGF0dXMoKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJUaHVtYnMoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDYXJvdXNlbDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkNhcm91c2VsLmRpc3BsYXlOYW1lID0gJ0Nhcm91c2VsJztcbkNhcm91c2VsLnByb3BUeXBlcyA9IHtcbiAgICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gICAgc2hvd0Fycm93czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHNob3dTdGF0dXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBzaG93SW5kaWNhdG9yczogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGluZmluaXRlTG9vcDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHNob3dUaHVtYnM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICB0aHVtYldpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBzZWxlY3RlZEl0ZW06IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIG9uQ2xpY2tJdGVtOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNsaWNrVGh1bWI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uQ2hhbmdlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBheGlzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcbiAgICB2ZXJ0aWNhbFN3aXBlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnbmF0dXJhbCcsICdzdGFuZGFyZCddKSxcbiAgICB3aWR0aDogY3VzdG9tUHJvcFR5cGVzLnVuaXQsXG4gICAgdXNlS2V5Ym9hcmRBcnJvd3M6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBhdXRvUGxheTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHN0b3BPbkhvdmVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgaW50ZXJ2YWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIHRyYW5zaXRpb25UaW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBzd2lwZVNjcm9sbFRvbGVyYW5jZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgc3dpcGVhYmxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgZHluYW1pY0hlaWdodDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGVtdWxhdGVUb3VjaDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHN0YXR1c0Zvcm1hdHRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2VudGVyTW9kZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNlbnRlclNsaWRlUGVyY2VudGFnZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbn07XG5DYXJvdXNlbC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgc2hvd0luZGljYXRvcnM6IHRydWUsXG4gICAgc2hvd0Fycm93czogdHJ1ZSxcbiAgICBzaG93U3RhdHVzOiB0cnVlLFxuICAgIHNob3dUaHVtYnM6IHRydWUsXG4gICAgaW5maW5pdGVMb29wOiBmYWxzZSxcbiAgICBzZWxlY3RlZEl0ZW06IDAsXG4gICAgYXhpczogJ2hvcml6b250YWwnLFxuICAgIHZlcnRpY2FsU3dpcGU6ICdzdGFuZGFyZCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICB1c2VLZXlib2FyZEFycm93czogZmFsc2UsXG4gICAgYXV0b1BsYXk6IGZhbHNlLFxuICAgIHN0b3BPbkhvdmVyOiB0cnVlLFxuICAgIGludGVydmFsOiAzMDAwLFxuICAgIHRyYW5zaXRpb25UaW1lOiAzNTAsXG4gICAgc3dpcGVTY3JvbGxUb2xlcmFuY2U6IDUsXG4gICAgc3dpcGVhYmxlOiB0cnVlLFxuICAgIGR5bmFtaWNIZWlnaHQ6IGZhbHNlLFxuICAgIGVtdWxhdGVUb3VjaDogZmFsc2UsXG4gICAgb25DbGlja0l0ZW06IG5vb3AsXG4gICAgb25DbGlja1RodW1iOiBub29wLFxuICAgIG9uQ2hhbmdlOiBub29wLFxuICAgIHN0YXR1c0Zvcm1hdHRlcjogZGVmYXVsdFN0YXR1c0Zvcm1hdHRlcixcbiAgICBjZW50ZXJNb2RlOiBmYWxzZSxcbiAgICBjZW50ZXJTbGlkZVBlcmNlbnRhZ2U6IDgwXG59O1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB0aGlzLnNldFRodW1ic1JlZiA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIF90aGlzNS50aHVtYnNSZWYgPSBub2RlO1xuICAgIH07XG5cbiAgICB0aGlzLnNldENhcm91c2VsV3JhcHBlclJlZiA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIF90aGlzNS5jYXJvdXNlbFdyYXBwZXJSZWYgPSBub2RlO1xuICAgIH07XG5cbiAgICB0aGlzLnNldExpc3RSZWYgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBfdGhpczUubGlzdFJlZiA9IG5vZGU7XG4gICAgfTtcblxuICAgIHRoaXMuc2V0SXRlbXNXcmFwcGVyUmVmID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgX3RoaXM1Lml0ZW1zV3JhcHBlclJlZiA9IG5vZGU7XG4gICAgfTtcblxuICAgIHRoaXMuc2V0SXRlbXNSZWYgPSBmdW5jdGlvbiAobm9kZSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKCFfdGhpczUuaXRlbXNSZWYpIHtcbiAgICAgICAgICAgIF90aGlzNS5pdGVtc1JlZiA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzNS5pdGVtc1JlZltpbmRleF0gPSBub2RlO1xuICAgIH07XG5cbiAgICB0aGlzLmF1dG9QbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzNS5zdGF0ZS5hdXRvUGxheSB8fCBfcmVhY3QuQ2hpbGRyZW4uY291bnQoX3RoaXM1LnByb3BzLmNoaWxkcmVuKSA8PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXM1LnRpbWVyKTtcbiAgICAgICAgX3RoaXM1LnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczUuaW5jcmVtZW50KCk7XG4gICAgICAgIH0sIF90aGlzNS5wcm9wcy5pbnRlcnZhbCk7XG4gICAgfTtcblxuICAgIHRoaXMuY2xlYXJBdXRvUGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFfdGhpczUuc3RhdGUuYXV0b1BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFyVGltZW91dChfdGhpczUudGltZXIpO1xuICAgIH07XG5cbiAgICB0aGlzLnJlc2V0QXV0b1BsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzNS5jbGVhckF1dG9QbGF5KCk7XG4gICAgICAgIF90aGlzNS5hdXRvUGxheSgpO1xuICAgIH07XG5cbiAgICB0aGlzLnN0b3BPbkhvdmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczUuc2V0U3RhdGUoeyBpc01vdXNlRW50ZXJlZDogdHJ1ZSB9KTtcbiAgICAgICAgX3RoaXM1LmNsZWFyQXV0b1BsYXkoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5zdGFydE9uTGVhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7IGlzTW91c2VFbnRlcmVkOiBmYWxzZSB9KTtcbiAgICAgICAgX3RoaXM1LmF1dG9QbGF5KCk7XG4gICAgfTtcblxuICAgIHRoaXMubmF2aWdhdGVXaXRoS2V5Ym9hcmQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgYXhpcyA9IF90aGlzNS5wcm9wcy5heGlzO1xuXG4gICAgICAgIHZhciBpc0hvcml6b250YWwgPSBheGlzID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICAgIHZhciBrZXlOYW1lcyA9IHtcbiAgICAgICAgICAgIEFycm93VXA6IDM4LFxuICAgICAgICAgICAgQXJyb3dSaWdodDogMzksXG4gICAgICAgICAgICBBcnJvd0Rvd246IDQwLFxuICAgICAgICAgICAgQXJyb3dMZWZ0OiAzN1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBuZXh0S2V5ID0gaXNIb3Jpem9udGFsID8ga2V5TmFtZXMuQXJyb3dSaWdodCA6IGtleU5hbWVzLkFycm93RG93bjtcbiAgICAgICAgdmFyIHByZXZLZXkgPSBpc0hvcml6b250YWwgPyBrZXlOYW1lcy5BcnJvd0xlZnQgOiBrZXlOYW1lcy5BcnJvd1VwO1xuXG4gICAgICAgIGlmIChuZXh0S2V5ID09PSBlLmtleUNvZGUpIHtcbiAgICAgICAgICAgIF90aGlzNS5pbmNyZW1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcmV2S2V5ID09PSBlLmtleUNvZGUpIHtcbiAgICAgICAgICAgIF90aGlzNS5kZWNyZW1lbnQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnVwZGF0ZVNpemVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzNS5zdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzSG9yaXpvbnRhbCA9IF90aGlzNS5wcm9wcy5heGlzID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICAgIHZhciBmaXJzdEl0ZW0gPSBfdGhpczUuaXRlbXNSZWZbMF07XG4gICAgICAgIHZhciBpdGVtU2l6ZSA9IGlzSG9yaXpvbnRhbCA/IGZpcnN0SXRlbS5jbGllbnRXaWR0aCA6IGZpcnN0SXRlbS5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgX3RoaXM1LnNldFN0YXRlKGZ1bmN0aW9uIChfc3RhdGUsIHByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGl0ZW1TaXplOiBpdGVtU2l6ZSxcbiAgICAgICAgICAgICAgICB3cmFwcGVyU2l6ZTogaXNIb3Jpem9udGFsID8gaXRlbVNpemUgKiBfcmVhY3QuQ2hpbGRyZW4uY291bnQocHJvcHMuY2hpbGRyZW4pIDogaXRlbVNpemVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfdGhpczUudGh1bWJzUmVmKSB7XG4gICAgICAgICAgICBfdGhpczUudGh1bWJzUmVmLnVwZGF0ZVNpemVzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zZXRNb3VudFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczUuc2V0U3RhdGUoeyBoYXNNb3VudDogdHJ1ZSB9KTtcbiAgICAgICAgX3RoaXM1LnVwZGF0ZVNpemVzKCk7XG4gICAgfTtcblxuICAgIHRoaXMuaGFuZGxlQ2xpY2tJdGVtID0gZnVuY3Rpb24gKGluZGV4LCBpdGVtKSB7XG4gICAgICAgIGlmIChfcmVhY3QuQ2hpbGRyZW4uY291bnQoX3RoaXM1LnByb3BzLmNoaWxkcmVuKSA8PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXM1LnN0YXRlLmNhbmNlbENsaWNrKSB7XG4gICAgICAgICAgICBfdGhpczUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGNhbmNlbENsaWNrOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNS5wcm9wcy5vbkNsaWNrSXRlbShpbmRleCwgaXRlbSk7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9PSBfdGhpczUuc3RhdGUuc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgICAgICBfdGhpczUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbTogaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuaGFuZGxlT25DaGFuZ2UgPSBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgaWYgKF9yZWFjdC5DaGlsZHJlbi5jb3VudChfdGhpczUucHJvcHMuY2hpbGRyZW4pIDw9IDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNS5wcm9wcy5vbkNoYW5nZShpbmRleCwgaXRlbSk7XG4gICAgfTtcblxuICAgIHRoaXMuaGFuZGxlQ2xpY2tUaHVtYiA9IGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICBfdGhpczUucHJvcHMub25DbGlja1RodW1iKGluZGV4LCBpdGVtKTtcblxuICAgICAgICBfdGhpczUuc2VsZWN0SXRlbSh7XG4gICAgICAgICAgICBzZWxlY3RlZEl0ZW06IGluZGV4XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICB0aGlzLm9uU3dpcGVTdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM1LnNldFN0YXRlKHtcbiAgICAgICAgICAgIHN3aXBpbmc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzNS5jbGVhckF1dG9QbGF5KCk7XG4gICAgfTtcblxuICAgIHRoaXMub25Td2lwZUVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM1LnNldFN0YXRlKHtcbiAgICAgICAgICAgIHN3aXBpbmc6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpczUuYXV0b1BsYXkoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5vblN3aXBlTW92ZSA9IGZ1bmN0aW9uIChkZWx0YSkge1xuICAgICAgICB2YXIgaXNIb3Jpem9udGFsID0gX3RoaXM1LnByb3BzLmF4aXMgPT09ICdob3Jpem9udGFsJztcbiAgICAgICAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gX3JlYWN0LkNoaWxkcmVuLmNvdW50KF90aGlzNS5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgICAgdmFyIGluaXRpYWxCb3VuZHJ5ID0gMDtcblxuICAgICAgICB2YXIgY3VycmVudFBvc2l0aW9uID0gX3RoaXM1LmdldFBvc2l0aW9uKF90aGlzNS5zdGF0ZS5zZWxlY3RlZEl0ZW0pO1xuICAgICAgICB2YXIgZmluYWxCb3VuZHJ5ID0gX3RoaXM1LnByb3BzLmluZmluaXRlTG9vcCA/IF90aGlzNS5nZXRQb3NpdGlvbihjaGlsZHJlbkxlbmd0aCAtIDEpIC0gMTAwIDogX3RoaXM1LmdldFBvc2l0aW9uKGNoaWxkcmVuTGVuZ3RoIC0gMSk7XG5cbiAgICAgICAgdmFyIGF4aXNEZWx0YSA9IGlzSG9yaXpvbnRhbCA/IGRlbHRhLnggOiBkZWx0YS55O1xuICAgICAgICB2YXIgaGFuZGxlZERlbHRhID0gYXhpc0RlbHRhO1xuXG4gICAgICAgIC8vIHByZXZlbnQgdXNlciBmcm9tIHN3aXBpbmcgbGVmdCBvdXQgb2YgYm91bmRhcmllc1xuICAgICAgICBpZiAoY3VycmVudFBvc2l0aW9uID09PSBpbml0aWFsQm91bmRyeSAmJiBheGlzRGVsdGEgPiAwKSB7XG4gICAgICAgICAgICBoYW5kbGVkRGVsdGEgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJldmVudCB1c2VyIGZyb20gc3dpcGluZyByaWdodCBvdXQgb2YgYm91bmRhcmllc1xuICAgICAgICBpZiAoY3VycmVudFBvc2l0aW9uID09PSBmaW5hbEJvdW5kcnkgJiYgYXhpc0RlbHRhIDwgMCkge1xuICAgICAgICAgICAgaGFuZGxlZERlbHRhID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IGN1cnJlbnRQb3NpdGlvbiArIDEwMCAvIChfdGhpczUuc3RhdGUuaXRlbVNpemUgLyBoYW5kbGVkRGVsdGEpO1xuICAgICAgICBpZiAoX3RoaXM1LnByb3BzLmluZmluaXRlTG9vcCkge1xuICAgICAgICAgICAgLy8gV2hlbiBhbGxvd2luZyBpbmZpbml0ZSBsb29wLCBpZiB3ZSBzbGlkZSBsZWZ0IGZyb20gcG9zaXRpb24gMCB3ZSByZXZlYWwgdGhlIGNsb25lZCBsYXN0IHNsaWRlIHRoYXQgYXBwZWFycyBiZWZvcmUgaXRcbiAgICAgICAgICAgIC8vIGlmIHdlIHNsaWRlIGV2ZW4gZnVydGhlciB3ZSBuZWVkIHRvIGp1bXAgdG8gb3RoZXIgc2lkZSBzbyBpdCBjYW4gY29udGludWUgLSBhbmQgdmljZSB2ZXJzYSBmb3IgdGhlIGxhc3Qgc2xpZGVcbiAgICAgICAgICAgIGlmIChfdGhpczUuc3RhdGUuc2VsZWN0ZWRJdGVtID09PSAwICYmIHBvc2l0aW9uID4gLTEwMCkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uIC09IGNoaWxkcmVuTGVuZ3RoICogMTAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpczUuc3RhdGUuc2VsZWN0ZWRJdGVtID09PSBjaGlsZHJlbkxlbmd0aCAtIDEgJiYgcG9zaXRpb24gPCAtY2hpbGRyZW5MZW5ndGggKiAxMDApIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSBjaGlsZHJlbkxlbmd0aCAqIDEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3NpdGlvbiArPSAnJSc7XG4gICAgICAgIF90aGlzNS5zZXRQb3NpdGlvbihwb3NpdGlvbik7XG5cbiAgICAgICAgLy8gYWxsb3dzIHNjcm9sbCBpZiB0aGUgc3dpcGUgd2FzIHdpdGhpbiB0aGUgdG9sZXJhbmNlXG4gICAgICAgIHZhciBoYXNNb3ZlZCA9IE1hdGguYWJzKGF4aXNEZWx0YSkgPiBfdGhpczUucHJvcHMuc3dpcGVTY3JvbGxUb2xlcmFuY2U7XG5cbiAgICAgICAgaWYgKGhhc01vdmVkICYmICFfdGhpczUuc3RhdGUuY2FuY2VsQ2xpY2spIHtcbiAgICAgICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY2FuY2VsQ2xpY2s6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhhc01vdmVkO1xuICAgIH07XG5cbiAgICB0aGlzLnNldFBvc2l0aW9uID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBmb3JjZVJlZmxvdykge1xuICAgICAgICB2YXIgbGlzdCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpczUubGlzdFJlZik7XG4gICAgICAgIFsnV2Via2l0VHJhbnNmb3JtJywgJ01velRyYW5zZm9ybScsICdNc1RyYW5zZm9ybScsICdPVHJhbnNmb3JtJywgJ3RyYW5zZm9ybScsICdtc1RyYW5zZm9ybSddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIGxpc3Quc3R5bGVbcHJvcF0gPSAoMCwgX0NTU1RyYW5zbGF0ZTIuZGVmYXVsdCkocG9zaXRpb24sIF90aGlzNS5wcm9wcy5heGlzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChmb3JjZVJlZmxvdykge1xuICAgICAgICAgICAgbGlzdC5vZmZzZXRMZWZ0O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMucmVzZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRQb3NpdGlvbiA9IF90aGlzNS5nZXRQb3NpdGlvbihfdGhpczUuc3RhdGUuc2VsZWN0ZWRJdGVtKSArICclJztcbiAgICAgICAgX3RoaXM1LnNldFBvc2l0aW9uKGN1cnJlbnRQb3NpdGlvbik7XG4gICAgfTtcblxuICAgIHRoaXMuZGVjcmVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcG9zaXRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxO1xuICAgICAgICB2YXIgZnJvbVN3aXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICAgICAgICBfdGhpczUubW92ZVRvKF90aGlzNS5zdGF0ZS5zZWxlY3RlZEl0ZW0gLSAodHlwZW9mIHBvc2l0aW9ucyA9PT0gJ251bWJlcicgPyBwb3NpdGlvbnMgOiAxKSwgZnJvbVN3aXBlKTtcbiAgICB9O1xuXG4gICAgdGhpcy5pbmNyZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb3NpdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDE7XG4gICAgICAgIHZhciBmcm9tU3dpcGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICAgIF90aGlzNS5tb3ZlVG8oX3RoaXM1LnN0YXRlLnNlbGVjdGVkSXRlbSArICh0eXBlb2YgcG9zaXRpb25zID09PSAnbnVtYmVyJyA/IHBvc2l0aW9ucyA6IDEpLCBmcm9tU3dpcGUpO1xuICAgIH07XG5cbiAgICB0aGlzLm1vdmVUbyA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgZnJvbVN3aXBlKSB7XG4gICAgICAgIHZhciBsYXN0UG9zaXRpb24gPSBfcmVhY3QuQ2hpbGRyZW4uY291bnQoX3RoaXM1LnByb3BzLmNoaWxkcmVuKSAtIDE7XG4gICAgICAgIHZhciBuZWVkQ2xvbmVkU2xpZGUgPSBfdGhpczUucHJvcHMuaW5maW5pdGVMb29wICYmICFmcm9tU3dpcGUgJiYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+IGxhc3RQb3NpdGlvbik7XG4gICAgICAgIHZhciBvbGRQb3NpdGlvbiA9IHBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gX3RoaXM1LnByb3BzLmluZmluaXRlTG9vcCA/IGxhc3RQb3NpdGlvbiA6IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPiBsYXN0UG9zaXRpb24pIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gX3RoaXM1LnByb3BzLmluZmluaXRlTG9vcCA/IDAgOiBsYXN0UG9zaXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmVlZENsb25lZFNsaWRlKSB7XG4gICAgICAgICAgICAvLyBzZXQgc3dpcGluZyB0cnVlIHdvdWxkIGRpc2FibGUgdHJhbnNpdGlvbiB0aW1lLCB0aGVuIHdlIHNldCBzbGlkZXIgdG8gY2xvbmVkIHBvc2l0aW9uIGFuZCBmb3JjZSBhIHJlZmxvd1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBvbmx5IG5lZWRlZCBmb3Igbm9uLXN3aXBpbmcgc2l0dWF0aW9uXG4gICAgICAgICAgICBfdGhpczUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHN3aXBpbmc6IHRydWVcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAob2xkUG9zaXRpb24gPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczUucHJvcHMuY2VudGVyTW9kZSAmJiBfdGhpczUucHJvcHMuYXhpcyA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUuc2V0UG9zaXRpb24oJy0nICsgKChsYXN0UG9zaXRpb24gKyAyKSAqIF90aGlzNS5wcm9wcy5jZW50ZXJTbGlkZVBlcmNlbnRhZ2UgLSAoMTAwIC0gX3RoaXM1LnByb3BzLmNlbnRlclNsaWRlUGVyY2VudGFnZSkgLyAyKSArICclJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUuc2V0UG9zaXRpb24oJy0nICsgKGxhc3RQb3NpdGlvbiArIDIpICogMTAwICsgJyUnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2xkUG9zaXRpb24gPiBsYXN0UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM1LnNldFBvc2l0aW9uKDAsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF90aGlzNS5zZWxlY3RJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtOiBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgc3dpcGluZzogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXM1LnNlbGVjdEl0ZW0oe1xuICAgICAgICAgICAgICAgIC8vIGlmIGl0J3Mgbm90IGEgc2xpZGVyLCB3ZSBkb24ndCBuZWVkIHRvIHNldCBwb3NpdGlvbiBoZXJlXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtOiBwb3NpdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkb24ndCByZXNldCBhdXRvIHBsYXkgd2hlbiBzdG9wIG9uIGhvdmVyIGlzIGVuYWJsZWQsIGRvaW5nIHNvIHdpbGwgdHJpZ2dlciBhIGNhbGwgdG8gYXV0byBwbGF5IG1vcmUgdGhhbiBvbmNlXG4gICAgICAgIC8vIGFuZCB3aWxsIHJlc3VsdCBpbiB0aGUgaW50ZXJ2YWwgZnVuY3Rpb24gbm90IGJlaW5nIGNsZWFyZWQgY29ycmVjdGx5LlxuICAgICAgICBpZiAoX3RoaXM1LnN0YXRlLmF1dG9QbGF5ICYmIF90aGlzNS5zdGF0ZS5pc01vdXNlRW50ZXJlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF90aGlzNS5yZXNldEF1dG9QbGF5KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5vbkNsaWNrTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM1LmluY3JlbWVudCgxLCBmYWxzZSk7XG4gICAgfTtcblxuICAgIHRoaXMub25DbGlja1ByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzNS5kZWNyZW1lbnQoMSwgZmFsc2UpO1xuICAgIH07XG5cbiAgICB0aGlzLm9uU3dpcGVGb3J3YXJkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczUuaW5jcmVtZW50KDEsIHRydWUpO1xuICAgIH07XG5cbiAgICB0aGlzLm9uU3dpcGVCYWNrd2FyZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzNS5kZWNyZW1lbnQoMSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHRoaXMuY2hhbmdlSXRlbSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghZS5rZXkgfHwgZS5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgIHZhciBuZXdJbmRleCA9IGUudGFyZ2V0LnZhbHVlO1xuXG4gICAgICAgICAgICBfdGhpczUuc2VsZWN0SXRlbSh7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtOiBuZXdJbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zZWxlY3RJdGVtID0gZnVuY3Rpb24gKHN0YXRlLCBjYikge1xuICAgICAgICBfdGhpczUuc2V0U3RhdGUoc3RhdGUsIGNiKTtcbiAgICAgICAgX3RoaXM1LmhhbmRsZU9uQ2hhbmdlKHN0YXRlLnNlbGVjdGVkSXRlbSwgX3JlYWN0LkNoaWxkcmVuLnRvQXJyYXkoX3RoaXM1LnByb3BzLmNoaWxkcmVuKVtzdGF0ZS5zZWxlY3RlZEl0ZW1dKTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRJbml0aWFsSW1hZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxlY3RlZEl0ZW0gPSBfdGhpczUucHJvcHMuc2VsZWN0ZWRJdGVtO1xuICAgICAgICB2YXIgaXRlbSA9IF90aGlzNS5pdGVtc1JlZiAmJiBfdGhpczUuaXRlbXNSZWZbc2VsZWN0ZWRJdGVtXTtcbiAgICAgICAgdmFyIGltYWdlcyA9IGl0ZW0gJiYgaXRlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW1nJyk7XG4gICAgICAgIHJldHVybiBpbWFnZXMgJiYgaW1hZ2VzW3NlbGVjdGVkSXRlbV07XG4gICAgfTtcblxuICAgIHRoaXMuZ2V0VmFyaWFibGVJbWFnZUhlaWdodCA9IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICB2YXIgaXRlbSA9IF90aGlzNS5pdGVtc1JlZiAmJiBfdGhpczUuaXRlbXNSZWZbcG9zaXRpb25dO1xuICAgICAgICB2YXIgaW1hZ2VzID0gaXRlbSAmJiBpdGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKTtcbiAgICAgICAgaWYgKF90aGlzNS5zdGF0ZS5oYXNNb3VudCAmJiBpbWFnZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGltYWdlID0gaW1hZ2VzWzBdO1xuXG4gICAgICAgICAgICBpZiAoIWltYWdlLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGltYWdlIGlzIHN0aWxsIGxvYWRpbmcsIHRoZSBzaXplIHdvbid0IGJlIGF2YWlsYWJsZSBzbyB3ZSB0cmlnZ2VyIGEgbmV3IHJlbmRlciBhZnRlciBpdCdzIGRvbmVcbiAgICAgICAgICAgICAgICB2YXIgb25JbWFnZUxvYWQgPSBmdW5jdGlvbiBvbkltYWdlTG9hZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM1LmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkltYWdlTG9hZCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkltYWdlTG9hZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBpbWFnZS5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICByZXR1cm4gaGVpZ2h0ID4gMCA/IGhlaWdodCA6IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ2Fyb3VzZWw7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoNzgpOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcyk7XG4gICAgZ2xvYmFsLnJlYWN0U3dpcGUgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIGV4cG9ydHMuc2V0SGFzU3VwcG9ydFRvQ2FwdHVyZU9wdGlvbiA9IHNldEhhc1N1cHBvcnRUb0NhcHR1cmVPcHRpb247XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIHN1cHBvcnRzQ2FwdHVyZU9wdGlvbiA9IGZhbHNlO1xuICBmdW5jdGlvbiBzZXRIYXNTdXBwb3J0VG9DYXB0dXJlT3B0aW9uKGhhc1N1cHBvcnQpIHtcbiAgICBzdXBwb3J0c0NhcHR1cmVPcHRpb24gPSBoYXNTdXBwb3J0O1xuICB9XG5cbiAgdHJ5IHtcbiAgICBhZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBudWxsLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdjYXB0dXJlJywgeyBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgc2V0SGFzU3VwcG9ydFRvQ2FwdHVyZU9wdGlvbih0cnVlKTtcbiAgICAgIH0gfSkpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIGZ1bmN0aW9uIGdldFNhZmVFdmVudEhhbmRsZXJPcHRzKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7IGNhcHR1cmU6IHRydWUgfTtcblxuICAgIHJldHVybiBzdXBwb3J0c0NhcHR1cmVPcHRpb24gPyBvcHRpb25zIDogb3B0aW9ucy5jYXB0dXJlO1xuICB9XG5cbiAgLyoqXG4gICAqIFtnZXRQb3NpdGlvbiByZXR1cm5zIGEgcG9zaXRpb24gZWxlbWVudCB0aGF0IHdvcmtzIGZvciBtb3VzZSBvciB0b3VjaCBldmVudHNdXG4gICAqIEBwYXJhbSAge1tFdmVudF19IGV2ZW50IFt0aGUgcmVjZWl2ZWQgZXZlbnRdXG4gICAqIEByZXR1cm4ge1tPYmplY3RdfSAgICAgIFt4IGFuZCB5IGNvb3Jkc11cbiAgICovXG4gIGZ1bmN0aW9uIGdldFBvc2l0aW9uKGV2ZW50KSB7XG4gICAgaWYgKCd0b3VjaGVzJyBpbiBldmVudCkge1xuICAgICAgdmFyIF9ldmVudCR0b3VjaGVzJCA9IGV2ZW50LnRvdWNoZXNbMF0sXG4gICAgICAgICAgcGFnZVggPSBfZXZlbnQkdG91Y2hlcyQucGFnZVgsXG4gICAgICAgICAgcGFnZVkgPSBfZXZlbnQkdG91Y2hlcyQucGFnZVk7XG5cbiAgICAgIHJldHVybiB7IHg6IHBhZ2VYLCB5OiBwYWdlWSB9O1xuICAgIH1cblxuICAgIHZhciBzY3JlZW5YID0gZXZlbnQuc2NyZWVuWCxcbiAgICAgICAgc2NyZWVuWSA9IGV2ZW50LnNjcmVlblk7XG5cbiAgICByZXR1cm4geyB4OiBzY3JlZW5YLCB5OiBzY3JlZW5ZIH07XG4gIH1cblxuICB2YXIgUmVhY3RTd2lwZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFJlYWN0U3dpcGUsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUmVhY3RTd2lwZSgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVhY3RTd2lwZSk7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gUmVhY3RTd2lwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlYWN0U3dpcGUpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgICAgX3RoaXMuX2hhbmRsZVN3aXBlU3RhcnQgPSBfdGhpcy5faGFuZGxlU3dpcGVTdGFydC5iaW5kKF90aGlzKTtcbiAgICAgIF90aGlzLl9oYW5kbGVTd2lwZU1vdmUgPSBfdGhpcy5faGFuZGxlU3dpcGVNb3ZlLmJpbmQoX3RoaXMpO1xuICAgICAgX3RoaXMuX2hhbmRsZVN3aXBlRW5kID0gX3RoaXMuX2hhbmRsZVN3aXBlRW5kLmJpbmQoX3RoaXMpO1xuXG4gICAgICBfdGhpcy5fb25Nb3VzZURvd24gPSBfdGhpcy5fb25Nb3VzZURvd24uYmluZChfdGhpcyk7XG4gICAgICBfdGhpcy5fb25Nb3VzZU1vdmUgPSBfdGhpcy5fb25Nb3VzZU1vdmUuYmluZChfdGhpcyk7XG4gICAgICBfdGhpcy5fb25Nb3VzZVVwID0gX3RoaXMuX29uTW91c2VVcC5iaW5kKF90aGlzKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoUmVhY3RTd2lwZSwgW3tcbiAgICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3dpcGVyKSB7XG4gICAgICAgICAgdGhpcy5zd2lwZXIuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlU3dpcGVNb3ZlLCBnZXRTYWZlRXZlbnRIYW5kbGVyT3B0cyh7XG4gICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN3aXBlcikge1xuICAgICAgICAgIHRoaXMuc3dpcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZVN3aXBlTW92ZSwgZ2V0U2FmZUV2ZW50SGFuZGxlck9wdHMoe1xuICAgICAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnX29uTW91c2VEb3duJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Nb3VzZURvd24oZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmFsbG93TW91c2VFdmVudHMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IHRydWU7XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX29uTW91c2VVcCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlKTtcblxuICAgICAgICB0aGlzLl9oYW5kbGVTd2lwZVN0YXJ0KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdfb25Nb3VzZU1vdmUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbk1vdXNlTW92ZShldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMubW91c2VEb3duKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faGFuZGxlU3dpcGVNb3ZlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdfb25Nb3VzZVVwJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Nb3VzZVVwKGV2ZW50KSB7XG4gICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XG5cbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX29uTW91c2VVcCk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlKTtcblxuICAgICAgICB0aGlzLl9oYW5kbGVTd2lwZUVuZChldmVudCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnX2hhbmRsZVN3aXBlU3RhcnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVTd2lwZVN0YXJ0KGV2ZW50KSB7XG4gICAgICAgIHZhciBfZ2V0UG9zaXRpb24gPSBnZXRQb3NpdGlvbihldmVudCksXG4gICAgICAgICAgICB4ID0gX2dldFBvc2l0aW9uLngsXG4gICAgICAgICAgICB5ID0gX2dldFBvc2l0aW9uLnk7XG5cbiAgICAgICAgdGhpcy5tb3ZlU3RhcnQgPSB7IHg6IHgsIHk6IHkgfTtcbiAgICAgICAgdGhpcy5wcm9wcy5vblN3aXBlU3RhcnQoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ19oYW5kbGVTd2lwZU1vdmUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVTd2lwZU1vdmUoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vdmVTdGFydCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfZ2V0UG9zaXRpb24yID0gZ2V0UG9zaXRpb24oZXZlbnQpLFxuICAgICAgICAgICAgeCA9IF9nZXRQb3NpdGlvbjIueCxcbiAgICAgICAgICAgIHkgPSBfZ2V0UG9zaXRpb24yLnk7XG5cbiAgICAgICAgdmFyIGRlbHRhWCA9IHggLSB0aGlzLm1vdmVTdGFydC54O1xuICAgICAgICB2YXIgZGVsdGFZID0geSAtIHRoaXMubW92ZVN0YXJ0Lnk7XG4gICAgICAgIHRoaXMubW92aW5nID0gdHJ1ZTtcblxuICAgICAgICAvLyBoYW5kbGluZyB0aGUgcmVzcG9uc2FiaWxpdHkgb2YgY2FuY2VsbGluZyB0aGUgc2Nyb2xsIHRvXG4gICAgICAgIC8vIHRoZSBjb21wb25lbnQgaGFuZGxpbmcgdGhlIGV2ZW50XG4gICAgICAgIHZhciBzaG91bGRQcmV2ZW50RGVmYXVsdCA9IHRoaXMucHJvcHMub25Td2lwZU1vdmUoe1xuICAgICAgICAgIHg6IGRlbHRhWCxcbiAgICAgICAgICB5OiBkZWx0YVlcbiAgICAgICAgfSwgZXZlbnQpO1xuXG4gICAgICAgIGlmIChzaG91bGRQcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1vdmVQb3NpdGlvbiA9IHsgZGVsdGFYOiBkZWx0YVgsIGRlbHRhWTogZGVsdGFZIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnX2hhbmRsZVN3aXBlRW5kJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlU3dpcGVFbmQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vblN3aXBlRW5kKGV2ZW50KTtcblxuICAgICAgICB2YXIgdG9sZXJhbmNlID0gdGhpcy5wcm9wcy50b2xlcmFuY2U7XG5cblxuICAgICAgICBpZiAodGhpcy5tb3ZpbmcgJiYgdGhpcy5tb3ZlUG9zaXRpb24pIHtcbiAgICAgICAgICBpZiAodGhpcy5tb3ZlUG9zaXRpb24uZGVsdGFYIDwgLXRvbGVyYW5jZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vblN3aXBlTGVmdCgxLCBldmVudCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vdmVQb3NpdGlvbi5kZWx0YVggPiB0b2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25Td2lwZVJpZ2h0KDEsIGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMubW92ZVBvc2l0aW9uLmRlbHRhWSA8IC10b2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25Td2lwZVVwKDEsIGV2ZW50KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW92ZVBvc2l0aW9uLmRlbHRhWSA+IHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vblN3aXBlRG93bigxLCBldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tb3ZlU3RhcnQgPSBudWxsO1xuICAgICAgICB0aGlzLm1vdmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1vdmVQb3NpdGlvbiA9IG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICB0aGlzLnByb3BzLnRhZ05hbWUsXG4gICAgICAgICAge1xuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnN3aXBlciA9IG5vZGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuX29uTW91c2VEb3duLFxuICAgICAgICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLl9oYW5kbGVTd2lwZVN0YXJ0LFxuICAgICAgICAgICAgb25Ub3VjaEVuZDogdGhpcy5faGFuZGxlU3dpcGVFbmQsXG4gICAgICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMucHJvcHMuc3R5bGVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUmVhY3RTd2lwZTtcbiAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICBSZWFjdFN3aXBlLmRpc3BsYXlOYW1lID0gJ1JlYWN0U3dpcGUnO1xuICBSZWFjdFN3aXBlLnByb3BUeXBlcyA9IHtcbiAgICB0YWdOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAgIGFsbG93TW91c2VFdmVudHM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBvblN3aXBlVXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgICBvblN3aXBlRG93bjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAgIG9uU3dpcGVMZWZ0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gICAgb25Td2lwZVJpZ2h0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gICAgb25Td2lwZVN0YXJ0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gICAgb25Td2lwZU1vdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgICBvblN3aXBlRW5kOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gICAgdG9sZXJhbmNlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlci5pc1JlcXVpcmVkXG4gIH07XG4gIFJlYWN0U3dpcGUuZGVmYXVsdFByb3BzID0ge1xuICAgIHRhZ05hbWU6ICdkaXYnLFxuICAgIGFsbG93TW91c2VFdmVudHM6IGZhbHNlLFxuICAgIG9uU3dpcGVVcDogZnVuY3Rpb24gb25Td2lwZVVwKCkge30sXG4gICAgb25Td2lwZURvd246IGZ1bmN0aW9uIG9uU3dpcGVEb3duKCkge30sXG4gICAgb25Td2lwZUxlZnQ6IGZ1bmN0aW9uIG9uU3dpcGVMZWZ0KCkge30sXG4gICAgb25Td2lwZVJpZ2h0OiBmdW5jdGlvbiBvblN3aXBlUmlnaHQoKSB7fSxcbiAgICBvblN3aXBlU3RhcnQ6IGZ1bmN0aW9uIG9uU3dpcGVTdGFydCgpIHt9LFxuICAgIG9uU3dpcGVNb3ZlOiBmdW5jdGlvbiBvblN3aXBlTW92ZSgpIHt9LFxuICAgIG9uU3dpcGVFbmQ6IGZ1bmN0aW9uIG9uU3dpcGVFbmQoKSB7fSxcblxuICAgIHRvbGVyYW5jZTogMFxuICB9O1xuICBleHBvcnRzLmRlZmF1bHQgPSBSZWFjdFN3aXBlO1xufSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG52YXIgb3V0ZXJXaWR0aCA9IGV4cG9ydHMub3V0ZXJXaWR0aCA9IGZ1bmN0aW9uIG91dGVyV2lkdGgoZWwpIHtcblx0dmFyIHdpZHRoID0gZWwub2Zmc2V0V2lkdGg7XG5cdHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuXG5cdHdpZHRoICs9IHBhcnNlSW50KHN0eWxlLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoc3R5bGUubWFyZ2luUmlnaHQpO1xuXHRyZXR1cm4gd2lkdGg7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xudmFyIHVuaXQgPSBleHBvcnRzLnVuaXQgPSBmdW5jdGlvbiB1bml0KHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgIGlmICghLyhwdHxweHxlbXxyZW18dnd8dmh8JSkkLy50ZXN0KHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBwcm9wIGAnICsgcHJvcE5hbWUgKyAnYCBzdXBwbGllZCB0bycgKyAnIGAnICsgY29tcG9uZW50TmFtZSArICdgLiBWYWxpZGF0aW9uIGZhaWxlZC4gSXQgbmVlZHMgdG8gYmUgYSBzaXplIHVuaXQgbGlrZSBwdCwgcHgsIGVtLCByZW0sIHZ3LCAlJyk7XG4gICAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoJ3RzbGliJyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIGhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJykpO1xudmFyIGNyZWF0ZUNvbnRleHQgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNvbnRleHQnKSk7XG52YXIgY2xvbmVEZWVwID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ2xvZGFzaC5jbG9uZWRlZXAnKSk7XG52YXIgdG9QYXRoID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ2xvZGFzaC50b3BhdGgnKSk7XG52YXIgaXNFcXVhbCA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdyZWFjdC1mYXN0LWNvbXBhcmUnKSk7XG52YXIgd2FybmluZyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCd3YXJuaW5nJykpO1xudmFyIGRlZXBtZXJnZSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdkZWVwbWVyZ2UnKSk7XG5cbnZhciBfYTtcbnZhciBGb3JtaWtQcm92aWRlciA9IChfYSA9IGNyZWF0ZUNvbnRleHQoe30pLCBfYS5Qcm92aWRlciksIEZvcm1pa0NvbnN1bWVyID0gX2EuQ29uc3VtZXI7XG5mdW5jdGlvbiBjb25uZWN0KENvbXApIHtcbiAgICB2YXIgQyA9IGZ1bmN0aW9uIChwcm9wcykgeyByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybWlrQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChmb3JtaWspIHsgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgcHJvcHMsIHsgZm9ybWlrOiBmb3JtaWsgfSkpOyB9KSk7IH07XG4gICAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcDtcbiAgICByZXR1cm4gaG9pc3ROb25SZWFjdFN0YXRpY3MoQywgQ29tcCk7XG59XG5cbmZ1bmN0aW9uIGdldEluKG9iaiwga2V5LCBkZWYsIHApIHtcbiAgICBpZiAocCA9PT0gdm9pZCAwKSB7IHAgPSAwOyB9XG4gICAgdmFyIHBhdGggPSB0b1BhdGgoa2V5KTtcbiAgICB3aGlsZSAob2JqICYmIHAgPCBwYXRoLmxlbmd0aCkge1xuICAgICAgICBvYmogPSBvYmpbcGF0aFtwKytdXTtcbiAgICB9XG4gICAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkID8gZGVmIDogb2JqO1xufVxuZnVuY3Rpb24gc2V0SW4ob2JqLCBwYXRoLCB2YWx1ZSkge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgcmVzVmFsID0gcmVzO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcGF0aEFycmF5ID0gdG9QYXRoKHBhdGgpO1xuICAgIGZvciAoOyBpIDwgcGF0aEFycmF5Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICB2YXIgY3VycmVudFBhdGggPSBwYXRoQXJyYXlbaV07XG4gICAgICAgIHZhciBjdXJyZW50T2JqID0gZ2V0SW4ob2JqLCBwYXRoQXJyYXkuc2xpY2UoMCwgaSArIDEpKTtcbiAgICAgICAgaWYgKHJlc1ZhbFtjdXJyZW50UGF0aF0pIHtcbiAgICAgICAgICAgIHJlc1ZhbCA9IHJlc1ZhbFtjdXJyZW50UGF0aF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3VycmVudE9iaikge1xuICAgICAgICAgICAgcmVzVmFsID0gcmVzVmFsW2N1cnJlbnRQYXRoXSA9IGNsb25lRGVlcChjdXJyZW50T2JqKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBuZXh0UGF0aCA9IHBhdGhBcnJheVtpICsgMV07XG4gICAgICAgICAgICByZXNWYWwgPSByZXNWYWxbY3VycmVudFBhdGhdID1cbiAgICAgICAgICAgICAgICBpc0ludGVnZXIobmV4dFBhdGgpICYmIE51bWJlcihuZXh0UGF0aCkgPj0gMCA/IFtdIDoge307XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKChpID09PSAwID8gb2JqIDogcmVzVmFsKVtwYXRoQXJyYXlbaV1dID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGUgcmVzVmFsW3BhdGhBcnJheVtpXV07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXNWYWxbcGF0aEFycmF5W2ldXSA9IHZhbHVlO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgb2JqLCByZXMpO1xuICAgIGlmIChpID09PSAwICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVsZXRlIHJlc3VsdFtwYXRoQXJyYXlbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gc2V0TmVzdGVkT2JqZWN0VmFsdWVzKG9iamVjdCwgdmFsdWUsIHZpc2l0ZWQsIHJlc3BvbnNlKSB7XG4gICAgaWYgKHZpc2l0ZWQgPT09IHZvaWQgMCkgeyB2aXNpdGVkID0gbmV3IFdlYWtNYXAoKTsgfVxuICAgIGlmIChyZXNwb25zZSA9PT0gdm9pZCAwKSB7IHJlc3BvbnNlID0ge307IH1cbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXMob2JqZWN0KTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGsgPSBfYVtfaV07XG4gICAgICAgIHZhciB2YWwgPSBvYmplY3Rba107XG4gICAgICAgIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgICAgICAgICBpZiAoIXZpc2l0ZWQuZ2V0KHZhbCkpIHtcbiAgICAgICAgICAgICAgICB2aXNpdGVkLnNldCh2YWwsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlW2tdID0gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fTtcbiAgICAgICAgICAgICAgICBzZXROZXN0ZWRPYmplY3RWYWx1ZXModmFsLCB2YWx1ZSwgdmlzaXRlZCwgcmVzcG9uc2Vba10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2Vba10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJztcbn07XG52YXIgaXNPYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jztcbn07XG52YXIgaXNJbnRlZ2VyID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBTdHJpbmcoTWF0aC5mbG9vcihOdW1iZXIob2JqKSkpID09PSBvYmo7XG59O1xudmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG59O1xudmFyIGlzTmFOID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICE9PSBvYmo7IH07XG52YXIgaXNFbXB0eUNoaWxkcmVuID0gZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn07XG52YXIgaXNQcm9taXNlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnRoZW4pO1xufTtcbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSB7XG4gICAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICAgIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZG9jLmJvZHk7XG4gICAgfVxufVxuXG52YXIgRm9ybWlrID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhGb3JtaWssIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRm9ybWlrKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5oY0NhY2hlID0ge307XG4gICAgICAgIF90aGlzLmhiQ2FjaGUgPSB7fTtcbiAgICAgICAgX3RoaXMucmVnaXN0ZXJGaWVsZCA9IGZ1bmN0aW9uIChuYW1lLCBDb21wKSB7XG4gICAgICAgICAgICBfdGhpcy5maWVsZHNbbmFtZV0gPSBDb21wO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy51bnJlZ2lzdGVyRmllbGQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzLmZpZWxkc1tuYW1lXTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc2V0RXJyb3JzID0gZnVuY3Rpb24gKGVycm9ycykge1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBlcnJvcnM6IGVycm9ycyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc2V0VG91Y2hlZCA9IGZ1bmN0aW9uICh0b3VjaGVkKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IHRvdWNoZWQ6IHRvdWNoZWQgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy52YWxpZGF0ZU9uQmx1cikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW5WYWxpZGF0aW9ucyhfdGhpcy5zdGF0ZS52YWx1ZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zZXRWYWx1ZXMgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IHZhbHVlczogdmFsdWVzIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMudmFsaWRhdGVPbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW5WYWxpZGF0aW9ucyh2YWx1ZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zZXRTdGF0dXMgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IHN0YXR1czogc3RhdHVzIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zZXRFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBlcnJvcjogZXJyb3IgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNldFN1Ym1pdHRpbmcgPSBmdW5jdGlvbiAoaXNTdWJtaXR0aW5nKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuZGlkTW91bnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzU3VibWl0dGluZzogaXNTdWJtaXR0aW5nIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy52YWxpZGF0ZUZpZWxkID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzVmFsaWRhdGluZzogdHJ1ZSB9KTtcbiAgICAgICAgICAgIF90aGlzLnJ1blNpbmdsZUZpZWxkTGV2ZWxWYWxpZGF0aW9uKGZpZWxkLCBnZXRJbihfdGhpcy5zdGF0ZS52YWx1ZXMsIGZpZWxkKSkudGhlbihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZGlkTW91bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBzZXRJbihfdGhpcy5zdGF0ZS5lcnJvcnMsIGZpZWxkLCBlcnJvciksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMucnVuU2luZ2xlRmllbGRMZXZlbFZhbGlkYXRpb24gPSBmdW5jdGlvbiAoZmllbGQsIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpcy5maWVsZHNbZmllbGRdLnByb3BzLnZhbGlkYXRlKHZhbHVlKSk7XG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4OyB9LCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnJ1blZhbGlkYXRpb25TY2hlbWEgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsaWRhdGlvblNjaGVtYSA9IF90aGlzLnByb3BzLnZhbGlkYXRpb25TY2hlbWE7XG4gICAgICAgICAgICAgICAgdmFyIHNjaGVtYSA9IGlzRnVuY3Rpb24odmFsaWRhdGlvblNjaGVtYSlcbiAgICAgICAgICAgICAgICAgICAgPyB2YWxpZGF0aW9uU2NoZW1hKClcbiAgICAgICAgICAgICAgICAgICAgOiB2YWxpZGF0aW9uU2NoZW1hO1xuICAgICAgICAgICAgICAgIHZhbGlkYXRlWXVwU2NoZW1hKHZhbHVlcywgc2NoZW1hKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7fSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHl1cFRvRm9ybUVycm9ycyhlcnIpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5ydW5WYWxpZGF0aW9ucyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXMgPT09IHZvaWQgMCkgeyB2YWx1ZXMgPSBfdGhpcy5zdGF0ZS52YWx1ZXM7IH1cbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgaXNWYWxpZGF0aW5nOiB0cnVlIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICBfdGhpcy5ydW5GaWVsZExldmVsVmFsaWRhdGlvbnModmFsdWVzKSxcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy52YWxpZGF0aW9uU2NoZW1hID8gX3RoaXMucnVuVmFsaWRhdGlvblNjaGVtYSh2YWx1ZXMpIDoge30sXG4gICAgICAgICAgICAgICAgX3RoaXMucHJvcHMudmFsaWRhdGUgPyBfdGhpcy5ydW5WYWxpZGF0ZUhhbmRsZXIodmFsdWVzKSA6IHt9LFxuICAgICAgICAgICAgXSkudGhlbihmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmllbGRFcnJvcnMgPSBfYVswXSwgc2NoZW1hRXJyb3JzID0gX2FbMV0sIGhhbmRsZXJFcnJvcnMgPSBfYVsyXTtcbiAgICAgICAgICAgICAgICB2YXIgY29tYmluZWRFcnJvcnMgPSBkZWVwbWVyZ2UuYWxsKFtmaWVsZEVycm9ycywgc2NoZW1hRXJyb3JzLCBoYW5kbGVyRXJyb3JzXSwgeyBhcnJheU1lcmdlOiBhcnJheU1lcmdlIH0pO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5kaWRNb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzVmFsaWRhdGluZzogZmFsc2UsIGVycm9yczogY29tYmluZWRFcnJvcnMgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb21iaW5lZEVycm9ycztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnRPclBhdGgpIHtcbiAgICAgICAgICAgIHZhciBleGVjdXRlQ2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50T3JUZXh0VmFsdWUsIG1heWJlUGF0aCkge1xuICAgICAgICAgICAgICAgIHZhciBmaWVsZCA9IG1heWJlUGF0aDtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gZXZlbnRPclRleHRWYWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkO1xuICAgICAgICAgICAgICAgIGlmICghaXNTdHJpbmcoZXZlbnRPclRleHRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50T3JUZXh0VmFsdWUucGVyc2lzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRPclRleHRWYWx1ZS5wZXJzaXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hID0gZXZlbnRPclRleHRWYWx1ZS50YXJnZXQsIHR5cGUgPSBfYS50eXBlLCBuYW1lXzEgPSBfYS5uYW1lLCBpZCA9IF9hLmlkLCB2YWx1ZSA9IF9hLnZhbHVlLCBjaGVja2VkID0gX2EuY2hlY2tlZCwgb3V0ZXJIVE1MID0gX2Eub3V0ZXJIVE1MO1xuICAgICAgICAgICAgICAgICAgICBmaWVsZCA9IG1heWJlUGF0aCA/IG1heWJlUGF0aCA6IG5hbWVfMSA/IG5hbWVfMSA6IGlkO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpZWxkICYmIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5BYm91dE1pc3NpbmdJZGVudGlmaWVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sQ29udGVudDogb3V0ZXJIVE1MLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50YXRpb25BbmNob3JMaW5rOiAnaGFuZGxlY2hhbmdlLWUtcmVhY3RjaGFuZ2VldmVudGFueS0tdm9pZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlck5hbWU6ICdoYW5kbGVDaGFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFsID0gL251bWJlcnxyYW5nZS8udGVzdCh0eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKHBhcnNlZCA9IHBhcnNlRmxvYXQodmFsdWUpKSwgaXNOYU4ocGFyc2VkKSA/ICcnIDogcGFyc2VkKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAvY2hlY2tib3gvLnRlc3QodHlwZSkgPyBjaGVja2VkIDogdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7IHJldHVybiAodHNsaWJfMS5fX2Fzc2lnbih7fSwgcHJldlN0YXRlLCB7IHZhbHVlczogc2V0SW4ocHJldlN0YXRlLnZhbHVlcywgZmllbGQsIHZhbCkgfSkpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMudmFsaWRhdGVPbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJ1blZhbGlkYXRpb25zKHNldEluKF90aGlzLnN0YXRlLnZhbHVlcywgZmllbGQsIHZhbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGlzU3RyaW5nKGV2ZW50T3JQYXRoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKF90aGlzLmhjQ2FjaGVbZXZlbnRPclBhdGhdKVxuICAgICAgICAgICAgICAgICAgICA/IF90aGlzLmhjQ2FjaGVbZXZlbnRPclBhdGhdXG4gICAgICAgICAgICAgICAgICAgIDogKF90aGlzLmhjQ2FjaGVbZXZlbnRPclBhdGhdID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhlY3V0ZUNoYW5nZShldmVudCwgZXZlbnRPclBhdGgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4ZWN1dGVDaGFuZ2UoZXZlbnRPclBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zZXRGaWVsZFZhbHVlID0gZnVuY3Rpb24gKGZpZWxkLCB2YWx1ZSwgc2hvdWxkVmFsaWRhdGUpIHtcbiAgICAgICAgICAgIGlmIChzaG91bGRWYWxpZGF0ZSA9PT0gdm9pZCAwKSB7IHNob3VsZFZhbGlkYXRlID0gdHJ1ZTsgfVxuICAgICAgICAgICAgaWYgKF90aGlzLmRpZE1vdW50KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkgeyByZXR1cm4gKHRzbGliXzEuX19hc3NpZ24oe30sIHByZXZTdGF0ZSwgeyB2YWx1ZXM6IHNldEluKHByZXZTdGF0ZS52YWx1ZXMsIGZpZWxkLCB2YWx1ZSkgfSkpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy52YWxpZGF0ZU9uQ2hhbmdlICYmIHNob3VsZFZhbGlkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW5WYWxpZGF0aW9ucyhfdGhpcy5zdGF0ZS52YWx1ZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZVN1Ym1pdCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoZSAmJiBlLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuc3VibWl0Rm9ybSgpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zdWJtaXRGb3JtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkgeyByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICB0b3VjaGVkOiBzZXROZXN0ZWRPYmplY3RWYWx1ZXMocHJldlN0YXRlLnZhbHVlcywgdHJ1ZSksXG4gICAgICAgICAgICAgICAgaXNTdWJtaXR0aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN1Ym1pdENvdW50OiBwcmV2U3RhdGUuc3VibWl0Q291bnQgKyAxLFxuICAgICAgICAgICAgfSk7IH0pO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJ1blZhbGlkYXRpb25zKCkudGhlbihmdW5jdGlvbiAoY29tYmluZWRFcnJvcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IE9iamVjdC5rZXlzKGNvbWJpbmVkRXJyb3JzKS5sZW5ndGggPT09IDA7XG4gICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXhlY3V0ZVN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5kaWRNb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzU3VibWl0dGluZzogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmV4ZWN1dGVTdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vblN1Ym1pdChfdGhpcy5zdGF0ZS52YWx1ZXMsIF90aGlzLmdldEZvcm1pa0FjdGlvbnMoKSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoZXZlbnRPclN0cmluZykge1xuICAgICAgICAgICAgdmFyIGV4ZWN1dGVCbHVyID0gZnVuY3Rpb24gKGUsIHBhdGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5wZXJzaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGUucGVyc2lzdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBlLnRhcmdldCwgbmFtZSA9IF9hLm5hbWUsIGlkID0gX2EuaWQsIG91dGVySFRNTCA9IF9hLm91dGVySFRNTDtcbiAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSBwYXRoID8gcGF0aCA6IG5hbWUgPyBuYW1lIDogaWQ7XG4gICAgICAgICAgICAgICAgaWYgKCFmaWVsZCAmJiBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm5BYm91dE1pc3NpbmdJZGVudGlmaWVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxDb250ZW50OiBvdXRlckhUTUwsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uQW5jaG9yTGluazogJ2hhbmRsZWJsdXItZS1hbnktLXZvaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlck5hbWU6ICdoYW5kbGVCbHVyJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHsgcmV0dXJuICh7XG4gICAgICAgICAgICAgICAgICAgIHRvdWNoZWQ6IHNldEluKHByZXZTdGF0ZS50b3VjaGVkLCBmaWVsZCwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgfSk7IH0pO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy52YWxpZGF0ZU9uQmx1cikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW5WYWxpZGF0aW9ucyhfdGhpcy5zdGF0ZS52YWx1ZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcoZXZlbnRPclN0cmluZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihfdGhpcy5oYkNhY2hlW2V2ZW50T3JTdHJpbmddKVxuICAgICAgICAgICAgICAgICAgICA/IF90aGlzLmhiQ2FjaGVbZXZlbnRPclN0cmluZ11cbiAgICAgICAgICAgICAgICAgICAgOiAoX3RoaXMuaGJDYWNoZVtldmVudE9yU3RyaW5nXSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGVCbHVyKGV2ZW50LCBldmVudE9yU3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBleGVjdXRlQmx1cihldmVudE9yU3RyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc2V0RmllbGRUb3VjaGVkID0gZnVuY3Rpb24gKGZpZWxkLCB0b3VjaGVkLCBzaG91bGRWYWxpZGF0ZSkge1xuICAgICAgICAgICAgaWYgKHRvdWNoZWQgPT09IHZvaWQgMCkgeyB0b3VjaGVkID0gdHJ1ZTsgfVxuICAgICAgICAgICAgaWYgKHNob3VsZFZhbGlkYXRlID09PSB2b2lkIDApIHsgc2hvdWxkVmFsaWRhdGUgPSB0cnVlOyB9XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7IHJldHVybiAodHNsaWJfMS5fX2Fzc2lnbih7fSwgcHJldlN0YXRlLCB7IHRvdWNoZWQ6IHNldEluKHByZXZTdGF0ZS50b3VjaGVkLCBmaWVsZCwgdG91Y2hlZCkgfSkpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLnZhbGlkYXRlT25CbHVyICYmIHNob3VsZFZhbGlkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJ1blZhbGlkYXRpb25zKF90aGlzLnN0YXRlLnZhbHVlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNldEZpZWxkRXJyb3IgPSBmdW5jdGlvbiAoZmllbGQsIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHsgcmV0dXJuICh0c2xpYl8xLl9fYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgZXJyb3JzOiBzZXRJbihwcmV2U3RhdGUuZXJyb3JzLCBmaWVsZCwgbWVzc2FnZSkgfSkpOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMucmVzZXRGb3JtID0gZnVuY3Rpb24gKG5leHRWYWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXh0VmFsdWVzID8gbmV4dFZhbHVlcyA6IF90aGlzLnByb3BzLmluaXRpYWxWYWx1ZXM7XG4gICAgICAgICAgICBfdGhpcy5pbml0aWFsVmFsdWVzID0gdmFsdWVzO1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGlzU3VibWl0dGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNWYWxpZGF0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcnM6IHt9LFxuICAgICAgICAgICAgICAgIHRvdWNoZWQ6IHt9LFxuICAgICAgICAgICAgICAgIGVycm9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICAgICAgICAgICAgc3VibWl0Q291bnQ6IDAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlUmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMub25SZXNldCkge1xuICAgICAgICAgICAgICAgIHZhciBtYXliZVByb21pc2VkT25SZXNldCA9IF90aGlzLnByb3BzLm9uUmVzZXQoX3RoaXMuc3RhdGUudmFsdWVzLCBfdGhpcy5nZXRGb3JtaWtBY3Rpb25zKCkpO1xuICAgICAgICAgICAgICAgIGlmIChpc1Byb21pc2UobWF5YmVQcm9taXNlZE9uUmVzZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZWRPblJlc2V0LnRoZW4oX3RoaXMucmVzZXRGb3JtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zZXRGb3JtaWtTdGF0ZSA9IGZ1bmN0aW9uIChzLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHMsIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuZ2V0Rm9ybWlrQWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVzZXRGb3JtOiBfdGhpcy5yZXNldEZvcm0sXG4gICAgICAgICAgICAgICAgc3VibWl0Rm9ybTogX3RoaXMuc3VibWl0Rm9ybSxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZUZvcm06IF90aGlzLnJ1blZhbGlkYXRpb25zLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRlRmllbGQ6IF90aGlzLnZhbGlkYXRlRmllbGQsXG4gICAgICAgICAgICAgICAgc2V0RXJyb3I6IF90aGlzLnNldEVycm9yLFxuICAgICAgICAgICAgICAgIHNldEVycm9yczogX3RoaXMuc2V0RXJyb3JzLFxuICAgICAgICAgICAgICAgIHNldEZpZWxkRXJyb3I6IF90aGlzLnNldEZpZWxkRXJyb3IsXG4gICAgICAgICAgICAgICAgc2V0RmllbGRUb3VjaGVkOiBfdGhpcy5zZXRGaWVsZFRvdWNoZWQsXG4gICAgICAgICAgICAgICAgc2V0RmllbGRWYWx1ZTogX3RoaXMuc2V0RmllbGRWYWx1ZSxcbiAgICAgICAgICAgICAgICBzZXRTdGF0dXM6IF90aGlzLnNldFN0YXR1cyxcbiAgICAgICAgICAgICAgICBzZXRTdWJtaXR0aW5nOiBfdGhpcy5zZXRTdWJtaXR0aW5nLFxuICAgICAgICAgICAgICAgIHNldFRvdWNoZWQ6IF90aGlzLnNldFRvdWNoZWQsXG4gICAgICAgICAgICAgICAgc2V0VmFsdWVzOiBfdGhpcy5zZXRWYWx1ZXMsXG4gICAgICAgICAgICAgICAgc2V0Rm9ybWlrU3RhdGU6IF90aGlzLnNldEZvcm1pa1N0YXRlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuZ2V0Rm9ybWlrQ29tcHV0ZWRQcm9wcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpc0luaXRpYWxWYWxpZCA9IF90aGlzLnByb3BzLmlzSW5pdGlhbFZhbGlkO1xuICAgICAgICAgICAgdmFyIGRpcnR5ID0gIWlzRXF1YWwoX3RoaXMuaW5pdGlhbFZhbHVlcywgX3RoaXMuc3RhdGUudmFsdWVzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGlydHk6IGRpcnR5LFxuICAgICAgICAgICAgICAgIGlzVmFsaWQ6IGRpcnR5XG4gICAgICAgICAgICAgICAgICAgID8gX3RoaXMuc3RhdGUuZXJyb3JzICYmIE9iamVjdC5rZXlzKF90aGlzLnN0YXRlLmVycm9ycykubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgICAgIDogaXNJbml0aWFsVmFsaWQgIT09IGZhbHNlICYmIGlzRnVuY3Rpb24oaXNJbml0aWFsVmFsaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGlzSW5pdGlhbFZhbGlkKF90aGlzLnByb3BzKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpc0luaXRpYWxWYWxpZCxcbiAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWVzOiBfdGhpcy5pbml0aWFsVmFsdWVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuZ2V0Rm9ybWlrQmFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hc3NpZ24oe30sIF90aGlzLnN0YXRlLCBfdGhpcy5nZXRGb3JtaWtBY3Rpb25zKCksIF90aGlzLmdldEZvcm1pa0NvbXB1dGVkUHJvcHMoKSwgeyByZWdpc3RlckZpZWxkOiBfdGhpcy5yZWdpc3RlckZpZWxkLCB1bnJlZ2lzdGVyRmllbGQ6IF90aGlzLnVucmVnaXN0ZXJGaWVsZCwgaGFuZGxlQmx1cjogX3RoaXMuaGFuZGxlQmx1ciwgaGFuZGxlQ2hhbmdlOiBfdGhpcy5oYW5kbGVDaGFuZ2UsIGhhbmRsZVJlc2V0OiBfdGhpcy5oYW5kbGVSZXNldCwgaGFuZGxlU3VibWl0OiBfdGhpcy5oYW5kbGVTdWJtaXQsIHZhbGlkYXRlT25DaGFuZ2U6IF90aGlzLnByb3BzLnZhbGlkYXRlT25DaGFuZ2UsIHZhbGlkYXRlT25CbHVyOiBfdGhpcy5wcm9wcy52YWxpZGF0ZU9uQmx1ciB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuZ2V0Rm9ybWlrQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXNzaWduKHt9LCBfdGhpcy5nZXRGb3JtaWtCYWcoKSwgeyB2YWxpZGF0aW9uU2NoZW1hOiBfdGhpcy5wcm9wcy52YWxpZGF0aW9uU2NoZW1hLCB2YWxpZGF0ZTogX3RoaXMucHJvcHMudmFsaWRhdGUsIGluaXRpYWxWYWx1ZXM6IF90aGlzLmluaXRpYWxWYWx1ZXMgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmFsdWVzOiBwcm9wcy5pbml0aWFsVmFsdWVzIHx8IHt9LFxuICAgICAgICAgICAgZXJyb3JzOiB7fSxcbiAgICAgICAgICAgIHRvdWNoZWQ6IHt9LFxuICAgICAgICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGlzVmFsaWRhdGluZzogZmFsc2UsXG4gICAgICAgICAgICBzdWJtaXRDb3VudDogMCxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuZGlkTW91bnQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuZmllbGRzID0ge307XG4gICAgICAgIF90aGlzLmluaXRpYWxWYWx1ZXMgPSBwcm9wcy5pbml0aWFsVmFsdWVzIHx8IHt9O1xuICAgICAgICB3YXJuaW5nKCEocHJvcHMuY29tcG9uZW50ICYmIHByb3BzLnJlbmRlciksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZvcm1payBjb21wb25lbnQ+IGFuZCA8Rm9ybWlrIHJlbmRlcj4gaW4gdGhlIHNhbWUgPEZvcm1paz4gY29tcG9uZW50OyA8Rm9ybWlrIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkJyk7XG4gICAgICAgIHdhcm5pbmcoIShwcm9wcy5jb21wb25lbnQgJiYgcHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihwcm9wcy5jaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxGb3JtaWsgY29tcG9uZW50PiBhbmQgPEZvcm1payBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgPEZvcm1paz4gY29tcG9uZW50OyA8Rm9ybWlrIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWQnKTtcbiAgICAgICAgd2FybmluZyghKHByb3BzLnJlbmRlciAmJiBwcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZvcm1payByZW5kZXI+IGFuZCA8Rm9ybWlrIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSA8Rm9ybWlrPiBjb21wb25lbnQ7IDxGb3JtaWsgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCcpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZvcm1pay5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGlkTW91bnQgPSB0cnVlO1xuICAgIH07XG4gICAgRm9ybWlrLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaWRNb3VudCA9IGZhbHNlO1xuICAgIH07XG4gICAgRm9ybWlrLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmVuYWJsZVJlaW5pdGlhbGl6ZSAmJlxuICAgICAgICAgICAgIWlzRXF1YWwocHJldlByb3BzLmluaXRpYWxWYWx1ZXMsIHRoaXMucHJvcHMuaW5pdGlhbFZhbHVlcykpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFZhbHVlcyA9IHRoaXMucHJvcHMuaW5pdGlhbFZhbHVlcztcbiAgICAgICAgICAgIHRoaXMucmVzZXRGb3JtKHRoaXMucHJvcHMuaW5pdGlhbFZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZvcm1pay5wcm90b3R5cGUucnVuRmllbGRMZXZlbFZhbGlkYXRpb25zID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZmllbGRLZXlzV2l0aFZhbGlkYXRpb24gPSBPYmplY3Qua2V5cyh0aGlzLmZpZWxkcykuZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZmllbGRzICYmXG4gICAgICAgICAgICAgICAgX3RoaXMuZmllbGRzW2ZdICYmXG4gICAgICAgICAgICAgICAgX3RoaXMuZmllbGRzW2ZdLnByb3BzLnZhbGlkYXRlICYmXG4gICAgICAgICAgICAgICAgaXNGdW5jdGlvbihfdGhpcy5maWVsZHNbZl0ucHJvcHMudmFsaWRhdGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGZpZWxkVmFsaWRhdGlvbnMgPSBmaWVsZEtleXNXaXRoVmFsaWRhdGlvbi5sZW5ndGggPiAwXG4gICAgICAgICAgICA/IGZpZWxkS2V5c1dpdGhWYWxpZGF0aW9uLm1hcChmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5ydW5TaW5nbGVGaWVsZExldmVsVmFsaWRhdGlvbihmLCBnZXRJbih2YWx1ZXMsIGYpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IFtQcm9taXNlLnJlc29sdmUoJ0RPX05PVF9ERUxFVEVfWU9VX1dJTExfQkVfRklSRUQnKV07XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChmaWVsZFZhbGlkYXRpb25zKS50aGVuKGZ1bmN0aW9uIChmaWVsZEVycm9yc0xpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZEVycm9yc0xpc3QucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXJyLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSAnRE9fTk9UX0RFTEVURV9ZT1VfV0lMTF9CRV9GSVJFRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghIWN1cnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldiA9IHNldEluKHByZXYsIGZpZWxkS2V5c1dpdGhWYWxpZGF0aW9uW2luZGV4XSwgY3Vycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZvcm1pay5wcm90b3R5cGUucnVuVmFsaWRhdGVIYW5kbGVyID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHZhciBtYXliZVByb21pc2VkRXJyb3JzID0gX3RoaXMucHJvcHMudmFsaWRhdGUodmFsdWVzKTtcbiAgICAgICAgICAgIGlmIChtYXliZVByb21pc2VkRXJyb3JzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUHJvbWlzZShtYXliZVByb21pc2VkRXJyb3JzKSkge1xuICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZWRFcnJvcnMudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe30pO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShlcnJvcnMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtYXliZVByb21pc2VkRXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGb3JtaWsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgY29tcG9uZW50ID0gX2EuY29tcG9uZW50LCByZW5kZXIgPSBfYS5yZW5kZXIsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW47XG4gICAgICAgIHZhciBwcm9wcyA9IHRoaXMuZ2V0Rm9ybWlrQmFnKCk7XG4gICAgICAgIHZhciBjdHggPSB0aGlzLmdldEZvcm1pa0NvbnRleHQoKTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1pa1Byb3ZpZGVyLCB7IHZhbHVlOiBjdHggfSwgY29tcG9uZW50XG4gICAgICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcylcbiAgICAgICAgICAgIDogcmVuZGVyXG4gICAgICAgICAgICAgICAgPyByZW5kZXIocHJvcHMpXG4gICAgICAgICAgICAgICAgOiBjaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICA/IGlzRnVuY3Rpb24oY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNoaWxkcmVuKHByb3BzKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsKSk7XG4gICAgfTtcbiAgICBGb3JtaWsuZGVmYXVsdFByb3BzID0ge1xuICAgICAgICB2YWxpZGF0ZU9uQ2hhbmdlOiB0cnVlLFxuICAgICAgICB2YWxpZGF0ZU9uQmx1cjogdHJ1ZSxcbiAgICAgICAgaXNJbml0aWFsVmFsaWQ6IGZhbHNlLFxuICAgICAgICBlbmFibGVSZWluaXRpYWxpemU6IGZhbHNlLFxuICAgIH07XG4gICAgcmV0dXJuIEZvcm1paztcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5mdW5jdGlvbiB3YXJuQWJvdXRNaXNzaW5nSWRlbnRpZmllcihfYSkge1xuICAgIHZhciBodG1sQ29udGVudCA9IF9hLmh0bWxDb250ZW50LCBkb2N1bWVudGF0aW9uQW5jaG9yTGluayA9IF9hLmRvY3VtZW50YXRpb25BbmNob3JMaW5rLCBoYW5kbGVyTmFtZSA9IF9hLmhhbmRsZXJOYW1lO1xuICAgIGNvbnNvbGUuZXJyb3IoXCJXYXJuaW5nOiBGb3JtaWsgY2FsbGVkIGBcIiArIGhhbmRsZXJOYW1lICsgXCJgLCBidXQgeW91IGZvcmdvdCB0byBwYXNzIGFuIGBpZGAgb3IgYG5hbWVgIGF0dHJpYnV0ZSB0byB5b3VyIGlucHV0OlxcblxcbiAgICBcIiArIGh0bWxDb250ZW50ICsgXCJcXG5cXG4gICAgRm9ybWlrIGNhbm5vdCBkZXRlcm1pbmUgd2hpY2ggdmFsdWUgdG8gdXBkYXRlLiBGb3IgbW9yZSBpbmZvIHNlZSBodHRwczovL2dpdGh1Yi5jb20vamFyZWRwYWxtZXIvZm9ybWlrI1wiICsgZG9jdW1lbnRhdGlvbkFuY2hvckxpbmsgKyBcIlxcbiAgXCIpO1xufVxuZnVuY3Rpb24geXVwVG9Gb3JtRXJyb3JzKHl1cEVycm9yKSB7XG4gICAgdmFyIGVycm9ycyA9IHt9O1xuICAgIGlmICh5dXBFcnJvci5pbm5lci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHNldEluKGVycm9ycywgeXVwRXJyb3IucGF0aCwgeXVwRXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB5dXBFcnJvci5pbm5lcjsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGVyciA9IF9hW19pXTtcbiAgICAgICAgaWYgKCFlcnJvcnNbZXJyLnBhdGhdKSB7XG4gICAgICAgICAgICBlcnJvcnMgPSBzZXRJbihlcnJvcnMsIGVyci5wYXRoLCBlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlWXVwU2NoZW1hKHZhbHVlcywgc2NoZW1hLCBzeW5jLCBjb250ZXh0KSB7XG4gICAgaWYgKHN5bmMgPT09IHZvaWQgMCkgeyBzeW5jID0gZmFsc2U7IH1cbiAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7IGNvbnRleHQgPSB7fTsgfVxuICAgIHZhciB2YWxpZGF0ZURhdGEgPSB7fTtcbiAgICBmb3IgKHZhciBrIGluIHZhbHVlcykge1xuICAgICAgICBpZiAodmFsdWVzLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gU3RyaW5nKGspO1xuICAgICAgICAgICAgdmFsaWRhdGVEYXRhW2tleV0gPSB2YWx1ZXNba2V5XSAhPT0gJycgPyB2YWx1ZXNba2V5XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hW3N5bmMgPyAndmFsaWRhdGVTeW5jJyA6ICd2YWxpZGF0ZSddKHZhbGlkYXRlRGF0YSwge1xuICAgICAgICBhYm9ydEVhcmx5OiBmYWxzZSxcbiAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB0YXJnZXQuc2xpY2UoKTtcbiAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICBpZiAodHlwZW9mIGRlc3RpbmF0aW9uW2ldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFyIGNsb25lUmVxdWVzdGVkID0gb3B0aW9ucy5jbG9uZSAhPT0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgc2hvdWxkQ2xvbmUgPSBjbG9uZVJlcXVlc3RlZCAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KGUpO1xuICAgICAgICAgICAgZGVzdGluYXRpb25baV0gPSBzaG91bGRDbG9uZVxuICAgICAgICAgICAgICAgID8gZGVlcG1lcmdlKEFycmF5LmlzQXJyYXkoZSkgPyBbXSA6IHt9LCBlLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgIDogZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KGUpKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpXSA9IGRlZXBtZXJnZSh0YXJnZXRbaV0sIGUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRhcmdldC5pbmRleE9mKGUpID09PSAtMSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ucHVzaChlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cblxudmFyIEZpZWxkSW5uZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEZpZWxkSW5uZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmllbGRJbm5lcihwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHJlbmRlciA9IHByb3BzLnJlbmRlciwgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbiwgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50O1xuICAgICAgICB3YXJuaW5nKCEoY29tcG9uZW50ICYmIHJlbmRlciksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZpZWxkIGNvbXBvbmVudD4gYW5kIDxGaWVsZCByZW5kZXI+IGluIHRoZSBzYW1lIDxGaWVsZD4gY29tcG9uZW50OyA8RmllbGQgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWQnKTtcbiAgICAgICAgd2FybmluZyghKGNvbXBvbmVudCAmJiBjaGlsZHJlbiAmJiBpc0Z1bmN0aW9uKGNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZpZWxkIGNvbXBvbmVudD4gYW5kIDxGaWVsZCBjaGlsZHJlbj4gYXMgYSBmdW5jdGlvbiBpbiB0aGUgc2FtZSA8RmllbGQ+IGNvbXBvbmVudDsgPEZpZWxkIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkLicpO1xuICAgICAgICB3YXJuaW5nKCEocmVuZGVyICYmIGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmllbGQgcmVuZGVyPiBhbmQgPEZpZWxkIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSA8RmllbGQ+IGNvbXBvbmVudDsgPEZpZWxkIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWQnKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGaWVsZElubmVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5mb3JtaWsucmVnaXN0ZXJGaWVsZCh0aGlzLnByb3BzLm5hbWUsIHRoaXMpO1xuICAgIH07XG4gICAgRmllbGRJbm5lci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5uYW1lICE9PSBwcmV2UHJvcHMubmFtZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5mb3JtaWsudW5yZWdpc3RlckZpZWxkKHByZXZQcm9wcy5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm9wcy52YWxpZGF0ZSAhPT0gcHJldlByb3BzLnZhbGlkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmZvcm1pay5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZpZWxkSW5uZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnByb3BzLmZvcm1pay51bnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lKTtcbiAgICB9O1xuICAgIEZpZWxkSW5uZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgdmFsaWRhdGUgPSBfYS52YWxpZGF0ZSwgbmFtZSA9IF9hLm5hbWUsIHJlbmRlciA9IF9hLnJlbmRlciwgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgX2IgPSBfYS5jb21wb25lbnQsIGNvbXBvbmVudCA9IF9iID09PSB2b2lkIDAgPyAnaW5wdXQnIDogX2IsIGZvcm1payA9IF9hLmZvcm1paywgcHJvcHMgPSB0c2xpYl8xLl9fcmVzdChfYSwgW1widmFsaWRhdGVcIiwgXCJuYW1lXCIsIFwicmVuZGVyXCIsIFwiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRcIiwgXCJmb3JtaWtcIl0pO1xuICAgICAgICB2YXIgX3ZhbGlkYXRlID0gZm9ybWlrLnZhbGlkYXRlLCBfdmFsaWRhdGlvblNjaGVtYSA9IGZvcm1pay52YWxpZGF0aW9uU2NoZW1hLCByZXN0T2ZGb3JtaWsgPSB0c2xpYl8xLl9fcmVzdChmb3JtaWssIFtcInZhbGlkYXRlXCIsIFwidmFsaWRhdGlvblNjaGVtYVwiXSk7XG4gICAgICAgIHZhciBmaWVsZCA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wcy50eXBlID09PSAncmFkaW8nIHx8IHByb3BzLnR5cGUgPT09ICdjaGVja2JveCdcbiAgICAgICAgICAgICAgICA/IHByb3BzLnZhbHVlXG4gICAgICAgICAgICAgICAgOiBnZXRJbihmb3JtaWsudmFsdWVzLCBuYW1lKSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBvbkNoYW5nZTogZm9ybWlrLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgIG9uQmx1cjogZm9ybWlrLmhhbmRsZUJsdXIsXG4gICAgICAgIH07XG4gICAgICAgIHZhciBiYWcgPSB7IGZpZWxkOiBmaWVsZCwgZm9ybTogcmVzdE9mRm9ybWlrIH07XG4gICAgICAgIGlmIChyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiByZW5kZXIoYmFnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihjaGlsZHJlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbihiYWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsIHJlc3QgPSB0c2xpYl8xLl9fcmVzdChwcm9wcywgW1wiaW5uZXJSZWZcIl0pO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCB0c2xpYl8xLl9fYXNzaWduKHsgcmVmOiBpbm5lclJlZiB9LCBmaWVsZCwgcmVzdCwgeyBjaGlsZHJlbjogY2hpbGRyZW4gfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgYmFnLCBwcm9wcywgeyBjaGlsZHJlbjogY2hpbGRyZW4gfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpZWxkSW5uZXI7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xudmFyIEZpZWxkID0gY29ubmVjdChGaWVsZElubmVyKTtcblxudmFyIEZvcm0gPSBjb25uZWN0KGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBfYiA9IF9hLmZvcm1paywgaGFuZGxlUmVzZXQgPSBfYi5oYW5kbGVSZXNldCwgaGFuZGxlU3VibWl0ID0gX2IuaGFuZGxlU3VibWl0LCBwcm9wcyA9IHRzbGliXzEuX19yZXN0KF9hLCBbXCJmb3JtaWtcIl0pO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImZvcm1cIiwgdHNsaWJfMS5fX2Fzc2lnbih7IG9uUmVzZXQ6IGhhbmRsZVJlc2V0LCBvblN1Ym1pdDogaGFuZGxlU3VibWl0IH0sIHByb3BzKSkpO1xufSk7XG5Gb3JtLmRpc3BsYXlOYW1lID0gJ0Zvcm0nO1xuXG5mdW5jdGlvbiB3aXRoRm9ybWlrKF9hKSB7XG4gICAgdmFyIF9iID0gX2EubWFwUHJvcHNUb1ZhbHVlcywgbWFwUHJvcHNUb1ZhbHVlcyA9IF9iID09PSB2b2lkIDAgPyBmdW5jdGlvbiAodmFuaWxsYVByb3BzKSB7XG4gICAgICAgIHZhciB2YWwgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgayBpbiB2YW5pbGxhUHJvcHMpIHtcbiAgICAgICAgICAgIGlmICh2YW5pbGxhUHJvcHMuaGFzT3duUHJvcGVydHkoaykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFuaWxsYVByb3BzW2tdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdmFsW2tdID0gdmFuaWxsYVByb3BzW2tdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfSA6IF9iLCBjb25maWcgPSB0c2xpYl8xLl9fcmVzdChfYSwgW1wibWFwUHJvcHNUb1ZhbHVlc1wiXSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUZvcm1payhDb21wb25lbnQpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudERpc3BsYXlOYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8XG4gICAgICAgICAgICBDb21wb25lbnQubmFtZSB8fFxuICAgICAgICAgICAgKENvbXBvbmVudC5jb25zdHJ1Y3RvciAmJiBDb21wb25lbnQuY29uc3RydWN0b3IubmFtZSkgfHxcbiAgICAgICAgICAgICdDb21wb25lbnQnO1xuICAgICAgICB2YXIgQyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gQygpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgICAgICBfdGhpcy52YWxpZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZy52YWxpZGF0ZSh2YWx1ZXMsIF90aGlzLnByb3BzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF90aGlzLnZhbGlkYXRpb25TY2hlbWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGNvbmZpZy52YWxpZGF0aW9uU2NoZW1hKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjb25maWcudmFsaWRhdGlvblNjaGVtYShfdGhpcy5wcm9wcylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogY29uZmlnLnZhbGlkYXRpb25TY2hlbWE7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBfdGhpcy5oYW5kbGVTdWJtaXQgPSBmdW5jdGlvbiAodmFsdWVzLCBhY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25maWcuaGFuZGxlU3VibWl0KHZhbHVlcywgdHNsaWJfMS5fX2Fzc2lnbih7fSwgYWN0aW9ucywgeyBwcm9wczogX3RoaXMucHJvcHMgfSkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgX3RoaXMucmVuZGVyRm9ybUNvbXBvbmVudCA9IGZ1bmN0aW9uIChmb3JtaWtQcm9wcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHRzbGliXzEuX19hc3NpZ24oe30sIF90aGlzLnByb3BzLCBmb3JtaWtQcm9wcykpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIHByb3BzID0gdHNsaWJfMS5fX3Jlc3QoX2EsIFtcImNoaWxkcmVuXCJdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybWlrLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBwcm9wcywgY29uZmlnLCB7IHZhbGlkYXRlOiBjb25maWcudmFsaWRhdGUgJiYgdGhpcy52YWxpZGF0ZSwgdmFsaWRhdGlvblNjaGVtYTogY29uZmlnLnZhbGlkYXRpb25TY2hlbWEgJiYgdGhpcy52YWxpZGF0aW9uU2NoZW1hLCBpbml0aWFsVmFsdWVzOiBtYXBQcm9wc1RvVmFsdWVzKHRoaXMucHJvcHMpLCBvblN1Ym1pdDogdGhpcy5oYW5kbGVTdWJtaXQsIHJlbmRlcjogdGhpcy5yZW5kZXJGb3JtQ29tcG9uZW50IH0pKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgQy5kaXNwbGF5TmFtZSA9IFwiV2l0aEZvcm1payhcIiArIGNvbXBvbmVudERpc3BsYXlOYW1lICsgXCIpXCI7XG4gICAgICAgICAgICByZXR1cm4gQztcbiAgICAgICAgfShSZWFjdC5Db21wb25lbnQpKTtcbiAgICAgICAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG4gICAgfTtcbn1cblxudmFyIG1vdmUgPSBmdW5jdGlvbiAoYXJyYXksIGZyb20sIHRvKSB7XG4gICAgdmFyIGNvcHkgPSAoYXJyYXkgfHwgW10pLnNsaWNlKCk7XG4gICAgdmFyIHZhbHVlID0gY29weVtmcm9tXTtcbiAgICBjb3B5LnNwbGljZShmcm9tLCAxKTtcbiAgICBjb3B5LnNwbGljZSh0bywgMCwgdmFsdWUpO1xuICAgIHJldHVybiBjb3B5O1xufTtcbnZhciBzd2FwID0gZnVuY3Rpb24gKGFycmF5LCBpbmRleEEsIGluZGV4Qikge1xuICAgIHZhciBjb3B5ID0gKGFycmF5IHx8IFtdKS5zbGljZSgpO1xuICAgIHZhciBhID0gY29weVtpbmRleEFdO1xuICAgIGNvcHlbaW5kZXhBXSA9IGNvcHlbaW5kZXhCXTtcbiAgICBjb3B5W2luZGV4Ql0gPSBhO1xuICAgIHJldHVybiBjb3B5O1xufTtcbnZhciBpbnNlcnQgPSBmdW5jdGlvbiAoYXJyYXksIGluZGV4LCB2YWx1ZSkge1xuICAgIHZhciBjb3B5ID0gKGFycmF5IHx8IFtdKS5zbGljZSgpO1xuICAgIGNvcHkuc3BsaWNlKGluZGV4LCAwLCB2YWx1ZSk7XG4gICAgcmV0dXJuIGNvcHk7XG59O1xudmFyIHJlcGxhY2UgPSBmdW5jdGlvbiAoYXJyYXksIGluZGV4LCB2YWx1ZSkge1xuICAgIHZhciBjb3B5ID0gKGFycmF5IHx8IFtdKS5zbGljZSgpO1xuICAgIGNvcHlbaW5kZXhdID0gdmFsdWU7XG4gICAgcmV0dXJuIGNvcHk7XG59O1xudmFyIEZpZWxkQXJyYXlJbm5lciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRmllbGRBcnJheUlubmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpZWxkQXJyYXlJbm5lcihwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudXBkYXRlQXJyYXlGaWVsZCA9IGZ1bmN0aW9uIChmbiwgYWx0ZXJUb3VjaGVkLCBhbHRlckVycm9ycykge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIG5hbWUgPSBfYS5uYW1lLCB2YWxpZGF0ZU9uQ2hhbmdlID0gX2EudmFsaWRhdGVPbkNoYW5nZSwgX2IgPSBfYS5mb3JtaWssIHNldEZvcm1pa1N0YXRlID0gX2Iuc2V0Rm9ybWlrU3RhdGUsIHZhbGlkYXRlRm9ybSA9IF9iLnZhbGlkYXRlRm9ybSwgdmFsdWVzID0gX2IudmFsdWVzLCB0b3VjaGVkID0gX2IudG91Y2hlZCwgZXJyb3JzID0gX2IuZXJyb3JzO1xuICAgICAgICAgICAgc2V0Rm9ybWlrU3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkgeyByZXR1cm4gKHRzbGliXzEuX19hc3NpZ24oe30sIHByZXZTdGF0ZSwgeyB2YWx1ZXM6IHNldEluKHByZXZTdGF0ZS52YWx1ZXMsIG5hbWUsIGZuKGdldEluKHZhbHVlcywgbmFtZSkpKSwgZXJyb3JzOiBhbHRlckVycm9yc1xuICAgICAgICAgICAgICAgICAgICA/IHNldEluKHByZXZTdGF0ZS5lcnJvcnMsIG5hbWUsIGZuKGdldEluKGVycm9ycywgbmFtZSkpKVxuICAgICAgICAgICAgICAgICAgICA6IHByZXZTdGF0ZS5lcnJvcnMsIHRvdWNoZWQ6IGFsdGVyVG91Y2hlZFxuICAgICAgICAgICAgICAgICAgICA/IHNldEluKHByZXZTdGF0ZS50b3VjaGVkLCBuYW1lLCBmbihnZXRJbih0b3VjaGVkLCBuYW1lKSkpXG4gICAgICAgICAgICAgICAgICAgIDogcHJldlN0YXRlLnRvdWNoZWQgfSkpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRlT25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVGb3JtKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnB1c2ggPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVBcnJheUZpZWxkKGZ1bmN0aW9uIChhcnJheSkgeyByZXR1cm4gKGFycmF5IHx8IFtdKS5jb25jYXQoW2Nsb25lRGVlcCh2YWx1ZSldKTsgfSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucHVzaCh2YWx1ZSk7IH07IH07XG4gICAgICAgIF90aGlzLnN3YXAgPSBmdW5jdGlvbiAoaW5kZXhBLCBpbmRleEIpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVBcnJheUZpZWxkKGZ1bmN0aW9uIChhcnJheSkgeyByZXR1cm4gc3dhcChhcnJheSwgaW5kZXhBLCBpbmRleEIpOyB9LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlU3dhcCA9IGZ1bmN0aW9uIChpbmRleEEsIGluZGV4QikgeyByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN3YXAoaW5kZXhBLCBpbmRleEIpO1xuICAgICAgICB9OyB9O1xuICAgICAgICBfdGhpcy5tb3ZlID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlQXJyYXlGaWVsZChmdW5jdGlvbiAoYXJyYXkpIHsgcmV0dXJuIG1vdmUoYXJyYXksIGZyb20sIHRvKTsgfSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZU1vdmUgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm1vdmUoZnJvbSwgdG8pOyB9OyB9O1xuICAgICAgICBfdGhpcy5pbnNlcnQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlQXJyYXlGaWVsZChmdW5jdGlvbiAoYXJyYXkpIHsgcmV0dXJuIGluc2VydChhcnJheSwgaW5kZXgsIHZhbHVlKTsgfSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZUluc2VydCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmluc2VydChpbmRleCwgdmFsdWUpOyB9OyB9O1xuICAgICAgICBfdGhpcy5yZXBsYWNlID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7IHJldHVybiByZXBsYWNlKGFycmF5LCBpbmRleCwgdmFsdWUpOyB9LCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkgeyByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlcGxhY2UoaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfTsgfTtcbiAgICAgICAgX3RoaXMudW5zaGlmdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IC0xO1xuICAgICAgICAgICAgX3RoaXMudXBkYXRlQXJyYXlGaWVsZChmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJyID0gYXJyYXkgPyBbdmFsdWVdLmNvbmNhdChhcnJheSkgOiBbdmFsdWVdO1xuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPCAwKVxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgICAgICB9LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZVVuc2hpZnQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVuc2hpZnQodmFsdWUpOyB9OyB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVSZW1vdmUgPSBmdW5jdGlvbiAoaW5kZXgpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJlbW92ZShpbmRleCk7IH07IH07XG4gICAgICAgIF90aGlzLmhhbmRsZVBvcCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnBvcCgpOyB9OyB9O1xuICAgICAgICBfdGhpcy5yZW1vdmUgPSBfdGhpcy5yZW1vdmUuYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLnBvcCA9IF90aGlzLnBvcC5iaW5kKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGaWVsZEFycmF5SW5uZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgICAgICB2YXIgY29weSA9IGFycmF5ID8gYXJyYXkuc2xpY2UoKSA6IFtdO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBjb3B5W2luZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvcHkuc3BsaWNlKSkge1xuICAgICAgICAgICAgICAgIGNvcHkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgICB9LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIEZpZWxkQXJyYXlJbm5lci5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgICAgICB2YXIgdG1wID0gYXJyYXk7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRtcCAmJiB0bXAucG9wICYmIHRtcC5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0bXA7XG4gICAgICAgIH0sIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgRmllbGRBcnJheUlubmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcnJheUhlbHBlcnMgPSB7XG4gICAgICAgICAgICBwdXNoOiB0aGlzLnB1c2gsXG4gICAgICAgICAgICBwb3A6IHRoaXMucG9wLFxuICAgICAgICAgICAgc3dhcDogdGhpcy5zd2FwLFxuICAgICAgICAgICAgbW92ZTogdGhpcy5tb3ZlLFxuICAgICAgICAgICAgaW5zZXJ0OiB0aGlzLmluc2VydCxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRoaXMucmVwbGFjZSxcbiAgICAgICAgICAgIHVuc2hpZnQ6IHRoaXMudW5zaGlmdCxcbiAgICAgICAgICAgIHJlbW92ZTogdGhpcy5yZW1vdmUsXG4gICAgICAgICAgICBoYW5kbGVQdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICAgICAgICBoYW5kbGVQb3A6IHRoaXMuaGFuZGxlUG9wLFxuICAgICAgICAgICAgaGFuZGxlU3dhcDogdGhpcy5oYW5kbGVTd2FwLFxuICAgICAgICAgICAgaGFuZGxlTW92ZTogdGhpcy5oYW5kbGVNb3ZlLFxuICAgICAgICAgICAgaGFuZGxlSW5zZXJ0OiB0aGlzLmhhbmRsZUluc2VydCxcbiAgICAgICAgICAgIGhhbmRsZVJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgICAgICAgIGhhbmRsZVVuc2hpZnQ6IHRoaXMuaGFuZGxlVW5zaGlmdCxcbiAgICAgICAgICAgIGhhbmRsZVJlbW92ZTogdGhpcy5oYW5kbGVSZW1vdmUsXG4gICAgICAgIH07XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGNvbXBvbmVudCA9IF9hLmNvbXBvbmVudCwgcmVuZGVyID0gX2EucmVuZGVyLCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBuYW1lID0gX2EubmFtZSwgX2IgPSBfYS5mb3JtaWssIF92YWxpZGF0ZSA9IF9iLnZhbGlkYXRlLCBfdmFsaWRhdGlvblNjaGVtYSA9IF9iLnZhbGlkYXRpb25TY2hlbWEsIHJlc3RPZkZvcm1payA9IHRzbGliXzEuX19yZXN0KF9iLCBbXCJ2YWxpZGF0ZVwiLCBcInZhbGlkYXRpb25TY2hlbWFcIl0pO1xuICAgICAgICB2YXIgcHJvcHMgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBhcnJheUhlbHBlcnMsIHsgZm9ybTogcmVzdE9mRm9ybWlrLCBuYW1lOiBuYW1lIH0pO1xuICAgICAgICByZXR1cm4gY29tcG9uZW50XG4gICAgICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcylcbiAgICAgICAgICAgIDogcmVuZGVyXG4gICAgICAgICAgICAgICAgPyByZW5kZXIocHJvcHMpXG4gICAgICAgICAgICAgICAgOiBjaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBjaGlsZHJlbihwcm9wcylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgIH07XG4gICAgRmllbGRBcnJheUlubmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgdmFsaWRhdGVPbkNoYW5nZTogdHJ1ZSxcbiAgICB9O1xuICAgIHJldHVybiBGaWVsZEFycmF5SW5uZXI7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xudmFyIEZpZWxkQXJyYXkgPSBjb25uZWN0KEZpZWxkQXJyYXlJbm5lcik7XG5cbnZhciBGYXN0RmllbGRJbm5lciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRmFzdEZpZWxkSW5uZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmFzdEZpZWxkSW5uZXIocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIHZhciByZW5kZXIgPSBwcm9wcy5yZW5kZXIsIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sIGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudDtcbiAgICAgICAgd2FybmluZyghKGNvbXBvbmVudCAmJiByZW5kZXIpLCAnWW91IHNob3VsZCBub3QgdXNlIDxGYXN0RmllbGQgY29tcG9uZW50PiBhbmQgPEZhc3RGaWVsZCByZW5kZXI+IGluIHRoZSBzYW1lIDxGYXN0RmllbGQ+IGNvbXBvbmVudDsgPEZhc3RGaWVsZCBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZCcpO1xuICAgICAgICB3YXJuaW5nKCEoY29tcG9uZW50ICYmIGNoaWxkcmVuICYmIGlzRnVuY3Rpb24oY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmFzdEZpZWxkIGNvbXBvbmVudD4gYW5kIDxGYXN0RmllbGQgY2hpbGRyZW4+IGFzIGEgZnVuY3Rpb24gaW4gdGhlIHNhbWUgPEZhc3RGaWVsZD4gY29tcG9uZW50OyA8RmFzdEZpZWxkIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkLicpO1xuICAgICAgICB3YXJuaW5nKCEocmVuZGVyICYmIGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmFzdEZpZWxkIHJlbmRlcj4gYW5kIDxGYXN0RmllbGQgY2hpbGRyZW4+IGluIHRoZSBzYW1lIDxGYXN0RmllbGQ+IGNvbXBvbmVudDsgPEZhc3RGaWVsZCBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRmFzdEZpZWxkSW5uZXIucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5zaG91bGRVcGRhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLnNob3VsZFVwZGF0ZShwcm9wcywgdGhpcy5wcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsudmFsdWVzLCB0aGlzLnByb3BzLm5hbWUpICE9PVxuICAgICAgICAgICAgZ2V0SW4ocHJvcHMuZm9ybWlrLnZhbHVlcywgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsuZXJyb3JzLCB0aGlzLnByb3BzLm5hbWUpICE9PVxuICAgICAgICAgICAgICAgIGdldEluKHByb3BzLmZvcm1pay5lcnJvcnMsIHRoaXMucHJvcHMubmFtZSkgfHxcbiAgICAgICAgICAgIGdldEluKHRoaXMucHJvcHMuZm9ybWlrLnRvdWNoZWQsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgICAgICAgICAgZ2V0SW4ocHJvcHMuZm9ybWlrLnRvdWNoZWQsIHRoaXMucHJvcHMubmFtZSkgfHxcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMucHJvcHMpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCB8fFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5mb3JtaWsuaXNTdWJtaXR0aW5nICE9PSBwcm9wcy5mb3JtaWsuaXNTdWJtaXR0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRmFzdEZpZWxkSW5uZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnByb3BzLmZvcm1pay5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSwgdGhpcyk7XG4gICAgfTtcbiAgICBGYXN0RmllbGRJbm5lci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5uYW1lICE9PSBwcmV2UHJvcHMubmFtZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5mb3JtaWsudW5yZWdpc3RlckZpZWxkKHByZXZQcm9wcy5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm9wcy52YWxpZGF0ZSAhPT0gcHJldlByb3BzLnZhbGlkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmZvcm1pay5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZhc3RGaWVsZElubmVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5mb3JtaWsudW5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSk7XG4gICAgfTtcbiAgICBGYXN0RmllbGRJbm5lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCB2YWxpZGF0ZSA9IF9hLnZhbGlkYXRlLCBuYW1lID0gX2EubmFtZSwgcmVuZGVyID0gX2EucmVuZGVyLCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBfYiA9IF9hLmNvbXBvbmVudCwgY29tcG9uZW50ID0gX2IgPT09IHZvaWQgMCA/ICdpbnB1dCcgOiBfYiwgZm9ybWlrID0gX2EuZm9ybWlrLCBwcm9wcyA9IHRzbGliXzEuX19yZXN0KF9hLCBbXCJ2YWxpZGF0ZVwiLCBcIm5hbWVcIiwgXCJyZW5kZXJcIiwgXCJjaGlsZHJlblwiLCBcImNvbXBvbmVudFwiLCBcImZvcm1pa1wiXSk7XG4gICAgICAgIHZhciBfdmFsaWRhdGUgPSBmb3JtaWsudmFsaWRhdGUsIF92YWxpZGF0aW9uU2NoZW1hID0gZm9ybWlrLnZhbGlkYXRpb25TY2hlbWEsIHJlc3RPZkZvcm1payA9IHRzbGliXzEuX19yZXN0KGZvcm1paywgW1widmFsaWRhdGVcIiwgXCJ2YWxpZGF0aW9uU2NoZW1hXCJdKTtcbiAgICAgICAgdmFyIGZpZWxkID0ge1xuICAgICAgICAgICAgdmFsdWU6IHByb3BzLnR5cGUgPT09ICdyYWRpbycgfHwgcHJvcHMudHlwZSA9PT0gJ2NoZWNrYm94J1xuICAgICAgICAgICAgICAgID8gcHJvcHMudmFsdWVcbiAgICAgICAgICAgICAgICA6IGdldEluKGZvcm1pay52YWx1ZXMsIG5hbWUpLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBmb3JtaWsuaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgb25CbHVyOiBmb3JtaWsuaGFuZGxlQmx1cixcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGJhZyA9IHsgZmllbGQ6IGZpZWxkLCBmb3JtOiByZXN0T2ZGb3JtaWsgfTtcbiAgICAgICAgaWYgKHJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihiYWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuKGJhZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZiwgcmVzdCA9IHRzbGliXzEuX19yZXN0KHByb3BzLCBbXCJpbm5lclJlZlwiXSk7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHRzbGliXzEuX19hc3NpZ24oeyByZWY6IGlubmVyUmVmIH0sIGZpZWxkLCByZXN0LCB7IGNoaWxkcmVuOiBjaGlsZHJlbiB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCB0c2xpYl8xLl9fYXNzaWduKHt9LCBiYWcsIHByb3BzLCB7IGNoaWxkcmVuOiBjaGlsZHJlbiB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gRmFzdEZpZWxkSW5uZXI7XG59KFJlYWN0LkNvbXBvbmVudCkpO1xudmFyIEZhc3RGaWVsZCA9IGNvbm5lY3QoRmFzdEZpZWxkSW5uZXIpO1xuXG52YXIgRXJyb3JNZXNzYWdlSW1wbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRXJyb3JNZXNzYWdlSW1wbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFcnJvck1lc3NhZ2VJbXBsKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEVycm9yTWVzc2FnZUltcGwucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAoZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsuZXJyb3JzLCB0aGlzLnByb3BzLm5hbWUpICE9PVxuICAgICAgICAgICAgZ2V0SW4ocHJvcHMuZm9ybWlrLmVycm9ycywgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsudG91Y2hlZCwgdGhpcy5wcm9wcy5uYW1lKSAhPT1cbiAgICAgICAgICAgICAgICBnZXRJbihwcm9wcy5mb3JtaWsudG91Y2hlZCwgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcykubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhwcm9wcykubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXJyb3JNZXNzYWdlSW1wbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBjb21wb25lbnQgPSBfYS5jb21wb25lbnQsIGZvcm1payA9IF9hLmZvcm1paywgcmVuZGVyID0gX2EucmVuZGVyLCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBuYW1lID0gX2EubmFtZSwgcmVzdCA9IHRzbGliXzEuX19yZXN0KF9hLCBbXCJjb21wb25lbnRcIiwgXCJmb3JtaWtcIiwgXCJyZW5kZXJcIiwgXCJjaGlsZHJlblwiLCBcIm5hbWVcIl0pO1xuICAgICAgICB2YXIgdG91Y2ggPSBnZXRJbihmb3JtaWsudG91Y2hlZCwgbmFtZSk7XG4gICAgICAgIHZhciBlcnJvciA9IGdldEluKGZvcm1pay5lcnJvcnMsIG5hbWUpO1xuICAgICAgICByZXR1cm4gISF0b3VjaCAmJiAhIWVycm9yXG4gICAgICAgICAgICA/IHJlbmRlclxuICAgICAgICAgICAgICAgID8gaXNGdW5jdGlvbihyZW5kZXIpID8gcmVuZGVyKGVycm9yKSA6IG51bGxcbiAgICAgICAgICAgICAgICA6IGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICAgID8gaXNGdW5jdGlvbihjaGlsZHJlbikgPyBjaGlsZHJlbihlcnJvcikgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIDogY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCByZXN0LCBlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZXJyb3JcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBFcnJvck1lc3NhZ2VJbXBsO1xufShSZWFjdC5Db21wb25lbnQpKTtcbnZhciBFcnJvck1lc3NhZ2UgPSBjb25uZWN0KEVycm9yTWVzc2FnZUltcGwpO1xuXG5leHBvcnRzLkZvcm1payA9IEZvcm1paztcbmV4cG9ydHMueXVwVG9Gb3JtRXJyb3JzID0geXVwVG9Gb3JtRXJyb3JzO1xuZXhwb3J0cy52YWxpZGF0ZVl1cFNjaGVtYSA9IHZhbGlkYXRlWXVwU2NoZW1hO1xuZXhwb3J0cy5GaWVsZCA9IEZpZWxkO1xuZXhwb3J0cy5Gb3JtID0gRm9ybTtcbmV4cG9ydHMud2l0aEZvcm1payA9IHdpdGhGb3JtaWs7XG5leHBvcnRzLm1vdmUgPSBtb3ZlO1xuZXhwb3J0cy5zd2FwID0gc3dhcDtcbmV4cG9ydHMuaW5zZXJ0ID0gaW5zZXJ0O1xuZXhwb3J0cy5yZXBsYWNlID0gcmVwbGFjZTtcbmV4cG9ydHMuRmllbGRBcnJheSA9IEZpZWxkQXJyYXk7XG5leHBvcnRzLmdldEluID0gZ2V0SW47XG5leHBvcnRzLnNldEluID0gc2V0SW47XG5leHBvcnRzLnNldE5lc3RlZE9iamVjdFZhbHVlcyA9IHNldE5lc3RlZE9iamVjdFZhbHVlcztcbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5leHBvcnRzLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcbmV4cG9ydHMuaXNOYU4gPSBpc05hTjtcbmV4cG9ydHMuaXNFbXB0eUNoaWxkcmVuID0gaXNFbXB0eUNoaWxkcmVuO1xuZXhwb3J0cy5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG5leHBvcnRzLmdldEFjdGl2ZUVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50O1xuZXhwb3J0cy5GYXN0RmllbGQgPSBGYXN0RmllbGQ7XG5leHBvcnRzLkZvcm1pa1Byb3ZpZGVyID0gRm9ybWlrUHJvdmlkZXI7XG5leHBvcnRzLkZvcm1pa0NvbnN1bWVyID0gRm9ybWlrQ29uc3VtZXI7XG5leHBvcnRzLmNvbm5lY3QgPSBjb25uZWN0O1xuZXhwb3J0cy5FcnJvck1lc3NhZ2UgPSBFcnJvck1lc3NhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtaWsuY2pzLnByb2R1Y3Rpb24uanMubWFwXG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgZ2xvYmFsLCBkZWZpbmUsIFN5c3RlbSwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG52YXIgX19leHRlbmRzO1xyXG52YXIgX19hc3NpZ247XHJcbnZhciBfX3Jlc3Q7XHJcbnZhciBfX2RlY29yYXRlO1xyXG52YXIgX19wYXJhbTtcclxudmFyIF9fbWV0YWRhdGE7XHJcbnZhciBfX2F3YWl0ZXI7XHJcbnZhciBfX2dlbmVyYXRvcjtcclxudmFyIF9fZXhwb3J0U3RhcjtcclxudmFyIF9fdmFsdWVzO1xyXG52YXIgX19yZWFkO1xyXG52YXIgX19zcHJlYWQ7XHJcbnZhciBfX2F3YWl0O1xyXG52YXIgX19hc3luY0dlbmVyYXRvcjtcclxudmFyIF9fYXN5bmNEZWxlZ2F0b3I7XHJcbnZhciBfX2FzeW5jVmFsdWVzO1xyXG52YXIgX19tYWtlVGVtcGxhdGVPYmplY3Q7XHJcbnZhciBfX2ltcG9ydFN0YXI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQ7XHJcbihmdW5jdGlvbiAoZmFjdG9yeSkge1xyXG4gICAgdmFyIHJvb3QgPSB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdHlwZW9mIHRoaXMgPT09IFwib2JqZWN0XCIgPyB0aGlzIDoge307XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICBkZWZpbmUoXCJ0c2xpYlwiLCBbXCJleHBvcnRzXCJdLCBmdW5jdGlvbiAoZXhwb3J0cykgeyBmYWN0b3J5KGNyZWF0ZUV4cG9ydGVyKHJvb3QsIGNyZWF0ZUV4cG9ydGVyKGV4cG9ydHMpKSk7IH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBmYWN0b3J5KGNyZWF0ZUV4cG9ydGVyKHJvb3QsIGNyZWF0ZUV4cG9ydGVyKG1vZHVsZS5leHBvcnRzKSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZmFjdG9yeShjcmVhdGVFeHBvcnRlcihyb290KSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjcmVhdGVFeHBvcnRlcihleHBvcnRzLCBwcmV2aW91cykge1xyXG4gICAgICAgIGlmIChleHBvcnRzICE9PSByb290KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaWQsIHYpIHsgcmV0dXJuIGV4cG9ydHNbaWRdID0gcHJldmlvdXMgPyBwcmV2aW91cyhpZCwgdikgOiB2OyB9O1xyXG4gICAgfVxyXG59KVxyXG4oZnVuY3Rpb24gKGV4cG9ydGVyKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuXHJcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fcmVzdCA9IGZ1bmN0aW9uIChzLCBlKSB7XHJcbiAgICAgICAgdmFyIHQgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMClcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2RlY29yYXRlID0gZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICAgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgICAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICAgICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxuICAgIH07XHJcblxyXG4gICAgX19wYXJhbSA9IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxuICAgIH07XHJcblxyXG4gICAgX19tZXRhZGF0YSA9IGZ1bmN0aW9uIChtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXdhaXRlciA9IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgICAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2dlbmVyYXRvciA9IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICAgICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgICAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgICAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9fZXhwb3J0U3RhciA9IGZ1bmN0aW9uIChtLCBleHBvcnRzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3ZhbHVlcyA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdLCBpID0gMDtcclxuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgX19yZWFkID0gZnVuY3Rpb24gKG8sIG4pIHtcclxuICAgICAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICAgICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgICAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFyO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3NwcmVhZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgICAgIHJldHVybiBhcjtcclxuICAgIH07XHJcblxyXG4gICAgX19hd2FpdCA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXN5bmNHZW5lcmF0b3IgPSBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICAgICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgICAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgICAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgICAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICAgICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX2FzeW5jRGVsZWdhdG9yID0gZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICB2YXIgaSwgcDtcclxuICAgICAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxuICAgIH07XHJcblxyXG4gICAgX19hc3luY1ZhbHVlcyA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgICAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgICAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICAgICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX21ha2VUZW1wbGF0ZU9iamVjdCA9IGZ1bmN0aW9uIChjb29rZWQsIHJhdykge1xyXG4gICAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICAgICAgcmV0dXJuIGNvb2tlZDtcclxuICAgIH07XHJcblxyXG4gICAgX19pbXBvcnRTdGFyID0gZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICAgICAgcmVzdWx0W1wiZGVmYXVsdFwiXSA9IG1vZDtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2ltcG9ydERlZmF1bHQgPSBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICAgICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydGVyKFwiX19leHRlbmRzXCIsIF9fZXh0ZW5kcyk7XHJcbiAgICBleHBvcnRlcihcIl9fYXNzaWduXCIsIF9fYXNzaWduKTtcclxuICAgIGV4cG9ydGVyKFwiX19yZXN0XCIsIF9fcmVzdCk7XHJcbiAgICBleHBvcnRlcihcIl9fZGVjb3JhdGVcIiwgX19kZWNvcmF0ZSk7XHJcbiAgICBleHBvcnRlcihcIl9fcGFyYW1cIiwgX19wYXJhbSk7XHJcbiAgICBleHBvcnRlcihcIl9fbWV0YWRhdGFcIiwgX19tZXRhZGF0YSk7XHJcbiAgICBleHBvcnRlcihcIl9fYXdhaXRlclwiLCBfX2F3YWl0ZXIpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2dlbmVyYXRvclwiLCBfX2dlbmVyYXRvcik7XHJcbiAgICBleHBvcnRlcihcIl9fZXhwb3J0U3RhclwiLCBfX2V4cG9ydFN0YXIpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3ZhbHVlc1wiLCBfX3ZhbHVlcyk7XHJcbiAgICBleHBvcnRlcihcIl9fcmVhZFwiLCBfX3JlYWQpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3NwcmVhZFwiLCBfX3NwcmVhZCk7XHJcbiAgICBleHBvcnRlcihcIl9fYXdhaXRcIiwgX19hd2FpdCk7XHJcbiAgICBleHBvcnRlcihcIl9fYXN5bmNHZW5lcmF0b3JcIiwgX19hc3luY0dlbmVyYXRvcik7XHJcbiAgICBleHBvcnRlcihcIl9fYXN5bmNEZWxlZ2F0b3JcIiwgX19hc3luY0RlbGVnYXRvcik7XHJcbiAgICBleHBvcnRlcihcIl9fYXN5bmNWYWx1ZXNcIiwgX19hc3luY1ZhbHVlcyk7XHJcbiAgICBleHBvcnRlcihcIl9fbWFrZVRlbXBsYXRlT2JqZWN0XCIsIF9fbWFrZVRlbXBsYXRlT2JqZWN0KTtcclxuICAgIGV4cG9ydGVyKFwiX19pbXBvcnRTdGFyXCIsIF9faW1wb3J0U3Rhcik7XHJcbiAgICBleHBvcnRlcihcIl9faW1wb3J0RGVmYXVsdFwiLCBfX2ltcG9ydERlZmF1bHQpO1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICBuYW1lOiB0cnVlLFxuICAgIGxlbmd0aDogdHJ1ZSxcbiAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgY2FsbGVyOiB0cnVlLFxuICAgIGNhbGxlZTogdHJ1ZSxcbiAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHsgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7IC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9pbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIF9pbXBsZW1lbnRhdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbXBsZW1lbnRhdGlvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDb250ZXh0IHx8IF9pbXBsZW1lbnRhdGlvbjIuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9ndWQgPSByZXF1aXJlKCdndWQnKTtcblxudmFyIF9ndWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3VkKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG5cbi8vIElubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsLlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyAoMCwgX2d1ZDIuZGVmYXVsdCkoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbC5hcHBseShfQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHMgPSB2b2lkIDA7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7IC8vIE5vIGNoYW5nZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSgoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJXMnLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0cyhDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RlbXAyLCBfdGhpczIsIF9yZXQyO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29uc3VtZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0MiA9IChfdGVtcDIgPSAoX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudDIuY2FsbC5hcHBseShfQ29tcG9uZW50MiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpczIpLCBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfSwgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBfdGVtcDIpLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpczIsIF9yZXQyKTtcbiAgICB9XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcblxuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgLy8gU3Vic2NyaWJlIHRvIGFsbCBjaGFuZ2VzIGJ5IGRlZmF1bHRcbiAgICAgIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG5cbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIC8vIFN1YnNjcmliZSB0byBhbGwgY2hhbmdlcyBieSBkZWZhdWx0XG4gICAgICA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG5cblxuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlUmVhY3RDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLy8gQGZsb3dcbid1c2Ugc3RyaWN0JztcblxudmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnbG9iYWxba2V5XSA9IChnbG9iYWxba2V5XSB8fCAwKSArIDE7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZzsiLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbnZhciBjbG9uZWFibGVUYWdzID0ge307XG5jbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG5jbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG5jbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbmNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbmNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG5jbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKipcbiAqIEFkZHMgdGhlIGtleS12YWx1ZSBgcGFpcmAgdG8gYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwYWlyIFRoZSBrZXktdmFsdWUgcGFpciB0byBhZGQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBtYXBgLlxuICovXG5mdW5jdGlvbiBhZGRNYXBFbnRyeShtYXAsIHBhaXIpIHtcbiAgLy8gRG9uJ3QgcmV0dXJuIGBtYXAuc2V0YCBiZWNhdXNlIGl0J3Mgbm90IGNoYWluYWJsZSBpbiBJRSAxMS5cbiAgbWFwLnNldChwYWlyWzBdLCBwYWlyWzFdKTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gYHNldGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBtb2RpZnkuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhZGQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBzZXRgLlxuICovXG5mdW5jdGlvbiBhZGRTZXRFbnRyeShzZXQsIHZhbHVlKSB7XG4gIC8vIERvbid0IHJldHVybiBgc2V0LmFkZGAgYmVjYXVzZSBpdCdzIG5vdCBjaGFpbmFibGUgaW4gSUUgMTEuXG4gIHNldC5hZGQodmFsdWUpO1xuICByZXR1cm4gc2V0O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIFN5bWJvbCA9IHJvb3QuU3ltYm9sLFxuICAgIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXksXG4gICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKSxcbiAgICBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKSxcbiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLFxuICAgIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyBkYXRhW2tleV0gIT09IHVuZGVmaW5lZCA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIGdldE1hcERhdGEodGhpcywga2V5KS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fWydkZWxldGUnXShrZXkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGNhY2hlID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGNhY2hlIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gY2FjaGUuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNhY2hlID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICAvLyBTYWZhcmkgOSBtYWtlcyBgYXJndW1lbnRzLmxlbmd0aGAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgdmFyIHJlc3VsdCA9IChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpXG4gICAgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpXG4gICAgOiBbXTtcblxuICB2YXIgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aCxcbiAgICAgIHNraXBJbmRleGVzID0gISFsZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoa2V5ID09ICdsZW5ndGgnIHx8IGlzSW5kZXgoa2V5LCBsZW5ndGgpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Z1bGxdIFNwZWNpZnkgYSBjbG9uZSBpbmNsdWRpbmcgc3ltYm9scy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgaXNEZWVwLCBpc0Z1bGwsIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoY3VzdG9taXplcikge1xuICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgfVxuICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICBpZiAoaXNBcnIpIHtcbiAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgaWYgKCFpc0RlZXApIHtcbiAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgIH1cbiAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICBpZiAoaXNIb3N0T2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZU9iamVjdChpc0Z1bmMgPyB7fSA6IHZhbHVlKTtcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgYmFzZUNsb25lLCBpc0RlZXApO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQ7XG4gIH1cbiAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gIGlmICghaXNBcnIpIHtcbiAgICB2YXIgcHJvcHMgPSBpc0Z1bGwgPyBnZXRBbGxLZXlzKHZhbHVlKSA6IGtleXModmFsdWUpO1xuICB9XG4gIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgIGlmIChwcm9wcykge1xuICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgaXNEZWVwLCBpc0Z1bGwsIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gYmFzZUNyZWF0ZShwcm90bykge1xuICByZXR1cm4gaXNPYmplY3QocHJvdG8pID8gb2JqZWN0Q3JlYXRlKHByb3RvKSA6IHt9O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBpc0hvc3RPYmplY3QodmFsdWUpKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciByZXN1bHQgPSBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGJ1ZmZlci5sZW5ndGgpO1xuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjbG9uZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNsb25lIHZhbHVlcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgbWFwLlxuICovXG5mdW5jdGlvbiBjbG9uZU1hcChtYXAsIGlzRGVlcCwgY2xvbmVGdW5jKSB7XG4gIHZhciBhcnJheSA9IGlzRGVlcCA/IGNsb25lRnVuYyhtYXBUb0FycmF5KG1hcCksIHRydWUpIDogbWFwVG9BcnJheShtYXApO1xuICByZXR1cm4gYXJyYXlSZWR1Y2UoYXJyYXksIGFkZE1hcEVudHJ5LCBuZXcgbWFwLmNvbnN0cnVjdG9yKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgc2V0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNsb25lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2xvbmVGdW5jIFRoZSBmdW5jdGlvbiB0byBjbG9uZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHNldC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTZXQoc2V0LCBpc0RlZXAsIGNsb25lRnVuYykge1xuICB2YXIgYXJyYXkgPSBpc0RlZXAgPyBjbG9uZUZ1bmMoc2V0VG9BcnJheShzZXQpLCB0cnVlKSA6IHNldFRvQXJyYXkoc2V0KTtcbiAgcmV0dXJuIGFycmF5UmVkdWNlKGFycmF5LCBhZGRTZXRFbnRyeSwgbmV3IHNldC5jb25zdHJ1Y3Rvcik7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyBzb3VyY2Vba2V5XSA6IG5ld1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9sIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9sIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSBuYXRpdmVHZXRTeW1ib2xzID8gb3ZlckFyZyhuYXRpdmVHZXRTeW1ib2xzLCBPYmplY3QpIDogc3R1YkFycmF5O1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEsXG4vLyBmb3IgZGF0YSB2aWV3cyBpbiBFZGdlIDwgMTQsIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzLlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNsb25lRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2xvbmUgdmFsdWVzLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgY2xvbmVGdW5jLCBpc0RlZXApIHtcbiAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHJldHVybiBjbG9uZU1hcChvYmplY3QsIGlzRGVlcCwgY2xvbmVGdW5jKTtcblxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTZXQob2JqZWN0LCBpc0RlZXAsIGNsb25lRnVuYyk7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiZcbiAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICghcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpIHx8IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IGFyZ3NUYWcpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVEZWVwO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoMjc3KTsiLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUxlYWRpbmdEb3QgPSAvXlxcLi8sXG4gICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0IGluIElFIDwgOS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSG9zdE9iamVjdCh2YWx1ZSkge1xuICAvLyBNYW55IGhvc3Qgb2JqZWN0cyBhcmUgYE9iamVjdGAgb2JqZWN0cyB0aGF0IGNhbiBjb2VyY2UgdG8gc3RyaW5nc1xuICAvLyBkZXNwaXRlIGhhdmluZyBpbXByb3Blcmx5IGRlZmluZWQgYHRvU3RyaW5nYCBtZXRob2RzLlxuICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gIGlmICh2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9ICEhKHZhbHVlICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2wsXG4gICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICByZXR1cm4gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLnNldChrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplKGZ1bmN0aW9uKHN0cmluZykge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHJlTGVhZGluZ0RvdC50ZXN0KHN0cmluZykpIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBBc3NpZ24gY2FjaGUgdG8gYF8ubWVtb2l6ZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA4LTkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXkgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGlzT2JqZWN0KHZhbHVlKSA/IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAqXG4gKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gKi9cbmZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5KTtcbiAgfVxuICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1BhdGg7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBrZXlMaXN0ID0gT2JqZWN0LmtleXM7XG52YXIgaGFzUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIHZhciBhcnJBID0gaXNBcnJheShhKVxuICAgICwgYXJyQiA9IGlzQXJyYXkoYilcbiAgICAsIGlcbiAgICAsIGxlbmd0aFxuICAgICwga2V5O1xuXG4gIGlmIChhcnJBICYmIGFyckIpIHtcbiAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGFyckEgIT0gYXJyQikgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkYXRlQSA9IGEgaW5zdGFuY2VvZiBEYXRlXG4gICAgLCBkYXRlQiA9IGIgaW5zdGFuY2VvZiBEYXRlO1xuICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcbiAgaWYgKGRhdGVBICYmIGRhdGVCKSByZXR1cm4gYS5nZXRUaW1lKCkgPT0gYi5nZXRUaW1lKCk7XG5cbiAgdmFyIHJlZ2V4cEEgPSBhIGluc3RhbmNlb2YgUmVnRXhwXG4gICAgLCByZWdleHBCID0gYiBpbnN0YW5jZW9mIFJlZ0V4cDtcbiAgaWYgKHJlZ2V4cEEgIT0gcmVnZXhwQikgcmV0dXJuIGZhbHNlO1xuICBpZiAocmVnZXhwQSAmJiByZWdleHBCKSByZXR1cm4gYS50b1N0cmluZygpID09IGIudG9TdHJpbmcoKTtcblxuICBpZiAoYSBpbnN0YW5jZW9mIE9iamVjdCAmJiBiIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBrZXlMaXN0KGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbmd0aCAhPT0ga2V5TGlzdChiKS5sZW5ndGgpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICBpZiAoIWhhc1Byb3AuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGtleSA9PT0gJ19vd25lcicgJiYgYS4kJHR5cGVvZiAmJiBhLl9zdG9yZSkge1xuICAgICAgICAvLyBSZWFjdC1zcGVjaWZpYzogYXZvaWQgdHJhdmVyc2luZyBSZWFjdCBlbGVtZW50cycgX293bmVyLlxuICAgICAgICAvLyAgX293bmVyIGNvbnRhaW5zIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgICAgICAgLy8gYW5kIGlzIG5vdCBuZWVkZWQgd2hlbiBjb21wYXJpbmcgdGhlIGFjdHVhbCBlbGVtZW50cyAoYW5kIG5vdCB0aGVpciBvd25lcnMpXG4gICAgICAgIC8vIC4kJHR5cGVvZiBhbmQgLl9zdG9yZSBvbiBqdXN0IHJlYXNvbmFibGUgbWFya2VycyBvZiBhIHJlYWN0IGVsZW1lbnRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBhbGwgb3RoZXIgcHJvcGVydGllcyBzaG91bGQgYmUgdHJhdmVyc2VkIGFzIHVzdWFsXG4gICAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXhwb3J0ZWRFcXVhbChhLCBiKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVxdWFsKGEsIGIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvci5tZXNzYWdlICYmIGVycm9yLm1lc3NhZ2UubWF0Y2goL3N0YWNrfHJlY3Vyc2lvbi9pKSkge1xuICAgICAgLy8gd2FybiBvbiBjaXJjdWxhciByZWZlcmVuY2VzLCBkb24ndCBjcmFzaFxuICAgICAgLy8gYnJvd3NlcnMgZ2l2ZSB0aGlzIGRpZmZlcmVudCBlcnJvcnMgbmFtZSBhbmQgbWVzc2FnZXM6XG4gICAgICAvLyBjaHJvbWUvc2FmYXJpOiBcIlJhbmdlRXJyb3JcIiwgXCJNYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiXG4gICAgICAvLyBmaXJlZm94OiBcIkludGVybmFsRXJyb3JcIiwgdG9vIG11Y2ggcmVjdXJzaW9uXCJcbiAgICAgIC8vIGVkZ2U6IFwiRXJyb3JcIiwgXCJPdXQgb2Ygc3RhY2sgc3BhY2VcIlxuICAgICAgY29uc29sZS53YXJuKCdXYXJuaW5nOiByZWFjdC1mYXN0LWNvbXBhcmUgZG9lcyBub3QgaGFuZGxlIGNpcmN1bGFyIHJlZmVyZW5jZXMuJywgZXJyb3IubmFtZSwgZXJyb3IubWVzc2FnZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIHNvbWUgb3RoZXIgZXJyb3IuIHdlIHNob3VsZCBkZWZpbml0ZWx5IGtub3cgYWJvdXQgdGhlc2VcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKDU5KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdChnbG9iYWwuZGVlcG1lcmdlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNNZXJnZWFibGVPYmplY3QgPSBmdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKVxuXHRcdCYmICFpc1NwZWNpYWwodmFsdWUpXG59O1xuXG5mdW5jdGlvbiBpc05vbk51bGxPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1NwZWNpYWwodmFsdWUpIHtcblx0dmFyIHN0cmluZ1ZhbHVlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblxuXHRyZXR1cm4gc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG5cdFx0fHwgc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IERhdGVdJ1xuXHRcdHx8IGlzUmVhY3RFbGVtZW50KHZhbHVlKVxufVxuXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjVhYzk2M2ZiNzkxZDEyOThlN2YzOTYyMzYzODNiYzk1NWY5MTZjMS9zcmMvaXNvbW9ycGhpYy9jbGFzc2ljL2VsZW1lbnQvUmVhY3RFbGVtZW50LmpzI0wyMS1MMjVcbnZhciBjYW5Vc2VTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gY2FuVXNlU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xuXG5mdW5jdGlvbiBpc1JlYWN0RWxlbWVudCh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRVxufVxuXG5mdW5jdGlvbiBlbXB0eVRhcmdldCh2YWwpIHtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodmFsdWUsIG9wdGlvbnMpIHtcblx0cmV0dXJuIChvcHRpb25zLmNsb25lICE9PSBmYWxzZSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSlcblx0XHQ/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zKVxuXHRcdDogdmFsdWVcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0cmV0dXJuIHRhcmdldC5jb25jYXQoc291cmNlKS5tYXAoZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChlbGVtZW50LCBvcHRpb25zKVxuXHR9KVxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHR2YXIgZGVzdGluYXRpb24gPSB7fTtcblx0aWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuXHRcdE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cblx0T2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdGlmICghb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkgfHwgIXRhcmdldFtrZXldKSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0b3B0aW9ucy5hcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXHRvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0ID0gb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCB8fCBpc01lcmdlYWJsZU9iamVjdDtcblxuXHR2YXIgc291cmNlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcblx0dmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG5cdHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuXHRpZiAoIXNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2gpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5hcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheScpXG5cdH1cblxuXHRyZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnMpXG5cdH0sIHt9KVxufTtcblxudmFyIGRlZXBtZXJnZV8xID0gZGVlcG1lcmdlO1xuXG5yZXR1cm4gZGVlcG1lcmdlXzE7XG5cbn0pKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLyogZ2xvYmFsIHNldFRpbWVvdXQsIGNsZWFyVGltZW91dCAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciB3YWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgdmFyIGxhc3RDYWxsQXQgPSB2b2lkIDA7XG4gIHZhciBkZWZlcnJlZCA9IHZvaWQgMDtcbiAgdmFyIHRpbWVyID0gdm9pZCAwO1xuICB2YXIgcGVuZGluZ0FyZ3MgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgY3VycmVudFdhaXQgPSBnZXRXYWl0KHdhaXQpO1xuICAgIHZhciBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgdmFyIGlzQ29sZCA9ICFsYXN0Q2FsbEF0IHx8IGN1cnJlbnRUaW1lIC0gbGFzdENhbGxBdCA+IGN1cnJlbnRXYWl0O1xuXG4gICAgbGFzdENhbGxBdCA9IGN1cnJlbnRUaW1lO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGlzQ29sZCAmJiBvcHRpb25zLmxlYWRpbmcpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmFjY3VtdWxhdGUgPyBQcm9taXNlLnJlc29sdmUoZm4uY2FsbCh0aGlzLCBbYXJnc10pKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFswXTtcbiAgICAgIH0pIDogUHJvbWlzZS5yZXNvbHZlKGZuLmNhbGwuYXBwbHkoZm4sIFt0aGlzXS5jb25jYXQoYXJncykpKTtcbiAgICB9XG5cbiAgICBpZiAoZGVmZXJyZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICB9XG5cbiAgICBwZW5kaW5nQXJncy5wdXNoKGFyZ3MpO1xuICAgIHRpbWVyID0gc2V0VGltZW91dChmbHVzaC5iaW5kKHRoaXMpLCBjdXJyZW50V2FpdCk7XG5cbiAgICBpZiAob3B0aW9ucy5hY2N1bXVsYXRlKSB7XG4gICAgICB2YXIgX3JldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3NJbmRleCA9IHBlbmRpbmdBcmdzLmxlbmd0aCAtIDE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdjogZGVmZXJyZWQucHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0c1thcmdzSW5kZXhdO1xuICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICB9KCk7XG5cbiAgICAgIGlmICgodHlwZW9mIF9yZXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKF9yZXQpKSA9PT0gXCJvYmplY3RcIikgcmV0dXJuIF9yZXQudjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfTtcblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICB2YXIgdGhpc0RlZmVycmVkID0gZGVmZXJyZWQ7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcblxuICAgIFByb21pc2UucmVzb2x2ZShvcHRpb25zLmFjY3VtdWxhdGUgPyBmbi5jYWxsKHRoaXMsIHBlbmRpbmdBcmdzKSA6IGZuLmFwcGx5KHRoaXMsIHBlbmRpbmdBcmdzW3BlbmRpbmdBcmdzLmxlbmd0aCAtIDFdKSkudGhlbih0aGlzRGVmZXJyZWQucmVzb2x2ZSwgdGhpc0RlZmVycmVkLnJlamVjdCk7XG5cbiAgICBwZW5kaW5nQXJncyA9IFtdO1xuICAgIGRlZmVycmVkID0gbnVsbDtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0V2FpdCh3YWl0KSB7XG4gIHJldHVybiB0eXBlb2Ygd2FpdCA9PT0gJ2Z1bmN0aW9uJyA/IHdhaXQoKSA6IHdhaXQ7XG59XG5cbmZ1bmN0aW9uIGRlZmVyKCkge1xuICB2YXIgZGVmZXJyZWQgPSB7fTtcbiAgZGVmZXJyZWQucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBkZWZlcnJlZC5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICBkZWZlcnJlZC5yZWplY3QgPSByZWplY3Q7XG4gIH0pO1xuICByZXR1cm4gZGVmZXJyZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQge3RvYXN0fSBmcm9tIFwicmVhY3QtdG9hc3RpZnlcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBVaSB7XHJcbiAgICBcclxuICAgIHN0YXRpYyBzaG93RXJyb3JzKC4uLm1lc3NhZ2VzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIG1lc3NhZ2VzLmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh4KSkge1xyXG4gICAgICAgICAgICAgICAgdG9hc3QuZXJyb3IoeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAoeCBhcyBhbnkpLmZvckVhY2goKHk6IHN0cmluZykgPT4gdG9hc3QuZXJyb3IoeSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNob3dJbmZvKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHRvYXN0LmluZm8obWVzc2FnZSk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN1bHQ8VD4ge1xyXG4gICAgcHVibGljIHZhbHVlOiBUO1xyXG4gICAgcHVibGljIGVycm9yczogc3RyaW5nW107XHJcbiAgICBwdWJsaWMgZ2V0IGhhc0Vycm9ycygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcnMgIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KHRoaXMuZXJyb3JzKSAmJiB0aGlzLmVycm9ycy5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBULCAuLi5lcnJvcnM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzWzBdID09IHVuZGVmaW5lZCB8fCBlcnJvcnNbMF0gPT0gbnVsbCA/IFtdIDogZXJyb3JzO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQXBwVGh1bmtBY3Rpb25Bc3luYyB9IGZyb20gXCJAU3RvcmUvaW5kZXhcIjtcclxuXHJcbmRlY2xhcmUgdmFyIHByb2Nlc3M6IGFueTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZTxUPihvYmplY3Q6IFQpOiBUIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iamVjdCkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvbWlzZUZyb21BY3Rpb248VCwgVj4oYXN5bmNBY3Rpb25DcmVhdG9yOiBBcHBUaHVua0FjdGlvbkFzeW5jPFQsIFY+KTogUHJvbWlzZTxWPiB7XHJcbiAgICByZXR1cm4gKGFzeW5jQWN0aW9uQ3JlYXRvciBhcyBhbnkpIGFzIFByb21pc2U8Vj47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJcyBzZXJ2ZXIgcHJlcmVuZGVyaW5nIGJ5IE5vZGUuanMuXHJcbiAqIFRoZXJlIGNhbid0IGJlIGFueSBET006IHdpbmRvdywgZG9jdW1lbnQsIGV0Yy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc05vZGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgISFwcm9jZXNzLnZlcnNpb25zLm5vZGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaik6IGJvb2xlYW4ge1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlbXB0eUZvcm0oZm9ybTogSFRNTEZvcm1FbGVtZW50KTogdm9pZCB7XHJcbiAgICB2YXIgaW5wdXRzID0gQXJyYXkuZnJvbShmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYVwiKSk7XHJcbiAgICBpbnB1dHMuZm9yRWFjaCh4ID0+IHtcclxuICAgICAgICB2YXIgaW5wdXRUeXBlID0geC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xyXG4gICAgICAgIGlmIChpbnB1dFR5cGUgPT09IFwiY2hlY2tib3hcIiB8fCBpbnB1dFR5cGUgPT09IFwicmFkaW9cIikge1xyXG4gICAgICAgICAgICAoeCBhcyBhbnkpLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAoeCBhcyBhbnkpLnZhbHVlID0gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSIsImltcG9ydCB7IElMb2dpbk1vZGVsIH0gZnJvbSBcIkBNb2RlbHMvSUxvZ2luTW9kZWxcIjtcclxuaW1wb3J0IHsgSVNlcnZpY2VVc2VyIH0gZnJvbSBcIkBNb2RlbHMvSVNlcnZpY2VVc2VyXCI7XHJcbmltcG9ydCB7IGNsb25lIH0gZnJvbSBcIkBVdGlsc1wiO1xyXG5pbXBvcnQgeyBBY3Rpb24sIFJlZHVjZXIgfSBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0IEFjY291bnRTZXJ2aWNlIGZyb20gXCJAU2VydmljZXMvQWNjb3VudFNlcnZpY2VcIjtcclxuaW1wb3J0IHsgQXBwVGh1bmtBY3Rpb24gfSBmcm9tIFwiLi9pbmRleFwiO1xyXG5cclxuZXhwb3J0IG1vZHVsZSBMb2dpblN0b3JlIHtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSB7XHJcbiAgICAgICAgaW5kaWNhdG9yczoge1xyXG4gICAgICAgICAgICBvcGVyYXRpb25Mb2FkaW5nOiBib29sZWFuO1xyXG4gICAgICAgICAgICBsb2dpblN1Y2Nlc3M6IGJvb2xlYW47XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZW51bSBBY3Rpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBZb3UgbmVlZCB0byBoYXZlIHRoZSBpbml0aWFsIHN0YXRlIHRvXHJcbiAgICAgICAgICogcmVzZXQgdGhlIGluZGljYXRvcnMgKGUuZy4gbG9naW5TdWNjZXNzKVxyXG4gICAgICAgICAqIHRoYXQgY2FsbCByZWRpcmVjdCBvciBhbnkgb3RoZXIgYWN0aW9ucy5cclxuICAgICAgICAgKiBJdCBtdXN0IGJlIGNhbGxlZCBpbiBtZXRob2QgJ2NvbXBvbmVudERpZE1vdW50J1xyXG4gICAgICAgICAqIG9mIGEgY29tcG9uZW50LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEluaXQgPSBcIkxPR0lOX0lOSVRcIixcclxuICAgICAgICBSZXF1ZXN0ID0gXCJMT0dJTl9SRVFVRVNUXCIsXHJcbiAgICAgICAgU3VjY2VzcyA9IFwiTE9HSU5fU1VDQ0VTU1wiLFxyXG4gICAgICAgIEZhaWx1cmUgPSBcIkxPR0lOX0ZBSUxVUkVcIlxyXG4gICAgfVxyXG5cclxuICAgIGludGVyZmFjZSBJSW5pdCB7XHJcbiAgICAgICAgdHlwZTogQWN0aW9ucy5Jbml0O1xyXG4gICAgfVxyXG5cclxuICAgIGludGVyZmFjZSBJUmVxdWVzdCB7XHJcbiAgICAgICAgdHlwZTogQWN0aW9ucy5SZXF1ZXN0O1xyXG4gICAgfVxyXG5cclxuICAgIGludGVyZmFjZSBJU3VjY2VzcyB7XHJcbiAgICAgICAgdHlwZTogQWN0aW9ucy5TdWNjZXNzO1xyXG4gICAgICAgIHBheWxvYWQ6IElTZXJ2aWNlVXNlcjtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgSUZhaWx1cmUge1xyXG4gICAgICAgIHR5cGU6IEFjdGlvbnMuRmFpbHVyZTtcclxuICAgIH1cclxuXHJcbiAgICB0eXBlIEtub3duQWN0aW9uID0gSUluaXQgfCBJUmVxdWVzdCB8IElTdWNjZXNzIHwgSUZhaWx1cmU7XHJcblxyXG4gICAgZXhwb3J0IGNvbnN0IGFjdGlvbkNyZWF0b3JzID0ge1xyXG4gICAgICAgIGluaXQ6ICgpOiBBcHBUaHVua0FjdGlvbjxLbm93bkFjdGlvbj4gPT4gYXN5bmMgKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvbnMuSW5pdCB9KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbG9naW5SZXF1ZXN0OiAobW9kZWw6IElMb2dpbk1vZGVsKTogQXBwVGh1bmtBY3Rpb248S25vd25BY3Rpb24+ID0+IGFzeW5jIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5SZXF1ZXN0IH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IEFjY291bnRTZXJ2aWNlLmxvZ2luKG1vZGVsKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC5oYXNFcnJvcnMpIHtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5GYWlsdXJlIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvbnMuU3VjY2VzcywgcGF5bG9hZDogcmVzdWx0LnZhbHVlIH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluaXRpYWxTdGF0ZTogSVN0YXRlID0ge1xyXG4gICAgICAgIGluZGljYXRvcnM6IHtcclxuICAgICAgICAgICAgb3BlcmF0aW9uTG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgIGxvZ2luU3VjY2VzczogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydCBjb25zdCByZWR1Y2VyOiBSZWR1Y2VyPElTdGF0ZT4gPSAoY3VycmVudFN0YXRlOiBJU3RhdGUsIGluY29taW5nQWN0aW9uOiBBY3Rpb24pID0+IHtcclxuICAgICAgICBjb25zdCBhY3Rpb24gPSBpbmNvbWluZ0FjdGlvbiBhcyBLbm93bkFjdGlvbjtcclxuXHJcbiAgICAgICAgdmFyIGNsb25lSW5kaWNhdG9ycyA9ICgpID0+IGNsb25lKGN1cnJlbnRTdGF0ZS5pbmRpY2F0b3JzKTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvbnMuSW5pdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbml0aWFsU3RhdGU7XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9ucy5SZXF1ZXN0OlxyXG4gICAgICAgICAgICAgICAgdmFyIGluZGljYXRvcnMgPSBjbG9uZUluZGljYXRvcnMoKTtcclxuICAgICAgICAgICAgICAgIGluZGljYXRvcnMub3BlcmF0aW9uTG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5jdXJyZW50U3RhdGUsIGluZGljYXRvcnMgfTtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25zLlN1Y2Nlc3M6XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9ycyA9IGNsb25lSW5kaWNhdG9ycygpO1xyXG4gICAgICAgICAgICAgICAgaW5kaWNhdG9ycy5vcGVyYXRpb25Mb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLmxvZ2luU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5jdXJyZW50U3RhdGUsIGluZGljYXRvcnMgfTtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25zLkZhaWx1cmU6XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9ycyA9IGNsb25lSW5kaWNhdG9ycygpO1xyXG4gICAgICAgICAgICAgICAgaW5kaWNhdG9ycy5vcGVyYXRpb25Mb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5jdXJyZW50U3RhdGUsIGluZGljYXRvcnMgfTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbGluZSBndWFyYW50ZWVzIHRoYXQgZXZlcnkgYWN0aW9uIGluIHRoZSBLbm93bkFjdGlvbiB1bmlvbiBoYXMgYmVlbiBjb3ZlcmVkIGJ5IGEgY2FzZSBhYm92ZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZXhoYXVzdGl2ZUNoZWNrOiBuZXZlciA9IGFjdGlvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjdXJyZW50U3RhdGUgfHwgaW5pdGlhbFN0YXRlO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgSVNlcnZpY2VVc2VyIH0gZnJvbSBcIkBNb2RlbHMvSVNlcnZpY2VVc2VyXCI7XHJcbmltcG9ydCB7IE5TZXJpYWxpemVKc29uIH0gZnJvbSBcIm5zZXJpYWxpemVqc29uXCI7XHJcbmltcG9ydCB7IElOb2RlU2Vzc2lvbiB9IGZyb20gXCJATW9kZWxzL0lOb2RlU2Vzc2lvblwiO1xyXG5cclxuLyoqXHJcbiAqIENvbnRhaW5zIGdsb2JhbCBpc29tb3JwaGljIHNlc3Npb24uXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHbG9iYWxzIHtcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBpc0luaXRpYWxpemVkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBnYW1lUmVhZHk6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBzdGF0aWMgY3VycmVudExvY2F0aW9uOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgc3RhdGljIG5leHRMb2NhdGlvbjogc3RyaW5nO1xyXG4gICAgcHVibGljIHN0YXRpYyBwcmV2TG9jYXRpb246IHN0cmluZztcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBkYXRhOiBJTm9kZVNlc3Npb24gPSB7fTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZ2FtZVJlYWR5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kYXRhID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpbml0KGRhdGE6IElOb2RlU2Vzc2lvbik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJHbG9iYWxzIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRhdGEgPSAoZGF0YSB8fCB7XHJcbiAgICAgICAgICAgIHB1YmxpYzoge30sIHByaXZhdGU6IHt9XHJcbiAgICAgICAgfSkgYXMgSU5vZGVTZXNzaW9uO1xyXG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIFVzZSBkb3Qgbm90YXRpb24gaW4gbmFtZSBvZiB0aGUgZm9ybSBpbnB1dHMuXHJcbiAgICAgICAgTlNlcmlhbGl6ZUpzb24ub3B0aW9ucy51c2VEb3RTZXBhcmF0b3JJblBhdGggPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0R2FtZVJlYWR5KGI6Ym9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2FtZVJlYWR5ID0gYjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzR2FtZVJlYWR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdhbWVSZWFkeTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyB0aHJvd0lmTm90SW5pdGlhbGl6ZWQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQpXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiR2xvYmFscyBpcyBub3QgaW5pdGlhbGl6ZWQuIFlvdSBoYXZlIHRvIGNhbGwgU2Vzc2lvbi5pbml0IGJlZm9yZS5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXREYXRhKCk6IElOb2RlU2Vzc2lvbiB7XHJcbiAgICAgICAgdGhpcy50aHJvd0lmTm90SW5pdGlhbGl6ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0RGF0YShkYXRhOiBJTm9kZVNlc3Npb24pIHtcclxuICAgICAgICB0aGlzLnRocm93SWZOb3RJbml0aWFsaXplZCgpO1xyXG4gICAgICAgIHZhciBvbGREYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHsgLi4ub2xkRGF0YSwgLi4uZGF0YSB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IHNlcnZpY2VVc2VyKCk6IElTZXJ2aWNlVXNlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YSgpLnB1YmxpYy5zZXJ2aWNlVXNlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHNldCBzZXJ2aWNlVXNlcihzZXJ2aWNlVXNlcjogSVNlcnZpY2VVc2VyKSB7XHJcbiAgICAgICAgdGhpcy5zZXREYXRhKHsgcHVibGljOiB7IHNlcnZpY2VVc2VyIH0gfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaXNBdXRoZW50aWNhdGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2VVc2VyICE9IG51bGw7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBVaSB9IGZyb20gXCJAVWlcIjtcclxuaW1wb3J0IFJlc3VsdCBmcm9tIFwiQE1vZGVscy9SZXN1bHRcIjtcclxuaW1wb3J0IEF4aW9zLCB7IEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgeyB0cmFuc2Zvcm1VcmwgfSBmcm9tIFwiZG9tYWluLXdhaXRcIjtcclxuaW1wb3J0IGpzb25Ub1VybCBmcm9tIFwianNvbi10by11cmxcIjtcclxuaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSBcIkBVdGlsc1wiO1xyXG5pbXBvcnQgR2xvYmFscyBmcm9tIFwiQEdsb2JhbHNcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJlcXVlc3RPcHRpb25zIHtcclxuICAgIHVybDogc3RyaW5nO1xyXG4gICAgZGF0YT86IGFueTtcclxuICAgIG1ldGhvZDogXCJHRVRcIiB8IFwiUE9TVFwiIHwgXCJQVVRcIiB8IFwiUEFUQ0hcIiB8IFwiREVMRVRFXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNlbmRGb3JtRGF0YU9wdGlvbnMge1xyXG4gICAgdXJsOiBzdHJpbmc7XHJcbiAgICBkYXRhOiBGb3JtRGF0YTtcclxuICAgIG1ldGhvZDogXCJQT1NUXCIgfCBcIlBVVFwiIHwgXCJQQVRDSFwiO1xyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBiYXNlIGNsYXNzIG9mIHRoZSBpc29tb3JwaGljIHNlcnZpY2UuXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU2VydmljZUJhc2Uge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWFrZSByZXF1ZXN0IHdpdGggSlNPTiBkYXRhLlxyXG4gICAgICogQHBhcmFtIG9wdHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyByZXF1ZXN0SnNvbjxUPihvcHRzOiBJUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPFJlc3VsdDxUPj4ge1xyXG5cclxuICAgICAgICB2YXIgYXhpb3NSZXN1bHQgPSBudWxsO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xyXG5cclxuICAgICAgICBvcHRzLnVybCA9IHRyYW5zZm9ybVVybChvcHRzLnVybCk7IC8vIEFsbG93IHJlcXVlc3RzIGFsc28gZm9yIE5vZGUuXHJcblxyXG4gICAgICAgIHZhciBwcm9jZXNzUXVlcnkgPSAodXJsOiBzdHJpbmcsIGRhdGE6IGFueSk6IHN0cmluZyA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dXJsfT8ke2pzb25Ub1VybChkYXRhKX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB1cmw7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGF4aW9zUmVxdWVzdENvbmZpZyA6IEF4aW9zUmVxdWVzdENvbmZpZztcclxuXHJcbiAgICAgICAgaWYgKGlzTm9kZSgpKSB7XHJcbiAgICAgICAgICAgIC8vIFVzZWQgZm9yIFNTUiByZXF1ZXN0cyBmcm9tIHRoZSB3ZWIgc2VydmVyIHRvIE5vZGVTZXJ2aWNlcy5cclxuICAgICAgICAgICAgYXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgIENvb2tpZTogR2xvYmFscy5nZXREYXRhKCkucHJpdmF0ZS5jb29raWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgc3dpdGNoIChvcHRzLm1ldGhvZCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkdFVFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGF4aW9zUmVzdWx0ID0gYXdhaXQgQXhpb3MuZ2V0KHByb2Nlc3NRdWVyeShvcHRzLnVybCwgb3B0cy5kYXRhKSwgYXhpb3NSZXF1ZXN0Q29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJQT1NUXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYXhpb3NSZXN1bHQgPSBhd2FpdCBBeGlvcy5wb3N0KG9wdHMudXJsLCBvcHRzLmRhdGEsIGF4aW9zUmVxdWVzdENvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUFVUXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYXhpb3NSZXN1bHQgPSBhd2FpdCBBeGlvcy5wdXQob3B0cy51cmwsIG9wdHMuZGF0YSwgYXhpb3NSZXF1ZXN0Q29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJQQVRDSFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGF4aW9zUmVzdWx0ID0gYXdhaXQgQXhpb3MucGF0Y2gob3B0cy51cmwsIG9wdHMuZGF0YSwgYXhpb3NSZXF1ZXN0Q29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJERUxFVEVcIjpcclxuICAgICAgICAgICAgICAgICAgICBheGlvc1Jlc3VsdCA9IGF3YWl0IEF4aW9zLmRlbGV0ZShwcm9jZXNzUXVlcnkob3B0cy51cmwsIG9wdHMuZGF0YSksIGF4aW9zUmVxdWVzdENvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFJlc3VsdChheGlvc1Jlc3VsdC5kYXRhLnZhbHVlLCAuLi5heGlvc1Jlc3VsdC5kYXRhLmVycm9ycyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFJlc3VsdChudWxsLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXN1bHQuaGFzRXJyb3JzKSB7XHJcbiAgICAgICAgICAgIFVpLnNob3dFcnJvcnMoLi4ucmVzdWx0LmVycm9ycyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWxsb3dzIHlvdSB0byBzZW5kIGZpbGVzIHRvIHRoZSBzZXJ2ZXIuXHJcbiAgICAgKiBAcGFyYW0gb3B0c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIHNlbmRGb3JtRGF0YTxUPihvcHRzOiBJU2VuZEZvcm1EYXRhT3B0aW9ucyk6IFByb21pc2U8UmVzdWx0PFQ+PiB7XHJcbiAgICAgICAgdmFyIGF4aW9zUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgb3B0cy51cmwgPSB0cmFuc2Zvcm1Vcmwob3B0cy51cmwpOyAvLyBBbGxvdyByZXF1ZXN0cyBhbHNvIGZvciBOb2RlLlxyXG5cclxuICAgICAgICB2YXIgYXhpb3NPcHRzID0ge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wdHMubWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUE9TVFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGF4aW9zUmVzdWx0ID0gYXdhaXQgQXhpb3MucG9zdChvcHRzLnVybCwgb3B0cy5kYXRhLCBheGlvc09wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlBVVFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGF4aW9zUmVzdWx0ID0gYXdhaXQgQXhpb3MucHV0KG9wdHMudXJsLCBvcHRzLmRhdGEsIGF4aW9zT3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUEFUQ0hcIjpcclxuICAgICAgICAgICAgICAgICAgICBheGlvc1Jlc3VsdCA9IGF3YWl0IEF4aW9zLnBhdGNoKG9wdHMudXJsLCBvcHRzLmRhdGEsIGF4aW9zT3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFJlc3VsdChheGlvc1Jlc3VsdC5kYXRhLnZhbHVlLCAuLi5heGlvc1Jlc3VsdC5kYXRhLmVycm9ycyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFJlc3VsdChudWxsLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXN1bHQuaGFzRXJyb3JzKSB7XHJcbiAgICAgICAgICAgIFVpLnNob3dFcnJvcnMoLi4ucmVzdWx0LmVycm9ycyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgSUxvZ2luTW9kZWwgfSBmcm9tIFwiQE1vZGVscy9JTG9naW5Nb2RlbFwiO1xyXG5pbXBvcnQgeyBJU2VydmljZVVzZXIgfSBmcm9tIFwiQE1vZGVscy9JU2VydmljZVVzZXJcIjtcclxuaW1wb3J0IFJlc3VsdCBmcm9tIFwiQE1vZGVscy9SZXN1bHRcIjtcclxuaW1wb3J0IHsgU2VydmljZUJhc2UgfSBmcm9tIFwiLi9TZXJ2aWNlQmFzZVwiO1xyXG5pbXBvcnQgR2xvYmFscyBmcm9tIFwiQEdsb2JhbHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY291bnRTZXJ2aWNlIGV4dGVuZHMgU2VydmljZUJhc2Uge1xyXG4gICAgXHJcbiAgICBzdGF0aWMgYXN5bmMgbG9naW4obG9naW5Nb2RlbDogSUxvZ2luTW9kZWwpIDogUHJvbWlzZTxSZXN1bHQ8SVNlcnZpY2VVc2VyPj4ge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBhd2FpdCB0aGlzLnJlcXVlc3RKc29uPElTZXJ2aWNlVXNlcj4oe1xyXG4gICAgICAgICAgICB1cmw6IFwiYXBpL0FjY291bnQvTG9naW5cIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgZGF0YTogbG9naW5Nb2RlbFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoIXJlc3VsdC5oYXNFcnJvcnMpIHtcclxuICAgICAgICAgICAgR2xvYmFscy5zZXJ2aWNlVXNlciA9IHJlc3VsdC52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIGxvZ291dCgpOiBQcm9taXNlPFJlc3VsdDx7fT4+IHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gYXdhaXQgdGhpcy5yZXF1ZXN0SnNvbjxJU2VydmljZVVzZXI+KHtcclxuICAgICAgICAgICAgdXJsOiBcImFwaS9BY2NvdW50L0xvZ291dFwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICghcmVzdWx0Lmhhc0Vycm9ycykge1xyXG4gICAgICAgICAgICBHbG9iYWxzLnNlcnZpY2VVc2VyID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuaW1wb3J0IHsgTmF2TGluaywgUmVkaXJlY3QgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgR2xvYmFscyBmcm9tIFwiQEdsb2JhbHNcIjtcclxuaW1wb3J0IEFjY291bnRTZXJ2aWNlIGZyb20gXCJAU2VydmljZXMvQWNjb3VudFNlcnZpY2VcIjtcclxuXHJcbmltcG9ydCBiaW5kIGZyb20gJ2JpbmQtZGVjb3JhdG9yJztcclxuXHJcbmNsYXNzIFRvcE1lbnUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8e30sIHsgbG9nb3V0QWN0aW9uOiBib29sZWFuIH0+IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0geyBsb2dvdXRBY3Rpb246IGZhbHNlIH07XHJcbiAgICB9XHJcblxyXG4gICAgQGJpbmRcclxuICAgIGFzeW5jIG9uQ2xpY2tTaWduT3V0KGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQ+KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBhd2FpdCBBY2NvdW50U2VydmljZS5sb2dvdXQoKTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9nb3V0QWN0aW9uOiB0cnVlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZWxEcm9wZG93bjogSFRNTEFuY2hvckVsZW1lbnQ7XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgLy92YXIgZHJvcGRvd24gPSBuZXcgRHJvcGRvd24odGhpcy5lbERyb3Bkb3duKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmxvZ291dEFjdGlvbikge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiA8bmF2IGNsYXNzTmFtZT1cIm5hdmJhciBuYXZiYXItZXhwYW5kLW1kIG5hdmJhci1saWdodCBiZy1saWdodFwiPlxyXG4gICAgICAgICAgICA8TmF2TGluayBleGFjdCB0bz17Jy8nfSBjbGFzc05hbWU9XCJuYXZiYXItYnJhbmRcIj5KRzwvTmF2TGluaz5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJuYXZiYXItdG9nZ2xlclwiIHR5cGU9XCJidXR0b25cIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgZGF0YS10YXJnZXQ9XCIjbmF2YmFyTmF2XCIgYXJpYS1jb250cm9scz1cIm5hdmJhck5hdlwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmF2aWdhdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibmF2YmFyLXRvZ2dsZXItaWNvblwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlXCIgaWQ9XCJuYXZiYXJOYXZcIj5cclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJuYXZiYXItbmF2XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtIGFjdGl2ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayBleGFjdCB0bz17Jy8nfSBzdHlsZT17eyBcImZvbnRTaXplXCI6IFwiMThweFwiIH19IGNsYXNzTmFtZT1cIm5hdi1saW5rXCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+SG9tZTwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJuYXYtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayBleGFjdCB0bz17Jy9wb3J0Zm9saW8nfSBzdHlsZT17eyBcImZvbnRTaXplXCI6IFwiMThweFwiIH19IGNsYXNzTmFtZT1cIm5hdi1saW5rXCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+UG9ydGZvbGlvPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIGV4YWN0IHRvPXsnL3JlYWRpbmcnfSBzdHlsZT17eyBcImZvbnRTaXplXCI6IFwiMThweFwiIH19IGNsYXNzTmFtZT1cIm5hdi1saW5rXCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+UmVhZGluZzwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy88bGkgY2xhc3NOYW1lPVwibmF2LWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgPE5hdkxpbmsgZXhhY3QgdG89eycvdHJhdmVsaW5nJ30gc3R5bGU9e3sgXCJmb250U2l6ZVwiOiBcIjE4cHhcIiB9fSBjbGFzc05hbWU9XCJuYXYtbGlua1wiIGFjdGl2ZUNsYXNzTmFtZT1cImFjdGl2ZVwiPlRyYXZlbGluZzwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy88L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qPGxpPjxOYXZMaW5rIGV4YWN0IHRvPXsnL2FkbWluJ30gYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+QWRtaW48L05hdkxpbms+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImRyb3Bkb3duXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIHJlZj17eCA9PiB0aGlzLmVsRHJvcGRvd24gPSB4fSBjbGFzc05hbWU9XCJkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge0dsb2JhbHMuc2VydmljZVVzZXIgPyBHbG9iYWxzLnNlcnZpY2VVc2VyLmxvZ2luIDogbnVsbH0mbmJzcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjYXJldFwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJkcm9wZG93bi1tZW51XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge0dsb2JhbHMuc2VydmljZVVzZXIgPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVwiI1wiIG9uQ2xpY2s9e3RoaXMub25DbGlja1NpZ25PdXR9PlNpZ24gb3V0PC9hPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XCIvbG9naW5cIj5TaWduIGluPC9hPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+Ki9cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L25hdj5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcihUb3BNZW51IGFzIGFueSk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb290ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8e30sIHt9PiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gPGZvb3RlciBjbGFzc05hbWU9XCJmb290ZXIgdGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLyo8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIGV4dGVybmFsbGlua3NcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPjxiPkV4dGVybmFsIHByb2ZpbGUgbGlua3M8L2I+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5HaXRodWIgfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9qZ3JpZmZpdGgzNDMzXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL2dpdGh1Yi5jb20vamdyaWZmaXRoMzQzMzwvYT5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+U291bmQgQ2xvdWQgfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vc291bmRjbG91ZC5jb20vamFjb2JzZ3JpZmZpdGhcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3NvdW5kY2xvdWQuY29tL2phY29ic2dyaWZmaXRoPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TdGFjayBPdmVyZmxvdyB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS91c2Vycy85NDE2MzIvamFjb2JzZ3JpZmZpdGhcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzk0MTYzMi9qYWNvYnNncmlmZml0aDwvYT5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+SXRjaC5pbyB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9qZ3JpZmZpdGgzNDMzLml0Y2guaW8vbGlmZW9mZ29vYmFcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2pncmlmZml0aDM0MzMuaXRjaC5pby9saWZlb2Znb29iYTwvYT5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+S2lja3N0YXJ0ZXIgfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmtpY2tzdGFydGVyLmNvbS9wcm9maWxlL2pncmlmZml0aDM0MzNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5raWNrc3RhcnRlci5jb20vcHJvZmlsZS9qZ3JpZmZpdGgzNDMzPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPHA+Q29weXJpZ2h0IChDKSAyMDE5IEpheWNlZSBHcmlmZml0aDwvcD4qL1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgPC9mb290ZXI+O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFRvcE1lbnUgZnJvbSBcIkBDb21wb25lbnRzL3NoYXJlZC9Ub3BNZW51XCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCJAU3R5bGVzL2F1dGhvcml6ZWRMYXlvdXQuc2Nzc1wiO1xyXG5pbXBvcnQgeyBUb2FzdENvbnRhaW5lciB9IGZyb20gXCJyZWFjdC10b2FzdGlmeVwiO1xyXG5pbXBvcnQgRm9vdGVyIGZyb20gXCJAQ29tcG9uZW50cy9zaGFyZWQvRm9vdGVyXCI7XHJcblxyXG5pbnRlcmZhY2UgSVByb3BzIHtcclxuICAgIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xyXG59XHJcblxyXG50eXBlIFByb3BzID0gSVByb3BzO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0aG9yaXplZExheW91dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywge30+IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGlkPVwiYXV0aG9yaXplZExheW91dFwiIGNsYXNzTmFtZT1cImxheW91dFwiPlxyXG4gICAgICAgICAgICAgICAgPFRvcE1lbnUgLz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIGNvbnRhaW5lci1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxUb2FzdENvbnRhaW5lciAvPlxyXG4gICAgICAgICAgICAgICAgPEZvb3RlciAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IFVuaXR5LCB7IFVuaXR5Q29udGVudCB9IGZyb20gXCJyZWFjdC11bml0eS13ZWJnbFwiO1xyXG5pbXBvcnQgR2xvYmFscyBmcm9tIFwiQEdsb2JhbHNcIjtcclxuaW1wb3J0IHsgZGVidWcgfSBmcm9tIFwidXRpbFwiO1xyXG5cclxuaW50ZXJmYWNlIElVbml0eUdhbWVQcm9wcyB7XG4gICAgbWF0Y2gsXG4gICAgbG9jYXRpb24sXG4gICAgaGlzdG9yeTtcbn1cblxyXG5jbGFzcyBVbml0eUdhbWUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVVuaXR5R2FtZVByb3BzLCB7fT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy51bmxpc3RlbiA9IHRoaXMucHJvcHMuaGlzdG9yeS5saXN0ZW4oKGxvY2F0aW9uLCBhY3Rpb24pID0+IHtcclxuICAgICAgICAgICAgR2xvYmFscy5jdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvbi5wYXRobmFtZTtcclxuICAgICAgICAgICAgaWYgKEdsb2JhbHMuY3VycmVudExvY2F0aW9uID09IFwiL1wiKSB7XHJcbiAgICAgICAgICAgICAgICBHbG9iYWxzLnByZXZMb2NhdGlvbiA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBHbG9iYWxzLm5leHRMb2NhdGlvbiA9IFwiL3BvcnRmb2xpb1wiO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKEdsb2JhbHMuY3VycmVudExvY2F0aW9uID09IFwiL3BvcnRmb2xpb1wiKSB7XHJcbiAgICAgICAgICAgICAgICBHbG9iYWxzLnByZXZMb2NhdGlvbiA9IFwiL1wiO1xyXG4gICAgICAgICAgICAgICAgR2xvYmFscy5uZXh0TG9jYXRpb24gPSBcIi9yZWFkaW5nXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoR2xvYmFscy5jdXJyZW50TG9jYXRpb24gPT0gXCIvcmVhZGluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBHbG9iYWxzLnByZXZMb2NhdGlvbiA9IFwiL3BvcnRmb2xpb1wiO1xyXG4gICAgICAgICAgICAgICAgR2xvYmFscy5uZXh0TG9jYXRpb24gPSBcIi9cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLkpHV0dhbWUuc2VuZChcIkdhbWVDb250cm9sbGVyXCIsIFwiVXBkYXRlUGFnZU5hdmlnYXRpb25cIiwgXCJ7IFwiICtcclxuICAgICAgICAgICAgICAgIFwiY3VycmVudExvY2F0aW9uOiBcIiArIEdsb2JhbHMuY3VycmVudExvY2F0aW9uICsgXCIsIFwiICtcclxuICAgICAgICAgICAgICAgIFwibmV4dExvY2F0aW9uOiBcIiArIEdsb2JhbHMubmV4dExvY2F0aW9uICsgXCIsIFwiICtcclxuICAgICAgICAgICAgICAgIFwicHJldkxvY2F0aW9uOiBcIiArIEdsb2JhbHMucHJldkxvY2F0aW9uICtcclxuICAgICAgICAgICAgICAgIFwiIH1cIik7XHJcbiAgICAgICAgICAgIHRoaXMuSkdXR2FtZS5zZW5kKFwiR2FtZUNvbnRyb2xsZXJcIiwgXCJVcGRhdGVQYWdlV2lkdGhcIiwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNjcm9sbGJhci1jb250YWluZXJcIilbMF0uY2xpZW50V2lkdGgudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIHVubGlzdGVuOiBhbnk7XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgR2xvYmFscy5jdXJyZW50TG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uLnBhdGhuYW1lO1xyXG4gICAgICAgIEdsb2JhbHMuc2V0R2FtZVJlYWR5KGZhbHNlKTtcclxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5KR1dHYW1lID0gbmV3IFVuaXR5Q29udGVudChcclxuICAgICAgICAgICAgICAgIFwiSmF5Y2VlR3JpZmZpdGhXZWJzaXRlR2FtZS9CdWlsZC5qc29uXCIsXHJcbiAgICAgICAgICAgICAgICBcIkpheWNlZUdyaWZmaXRoV2Vic2l0ZUdhbWUvVW5pdHlMb2FkZXIuanNcIlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLkpHV0dhbWUub24oXCJPblJlYWR5XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIEdsb2JhbHMuc2V0R2FtZVJlYWR5KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHByZWxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJlbG9hZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgcHJlbG9hZGVyLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJlbG9hZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1bml0eUdhbWVcIik7XHJcbiAgICAgICAgICAgICAgICBwcmVsb2FkZXIuY2xhc3NMaXN0LmFkZChcImRpc2FibGVwb2ludGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5KR1dHYW1lLnNlbmQoXCJHYW1lQ29udHJvbGxlclwiLCBcIkNvbm5lY3RlZFwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuSkdXR2FtZS5vbihcIkdldFBhZ2VOYXZpZ2F0aW9uXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChHbG9iYWxzLmN1cnJlbnRMb2NhdGlvbiA9PSBcIi9cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIEdsb2JhbHMucHJldkxvY2F0aW9uID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBHbG9iYWxzLm5leHRMb2NhdGlvbiA9IFwiL3BvcnRmb2xpb1wiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChHbG9iYWxzLmN1cnJlbnRMb2NhdGlvbiA9PSBcIi9wb3J0Zm9saW9cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIEdsb2JhbHMucHJldkxvY2F0aW9uID0gXCIvXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgR2xvYmFscy5uZXh0TG9jYXRpb24gPSBcIi9yZWFkaW5nXCI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEdsb2JhbHMuY3VycmVudExvY2F0aW9uID09IFwiL3JlYWRpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIEdsb2JhbHMucHJldkxvY2F0aW9uID0gXCIvcG9ydGZvbGlvXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgR2xvYmFscy5uZXh0TG9jYXRpb24gPSBcIi9cIjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLkpHV0dhbWUuc2VuZChcIkdhbWVDb250cm9sbGVyXCIsIFwiVXBkYXRlUGFnZU5hdmlnYXRpb25cIiwgXCJ7IFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcImN1cnJlbnRMb2NhdGlvbjogXCIgKyBHbG9iYWxzLmN1cnJlbnRMb2NhdGlvbiArIFwiLCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuZXh0TG9jYXRpb246IFwiICsgR2xvYmFscy5uZXh0TG9jYXRpb24gKyBcIiwgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwicHJldkxvY2F0aW9uOiBcIiArIEdsb2JhbHMucHJldkxvY2F0aW9uICtcclxuICAgICAgICAgICAgICAgICAgICBcIiB9XCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5KR1dHYW1lLm9uKFwiR2V0UGFnZVdpZHRoXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuSkdXR2FtZS5zZW5kKFwiR2FtZUNvbnRyb2xsZXJcIiwgXCJVcGRhdGVQYWdlV2lkdGhcIiwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNjcm9sbGJhci1jb250YWluZXJcIilbMF0uY2xpZW50V2lkdGgudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic2Nyb2xsYmFyLWNvbnRhaW5lclwiKVswXS5jbGllbnRXaWR0aC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuSkdXR2FtZS5vbihcIlNldFBhZ2VcIiwgcGFnZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFnZSAhPSBHbG9iYWxzLmN1cnJlbnRMb2NhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKHBhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5KR1dHYW1lLm9uKFwiT3Blbk5ld1RhYlwiLCB1cmwgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdpbiA9IHdpbmRvdy5vcGVuKHVybCwgJ19ibGFuaycpO1xyXG4gICAgICAgICAgICAgICAgd2luLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBSZWFjdERPTS5yZW5kZXIoPFVuaXR5IHVuaXR5Q29udGVudD17dGhpcy5KR1dHYW1lfSAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1bml0eUdhbWVcIikpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xyXG4gICAgfTtcclxuXHJcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICB0aGlzLnVubGlzdGVuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgSkdXR2FtZTogVW5pdHlDb250ZW50O1xyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB7IG1hdGNoLCBsb2NhdGlvbiwgaGlzdG9yeSB9ID0gdGhpcy5wcm9wcztcclxuICAgICAgICByZXR1cm4gPGRpdiBpZD1cInVuaXR5R2FtZVwiIGNsYXNzTmFtZT1cInVuaXR5R2FtZVwiPjwvZGl2PjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcihVbml0eUdhbWUpOyIsImltcG9ydCBUb3BNZW51IGZyb20gXCJAQ29tcG9uZW50cy9zaGFyZWQvVG9wTWVudVwiO1xyXG5pbXBvcnQgXCJAU3R5bGVzL2d1ZXN0TGF5b3V0LnNjc3NcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCAqIGFzIEggZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgeyBUb2FzdENvbnRhaW5lciB9IGZyb20gXCJyZWFjdC10b2FzdGlmeVwiO1xyXG5pbXBvcnQgRm9vdGVyIGZyb20gXCJAQ29tcG9uZW50cy9zaGFyZWQvRm9vdGVyXCI7XHJcbmltcG9ydCBVbml0eUdhbWUgZnJvbSBcIkBDb21wb25lbnRzL3NoYXJlZC9Vbml0eUdhbWVcIjtcclxuaW1wb3J0IFBlcmZlY3RTY3JvbGxiYXIgZnJvbSAncmVhY3QtcGVyZmVjdC1zY3JvbGxiYXInXHJcblxyXG5pbnRlcmZhY2UgSVByb3BzIHtcclxuICAgIGNoaWxkcmVuOiBhbnk7XHJcbiAgICBwYXRoOiBzdHJpbmc7XHJcbn1cclxuXHJcbnR5cGUgUHJvcHMgPSBJUHJvcHMgJiBSb3V0ZUNvbXBvbmVudFByb3BzPGFueT47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHdWVzdExheW91dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywge30+IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJndWVzdExheW91dFwiIGNsYXNzTmFtZT1cImxheW91dFwiPlxyXG4gICAgICAgICAgICAgICAgPFRvcE1lbnUgLz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIGNvbnRhaW5lci1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6ICc3NSU7JyB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFBlcmZlY3RTY3JvbGxiYXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9QZXJmZWN0U2Nyb2xsYmFyPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8VG9hc3RDb250YWluZXIgLz5cclxuICAgICAgICAgICAgICAgIDxVbml0eUdhbWUgLz5cclxuICAgICAgICAgICAgICAgIDxGb290ZXIgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBiaW5kIGZyb20gJ2JpbmQtZGVjb3JhdG9yJztcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNvbXBvbmVudCBjb250YWlucyBoZWxwZnVsIG1ldGhvZCB3aGljaFxyXG4gKiBhbGxvd3MgeW91IHRvIG1ha2UgXCJmb3JjZSB1cGRhdGVcIiBvZiB0aGUgc3R1Y2sgZWxlbWVudHMuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBBcHBDb21wb25lbnQ8VFByb3BzID0ge30sIFRTdGF0ZSA9IHt9PiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxUUHJvcHMsIFRTdGF0ZT4ge1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFBsYWNlIGl0IGludG8gdGhlIFwia2V5XCIgYXR0cmlidXRlIG9mIGFuIGVsZW1lbnQuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCByZW5kZXJLZXkgPSAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbCB0aGlzIGlmIGNvbXBvbmVudCBzdGF0ZSBpcyBzdHVjay5cclxuICAgICAqIEJ1dCB5b3Ugc2hvdWxkIHNldCB0aGUgcmVuZGVyS2V5IHRvIHRoZSBlbGVtZW50J3MgYXR0cmlidXRlLlxyXG4gICAgICovXHJcbiAgICBAYmluZFxyXG4gICAgcHVibGljIGZvcmNlVXBkYXRlKCkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyS2V5ID0gTWF0aC5yYW5kb20oKTtcclxuICAgIH1cclxufSIsImltcG9ydCBcIkBTdHlsZXMvbG9hZGVyLnNjc3NcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGlzTm9kZSB9IGZyb20gXCJAVXRpbHNcIjtcclxuaW1wb3J0IEFwcENvbXBvbmVudCBmcm9tIFwiQENvbXBvbmVudHMvc2hhcmVkL0FwcENvbXBvbmVudFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUHJvcHMge1xyXG4gICAgc2hvdzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9hZGVyIGV4dGVuZHMgQXBwQ29tcG9uZW50PElQcm9wcywge30+IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIHZhciBjc3MgPSB7XCJkaXNwbGF5XCI6IFwibm9uZVwifTtcclxuXHJcbiAgICAgICAgaWYgKCFpc05vZGUoKSkge1xyXG4gICAgICAgICAgICBjc3MgPSB7IFwiZGlzcGxheVwiOiAodGhpcy5wcm9wcy5zaG93ID8gXCJibG9ja1wiIDogXCJub25lXCIpIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiA8ZGl2IGtleT17dGhpcy5yZW5kZXJLZXl9IGNsYXNzTmFtZT1cImxvYWRlci1iZ1wiIHN0eWxlPXtjc3N9PlxyXG4gICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNrLWNpcmNsZTEgc2stY2hpbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNrLWNpcmNsZTIgc2stY2hpbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNrLWNpcmNsZTMgc2stY2hpbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNrLWNpcmNsZTQgc2stY2hpbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNrLWNpcmNsZTUgc2stY2hpbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNrLWNpcmNsZTYgc2stY2hpbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNrLWNpcmNsZTcgc2stY2hpbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNrLWNpcmNsZTggc2stY2hpbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNrLWNpcmNsZTkgc2stY2hpbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNrLWNpcmNsZTEwIHNrLWNoaWxkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzay1jaXJjbGUxMSBzay1jaGlsZFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2stY2lyY2xlMTIgc2stY2hpbGRcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICA8L2Rpdj47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBjbG9uZSB9IGZyb20gXCJAVXRpbHNcIjtcclxuaW1wb3J0IHsgQWN0aW9uLCBSZWR1Y2VyIH0gZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCB7IEFwcFRodW5rQWN0aW9uIH0gZnJvbSBcIi4vaW5kZXhcIjtcclxuaW1wb3J0IFBlcnNvblNlcnZpY2UgZnJvbSBcIkBTZXJ2aWNlcy9QZXJzb25TZXJ2aWNlXCI7XHJcbmltcG9ydCB7IElQZXJzb25Nb2RlbCB9IGZyb20gXCJATW9kZWxzL0lQZXJzb25Nb2RlbFwiO1xyXG5pbXBvcnQgeyB3YWl0IH0gZnJvbSBcImRvbWFpbi13YWl0XCI7XHJcblxyXG5leHBvcnQgbW9kdWxlIFBlcnNvblN0b3JlIHtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSB7XHJcbiAgICAgICAgcGVvcGxlOiBJUGVyc29uTW9kZWxbXSxcclxuICAgICAgICBpbmRpY2F0b3JzOiB7XHJcbiAgICAgICAgICAgIG9wZXJhdGlvbkxvYWRpbmc6IGJvb2xlYW47XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZW51bSBBY3Rpb25zIHtcclxuICAgICAgICBTZWFyY2hSZXF1ZXN0ID0gXCJQRVJTT05fU0VBUkNIX1JFUVVFU1RcIixcclxuICAgICAgICBTZWFyY2hSZXNwb25zZSA9IFwiUEVSU09OX1NFQVJDSF9SRVNQT05TRVwiLFxyXG4gICAgICAgIEFkZFJlcXVlc3QgPSBcIlBFUlNPTl9BRERfUkVRVUVTVFwiLFxyXG4gICAgICAgIEFkZFJlc3BvbnNlID0gXCJQRVJTT05fQUREX1JFU1BPTlNFXCIsXHJcbiAgICAgICAgVXBkYXRlUmVxdWVzdCA9IFwiUEVSU09OX1VQREFURV9SRVFVRVNUXCIsXHJcbiAgICAgICAgVXBkYXRlUmVzcG9uc2UgPSBcIlBFUlNPTl9VUERBVEVfUkVTUE9OU0VcIixcclxuICAgICAgICBEZWxldGVSZXF1ZXN0ID0gXCJQRVJTT05fREVMRVRFX1JFUVVFU1RcIixcclxuICAgICAgICBEZWxldGVSZXNwb25zZSA9IFwiUEVSU09OX0RFTEVURV9SRVNQT05TRVwiXHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIElHZXRBbGxSZXF1ZXN0IHtcclxuICAgICAgICB0eXBlOiBBY3Rpb25zLlNlYXJjaFJlcXVlc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIElHZXRBbGxSZXNwb25zZSB7XHJcbiAgICAgICAgdHlwZTogQWN0aW9ucy5TZWFyY2hSZXNwb25zZTtcclxuICAgICAgICBwYXlsb2FkOiBJUGVyc29uTW9kZWxbXTtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgSUFkZFJlcXVlc3Qge1xyXG4gICAgICAgIHR5cGU6IEFjdGlvbnMuQWRkUmVxdWVzdDtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgSUFkZFJlc3BvbnNlIHtcclxuICAgICAgICB0eXBlOiBBY3Rpb25zLkFkZFJlc3BvbnNlO1xyXG4gICAgICAgIHBheWxvYWQ6IElQZXJzb25Nb2RlbDtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgSVVwZGF0ZVJlcXVlc3Qge1xyXG4gICAgICAgIHR5cGU6IEFjdGlvbnMuVXBkYXRlUmVxdWVzdDtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgSVVwZGF0ZVJlc3BvbnNlIHtcclxuICAgICAgICB0eXBlOiBBY3Rpb25zLlVwZGF0ZVJlc3BvbnNlO1xyXG4gICAgICAgIHBheWxvYWQ6IElQZXJzb25Nb2RlbDtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgSURlbGV0ZVJlcXVlc3Qge1xyXG4gICAgICAgIHR5cGU6IEFjdGlvbnMuRGVsZXRlUmVxdWVzdDtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgSURlbGV0ZVJlc3BvbnNlIHtcclxuICAgICAgICB0eXBlOiBBY3Rpb25zLkRlbGV0ZVJlc3BvbnNlO1xyXG4gICAgICAgIGlkOiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdHlwZSBLbm93bkFjdGlvbiA9XHJcbiAgICAgICAgSUdldEFsbFJlcXVlc3QgfCBJR2V0QWxsUmVzcG9uc2UgfFxyXG4gICAgICAgIElBZGRSZXF1ZXN0IHwgSUFkZFJlc3BvbnNlIHxcclxuICAgICAgICBJVXBkYXRlUmVxdWVzdCB8IElVcGRhdGVSZXNwb25zZSB8XHJcbiAgICAgICAgSURlbGV0ZVJlcXVlc3QgfCBJRGVsZXRlUmVzcG9uc2U7XHJcblxyXG4gICAgZXhwb3J0IGNvbnN0IGFjdGlvbkNyZWF0b3JzID0ge1xyXG4gICAgICAgIHNlYXJjaFJlcXVlc3Q6ICh0ZXJtPzogc3RyaW5nKTogQXBwVGh1bmtBY3Rpb248S25vd25BY3Rpb24+ID0+IGFzeW5jIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGF3YWl0IHdhaXQoYXN5bmMgKHRyYW5zZm9ybVVybCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciBzZXJ2ZXIgcHJlcmVuZGVyaW5nLlxyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25zLlNlYXJjaFJlcXVlc3QgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IFBlcnNvblNlcnZpY2Uuc2VhcmNoKHRlcm0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuaGFzRXJyb3JzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25zLlNlYXJjaFJlc3BvbnNlLCBwYXlsb2FkOiByZXN1bHQudmFsdWUgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWRkUmVxdWVzdDogKG1vZGVsOiBJUGVyc29uTW9kZWwpOiBBcHBUaHVua0FjdGlvbjxLbm93bkFjdGlvbj4gPT4gYXN5bmMgKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25zLkFkZFJlcXVlc3QgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gYXdhaXQgUGVyc29uU2VydmljZS5hZGQobW9kZWwpO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5oYXNFcnJvcnMpIHtcclxuICAgICAgICAgICAgICAgIG1vZGVsLmlkID0gcmVzdWx0LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25zLkFkZFJlc3BvbnNlLCBwYXlsb2FkOiBtb2RlbCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdXBkYXRlUmVxdWVzdDogKG1vZGVsOiBJUGVyc29uTW9kZWwpOiBBcHBUaHVua0FjdGlvbjxLbm93bkFjdGlvbj4gPT4gYXN5bmMgKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25zLlVwZGF0ZVJlcXVlc3QgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gYXdhaXQgUGVyc29uU2VydmljZS51cGRhdGUobW9kZWwpO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5oYXNFcnJvcnMpIHtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5VcGRhdGVSZXNwb25zZSwgcGF5bG9hZDogbW9kZWwgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlbGV0ZVJlcXVlc3Q6IChpZDogbnVtYmVyKTogQXBwVGh1bmtBY3Rpb248S25vd25BY3Rpb24+ID0+IGFzeW5jIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9ucy5EZWxldGVSZXF1ZXN0IH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IFBlcnNvblNlcnZpY2UuZGVsZXRlKGlkKTtcclxuICAgICAgICAgICAgaWYgKCFyZXN1bHQuaGFzRXJyb3JzKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvbnMuRGVsZXRlUmVzcG9uc2UsIGlkIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluaXRpYWxTdGF0ZTogSVN0YXRlID0ge1xyXG4gICAgICAgIHBlb3BsZTogW10sXHJcbiAgICAgICAgaW5kaWNhdG9yczoge1xyXG4gICAgICAgICAgICBvcGVyYXRpb25Mb2FkaW5nOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0IGNvbnN0IHJlZHVjZXI6IFJlZHVjZXI8SVN0YXRlPiA9IChjdXJyZW50U3RhdGU6IElTdGF0ZSwgaW5jb21pbmdBY3Rpb246IEFjdGlvbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGluY29taW5nQWN0aW9uIGFzIEtub3duQWN0aW9uO1xyXG5cclxuICAgICAgICB2YXIgY2xvbmVJbmRpY2F0b3JzID0gKCkgPT4gY2xvbmUoY3VycmVudFN0YXRlLmluZGljYXRvcnMpO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9ucy5TZWFyY2hSZXF1ZXN0OlxyXG4gICAgICAgICAgICAgICAgdmFyIGluZGljYXRvcnMgPSBjbG9uZUluZGljYXRvcnMoKTtcclxuICAgICAgICAgICAgICAgIGluZGljYXRvcnMub3BlcmF0aW9uTG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5jdXJyZW50U3RhdGUsIGluZGljYXRvcnMgfTtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25zLlNlYXJjaFJlc3BvbnNlOlxyXG4gICAgICAgICAgICAgICAgdmFyIGluZGljYXRvcnMgPSBjbG9uZUluZGljYXRvcnMoKTtcclxuICAgICAgICAgICAgICAgIGluZGljYXRvcnMub3BlcmF0aW9uTG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uY3VycmVudFN0YXRlLCBpbmRpY2F0b3JzLCBwZW9wbGU6IGFjdGlvbi5wYXlsb2FkIH07XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9ucy5VcGRhdGVSZXF1ZXN0OlxyXG4gICAgICAgICAgICAgICAgdmFyIGluZGljYXRvcnMgPSBjbG9uZUluZGljYXRvcnMoKTtcclxuICAgICAgICAgICAgICAgIGluZGljYXRvcnMub3BlcmF0aW9uTG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5jdXJyZW50U3RhdGUsIGluZGljYXRvcnMgfTtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25zLlVwZGF0ZVJlc3BvbnNlOlxyXG4gICAgICAgICAgICAgICAgdmFyIGluZGljYXRvcnMgPSBjbG9uZUluZGljYXRvcnMoKTtcclxuICAgICAgICAgICAgICAgIGluZGljYXRvcnMub3BlcmF0aW9uTG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBjbG9uZShjdXJyZW50U3RhdGUucGVvcGxlKTtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtVG9VcGRhdGUgPSBkYXRhLmZpbHRlcih4ID0+IHguaWQgPT09IGFjdGlvbi5wYXlsb2FkLmlkKVswXTtcclxuICAgICAgICAgICAgICAgIGl0ZW1Ub1VwZGF0ZS5maXJzdE5hbWUgPSBhY3Rpb24ucGF5bG9hZC5maXJzdE5hbWU7XHJcbiAgICAgICAgICAgICAgICBpdGVtVG9VcGRhdGUubGFzdE5hbWUgPSBhY3Rpb24ucGF5bG9hZC5sYXN0TmFtZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLmN1cnJlbnRTdGF0ZSwgaW5kaWNhdG9ycywgcGVvcGxlOiBkYXRhIH07XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9ucy5BZGRSZXF1ZXN0OlxyXG4gICAgICAgICAgICAgICAgdmFyIGluZGljYXRvcnMgPSBjbG9uZUluZGljYXRvcnMoKTtcclxuICAgICAgICAgICAgICAgIGluZGljYXRvcnMub3BlcmF0aW9uTG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5jdXJyZW50U3RhdGUsIGluZGljYXRvcnMgfTtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25zLkFkZFJlc3BvbnNlOlxyXG4gICAgICAgICAgICAgICAgdmFyIGluZGljYXRvcnMgPSBjbG9uZUluZGljYXRvcnMoKTtcclxuICAgICAgICAgICAgICAgIGluZGljYXRvcnMub3BlcmF0aW9uTG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBjbG9uZShjdXJyZW50U3RhdGUucGVvcGxlKTtcclxuICAgICAgICAgICAgICAgIGRhdGEucHVzaChhY3Rpb24ucGF5bG9hZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5jdXJyZW50U3RhdGUsIGluZGljYXRvcnMsIHBlb3BsZTogZGF0YSB9O1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvbnMuRGVsZXRlUmVxdWVzdDpcclxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gY2xvbmVJbmRpY2F0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uY3VycmVudFN0YXRlLCBpbmRpY2F0b3JzIH07XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9ucy5EZWxldGVSZXNwb25zZTpcclxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gY2xvbmVJbmRpY2F0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gY2xvbmUoY3VycmVudFN0YXRlLnBlb3BsZSkuZmlsdGVyKHggPT4geC5pZCAhPT0gYWN0aW9uLmlkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLmN1cnJlbnRTdGF0ZSwgaW5kaWNhdG9ycywgcGVvcGxlOiBkYXRhIH07XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGxpbmUgZ3VhcmFudGVlcyB0aGF0IGV2ZXJ5IGFjdGlvbiBpbiB0aGUgS25vd25BY3Rpb24gdW5pb24gaGFzIGJlZW4gY292ZXJlZCBieSBhIGNhc2UgYWJvdmVcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4aGF1c3RpdmVDaGVjazogbmV2ZXIgPSBhY3Rpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY3VycmVudFN0YXRlIHx8IGluaXRpYWxTdGF0ZTtcclxuICAgIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBOU2VyaWFsaXplSnNvbiB9IGZyb20gXCJuc2VyaWFsaXplanNvblwiO1xyXG5pbXBvcnQgeyBlbXB0eUZvcm0gfSBmcm9tIFwiQFV0aWxzXCI7XHJcbmltcG9ydCB7IE5WYWxUaXBweSB9IGZyb20gXCJudmFsLXRpcHB5XCI7XHJcbmltcG9ydCBiaW5kIGZyb20gJ2JpbmQtZGVjb3JhdG9yJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgUmVhY3QuRGV0YWlsZWRIVE1MUHJvcHM8UmVhY3QuRm9ybUhUTUxBdHRyaWJ1dGVzPEhUTUxGb3JtRWxlbWVudD4sIEhUTUxGb3JtRWxlbWVudD4ge1xyXG4gICAgY2hpbGRyZW46IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZvcm0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCB7fT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHZhbGlkYXRvcjogTlZhbFRpcHB5O1xyXG4gICAgcHJvdGVjdGVkIGVsRm9ybTogSFRNTEZvcm1FbGVtZW50O1xyXG5cclxuICAgIEBiaW5kXHJcbiAgICBwdWJsaWMgaXNWYWxpZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0b3IuaXNWYWxpZCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBAYmluZFxyXG4gICAgcHVibGljIGVtcHR5Rm9ybSgpOiB2b2lkIHtcclxuICAgICAgICBlbXB0eUZvcm0odGhpcy5lbEZvcm0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBAYmluZFxyXG4gICAgcHVibGljIGdldERhdGE8VD4oKTogVCB7XHJcbiAgICAgICAgcmV0dXJuIE5TZXJpYWxpemVKc29uLnNlcmlhbGl6ZUZvcm0odGhpcy5lbEZvcm0pIGFzIGFueSBhcyBUO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gbmV3IE5WYWxUaXBweSh0aGlzLmVsRm9ybSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiA8Zm9ybSB7Li4udGhpcy5wcm9wc30gcmVmPXt4ID0+IHRoaXMuZWxGb3JtID0geH0+e3RoaXMucHJvcHMuY2hpbGRyZW59PC9mb3JtPjtcclxuICAgIH1cclxufSIsImltcG9ydCB7IElMb2dpbk1vZGVsIH0gZnJvbSBcIkBNb2RlbHMvSUxvZ2luTW9kZWxcIjtcclxuaW1wb3J0IExvYWRlciBmcm9tIFwiQENvbXBvbmVudHMvc2hhcmVkL0xvYWRlclwiO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvblN0YXRlIH0gZnJvbSBcIkBTdG9yZS9pbmRleFwiO1xyXG5pbXBvcnQgeyBMb2dpblN0b3JlIH0gZnJvbSBcIkBTdG9yZS9Mb2dpblN0b3JlXCI7XHJcbmltcG9ydCBcIkBTdHlsZXMvbWFpbi5zY3NzXCI7O1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgSGVsbWV0IH0gZnJvbSBcInJlYWN0LWhlbG1ldFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IFJlZGlyZWN0LCBSb3V0ZUNvbXBvbmVudFByb3BzLCB3aXRoUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgYmluZCBmcm9tICdiaW5kLWRlY29yYXRvcic7XHJcbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwiQENvbXBvbmVudHMvc2hhcmVkL0Zvcm1cIjtcclxuXHJcbnR5cGUgUHJvcHMgPSBSb3V0ZUNvbXBvbmVudFByb3BzPHt9PiAmIHR5cGVvZiBMb2dpblN0b3JlLmFjdGlvbkNyZWF0b3JzICYgTG9naW5TdG9yZS5JU3RhdGU7XHJcblxyXG5jbGFzcyBMb2dpblBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIHt9PiB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGVsTG9hZGVyOiBMb2FkZXI7XHJcbiAgICBlbEZvcm06IEZvcm07XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5wcm9wcy5pbml0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZWxMb2FkZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5lbExvYWRlci5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAYmluZFxyXG4gICAgcHJpdmF0ZSBhc3luYyBvbkNsaWNrU3VibWl0QnRuKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGlmICh0aGlzLmVsRm9ybS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLmVsRm9ybS5nZXREYXRhPElMb2dpbk1vZGVsPigpO1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmxvZ2luUmVxdWVzdChkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5pbmRpY2F0b3JzLmxvZ2luU3VjY2Vzcykge1xyXG4gICAgICAgICAgICByZXR1cm4gPFJlZGlyZWN0IHRvPVwiL1wiLz47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gPGRpdiBpZD1cImxvZ2luUGFnZVwiPlxyXG5cclxuICAgICAgICAgICAgPEhlbG1ldD5cclxuICAgICAgICAgICAgICAgIDx0aXRsZT5Mb2dpbiBwYWdlIC0gSmF5Y2VlIEdyaWZmaXRoPC90aXRsZT5cclxuICAgICAgICAgICAgPC9IZWxtZXQ+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8TG9hZGVyIHJlZj17eCA9PiB0aGlzLmVsTG9hZGVyID0geH0gc2hvdz17dGhpcy5wcm9wcy5pbmRpY2F0b3JzLm9wZXJhdGlvbkxvYWRpbmd9IC8+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGlkPVwibG9naW5Db250YWluZXJcIj5cclxuXHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlR5cGUgYW55IGxvZ2luIGFuZCBwYXNzd29yZCB0byBlbnRlci48L3A+XHJcblxyXG4gICAgICAgICAgICAgICAgPEZvcm0gcmVmPXt4ID0+IHRoaXMuZWxGb3JtID0geH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiaW5wdXRMb2dpblwiPkxvZ2luPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT17XCJsb2dpblwifSBkYXRhLXZhbHVlLXR5cGU9XCJzdHJpbmdcIiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImlucHV0TG9naW5cIiBkYXRhLXZhbC1yZXF1aXJlZD1cInRydWVcIiBkYXRhLW1zZy1yZXF1aXJlZD1cIkxvZ2luIGlzIHJlcXVpcmVkLlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiaW5wdXRMb2dpblwiPlBhc3N3b3JkPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIG5hbWU9e1wicGFzc3dvcmRcIn0gZGF0YS12YWx1ZS10eXBlPVwic3RyaW5nXCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJpbnB1dFBhc3N3b3JkXCIgZGF0YS12YWwtcmVxdWlyZWQ9XCJ0cnVlXCIgZGF0YS1tc2ctcmVxdWlyZWQ9XCJQYXNzd29yZCBpcyByZXF1aXJlZC5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1pbmxpbmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXN1Y2Nlc3NcIiBvbkNsaWNrPXt0aGlzLm9uQ2xpY2tTdWJtaXRCdG59PlNpZ24gaW48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvRm9ybT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDwvZGl2PjtcclxuICAgIH1cclxufVxyXG5cclxudmFyIGNvbXBvbmVudCA9IGNvbm5lY3QoXHJcbiAgICAoc3RhdGU6IEFwcGxpY2F0aW9uU3RhdGUpID0+IHN0YXRlLmxvZ2luLCAvLyBTZWxlY3RzIHdoaWNoIHN0YXRlIHByb3BlcnRpZXMgYXJlIG1lcmdlZCBpbnRvIHRoZSBjb21wb25lbnQncyBwcm9wc1xyXG4gICAgTG9naW5TdG9yZS5hY3Rpb25DcmVhdG9ycyAvLyBTZWxlY3RzIHdoaWNoIGFjdGlvbiBjcmVhdG9ycyBhcmUgbWVyZ2VkIGludG8gdGhlIGNvbXBvbmVudCdzIHByb3BzXHJcbikoTG9naW5QYWdlIGFzIGFueSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAod2l0aFJvdXRlcihjb21wb25lbnQgYXMgYW55KSBhcyBhbnkgYXMgdHlwZW9mIExvZ2luUGFnZSkiLCJpbXBvcnQgeyBSb3V0ZSwgUm91dGVQcm9wcywgUmVkaXJlY3QgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgR2xvYmFscyBmcm9tIFwiQEdsb2JhbHNcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgUm91dGVQcm9wcyB7XHJcbiAgICBsYXlvdXQ6IFJlYWN0LkNvbXBvbmVudENsYXNzPGFueT47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBBcHBSb3V0ZSA9ICh7IGNvbXBvbmVudDogQ29tcG9uZW50LCBsYXlvdXQ6IExheW91dCwgcGF0aDogUGF0aCwgLi4ucmVzdCB9OiBJUHJvcHMpID0+IHtcclxuXHJcbiAgICB2YXIgaXNBZG1pblBhdGggPSBQYXRoID09PSBcIi9hZG1pblwiO1xyXG4gICAgdmFyIGlzTG9naW5QYXRoID0gUGF0aCA9PT0gXCIvbG9naW5cIjtcclxuICAgIGlmICghR2xvYmFscy5pc0F1dGhlbnRpY2F0ZWQgJiYgaXNBZG1pblBhdGgpIHtcclxuICAgICAgICByZXR1cm4gPFJlZGlyZWN0IHRvPVwiL2xvZ2luXCIgLz47XHJcbiAgICB9XHJcbiAgICBpZiAoR2xvYmFscy5pc0F1dGhlbnRpY2F0ZWQgJiYgaXNMb2dpblBhdGgpIHtcclxuICAgICAgICByZXR1cm4gPFJlZGlyZWN0IHRvPVwiL1wiIC8+O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiA8Um91dGUgey4uLnJlc3R9IHJlbmRlcj17cHJvcHMgPT4gKFxyXG4gICAgICAgIDxMYXlvdXQ+XHJcbiAgICAgICAgICAgIDxDb21wb25lbnQgey4uLnByb3BzfSAvPlxyXG4gICAgICAgIDwvTGF5b3V0PlxyXG4gICAgKX0gLz47XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuaW1wb3J0IHsgTmF2TGluaywgUmVkaXJlY3QgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tIFwicmVhY3QtaGVsbWV0XCI7XHJcbmltcG9ydCBHbG9iYWxzIGZyb20gXCJAR2xvYmFsc1wiO1xyXG5cclxudHlwZSBQcm9wcyA9IFJvdXRlQ29tcG9uZW50UHJvcHM8e30+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSG9tZVBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIHt9PiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgICAgICAgIDxIZWxtZXQ+XHJcbiAgICAgICAgICAgICAgICA8dGl0bGU+SmF5Y2VlIEdyaWZmaXRoIC0gSG9tZTwvdGl0bGU+XHJcbiAgICAgICAgICAgIDwvSGVsbWV0PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImp1bWJvdHJvbiBwLTMgcC1tZC01IHJvdW5kZWQgYmctd2hpdGVcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9iaWxlLW9ubHktY29udGVudCBjb2wtbWQtNiBweC0wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImRpc3BsYXktNCBmb250LWl0YWxpY1wiPldlbGNvbWUgdG8gbXkgV2ViPGRlbD5zaXRlPC9kZWw+IGdhbWUuPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsZWFkIG15LTNcIj5OYXZpZ2F0ZSBieSA8Yj50aWx0aW5nPC9iPiB5b3VyIGRldmljZTwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsZWFkIG1iLTBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+TWFrZSBzdXJlIHRvIGNoZWNrIG91dCBteSA8TmF2TGluayBleGFjdCB0bz17Jy9wb3J0Zm9saW8nfT5wb3J0Zm9saW88L05hdkxpbms+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZXNrdG9wLW9ubHktY29udGVudCBjb2wtbWQtNiBweC0wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImRpc3BsYXktNCBmb250LWl0YWxpY1wiPldlbGNvbWUgdG8gbXkgV2ViPGRlbD5zaXRlPC9kZWw+IGdhbWUuPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsZWFkIG15LTNcIj5OYXZpZ2F0ZSB3aXRoIDxiPndhc2Q8L2I+IG9yIHRoZSA8Yj5hcnJvdyBrZXlzPC9iPjwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsZWFkIG15LTNcIj5KdW1wIHdpdGggPGI+c3BhY2U8L2I+PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImxlYWQgbWItMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5GbHkgYnkgcHJlc3NpbmcgPGI+ZjwvYj4sIHRyeSBub3QgdG8gZ2V0IGxvc3QhIDspPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsZWFkIG1iLTBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+VG9vIHNsb3c/IEhvbGQgPGI+c2hpZnQ8L2I+Ljwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibGVhZCBtYi0wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPk1ha2Ugc3VyZSB0byBjaGVjayBvdXQgbXkgPE5hdkxpbmsgZXhhY3QgdG89eycvcG9ydGZvbGlvJ30+cG9ydGZvbGlvPC9OYXZMaW5rPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PjtcclxuICAgIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tIFwicmVhY3QtaGVsbWV0XCI7XHJcbmltcG9ydCB7IHdpdGhSb3V0ZXIsIE5hdkxpbmssIFJlZGlyZWN0IH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxudmFyIFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XHJcbnZhciBDYXJvdXNlbCA9IHJlcXVpcmUoJ3JlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWwnKS5DYXJvdXNlbDtcclxuaW1wb3J0IGtpdHRlbmZhY2UgZnJvbSBcIkBJbWFnZXMva2l0dGVuZmFjZS5qcGdcIjtcclxuaW1wb3J0IGtpdHRlbmZ1bGwgZnJvbSBcIkBJbWFnZXMva2l0dGVuZnVsbC5qcGdcIjtcclxuaW1wb3J0IG5pY2NvbG8gZnJvbSBcIkBJbWFnZXMvbmljY29sby5wbmdcIjtcclxuaW1wb3J0IGJveSBmcm9tIFwiQEltYWdlcy9ib3kuanBnXCI7XHJcbmltcG9ydCBnb29iYSBmcm9tIFwiQEltYWdlcy9nb29iYS5qcGdcIjtcclxuaW1wb3J0IHN3YXR0cmFpbmVyIGZyb20gXCJASW1hZ2VzL3N3YXR0cmFpbmVyLmpwZ1wiO1xyXG5pbXBvcnQgR2xvYmFscyBmcm9tIFwiQEdsb2JhbHNcIjtcclxuXHJcblxyXG50eXBlIFByb3BzID0gUm91dGVDb21wb25lbnRQcm9wczx7fT47XHJcblxyXG5jbGFzcyBQb3J0Zm9saW9QYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCB7fT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICAgICAgICA8SGVsbWV0PlxyXG4gICAgICAgICAgICAgICAgPHRpdGxlPkpheWNlZSBHcmlmZml0aCAtIFBvcnRmb2xpbzwvdGl0bGU+XHJcbiAgICAgICAgICAgIDwvSGVsbWV0PlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgIDxoMj5IZXJlIGlzIGEgZmV3IHRoaW5ncyB0aGF0IEkndmUgZG9uZTwvaDI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPENhcm91c2VsIGNsYXNzTmFtZT1cImNvbC1tZFwiIHNob3dBcnJvd3M9e3RydWV9IHNob3dUaHVtYnM9e2ZhbHNlfSBpbmZpbml0ZUxvb3A9e3RydWV9IHN3aXBlYWJsZT17ZmFsc2V9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtraXR0ZW5mdWxsfSBjbGFzc05hbWU9XCJ3LTc1XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibGVnZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DaW5lbWEgNEQgS2l0dGVuIEZ1bGx5IFJpZ2dlZCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5GZWVsIGZyZWUgdG8gZG93bmxvYWQgdGhlIGtpdHRlbiB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vb3Blbj9pZD0xdzU2Y3RtV1NnUERoUkI3ZktZLXYtd2FGekJQSW1qWnlcIiB0YXJnZXQ9XCJfYmxhbmtcIj5LaXR0ZW4gUmVkX0ZpbmFsLnppcDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtraXR0ZW5mYWNlfSBjbGFzc05hbWU9XCJ3LTc1XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibGVnZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DaW5lbWEgNEQgS2l0dGVuIEZ1bGx5IFJpZ2dlZCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5GZWVsIGZyZWUgdG8gZG93bmxvYWQgdGhlIGtpdHRlbiB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vb3Blbj9pZD0xdzU2Y3RtV1NnUERoUkI3ZktZLXYtd2FGekJQSW1qWnlcIiB0YXJnZXQ9XCJfYmxhbmtcIj5LaXR0ZW4gUmVkX0ZpbmFsLnppcDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtnb29iYX0gY2xhc3NOYW1lPVwidy03NVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImxlZ2VuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RG93bmxvYWQgYW5kIHBsYXkgTGlmZSBvZiBHb29iYSB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2pncmlmZml0aDM0MzMuaXRjaC5pby9saWZlb2Znb29iYVwiIHRhcmdldD1cIl9ibGFua1wiPkl0Y2guaW8gZ2FtZSBwYWdlPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e25pY2NvbG99IGNsYXNzTmFtZT1cInctNzVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsZWdlbmRcIj5Mb3cgUG9seSBDaGFyYWN0ZXIgTW9kZWxpbmc8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3N3YXR0cmFpbmVyfSBjbGFzc05hbWU9XCJ3LTc1XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibGVnZW5kXCI+VURLIHRyYWluaW5nIHNpbXVsYXRpb248L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2JveX0gY2xhc3NOYW1lPVwidy03NVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImxlZ2VuZFwiPjNkcyBNYXggU21pbGluZyBCb3k8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlmcmFtZSBzdHlsZT17eyBtYXJnaW5Ub3A6ICc1MHB4JyB9fSB3aWR0aD1cIjU2MFwiIGhlaWdodD1cIjU2MFwiIHNyYz1cImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL2oyalhENDZCNFZ3XCIgZnJhbWVCb3JkZXI9XCIwXCIgYWxsb3c9XCJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZVwiIGFsbG93RnVsbFNjcmVlbj48L2lmcmFtZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibGVnZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UbyBwbGF5IHRoZSBTcGFjZSBTaG9vdGVyIEdhbWUsIGRvd25sb2FkIGFuZCBleHRyYWN0IHRoZSB6aXAgZmlsZS4gVGhlbiB1c2UgaW50ZXJuZXQgZXhwbG9yZXIgYW5kIGRvd25sb2FkIHRoZSB3ZWIgcGxheWVyLCBkb24ndCB3b3JyeSBpdCdzIHNhZmUgYW5kIGNvbWVzIGRpcmVjdGx5IGZyb20gVW5pdHkzZC5jb20gfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL29wZW4/aWQ9MVkyVXdrQV9wQUNSaUR0Mk9DVEgzOHVSZndiTV8xQVpXXCIgdGFyZ2V0PVwiX2JsYW5rXCI+c3BhY2VzaG9vdGVyLnppcDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpZnJhbWUgc3R5bGU9e3sgbWFyZ2luVG9wOiAnNTBweCcgfX0gd2lkdGg9XCI1NjBcIiBoZWlnaHQ9XCI1NjBcIiBzcmM9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9uczlzTTQySVAtSVwiIGZyYW1lQm9yZGVyPVwiMFwiIGFsbG93PVwiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmVcIiBhbGxvd0Z1bGxTY3JlZW4+PC9pZnJhbWU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImxlZ2VuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+VG8gcGxheSB0aGUgSG9vcCBKb25lcyBHYW1lLCBkb3dubG9hZCBhbmQgZXh0cmFjdCB0aGUgemlwIGZpbGUuIFRoZW4gdXNlIGludGVybmV0IGV4cGxvcmVyIGFuZCBkb3dubG9hZCB0aGUgd2ViIHBsYXllciwgZG9uJ3Qgd29ycnkgaXQncyBzYWZlIGFuZCBjb21lcyBkaXJlY3RseSBmcm9tIFVuaXR5M2QuY29tIHwgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9vcGVuP2lkPTFoeVJvdXhESlp1Zmh2Rks2dFVMeVVhcUpWcmNUbnJrd1wiIHRhcmdldD1cIl9ibGFua1wiPmhvb3Bqb25lcy56aXA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIGV4dGVybmFsbGlua3NcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPjxiPkV4dGVybmFsIHByb2ZpbGUgbGlua3M8L2I+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5HaXRodWIgfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9qZ3JpZmZpdGgzNDMzXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL2dpdGh1Yi5jb20vamdyaWZmaXRoMzQzMzwvYT5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+U291bmQgQ2xvdWQgfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vc291bmRjbG91ZC5jb20vamFjb2JzZ3JpZmZpdGhcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3NvdW5kY2xvdWQuY29tL2phY29ic2dyaWZmaXRoPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TdGFjayBPdmVyZmxvdyB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS91c2Vycy85NDE2MzIvamFjb2JzZ3JpZmZpdGhcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzk0MTYzMi9qYWNvYnNncmlmZml0aDwvYT5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+SXRjaC5pbyB8IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9qZ3JpZmZpdGgzNDMzLml0Y2guaW8vbGlmZW9mZ29vYmFcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2pncmlmZml0aDM0MzMuaXRjaC5pby9saWZlb2Znb29iYTwvYT5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+S2lja3N0YXJ0ZXIgfCA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmtpY2tzdGFydGVyLmNvbS9wcm9maWxlL2pncmlmZml0aDM0MzNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5raWNrc3RhcnRlci5jb20vcHJvZmlsZS9qZ3JpZmZpdGgzNDMzPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj47XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoUG9ydGZvbGlvUGFnZSk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFJvdXRlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XHJcbmltcG9ydCB7IEhlbG1ldCB9IGZyb20gXCJyZWFjdC1oZWxtZXRcIjtcclxuaW1wb3J0IHsgTmF2TGluaywgUmVkaXJlY3QgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5cclxudHlwZSBQcm9wcyA9IFJvdXRlQ29tcG9uZW50UHJvcHM8e30+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhdmVsaW5nUGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywge30+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gPGRpdj5cclxuICAgICAgICAgICAgPEhlbG1ldD5cclxuICAgICAgICAgICAgICAgIDx0aXRsZT5KYXljZWUgR3JpZmZpdGggLSBUcmF2ZWxpbmc8L3RpdGxlPlxyXG4gICAgICAgICAgICA8L0hlbG1ldD5cclxuICAgICAgICA8L2Rpdj47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuaW1wb3J0IHsgSGVsbWV0IH0gZnJvbSBcInJlYWN0LWhlbG1ldFwiO1xyXG5pbXBvcnQgeyBOYXZMaW5rLCBSZWRpcmVjdCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBsb2dvIGZyb20gXCJASW1hZ2VzL2xvZ28ucG5nXCI7XHJcblxyXG50eXBlIFByb3BzID0gUm91dGVDb21wb25lbnRQcm9wczx7fT47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdW1tZXIyMDE4UGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywge30+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gPGRpdj5cclxuICAgICAgICAgICAgPEhlbG1ldD5cclxuICAgICAgICAgICAgICAgIDx0aXRsZT5KYXljZWUgR3JpZmZpdGggLSBTdW1tZXIgMjAxODwvdGl0bGU+XHJcbiAgICAgICAgICAgIDwvSGVsbWV0PlxyXG4gICAgICAgIDwvZGl2PjtcclxuICAgIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tIFwicmVhY3QtaGVsbWV0XCI7XHJcbmltcG9ydCB7IE5hdkxpbmssIFJlZGlyZWN0IH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IFN0YXJXYXJzQm9va3NJbWFnZSBmcm9tIFwiQEltYWdlcy9zdGFyd2Fyc2Jvb2tzLmpwZ1wiO1xyXG5cclxudHlwZSBQcm9wcyA9IFJvdXRlQ29tcG9uZW50UHJvcHM8e30+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhZGluZ1BhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIHt9PiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgICAgICAgIDxIZWxtZXQ+XHJcbiAgICAgICAgICAgICAgICA8dGl0bGU+SmF5Y2VlIEdyaWZmaXRoIC0gUmVhZGluZzwvdGl0bGU+XHJcbiAgICAgICAgICAgIDwvSGVsbWV0PlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8aDI+SSBsb3ZlIHRoZSBzdGFyIHdhcnMgYm9va3M8L2gyPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPHA+VGhleSBhcmUgZXZlbiBiZXR0ZXIgdGhhbiB0aGUgbW92aWVzIGFuZCB5b3UgY2FuIHJlYWQgdGhlbSBjaHJvbm9sb2dpY2FsbHk8L3A+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9e1N0YXJXYXJzQm9va3NJbWFnZX0gYWx0PVwiU3RhciBXYXJzIEJvb2tzXCIgY2xhc3NOYW1lPVwiaW1nLWZsdWlkXCIgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgIDxoMz5Tb21ldGhpbmcsIHNvbWV0aGluZywgc29tZXRoaW5nLi4uIENvbXBsZXRlLjwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxhIGhyZWY9XCJodHRwczovL3d3dy5hbWF6b24uY29tL2RwL0IwMEpOOEgyVEMvcmVmPWNtX3N3X2VtX3JfbXRfZHBfVV9NVTF1Q2JGOUZDQlNaXCIgdGFyZ2V0PVwiX2JsYW5rXCI+SW50byB0aGUgVm9pZDogU3RhciBXYXJzIChEYXduIG9mIHRoZSBKZWRpKTwvYT48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gfCA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Db21wbGV0ZWQ8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxhIGhyZWY9XCJodHRwczovL3d3dy5hbWF6b24uY29tL2RwLzAzNDU1NDEzMjQvcmVmPWNtX3N3X2VtX3JfbXRfZHBfVV9DNDF1Q2I5RkhRNEJIXCIgdGFyZ2V0PVwiX2JsYW5rXCI+U3RhciBXYXJzOiBMb3N0IFRyaWJlIG9mIHRoZSBTaXRoIC0gVGhlIENvbGxlY3RlZCBTdG9yaWVzIChTdGFyIFdhcnM6IExvc3QgVHJpYmUgb2YgdGhlIFNpdGggLSBMZWdlbmRzKTwvYT48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gfCA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Db21wbGV0ZWQ8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxhIGhyZWY9XCJodHRwczovL3d3dy5hbWF6b24uY29tL2RwLzAzNDU1MTEzNTIvcmVmPWNtX3N3X2VtX3JfbXRfZHBfVV9rNTF1Q2JEQkNWOVBSXCIgdGFyZ2V0PVwiX2JsYW5rXCI+U3RhciBXYXJzOiBUaGUgT2xkIFJlcHVibGljIC0gUmV2YW4gKFN0YXIgV2FyczogVGhlIE9sZCBSZXB1YmxpYyAtIExlZ2VuZHMpPC9hPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiB8IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNvbXBsZXRlZDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGEgaHJlZj1cImh0dHBzOi8vd3d3LmFtYXpvbi5jb20vZHAvMDM0NTUxMTM5NS9yZWY9Y21fc3dfZW1fcl9tdF9kcF9VX1A1MXVDYlBBNkJQRTdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5TdGFyIFdhcnM6IFRoZSBPbGQgUmVwdWJsaWMgLSBEZWNlaXZlZCAoU3RhciBXYXJzOiBUaGUgT2xkIFJlcHVibGljIC0gTGVnZW5kcyk8L2E+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IHwgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q29tcGxldGVkPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48YSBocmVmPVwiaHR0cHM6Ly93d3cuYW1hem9uLmNvbS9kcC8wMzQ1NTE4NTk0L3JlZj1jbV9zd19lbV9yX210X2RwX1VfQTYxdUNiTlNSQlNGVFwiIHRhcmdldD1cIl9ibGFua1wiPlN0YXIgV2FyczogUmVkIEhhcnZlc3Q8L2E+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IHwgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q29tcGxldGVkPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48YSBocmVmPVwiaHR0cHM6Ly93d3cuYW1hem9uLmNvbS9kcC8wMzQ1NTExMzM2L3JlZj1jbV9zd19lbV9yX210X2RwX1VfczcxdUNiM1Q2NjNSSFwiIHRhcmdldD1cIl9ibGFua1wiPkZhdGFsIEFsbGlhbmNlIChTdGFyIFdhcnM6IFRoZSBPbGQgUmVwdWJsaWMpIChTdGFyIFdhcnM6IFRoZSBPbGQgUmVwdWJsaWMgLSBMZWdlbmRzKTwvYT48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gfCA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Db21wbGV0ZWQ8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxhIGhyZWY9XCJodHRwczovL3d3dy5hbWF6b24uY29tL2RwLzAzNDU1Mjk0MjEvcmVmPWNtX3N3X2VtX3JfbXRfZHBfVV9aNzF1Q2JXMEMxOTdKXCIgdGFyZ2V0PVwiX2JsYW5rXCI+QW5uaWhpbGF0aW9uOiBTdGFyIFdhcnMgTGVnZW5kcyAoVGhlIE9sZCBSZXB1YmxpYykgKFN0YXIgV2FyczogVGhlIE9sZCBSZXB1YmxpYyAtIExlZ2VuZHMpPC9hPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiB8IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNvbXBsZXRlZDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGEgaHJlZj1cImh0dHBzOi8vd3d3LmFtYXpvbi5jb20vZHAvMDM0NTUyMjY0OC9yZWY9Y21fc3dfZW1fcl9tdF9kcF9VX3E4MXVDYktLMFREMThcIiB0YXJnZXQ9XCJfYmxhbmtcIj5TdGFyIFdhcnM6IEtuaWdodCBFcnJhbnQ8L2E+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IHwgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q29tcGxldGVkPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48YSBocmVmPVwiaHR0cHM6Ly93d3cuYW1hem9uLmNvbS9kcC8wMzQ1NDc3Mzc1L3JlZj1jbV9zd19lbV9yX210X2RwX1VfczkxdUNiUlhENEZHOVwiIHRhcmdldD1cIl9ibGFua1wiPlBhdGggb2YgRGVzdHJ1Y3Rpb24gKFN0YXIgV2FyczogRGFydGggQmFuZSwgQm9vayAxKTwvYT48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gfCA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DdXJyZW50bHkgUmVhZGluZzwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGEgaHJlZj1cImh0dHBzOi8vd3d3LmFtYXpvbi5jb20vZHAvMDM0NTQ3NzQ5OS9yZWY9Y21fc3dfZW1fcl9tdF9kcF9VX3U5MXVDYjU5MzBSWUZcIiB0YXJnZXQ9XCJfYmxhbmtcIj5SdWxlIG9mIFR3byAoU3RhciBXYXJzOiBEYXJ0aCBCYW5lLCBCb29rIDIpPC9hPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiB8IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlF1ZXVlZDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGEgaHJlZj1cImh0dHBzOi8vd3d3LmFtYXpvbi5jb20vZHAvMDM0NTUxMTU3My9yZWY9Y21fc3dfZW1fcl9tdF9kcF9VX3E5MXVDYjc4NlJCTlNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5EeW5hc3R5IG9mIEV2aWwgKFN0YXIgV2FyczogRGFydGggQmFuZSwgQm9vayAzKTwvYT48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gfCA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5RdWV1ZWQ8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PjtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFNlcnZpY2VCYXNlIH0gZnJvbSBcIkBTZXJ2aWNlcy9TZXJ2aWNlQmFzZVwiO1xyXG5pbXBvcnQgUmVzdWx0IGZyb20gXCJATW9kZWxzL1Jlc3VsdFwiO1xyXG5pbXBvcnQgeyBJUGVyc29uTW9kZWwgfSBmcm9tIFwiQE1vZGVscy9JUGVyc29uTW9kZWxcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcnNvblNlcnZpY2UgZXh0ZW5kcyBTZXJ2aWNlQmFzZSB7XHJcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIHNlYXJjaCh0ZXJtOiBzdHJpbmcgPSBudWxsKTogUHJvbWlzZTxSZXN1bHQ8SVBlcnNvbk1vZGVsW10+PiB7XHJcbiAgICAgICAgaWYgKHRlcm0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0ZXJtID0gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IHRoaXMucmVxdWVzdEpzb248SVBlcnNvbk1vZGVsW10+KHtcclxuICAgICAgICAgICAgdXJsOiBgL2FwaS9QZXJzb24vU2VhcmNoP3Rlcm09JHt0ZXJtfWAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIHVwZGF0ZShtb2RlbDogSVBlcnNvbk1vZGVsKTogUHJvbWlzZTxSZXN1bHQ8e30+PiB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IHRoaXMucmVxdWVzdEpzb24oe1xyXG4gICAgICAgICAgICB1cmw6IFwiL2FwaS9QZXJzb25cIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IG1vZGVsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZGVsZXRlKGlkOiBudW1iZXIpOiBQcm9taXNlPFJlc3VsdDx7fT4+IHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gYXdhaXQgdGhpcy5yZXF1ZXN0SnNvbih7XHJcbiAgICAgICAgICAgIHVybDogYC9hcGkvUGVyc29uLyR7aWR9YCxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgYWRkKG1vZGVsOiBJUGVyc29uTW9kZWwpOiBQcm9taXNlPFJlc3VsdDxudW1iZXI+PiB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IHRoaXMucmVxdWVzdEpzb248bnVtYmVyPih7XHJcbiAgICAgICAgICAgIHVybDogXCIvYXBpL1BlcnNvbi9BZGRcIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgZGF0YTogbW9kZWxcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFBhZ2luYXRpb24sIHsgUGFnaW5hdGlvblByb3BzIH0gZnJvbSBcInJlYWN0LXBhZ2luYXRpbmdcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBiaW5kIGZyb20gJ2JpbmQtZGVjb3JhdG9yJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BzIHtcclxuICAgIHRvdGFsUmVzdWx0czogbnVtYmVyO1xyXG4gICAgbGltaXRQZXJQYWdlOiBudW1iZXI7XHJcbiAgICBjdXJyZW50UGFnZTogbnVtYmVyO1xyXG4gICAgb25DaGFuZ2VQYWdlOiAocGFnZU51bTogbnVtYmVyKSA9PiB2b2lkO1xyXG59XHJcblxyXG4vKiBCZWxvdyBjb2RlIG9mIHRoZSAnUGFnaW5hdGlvbicgY29tcG9uZW50IHdhcyB0YWtlbiBcclxuZnJvbSB0aGUgaHR0cHM6Ly9naXRodWIuY29tL0Nob1RvdE9TUy9yZWFjdC1wYWdpbmF0aW5nIFxyXG5hbmQgcmVtYWtlZCBmb3IgdGhlIEJvb3RzdHJhcCBzdHlsZS4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBQYWdpbmdCYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCB7fT4ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBlbEZpcnN0UGFnZUJ0bjogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcm90ZWN0ZWQgZWxMYXN0UGFnZUJ0bjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgQGJpbmRcclxuICAgIHB1YmxpYyBzZXRGaXJzdFBhZ2UoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5lbEZpcnN0UGFnZUJ0bi5jbGljaygpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBAYmluZFxyXG4gICAgcHVibGljIHNldExhc3RQYWdlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZWxMYXN0UGFnZUJ0bi5jbGljaygpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gPFBhZ2luYXRpb25cclxuICAgICAgICAgICAgdG90YWw9e3RoaXMucHJvcHMudG90YWxSZXN1bHRzfVxyXG4gICAgICAgICAgICBsaW1pdD17dGhpcy5wcm9wcy5saW1pdFBlclBhZ2V9XHJcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlPXt0aGlzLnByb3BzLmN1cnJlbnRQYWdlfVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgeyh7XHJcbiAgICAgICAgICAgICAgICBwYWdlcyxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlLFxyXG4gICAgICAgICAgICAgICAgaGFzTmV4dFBhZ2UsXHJcbiAgICAgICAgICAgICAgICBoYXNQcmV2aW91c1BhZ2UsXHJcbiAgICAgICAgICAgICAgICBwcmV2aW91c1BhZ2UsXHJcbiAgICAgICAgICAgICAgICBuZXh0UGFnZSxcclxuICAgICAgICAgICAgICAgIHRvdGFsUGFnZXMsXHJcbiAgICAgICAgICAgICAgICBnZXRQYWdlSXRlbVByb3BzXHJcbiAgICAgICAgICAgIH0pID0+IChcclxuICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwicGFnaW5hdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4uZ2V0UGFnZUl0ZW1Qcm9wcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VWYWx1ZTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QYWdlQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ2hhbmdlUGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17eCA9PiB0aGlzLmVsRmlyc3RQYWdlQnRuID0geH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdFxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2hhc1ByZXZpb3VzUGFnZSAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5nZXRQYWdlSXRlbVByb3BzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VWYWx1ZTogcHJldmlvdXNQYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QYWdlQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ2hhbmdlUGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsnPCd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtwYWdlcy5tYXAocGFnZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e3BhZ2V9IGNsYXNzTmFtZT17cGFnZSA9PT0gY3VycmVudFBhZ2UgPyAnYWN0aXZlJyA6ICcnfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5nZXRQYWdlSXRlbVByb3BzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlVmFsdWU6IHBhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QYWdlQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ2hhbmdlUGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwYWdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2hhc05leHRQYWdlICYmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4uZ2V0UGFnZUl0ZW1Qcm9wcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlVmFsdWU6IG5leHRQYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QYWdlQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ2hhbmdlUGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsnPid9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLmdldFBhZ2VJdGVtUHJvcHMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlVmFsdWU6IHRvdGFsUGFnZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUGFnZUNoYW5nZTogdGhpcy5wcm9wcy5vbkNoYW5nZVBhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e3ggPT4gdGhpcy5lbExhc3RQYWdlQnRuID0geH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgKX1cclxuICAgICAgICA8L1BhZ2luYXRpb24+XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBJUGVyc29uTW9kZWwgfSBmcm9tIFwiQE1vZGVscy9JUGVyc29uTW9kZWxcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBiaW5kIGZyb20gJ2JpbmQtZGVjb3JhdG9yJztcclxuaW1wb3J0IHsgRm9ybSB9IGZyb20gXCJAQ29tcG9uZW50cy9zaGFyZWQvRm9ybVwiO1xyXG5pbXBvcnQgeyBGb3JtaWsgfSBmcm9tICdmb3JtaWsnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUHJvcHMge1xyXG4gICAgZGF0YTogSVBlcnNvbk1vZGVsO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJzb25FZGl0b3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCB7fT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVsRm9ybTogRm9ybTtcclxuXHJcbiAgICBAYmluZFxyXG4gICAgcHVibGljIGVtcHR5Rm9ybSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5lbEZvcm0pIHtcclxuICAgICAgICAgICAgdGhpcy5lbEZvcm0uZW1wdHlGb3JtKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIDxGb3JtaWtcclxuICAgICAgICAgICAgZW5hYmxlUmVpbml0aWFsaXplPXt0cnVlfVxyXG4gICAgICAgICAgICBpbml0aWFsVmFsdWVzPXt7XHJcbiAgICAgICAgICAgICAgICBmaXJzdE5hbWU6IHRoaXMucHJvcHMuZGF0YS5maXJzdE5hbWUgfHwgJycsXHJcbiAgICAgICAgICAgICAgICBsYXN0TmFtZTogdGhpcy5wcm9wcy5kYXRhLmxhc3ROYW1lIHx8ICcnXHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIG9uU3VibWl0PXsodmFsdWVzLCB7IHNldFN1Ym1pdHRpbmcgfSkgPT4ge1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgeyh7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZXMsXHJcbiAgICAgICAgICAgICAgICBlcnJvcnMsXHJcbiAgICAgICAgICAgICAgICB0b3VjaGVkLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlQ2hhbmdlLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlQmx1cixcclxuICAgICAgICAgICAgICAgIGhhbmRsZVN1Ym1pdCxcclxuICAgICAgICAgICAgICAgIGlzU3VibWl0dGluZyxcclxuICAgICAgICAgICAgICAgIC8qIGFuZCBvdGhlciBnb29kaWVzICovXHJcbiAgICAgICAgICAgIH0pID0+IChcclxuICAgICAgICAgICAgICAgICAgICA8Rm9ybSBjbGFzc05hbWU9XCJmb3JtXCIgcmVmPXt4ID0+IHRoaXMuZWxGb3JtID0geH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cImlkXCIgZGVmYXVsdFZhbHVlPXsodGhpcy5wcm9wcy5kYXRhLmlkIHx8IDApLnRvU3RyaW5nKCl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImNvbnRyb2wtbGFiZWwgcmVxdWlyZWRcIiBodG1sRm9yPVwicGVyc29uX19maXJzdE5hbWVcIj5GaXJzdCBuYW1lPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwicGVyc29uX19maXJzdE5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e1wiZmlyc3ROYW1lXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZS10eXBlPVwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbC1yZXF1aXJlZD1cInRydWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbXNnLXJlcXVpcmVkPVwiRmlyc3QgbmFtZSBpcyByZXF1aXJlZC5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXMuZmlyc3ROYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25CbHVyPXtoYW5kbGVCbHVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImNvbnRyb2wtbGFiZWwgcmVxdWlyZWRcIiBodG1sRm9yPVwicGVyc29uX19sYXN0TmFtZVwiPkxhc3QgbmFtZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cInBlcnNvbl9fbGFzdE5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e1wibGFzdE5hbWVcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlLXR5cGU9XCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsLXJlcXVpcmVkPVwidHJ1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tc2ctcmVxdWlyZWQ9XCJMYXN0IG5hbWUgaXMgcmVxdWlyZWQuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLmxhc3ROYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25CbHVyPXtoYW5kbGVCbHVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtPil9XHJcbiAgICAgICAgPC9Gb3JtaWs+O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IE1vZGFsIH0gZnJvbSBcImJvb3RzdHJhcDMtbmF0aXZlXCI7XHJcbmltcG9ydCBiaW5kIGZyb20gJ2JpbmQtZGVjb3JhdG9yJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BzIHtcclxuICAgIHRpdGxlOiBKU1guRWxlbWVudCB8IEpTWC5FbGVtZW50W10gfCBhbnk7XHJcbiAgICBidXR0b25zPzogYW55O1xyXG4gICAgY2hpbGRyZW4/OiBKU1guRWxlbWVudCB8IEpTWC5FbGVtZW50W10gfCBhbnk7XHJcbiAgICBvblNob3c/OiAoKSA9PiB2b2lkO1xyXG4gICAgb25IaWRlPzogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1vZGFsQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywge30+IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbW9kYWxQbHVnaW46IE1vZGFsO1xyXG4gICAgcHJvdGVjdGVkIGVsTW9kYWw6IEhUTUxEaXZFbGVtZW50O1xyXG5cclxuICAgIEBiaW5kXHJcbiAgICBwdWJsaWMgc2hvdygpIHtcclxuICAgICAgICB0aGlzLm1vZGFsUGx1Z2luLnNob3coKTtcclxuICAgIH1cclxuXHJcbiAgICBAYmluZFxyXG4gICAgcHVibGljIGhpZGUoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RhbFBsdWdpbi5oaWRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RhbFBsdWdpbiA9IG5ldyBNb2RhbCh0aGlzLmVsTW9kYWwpO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uU2hvdykge1xyXG4gICAgICAgICAgICB0aGlzLmVsTW9kYWwuYWRkRXZlbnRMaXN0ZW5lcihcInNob3cuYnMubW9kYWxcIiBhcyBhbnksICgpID0+IHRoaXMucHJvcHMub25TaG93KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkhpZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5lbE1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoXCJoaWRlLmJzLm1vZGFsXCIgYXMgYW55LCAoKSA9PiB0aGlzLnByb3BzLm9uSGlkZSgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RhbFBsdWdpbi5oaWRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsIGZhZGVcIiB0YWJJbmRleD17LTF9IHJvbGU9XCJkaWFsb2dcIiByZWY9e3ggPT4gdGhpcy5lbE1vZGFsID0geH0+XHJcbiAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZ1wiIHJvbGU9XCJkb2N1bWVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3NOYW1lPVwibW9kYWwtdGl0bGVcIj57dGhpcy5wcm9wcy50aXRsZX08L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtZm9vdGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5idXR0b25zfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICA8L2Rpdj47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgXCJAU3R5bGVzL21haW4uc2Nzc1wiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgSGVsbWV0IH0gZnJvbSBcInJlYWN0LWhlbG1ldFwiO1xyXG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzLCB3aXRoUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgeyBJUGVyc29uTW9kZWwgfSBmcm9tIFwiQE1vZGVscy9JUGVyc29uTW9kZWxcIjtcclxuaW1wb3J0IHsgUGVyc29uU3RvcmUgfSBmcm9tIFwiQFN0b3JlL1BlcnNvblN0b3JlXCI7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uU3RhdGUgfSBmcm9tIFwiQFN0b3JlL2luZGV4XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgUGFnaW5nQmFyIH0gZnJvbSBcIkBDb21wb25lbnRzL3NoYXJlZC9QYWdpbmdCYXJcIjtcclxuaW1wb3J0IFBlcnNvbkVkaXRvciBmcm9tIFwiQENvbXBvbmVudHMvcGVyc29uL1BlcnNvbkVkaXRvclwiO1xyXG5pbXBvcnQgTG9hZGVyIGZyb20gXCJAQ29tcG9uZW50cy9zaGFyZWQvTG9hZGVyXCI7XHJcbmltcG9ydCBiaW5kIGZyb20gJ2JpbmQtZGVjb3JhdG9yJztcclxuaW1wb3J0IHsgTW9kYWxDb21wb25lbnQgfSBmcm9tIFwiQENvbXBvbmVudHMvc2hhcmVkL01vZGFsQ29tcG9uZW50XCI7XHJcbmltcG9ydCBBd2Vzb21lRGVib3VuY2VQcm9taXNlIGZyb20gXCJhd2Vzb21lLWRlYm91bmNlLXByb21pc2VcIjtcclxuXHJcbnR5cGUgUHJvcHMgPSBSb3V0ZUNvbXBvbmVudFByb3BzPHt9PiAmIHR5cGVvZiBQZXJzb25TdG9yZS5hY3Rpb25DcmVhdG9ycyAmIFBlcnNvblN0b3JlLklTdGF0ZTtcclxuXHJcbmludGVyZmFjZSBJU3RhdGUge1xyXG4gICAgc2VhcmNoVGVybTogc3RyaW5nO1xyXG4gICAgcGFnZU51bTogbnVtYmVyO1xyXG4gICAgbGltaXRQZXJQYWdlOiBudW1iZXI7XHJcbiAgICByb3dPZmZzZXQ6IG51bWJlcjtcclxuICAgIG1vZGVsRm9yRWRpdDogSVBlcnNvbk1vZGVsO1xyXG59XHJcblxyXG5cclxuY2xhc3MgQWRtaW5QYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBJU3RhdGU+IHtcclxuXHJcbiAgICBwcml2YXRlIHBhZ2luZ0JhcjogUGFnaW5nQmFyO1xyXG5cclxuICAgIHByaXZhdGUgZWxNb2RhbEFkZDogTW9kYWxDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIGVsTW9kYWxFZGl0OiBNb2RhbENvbXBvbmVudDtcclxuICAgIHByaXZhdGUgZWxNb2RhbERlbGV0ZTogTW9kYWxDb21wb25lbnQ7XHJcblxyXG4gICAgcHJpdmF0ZSBwZXJzb25FZGl0b3JBZGQ6IFBlcnNvbkVkaXRvcjtcclxuICAgIHByaXZhdGUgcGVyc29uRWRpdG9yRWRpdDogUGVyc29uRWRpdG9yO1xyXG5cclxuICAgIHByaXZhdGUgZGVib3VuY2VkU2VhcmNoOiAodGVybTogc3RyaW5nKSA9PiB2b2lkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgc2VhcmNoVGVybTogXCJcIixcclxuICAgICAgICAgICAgcGFnZU51bTogMSxcclxuICAgICAgICAgICAgbGltaXRQZXJQYWdlOiA1LFxyXG4gICAgICAgICAgICByb3dPZmZzZXQ6IDAsXHJcbiAgICAgICAgICAgIG1vZGVsRm9yRWRpdDoge31cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmRlYm91bmNlZFNlYXJjaCA9IEF3ZXNvbWVEZWJvdW5jZVByb21pc2UoKHRlcm06IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBwcm9wcy5zZWFyY2hSZXF1ZXN0KHRlcm0pO1xyXG4gICAgICAgIH0sIDUwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMucHJvcHMuc2VhcmNoUmVxdWVzdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmVsTW9kYWxBZGQpIHtcclxuICAgICAgICAgICAgdGhpcy5lbE1vZGFsQWRkLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZWxNb2RhbEVkaXQpIHtcclxuICAgICAgICAgICAgdGhpcy5lbE1vZGFsRWRpdC5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmVsTW9kYWxEZWxldGUpIHtcclxuICAgICAgICAgICAgdGhpcy5lbE1vZGFsRGVsZXRlLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQGJpbmRcclxuICAgIG9uQ2hhbmdlUGFnZShwYWdlTnVtOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBsZXQgcm93T2Zmc2V0ID0gTWF0aC5jZWlsKChwYWdlTnVtIC0gMSkgKiB0aGlzLnN0YXRlLmxpbWl0UGVyUGFnZSk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHBhZ2VOdW0sIHJvd09mZnNldCB9KTtcclxuICAgIH1cclxuXHJcbiAgICBAYmluZFxyXG4gICAgb25DbGlja1Nob3dBZGRNb2RhbChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50Pikge1xyXG4gICAgICAgIHRoaXMuZWxNb2RhbEFkZC5zaG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgQGJpbmRcclxuICAgIG9uQ2xpY2tTaG93RWRpdE1vZGFsKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+LCBtb2RlbEZvckVkaXQ6IElQZXJzb25Nb2RlbCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtb2RlbEZvckVkaXQgfSk7XHJcbiAgICAgICAgdGhpcy5lbE1vZGFsRWRpdC5zaG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgQGJpbmRcclxuICAgIG9uQ2xpY2tTaG93RGVsZXRlTW9kYWwoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4sIG1vZGVsRm9yRWRpdDogSVBlcnNvbk1vZGVsKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1vZGVsRm9yRWRpdCB9KTtcclxuICAgICAgICB0aGlzLmVsTW9kYWxEZWxldGUuc2hvdygpO1xyXG4gICAgfVxyXG5cclxuICAgIEBiaW5kXHJcbiAgICBvbkNsaWNrUGVyc29uRWRpdG9yQWRkX19zYXZlQnRuKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KTogdm9pZCB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGlmICghdGhpcy5wZXJzb25FZGl0b3JBZGQuZWxGb3JtLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucHJvcHMuYWRkUmVxdWVzdCh0aGlzLnBlcnNvbkVkaXRvckFkZC5lbEZvcm0uZ2V0RGF0YSgpKTtcclxuICAgICAgICB0aGlzLnBhZ2luZ0Jhci5zZXRMYXN0UGFnZSgpO1xyXG4gICAgICAgIHRoaXMuZWxNb2RhbEFkZC5oaWRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgQGJpbmRcclxuICAgIG9uQ2xpY2tQZXJzb25FZGl0b3JFZGl0X19zYXZlQnRuKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBlcnNvbkVkaXRvckVkaXQuZWxGb3JtLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5wZXJzb25FZGl0b3JFZGl0LmVsRm9ybS5nZXREYXRhKCk7XHJcbiAgICAgICAgdGhpcy5wcm9wcy51cGRhdGVSZXF1ZXN0KGRhdGEpO1xyXG4gICAgICAgIHRoaXMuZWxNb2RhbEVkaXQuaGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIEBiaW5kXHJcbiAgICBvbkNsaWNrUGVyc29uRWRpdG9yRGVsZXRlX19zYXZlQnRuKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5kZWxldGVSZXF1ZXN0KHRoaXMuc3RhdGUubW9kZWxGb3JFZGl0LmlkKTtcclxuICAgICAgICB0aGlzLmVsTW9kYWxEZWxldGUuaGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIEBiaW5kXHJcbiAgICByZW5kZXJSb3cocGVyc29uOiBJUGVyc29uTW9kZWwpIHtcclxuICAgICAgICByZXR1cm4gPHRyIGtleT17cGVyc29uLmlkfT5cclxuICAgICAgICAgICAgPHRkPntwZXJzb24uZmlyc3ROYW1lfTwvdGQ+XHJcbiAgICAgICAgICAgIDx0ZD57cGVyc29uLmxhc3ROYW1lfTwvdGQ+XHJcbiAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1pbmZvXCIgb25DbGljaz17eCA9PiB0aGlzLm9uQ2xpY2tTaG93RWRpdE1vZGFsKHgsIHBlcnNvbil9PkVkaXQ8L2J1dHRvbj4mbmJzcDtcclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1kYW5nZXJcIiBvbkNsaWNrPXt4ID0+IHRoaXMub25DbGlja1Nob3dEZWxldGVNb2RhbCh4LCBwZXJzb24pfT5EZWxldGU8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICA8L3RyPjtcclxuICAgIH1cclxuXHJcbiAgICBAYmluZFxyXG4gICAgcmVuZGVyUm93cyhkYXRhOiBJUGVyc29uTW9kZWxbXSkge1xyXG4gICAgICAgIHJldHVybiBkYXRhXHJcbiAgICAgICAgICAgIC5zbGljZSh0aGlzLnN0YXRlLnJvd09mZnNldCwgdGhpcy5zdGF0ZS5yb3dPZmZzZXQgKyB0aGlzLnN0YXRlLmxpbWl0UGVyUGFnZSlcclxuICAgICAgICAgICAgLm1hcCh4ID0+IHRoaXMucmVuZGVyUm93KHgpKTtcclxuICAgIH1cclxuXHJcbiAgICBAYmluZFxyXG4gICAgb25DaGFuZ2VTZWFyY2hJbnB1dChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50Pikge1xyXG4gICAgICAgIHZhciB2YWwgPSBlLmN1cnJlbnRUYXJnZXQudmFsdWU7XHJcbiAgICAgICAgdGhpcy5kZWJvdW5jZWRTZWFyY2godmFsKTtcclxuICAgICAgICB0aGlzLnBhZ2luZ0Jhci5zZXRGaXJzdFBhZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICAgICAgICA8SGVsbWV0PlxyXG4gICAgICAgICAgICAgICAgPHRpdGxlPkpheWNlZSBHcmlmZml0aCAtIFBvcnRmb2xpbzwvdGl0bGU+XHJcbiAgICAgICAgICAgIDwvSGVsbWV0PlxyXG5cclxuICAgICAgICAgICAgPExvYWRlciBzaG93PXt0aGlzLnByb3BzLmluZGljYXRvcnMub3BlcmF0aW9uTG9hZGluZ30gLz5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwgcGFuZWwtZGVmYXVsdFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbC1ib2R5IHJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXNtLTFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXN1Y2Nlc3NcIiBvbkNsaWNrPXt0aGlzLm9uQ2xpY2tTaG93QWRkTW9kYWx9PkFkZDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXNtLTExXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17XCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlU2VhcmNoSW5wdXR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17XCJTZWFyY2ggZm9yIHBlb3BsZS4uLlwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInRhYmxlXCI+XHJcbiAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+Rmlyc3QgbmFtZTwvdGg+PHRoPkxhc3QgbmFtZTwvdGg+PHRoPjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucmVuZGVyUm93cyh0aGlzLnByb3BzLnBlb3BsZSl9XHJcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICA8L3RhYmxlPlxyXG5cclxuICAgICAgICAgICAgey8qIEFkZCBtb2RhbCAqL31cclxuICAgICAgICAgICAgPE1vZGFsQ29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICByZWY9e3ggPT4gdGhpcy5lbE1vZGFsQWRkID0geH1cclxuICAgICAgICAgICAgICAgIGJ1dHRvbnM9ezxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0XCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIj5DbG9zZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMub25DbGlja1BlcnNvbkVkaXRvckFkZF9fc2F2ZUJ0bn0+U2F2ZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+fVxyXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJBZGQgcGVyc29uXCJcclxuICAgICAgICAgICAgICAgIG9uSGlkZT17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBlcnNvbkVkaXRvckFkZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcnNvbkVkaXRvckFkZC5lbXB0eUZvcm0oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgIDxQZXJzb25FZGl0b3IgcmVmPXt4ID0+IHRoaXMucGVyc29uRWRpdG9yQWRkID0geH0gZGF0YT17e319IC8+XHJcbiAgICAgICAgICAgIDwvTW9kYWxDb21wb25lbnQ+XHJcblxyXG4gICAgICAgICAgICB7LyogRWRpdCBtb2RhbCAqL31cclxuICAgICAgICAgICAgPE1vZGFsQ29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICByZWY9e3ggPT4gdGhpcy5lbE1vZGFsRWRpdCA9IHh9XHJcbiAgICAgICAgICAgICAgICBidXR0b25zPXs8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tZGVmYXVsdFwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCI+Q2xvc2U8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnlcIiBvbkNsaWNrPXt0aGlzLm9uQ2xpY2tQZXJzb25FZGl0b3JFZGl0X19zYXZlQnRufT5TYXZlPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgICAgICAgICB0aXRsZT17YEVkaXQgcGVyc29uOiAke3RoaXMuc3RhdGUubW9kZWxGb3JFZGl0LmZpcnN0TmFtZX0gJHt0aGlzLnN0YXRlLm1vZGVsRm9yRWRpdC5sYXN0TmFtZX1gfVxyXG4gICAgICAgICAgICAgICAgb25IaWRlPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGVyc29uRWRpdG9yRWRpdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbW9kZWxGb3JFZGl0OiB7fSB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgIDxQZXJzb25FZGl0b3IgcmVmPXt4ID0+IHRoaXMucGVyc29uRWRpdG9yRWRpdCA9IHh9IGRhdGE9e3RoaXMuc3RhdGUubW9kZWxGb3JFZGl0fSAvPlxyXG4gICAgICAgICAgICA8L01vZGFsQ29tcG9uZW50PlxyXG5cclxuICAgICAgICAgICAgey8qIERlbGV0ZSBtb2RhbCAqL31cclxuICAgICAgICAgICAgPE1vZGFsQ29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICByZWY9e3ggPT4gdGhpcy5lbE1vZGFsRGVsZXRlID0geH1cclxuICAgICAgICAgICAgICAgIGJ1dHRvbnM9ezxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0XCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIj5DbG9zZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tZGFuZ2VyXCIgb25DbGljaz17dGhpcy5vbkNsaWNrUGVyc29uRWRpdG9yRGVsZXRlX19zYXZlQnRufT5EZWxldGU8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2Pn1cclxuICAgICAgICAgICAgICAgIHRpdGxlPXtgRGVsZXRlIHBlcnNvbjogJHt0aGlzLnN0YXRlLm1vZGVsRm9yRWRpdC5maXJzdE5hbWV9ICR7dGhpcy5zdGF0ZS5tb2RlbEZvckVkaXQubGFzdE5hbWV9YH0+XHJcbiAgICAgICAgICAgICAgICA8cD5EbyB5b3UgcmVhbGx5IHdhbnQgdG8gZGVsZXRlIHRoaXMgcGVyc29uPzwvcD5cclxuICAgICAgICAgICAgPC9Nb2RhbENvbXBvbmVudD5cclxuXHJcbiAgICAgICAgICAgIDxQYWdpbmdCYXJcclxuICAgICAgICAgICAgICAgIHJlZj17eCA9PiB0aGlzLnBhZ2luZ0JhciA9IHh9XHJcbiAgICAgICAgICAgICAgICB0b3RhbFJlc3VsdHM9e3RoaXMucHJvcHMucGVvcGxlLmxlbmd0aH1cclxuICAgICAgICAgICAgICAgIGxpbWl0UGVyUGFnZT17dGhpcy5zdGF0ZS5saW1pdFBlclBhZ2V9XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZT17dGhpcy5zdGF0ZS5wYWdlTnVtfVxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2VQYWdlPXt0aGlzLm9uQ2hhbmdlUGFnZX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj47XHJcbiAgICB9XHJcbn1cclxuXHJcbnZhciBjb21wb25lbnQgPSBjb25uZWN0KFxyXG4gICAgKHN0YXRlOiBBcHBsaWNhdGlvblN0YXRlKSA9PiBzdGF0ZS5wZXJzb24sIC8vIFNlbGVjdHMgd2hpY2ggc3RhdGUgcHJvcGVydGllcyBhcmUgbWVyZ2VkIGludG8gdGhlIGNvbXBvbmVudCdzIHByb3BzLlxyXG4gICAgUGVyc29uU3RvcmUuYWN0aW9uQ3JlYXRvcnMgLy8gU2VsZWN0cyB3aGljaCBhY3Rpb24gY3JlYXRvcnMgYXJlIG1lcmdlZCBpbnRvIHRoZSBjb21wb25lbnQncyBwcm9wcy5cclxuKShBZG1pblBhZ2UgYXMgYW55KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0ICh3aXRoUm91dGVyKGNvbXBvbmVudCBhcyBhbnkpIGFzIGFueSBhcyB0eXBlb2YgQWRtaW5QYWdlKSIsImltcG9ydCBBdXRob3JpemVkTGF5b3V0IGZyb20gJ0BMYXlvdXRzL0F1dGhvcml6ZWRMYXlvdXQnO1xyXG5pbXBvcnQgR3Vlc3RMYXlvdXQgZnJvbSBcIkBMYXlvdXRzL0d1ZXN0TGF5b3V0XCI7XHJcbmltcG9ydCBMb2dpblBhZ2UgZnJvbSAnQFBhZ2VzL0xvZ2luUGFnZSc7XHJcbmltcG9ydCB7IEFwcFJvdXRlIH0gZnJvbSBcIkBDb21wb25lbnRzL3NoYXJlZC9BcHBSb3V0ZVwiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFN3aXRjaCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgSG9tZVBhZ2UgZnJvbSAnQFBhZ2VzL0hvbWVQYWdlJztcclxuaW1wb3J0IFBvcnRmb2xpb1BhZ2UgZnJvbSAnQFBhZ2VzL1BvcnRmb2xpb1BhZ2UnO1xyXG5pbXBvcnQgVHJhdmVsaW5nUGFnZSBmcm9tICdAUGFnZXMvVHJhdmVsaW5nUGFnZSc7XHJcbmltcG9ydCBTdW1tZXIyMDE4UGFnZSBmcm9tICdAUGFnZXMvU3VtbWVyMjAxOFBhZ2UnO1xyXG5pbXBvcnQgUmVhZGluZ1BhZ2UgZnJvbSAnQFBhZ2VzL1JlYWRpbmdQYWdlJztcclxuaW1wb3J0IEFkbWluUGFnZSBmcm9tICdAUGFnZXMvQWRtaW5QYWdlJztcclxuXHJcbmV4cG9ydCBjb25zdCByb3V0ZXMgPSA8U3dpdGNoPlxyXG4gICAgPEFwcFJvdXRlIGxheW91dD17R3Vlc3RMYXlvdXR9IGV4YWN0IHBhdGg9XCIvbG9naW5cIiBjb21wb25lbnQ9e0xvZ2luUGFnZX0gLz5cclxuICAgIDxBcHBSb3V0ZSBsYXlvdXQ9e0d1ZXN0TGF5b3V0fSBleGFjdCBwYXRoPVwiL1wiIGNvbXBvbmVudD17SG9tZVBhZ2V9IC8+XHJcbiAgICA8QXBwUm91dGUgbGF5b3V0PXtHdWVzdExheW91dH0gZXhhY3QgcGF0aD1cIi9wb3J0Zm9saW9cIiBjb21wb25lbnQ9e1BvcnRmb2xpb1BhZ2V9IC8+XHJcbiAgICA8QXBwUm91dGUgbGF5b3V0PXtHdWVzdExheW91dH0gZXhhY3QgcGF0aD1cIi90cmF2ZWxpbmdcIiBjb21wb25lbnQ9e1RyYXZlbGluZ1BhZ2V9IC8+XHJcbiAgICA8QXBwUm91dGUgbGF5b3V0PXtHdWVzdExheW91dH0gZXhhY3QgcGF0aD1cIi90cmF2ZWxpbmcvc3VtbWVyMjAxOFwiIGNvbXBvbmVudD17U3VtbWVyMjAxOFBhZ2V9IC8+XHJcbiAgICA8QXBwUm91dGUgbGF5b3V0PXtHdWVzdExheW91dH0gZXhhY3QgcGF0aD1cIi9yZWFkaW5nXCIgY29tcG9uZW50PXtSZWFkaW5nUGFnZX0gLz5cclxuICAgIDxBcHBSb3V0ZSBsYXlvdXQ9e0F1dGhvcml6ZWRMYXlvdXR9IGV4YWN0IHBhdGg9XCIvYWRtaW5cIiBjb21wb25lbnQ9e0FkbWluUGFnZX0gLz5cclxuPC9Td2l0Y2g+OyIsImltcG9ydCB7IExvZ2luU3RvcmUgfSBmcm9tIFwiQFN0b3JlL0xvZ2luU3RvcmVcIjtcclxuaW1wb3J0IHsgUGVyc29uU3RvcmUgfSBmcm9tIFwiQFN0b3JlL1BlcnNvblN0b3JlXCI7XHJcblxyXG4vLyBUaGUgdG9wLWxldmVsIHN0YXRlIG9iamVjdFxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcGxpY2F0aW9uU3RhdGUge1xyXG4gICAgbG9naW46IExvZ2luU3RvcmUuSVN0YXRlO1xyXG4gICAgcGVyc29uOiBQZXJzb25TdG9yZS5JU3RhdGU7XHJcbn1cclxuXHJcbi8vIFdoZW5ldmVyIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLCBSZWR1eCB3aWxsIHVwZGF0ZSBlYWNoIHRvcC1sZXZlbCBhcHBsaWNhdGlvbiBzdGF0ZSBwcm9wZXJ0eSB1c2luZ1xyXG4vLyB0aGUgcmVkdWNlciB3aXRoIHRoZSBtYXRjaGluZyBuYW1lLiBJdCdzIGltcG9ydGFudCB0aGF0IHRoZSBuYW1lcyBtYXRjaCBleGFjdGx5LCBhbmQgdGhhdCB0aGUgcmVkdWNlclxyXG4vLyBhY3RzIG9uIHRoZSBjb3JyZXNwb25kaW5nIEFwcGxpY2F0aW9uU3RhdGUgcHJvcGVydHkgdHlwZS5cclxuZXhwb3J0IGNvbnN0IHJlZHVjZXJzID0ge1xyXG4gICAgbG9naW46IExvZ2luU3RvcmUucmVkdWNlcixcclxuICAgIHBlcnNvbjogUGVyc29uU3RvcmUucmVkdWNlclxyXG59O1xyXG5cclxuLy8gVGhpcyB0eXBlIGNhbiBiZSB1c2VkIGFzIGEgaGludCBvbiBhY3Rpb24gY3JlYXRvcnMgc28gdGhhdCBpdHMgJ2Rpc3BhdGNoJyBhbmQgJ2dldFN0YXRlJyBwYXJhbXMgYXJlXHJcbi8vIGNvcnJlY3RseSB0eXBlZCB0byBtYXRjaCB5b3VyIHN0b3JlLlxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcFRodW5rQWN0aW9uPFRBY3Rpb24+IHtcclxuICAgIChkaXNwYXRjaDogKGFjdGlvbjogVEFjdGlvbikgPT4gdm9pZCwgZ2V0U3RhdGU6ICgpID0+IEFwcGxpY2F0aW9uU3RhdGUpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcFRodW5rQWN0aW9uQXN5bmM8VEFjdGlvbiwgVFJlc3VsdD4ge1xyXG4gICAgKGRpc3BhdGNoOiAoYWN0aW9uOiBUQWN0aW9uKSA9PiB2b2lkLCBnZXRTdGF0ZTogKCkgPT4gQXBwbGljYXRpb25TdGF0ZSkgOiBQcm9taXNlPFRSZXN1bHQ+XHJcbn0iLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBjb21iaW5lUmVkdWNlcnMsIFN0b3JlRW5oYW5jZXIsIFN0b3JlLCBTdG9yZUVuaGFuY2VyU3RvcmVDcmVhdG9yLCBSZWR1Y2Vyc01hcE9iamVjdCB9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcclxuaW1wb3J0IHsgcm91dGVyTWlkZGxld2FyZSwgTE9DQVRJT05fQ0hBTkdFIH0gZnJvbSAnY29ubmVjdGVkLXJlYWN0LXJvdXRlcic7XHJcbi8vdmFyIHJvdXRlclJlZHVjZXIgPSByZXF1aXJlKFwiY29ubmVjdGVkLXJlYWN0LXJvdXRlci9saWIvcmVkdWNlclwiKTtcclxuLy9pbXBvcnQge3JvdXRlclJlZHVjZXJ9IGZyb20gXCJyZWFjdC1yb3V0ZXItcmVkdXhcIjtcclxuaW1wb3J0ICogYXMgU3RvcmVNb2R1bGUgZnJvbSAnLi9zdG9yZSc7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uU3RhdGUsIHJlZHVjZXJzIH0gZnJvbSAnLi9zdG9yZSc7XHJcbmltcG9ydCB7IEhpc3RvcnkgfSBmcm9tICdoaXN0b3J5JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKGhpc3Rvcnk6IEhpc3RvcnksIGluaXRpYWxTdGF0ZT86IEFwcGxpY2F0aW9uU3RhdGUpIHtcclxuICAgIC8vIEJ1aWxkIG1pZGRsZXdhcmUuIFRoZXNlIGFyZSBmdW5jdGlvbnMgdGhhdCBjYW4gcHJvY2VzcyB0aGUgYWN0aW9ucyBiZWZvcmUgdGhleSByZWFjaCB0aGUgc3RvcmUuXHJcbiAgICBjb25zdCB3aW5kb3dJZkRlZmluZWQgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB3aW5kb3cgYXMgYW55O1xyXG4gICAgLy8gSWYgZGV2VG9vbHMgaXMgaW5zdGFsbGVkLCBjb25uZWN0IHRvIGl0XHJcbiAgICBjb25zdCBkZXZUb29sc0V4dGVuc2lvbiA9IHdpbmRvd0lmRGVmaW5lZCAmJiB3aW5kb3dJZkRlZmluZWQuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyBhcyAoKSA9PiBTdG9yZUVuaGFuY2VyO1xyXG4gICAgY29uc3QgY3JlYXRlU3RvcmVXaXRoTWlkZGxld2FyZSA9IGNvbXBvc2UoXHJcbiAgICAgICAgYXBwbHlNaWRkbGV3YXJlKHRodW5rLCByb3V0ZXJNaWRkbGV3YXJlKGhpc3RvcnkpKSxcclxuICAgICAgICBkZXZUb29sc0V4dGVuc2lvbiA/IGRldlRvb2xzRXh0ZW5zaW9uKCkgOiA8Uz4obmV4dDogU3RvcmVFbmhhbmNlclN0b3JlQ3JlYXRvcjxTPikgPT4gbmV4dFxyXG4gICAgKShjcmVhdGVTdG9yZSk7XHJcblxyXG4gICAgLy8gQ29tYmluZSBhbGwgcmVkdWNlcnMgYW5kIGluc3RhbnRpYXRlIHRoZSBhcHAtd2lkZSBzdG9yZSBpbnN0YW5jZVxyXG4gICAgY29uc3QgYWxsUmVkdWNlcnMgPSBidWlsZFJvb3RSZWR1Y2VyKHJlZHVjZXJzLCBoaXN0b3J5KTtcclxuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmVXaXRoTWlkZGxld2FyZShhbGxSZWR1Y2VycywgaW5pdGlhbFN0YXRlIGFzIGFueSkgYXMgU3RvcmU8QXBwbGljYXRpb25TdGF0ZT47XHJcblxyXG4gICAgLy8gRW5hYmxlIFdlYnBhY2sgaG90IG1vZHVsZSByZXBsYWNlbWVudCBmb3IgcmVkdWNlcnNcclxuICAgIGlmIChtb2R1bGUuaG90KSB7XHJcbiAgICAgICAgbW9kdWxlLmhvdC5hY2NlcHQoJy4vc3RvcmUnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRSb290UmVkdWNlciA9IHJlcXVpcmU8dHlwZW9mIFN0b3JlTW9kdWxlPignLi9zdG9yZScpO1xyXG4gICAgICAgICAgICBzdG9yZS5yZXBsYWNlUmVkdWNlcihidWlsZFJvb3RSZWR1Y2VyKG5leHRSb290UmVkdWNlci5yZWR1Y2VycywgaGlzdG9yeSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdG9yZTtcclxufVxyXG5cclxuY29uc3Qgcm91dGVyUmVkdWNlciA9IChoaXN0b3J5KSA9PiB7XHJcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7XHJcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXHJcbiAgICAgICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcclxuICAgIH07XHJcbiAgICByZXR1cm4gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhcmc6IGFueSA9IHt9KSA9PiB7XHJcbiAgICAgICAgaWYgKGFyZy50eXBlID09PSBMT0NBVElPTl9DSEFOR0UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIC4uLmFyZy5wYXlsb2FkIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIGJ1aWxkUm9vdFJlZHVjZXIoYWxsUmVkdWNlcnM6IFJlZHVjZXJzTWFwT2JqZWN0LCBoaXN0b3J5KSB7XHJcbiAgICByZXR1cm4gY29tYmluZVJlZHVjZXJzPEFwcGxpY2F0aW9uU3RhdGU+KHsuLi5hbGxSZWR1Y2VycywgLi4ueyByb3V0ZXI6IHJvdXRlclJlZHVjZXIoaGlzdG9yeSkgfX0gYXMgYW55KTtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyByZW5kZXJUb1N0cmluZyB9IGZyb20gJ3JlYWN0LWRvbS9zZXJ2ZXInO1xyXG5pbXBvcnQgeyBTdGF0aWNSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHsgcmVwbGFjZSB9IGZyb20gJ2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5IH0gZnJvbSAnaGlzdG9yeSc7XHJcbmltcG9ydCB7IGNyZWF0ZVNlcnZlclJlbmRlcmVyLCBSZW5kZXJSZXN1bHQgfSBmcm9tICdhc3BuZXQtcHJlcmVuZGVyaW5nJztcclxuaW1wb3J0IHsgcm91dGVzIH0gZnJvbSAnLi9yb3V0ZXMnO1xyXG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi9jb25maWd1cmVTdG9yZSc7XHJcbmltcG9ydCB7IEhlbG1ldCB9IGZyb20gJ3JlYWN0LWhlbG1ldCc7XHJcbmltcG9ydCBHbG9iYWxzIGZyb20gXCJAR2xvYmFsc1wiO1xyXG5pbXBvcnQgeyBJTm9kZVNlc3Npb24gfSBmcm9tIFwiQE1vZGVscy9JTm9kZVNlc3Npb25cIjtcclxuaW1wb3J0IHsgY29tcGxldGVkVGFza3MgfSBmcm9tIFwiZG9tYWluLXdhaXRcIjtcclxuXHJcbnZhciByZW5kZXJIZWxtZXQgPSAoKTogc3RyaW5nID0+IHtcclxuICAgIHZhciBoZWxtZXREYXRhID0gSGVsbWV0LnJlbmRlclN0YXRpYygpO1xyXG4gICAgdmFyIGhlbG1ldFN0cmluZ3MgPSBcIlwiO1xyXG4gICAgZm9yICh2YXIga2V5IGluIGhlbG1ldERhdGEpIHtcclxuICAgICAgICBpZiAoaGVsbWV0RGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIGhlbG1ldFN0cmluZ3MgKz0gaGVsbWV0RGF0YVtrZXldLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhlbG1ldFN0cmluZ3M7XHJcbn07XHJcblxyXG52YXIgY3JlYXRlR2xvYmFscyA9IChub2RlU2Vzc2lvbiwgaW5pdGlhbFJlZHV4U3RhdGUsIGhlbG1ldFN0cmluZ3MpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY29tcGxldGVkVGFza3MsXHJcbiAgICAgICAgbm9kZVNlc3Npb24sXHJcbiAgICAgICAgaW5pdGlhbFJlZHV4U3RhdGUsXHJcbiAgICAgICAgaGVsbWV0U3RyaW5nc1xyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNlcnZlclJlbmRlcmVyKChwYXJhbXMpID0+IHtcclxuXHJcbiAgICBHbG9iYWxzLnJlc2V0KCk7XHJcbiAgICBHbG9iYWxzLmluaXQocGFyYW1zLmRhdGEgYXMgSU5vZGVTZXNzaW9uKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8UmVuZGVyUmVzdWx0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICAgIC8vIFByZXBhcmUgUmVkdXggc3RvcmUgd2l0aCBpbi1tZW1vcnkgaGlzdG9yeSwgYW5kIGRpc3BhdGNoIGEgbmF2aWdhdGlvbiBldmVudC5cclxuICAgICAgICAvLyBjb3JyZXNwb25kaW5nIHRvIHRoZSBpbmNvbWluZyBVUkwuXHJcbiAgICAgICAgY29uc3QgYmFzZW5hbWUgPSBwYXJhbXMuYmFzZVVybC5zdWJzdHJpbmcoMCwgcGFyYW1zLmJhc2VVcmwubGVuZ3RoIC0gMSk7IC8vIFJlbW92ZSB0cmFpbGluZyBzbGFzaC5cclxuICAgICAgICBjb25zdCB1cmxBZnRlckJhc2VuYW1lID0gcGFyYW1zLnVybC5zdWJzdHJpbmcoYmFzZW5hbWUubGVuZ3RoKTtcclxuICAgICAgICBjb25zdCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSk7XHJcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2gocmVwbGFjZSh1cmxBZnRlckJhc2VuYW1lKSk7XHJcblxyXG4gICAgICAgIC8vIFByZXBhcmUgYW4gaW5zdGFuY2Ugb2YgdGhlIGFwcGxpY2F0aW9uIGFuZCBwZXJmb3JtIGFuIGluaXRhbCByZW5kZXIgdGhhdCB3aWxsXHJcbiAgICAgICAgLy8gY2F1c2UgYW55IGFzeW5jIHRhc2tzIChlLmcuLCBkYXRhIGFjY2VzcykgdG8gYmVnaW4uXHJcbiAgICAgICAgY29uc3Qgcm91dGVyQ29udGV4dDogYW55ID0ge307XHJcbiAgICAgICAgY29uc3QgYXBwID0gKFxyXG4gICAgICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICAgICAgICAgIDxTdGF0aWNSb3V0ZXIgYmFzZW5hbWU9e2Jhc2VuYW1lfSBjb250ZXh0PXtyb3V0ZXJDb250ZXh0fSBsb2NhdGlvbj17cGFyYW1zLmxvY2F0aW9uLnBhdGh9IGNoaWxkcmVuPXtyb3V0ZXN9IC8+XHJcbiAgICAgICAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVuZGVyQXBwID0gKCk6IHN0cmluZyA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJUb1N0cmluZyhhcHApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJlbmRlckFwcCgpO1xyXG5cclxuICAgICAgICAvLyBJZiB0aGVyZSdzIGEgcmVkaXJlY3Rpb24sIGp1c3Qgc2VuZCB0aGlzIGluZm9ybWF0aW9uIGJhY2sgdG8gdGhlIGhvc3QgYXBwbGljYXRpb24uXHJcbiAgICAgICAgaWYgKHJvdXRlckNvbnRleHQudXJsKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RVcmw6IHJvdXRlckNvbnRleHQudXJsLFxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsczogY3JlYXRlR2xvYmFscyhwYXJhbXMuZGF0YSwgc3RvcmUuZ2V0U3RhdGUoKSwgcmVuZGVySGVsbWV0KCkpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBPbmNlIGFueSBhc3luYyB0YXNrcyBhcmUgZG9uZSwgd2UgY2FuIHBlcmZvcm0gdGhlIGZpbmFsIHJlbmRlci5cclxuICAgICAgICAvLyBXZSBhbHNvIHNlbmQgdGhlIHJlZHV4IHN0b3JlIHN0YXRlLCBzbyB0aGUgY2xpZW50IGNhbiBjb250aW51ZSBleGVjdXRpb24gd2hlcmUgdGhlIHNlcnZlciBsZWZ0IG9mZi5cclxuICAgICAgICBwYXJhbXMuZG9tYWluVGFza3MudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgIGh0bWw6IHJlbmRlckFwcCgpLFxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsczogY3JlYXRlR2xvYmFscyhwYXJhbXMuZGF0YSwgc3RvcmUuZ2V0U3RhdGUoKSwgcmVuZGVySGVsbWV0KCkpXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9LCByZWplY3QpOyAvLyBBbHNvIHByb3BhZ2F0ZSBhbnkgZXJyb3JzIGJhY2sgaW50byB0aGUgaG9zdCBhcHBsaWNhdGlvbi5cclxuICAgIH0pO1xyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==