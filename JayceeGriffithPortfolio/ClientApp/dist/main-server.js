!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="dist/",n(n.s=109)}([function(e,t,n){e.exports=n(1)(4)},function(e,t){e.exports=require("./vendor")},function(e,t,n){"use strict";var r;function o(e,t,n){if(!n||typeof n.value!==r.typeOfFunction)throw new TypeError("Only methods can be decorated with @bind. <"+t+"> is not a method!");return{configurable:r.boolTrue,get:function(){var e=n.value.bind(this);return Object.defineProperty(this,t,{value:e,configurable:r.boolTrue,writable:r.boolTrue}),e}}}Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.typeOfFunction="function",e.boolTrue=!0}(r||(r={})),t.bind=o,t.default=o},function(e,t,n){e.exports=n(1)(301)},function(e,t,n){"use strict";t.__esModule=!0,t.withRouter=t.matchPath=t.generatePath=t.Switch=t.StaticRouter=t.Router=t.Route=t.Redirect=t.Prompt=t.NavLink=t.MemoryRouter=t.Link=t.HashRouter=t.BrowserRouter=void 0;var r=v(n(52)),o=v(n(59)),i=v(n(25)),a=v(n(60)),s=v(n(62)),u=v(n(64)),c=v(n(66)),l=v(n(26)),f=v(n(21)),p=v(n(68)),d=v(n(70)),h=v(n(72)),m=v(n(74)),y=v(n(76));function v(e){return e&&e.__esModule?e:{default:e}}t.BrowserRouter=r.default,t.HashRouter=o.default,t.Link=i.default,t.MemoryRouter=a.default,t.NavLink=s.default,t.Prompt=u.default,t.Redirect=c.default,t.Route=l.default,t.Router=f.default,t.StaticRouter=p.default,t.Switch=d.default,t.generatePath=h.default,t.matchPath=m.default,t.withRouter=y.default},function(e,t,n){e.exports=n(1)(84)},function(e,t,n){e.exports=n(1)(195)},function(e,t,n){e.exports=n(1)(7)},function(e,t,n){e.exports=n(1)(229)},function(e,t,n){e.exports=n(1)(187)},function(e,t,n){e.exports=n(1)(143)},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){e.exports=n(1)(264)},function(e,t,n){e.exports=n(1)(148)},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n(53)),i=s(n(54)),a=n(11);function s(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,i){var s=void 0;"string"==typeof e?(s=(0,a.parsePath)(e)).state=t:(void 0===(s=r({},e)).pathname&&(s.pathname=""),s.search?"?"!==s.search.charAt(0)&&(s.search="?"+s.search):s.search="",s.hash?"#"!==s.hash.charAt(0)&&(s.hash="#"+s.hash):s.hash="",void 0!==t&&void 0===s.state&&(s.state=t));try{s.pathname=decodeURI(s.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+s.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(s.key=n),i?s.pathname?"/"!==s.pathname.charAt(0)&&(s.pathname=(0,o.default)(s.pathname,i.pathname)):s.pathname=i.pathname:s.pathname||(s.pathname="/"),s},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,i.default)(e.state,t.state)}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){e.exports=n(1)(132)},function(e,t,n){e.exports=n(1)(242)},function(e,t,n){"use strict";t.__esModule=!0,t.createPath=t.parsePath=t.locationsAreEqual=t.createLocation=t.createMemoryHistory=t.createHashHistory=t.createBrowserHistory=void 0;var r=n(14);Object.defineProperty(t,"createLocation",{enumerable:!0,get:function(){return r.createLocation}}),Object.defineProperty(t,"locationsAreEqual",{enumerable:!0,get:function(){return r.locationsAreEqual}});var o=n(11);Object.defineProperty(t,"parsePath",{enumerable:!0,get:function(){return o.parsePath}}),Object.defineProperty(t,"createPath",{enumerable:!0,get:function(){return o.createPath}});var i=u(n(55)),a=u(n(56)),s=u(n(57));function u(e){return e&&e.__esModule?e:{default:e}}t.createBrowserHistory=i.default,t.createHashHistory=a.default,t.createMemoryHistory=s.default},function(e,t,n){e.exports=n(1)(19)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(15));t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,r.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,o,i){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof o?o(a,i):((0,r.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==a)}else i(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(58));t.default=r.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(27);t.UnityVersion=o.UnityVersion;var i=r(n(80));t.UnityContent=i.default;var a=r(n(81));t.default=a.default},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(0)),i=u(n(7)),a=u(n(19)),s=n(18);function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},f=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!l(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);(0,a.default)(this.context.router,"You should not use <Link> outside a <Router>"),(0,a.default)(void 0!==t,'You must specify the "to" property');var u=this.context.router.history,c="string"==typeof t?(0,s.createLocation)(t,null,null,u.location):t,l=u.createHref(c);return o.default.createElement("a",r({},i,{onClick:this.handleClick,href:l,ref:n}))},t}(o.default.Component);f.propTypes={onClick:i.default.func,target:i.default.string,replace:i.default.bool,to:i.default.oneOfType([i.default.string,i.default.object]).isRequired,innerRef:i.default.oneOfType([i.default.string,i.default.func])},f.defaultProps={replace:!1},f.contextTypes={router:i.default.shape({history:i.default.shape({push:i.default.func.isRequired,replace:i.default.func.isRequired,createHref:i.default.func.isRequired}).isRequired}).isRequired},t.default=f},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(63));t.default=r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.UNITY_5_6=0]="UNITY_5_6",e[e.UNITY_2017=1]="UNITY_2017",e[e.UNITY_2018=2]="UNITY_2018"}(t.UnityVersion||(t.UnityVersion={}))},function(e,t,n){"use strict"},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(91));t.default={CAROUSEL:function(e){return(0,r.default)({carousel:!0,"carousel-slider":e})},WRAPPER:function(e,t){return(0,r.default)({"thumbs-wrapper":!e,"slider-wrapper":e,"axis-horizontal":"horizontal"===t,"axis-vertical":"horizontal"!==t})},SLIDER:function(e,t){return(0,r.default)({thumbs:!e,slider:e,animated:!t})},ITEM:function(e,t){return(0,r.default)({thumb:!e,slide:e,selected:t})},ARROW_PREV:function(e){return(0,r.default)({"control-arrow control-prev":!0,"control-disabled":e})},ARROW_NEXT:function(e){return(0,r.default)({"control-arrow control-next":!0,"control-disabled":e})},DOT:function(e){return(0,r.default)({dot:!0,selected:e})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return"translate3d"+("("+("horizontal"===t?[e,0,0]:[0,e,0]).join(",")+")")}},function(e,t,n){var r,o,i;o=[t,n(92)],void 0===(i="function"==typeof(r=function(e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(e){return e&&e.__esModule?e:{default:e}}(t);e.default=n.default})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=p(i),s=p(n(7)),u=p(n(31)),c=n(93),l=p(n(32)),f=p(n(33));function p(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return h.call(n),n.state={selectedItem:e.selectedItem,hasMount:!1,firstItem:0,itemSize:null,visibleItems:0,lastPosition:0,showArrows:!1,images:n.getImages()},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"componentDidMount",value:function(e){this.setupThumbs()}},{key:"componentWillReceiveProps",value:function(e,t){e.selectedItem!==this.state.selectedItem&&this.setState({selectedItem:e.selectedItem,firstItem:this.getFirstItem(e.selectedItem)}),e.children!==this.props.children&&this.setState({images:this.getImages()})}},{key:"componentDidUpdate",value:function(e){this.props.children!==e.children&&this.updateSizes()}},{key:"componentWillUnmount",value:function(){this.destroyThumbs()}},{key:"setupThumbs",value:function(){window.addEventListener("resize",this.updateSizes),window.addEventListener("DOMContentLoaded",this.updateSizes),this.updateSizes()}},{key:"destroyThumbs",value:function(){window.removeEventListener("resize",this.updateSizes),window.removeEventListener("DOMContentLoaded",this.updateSizes)}},{key:"getImages",value:function(){var e=i.Children.map(this.props.children,function(e,t){var n=e;return"img"!==e.type&&(n=i.Children.toArray(e.props.children).filter(function(e){return"img"===e.type})[0]),n&&0!==n.length?n:null});return 0===e.filter(function(e){return null!==e}).length?(console.warn("No images found! Can't build the thumb list without images. If you don't need thumbs, set showThumbs={false} in the Carousel. Note that it's not possible to get images rendered inside custom components. More info at https://github.com/leandrowd/react-responsive-carousel/blob/master/TROUBLESHOOTING.md"),null):e}},{key:"getFirstItem",value:function(e){var t=e;return e>=this.state.lastPosition&&(t=this.state.lastPosition),e<this.state.firstItem+this.state.visibleItems&&(t=this.state.firstItem),e<this.state.firstItem&&(t=e),t}},{key:"renderItems",value:function(){var e=this;return this.state.images.map(function(t,n){var o=u.default.ITEM(!1,n===e.state.selectedItem&&e.state.hasMount),i={key:n,ref:function(t){return e.setThumbsRef(t,n)},className:o,onClick:e.handleClickItem.bind(e,n,e.props.children[n]),onKeyDown:e.handleClickItem.bind(e,n,e.props.children[n])};return 0===n&&(t=a.default.cloneElement(t,{onLoad:e.setMountState})),a.default.createElement("li",r({},i,{role:"button",tabIndex:0}),t)})}},{key:"render",value:function(){if(!this.props.children)return null;var e,t=this.state.showArrows&&this.state.firstItem>0,n=this.state.showArrows&&this.state.firstItem<this.state.lastPosition,r=-this.state.firstItem*this.state.itemSize+"px",o=(0,l.default)(r,this.props.axis),i=this.props.transitionTime+"ms";return e={WebkitTransform:o,MozTransform:o,MsTransform:o,OTransform:o,transform:o,msTransform:o,WebkitTransitionDuration:i,MozTransitionDuration:i,MsTransitionDuration:i,OTransitionDuration:i,transitionDuration:i,msTransitionDuration:i},a.default.createElement("div",{className:u.default.CAROUSEL(!1)},a.default.createElement("div",{className:u.default.WRAPPER(!1),ref:this.setItemsWrapperRef},a.default.createElement("button",{type:"button",className:u.default.ARROW_PREV(!t),onClick:this.slideRight}),a.default.createElement(f.default,{tagName:"ul",selectedItem:this.state.selectedItem,className:u.default.SLIDER(!1,this.state.swiping),onSwipeLeft:this.slideLeft,onSwipeRight:this.slideRight,onSwipeMove:this.onSwipeMove,onSwipeStart:this.onSwipeStart,onSwipeEnd:this.onSwipeEnd,style:e,ref:this.setItemsListRef},this.renderItems()),a.default.createElement("button",{type:"button",className:u.default.ARROW_NEXT(!n),onClick:this.slideLeft})))}}]),t}();d.displayName="Thumbs",d.propsTypes={children:s.default.element.isRequired,transitionTime:s.default.number,selectedItem:s.default.number,thumbWidth:s.default.number},d.defaultProps={selectedItem:0,transitionTime:350,axis:"horizontal"};var h=function(){var e=this;this.setItemsWrapperRef=function(t){e.itemsWrapperRef=t},this.setItemsListRef=function(t){e.itemsListRef=t},this.setThumbsRef=function(t,n){e.thumbsRef||(e.thumbsRef=[]),e.thumbsRef[n]=t},this.updateSizes=function(){if(e.props.children&&e.itemsWrapperRef){var t=e.props.children.length,n=e.itemsWrapperRef.clientWidth,r=e.props.thumbWidth?e.props.thumbWidth:(0,c.outerWidth)(e.thumbsRef[0]),o=Math.floor(n/r),i=t-o,a=o<t;e.setState(function(t,n){return{itemSize:r,visibleItems:o,firstItem:a?e.getFirstItem(n.selectedItem):0,lastPosition:i,showArrows:a}})}},this.setMountState=function(){e.setState({hasMount:!0}),e.updateSizes()},this.handleClickItem=function(t,n,r){if(!r.keyCode||"Enter"===r.key){var o=e.props.onSelectItem;"function"==typeof o&&o(t,n)}},this.onSwipeStart=function(){e.setState({swiping:!0})},this.onSwipeEnd=function(){e.setState({swiping:!1})},this.onSwipeMove=function(t){var n=-e.state.firstItem*e.state.itemSize,r=-e.state.visibleItems*e.state.itemSize;0===n&&t>0&&(t=0),n===r&&t<0&&(t=0);var o=n+100/(e.itemsWrapperRef.clientWidth/t)+"%";e.itemsListRef&&["WebkitTransform","MozTransform","MsTransform","OTransform","transform","msTransform"].forEach(function(t){e.itemsListRef.style[t]=(0,l.default)(o,e.props.axis)})},this.slideRight=function(t){e.moveTo(e.state.firstItem-("number"==typeof t?t:1))},this.slideLeft=function(t){e.moveTo(e.state.firstItem+("number"==typeof t?t:1))},this.moveTo=function(t){t=(t=t<0?0:t)>=e.lastPosition?e.lastPosition:t,e.setState({firstItem:t,selectedItem:e.state.selectedItem})}};t.default=d},function(e,t,n){e.exports=n(1)(481)},function(e,t,n){e.exports=n(1)(260)},function(e,t,n){e.exports=n(1)(478)},function(e,t,n){e.exports=n(1)(186)},function(e,t,n){e.exports=n(1)(246)},function(e,t,n){e.exports=n.p+"ca6e18d297f499728270623baa09432b.jpg"},function(e,t,n){e.exports=n.p+"a1d58cf19b77fb6f6917befb472cdc8d.jpg"},function(e,t,n){e.exports=n.p+"88c332112e8e3ec1a787516c75bba4ad.png"},function(e,t,n){e.exports=n.p+"f215b8ab565c09e3da83575440569612.jpg"},function(e,t,n){e.exports=n.p+"f2f30dc7704b93cd414dba2533f7a0f7.jpg"},function(e,t,n){e.exports=n.p+"6254da913578421dc62065fede06f3e9.jpg"},function(e,t,n){e.exports=n.p+"6a50cb30e6d0464aba45ec14263058d2.jpg"},function(e,t,n){e.exports=n(1)(189)},function(e,t,n){"use strict";e.exports=n(95)},function(e,t,n){e.exports=n(1)(253)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DebounceCache=t.onlyResolvesLast=t.debounce=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){return e&&e.__esModule?e:{default:e}}(n(108));var i=t.debounce=function(e,t,n){return(0,o.default)(e,t,n)},a=t.onlyResolvesLast=function(e){var t=void 0;return function(){t&&t();var n=function(e){var t=!1;return{promise:new Promise(function(n,r){e.then(function(e){return t?void 0:n(e)},function(e){return t?void 0:r(e)})}),cancel:function(){t=!0}}}(e.apply(void 0,arguments)),r=n.promise,o=n.cancel;return t=o,r}},s=t.DebounceCache=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.getDebouncedFunction=function(e,n,r,o){var s=r.key,u=r.onlyResolvesLast,c=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(r,["key","onlyResolvesLast"]),l=s.apply(void 0,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(o));if(!t.debounceCache[l]){var f=i(e,n,c);u&&(f=a(f)),t.debounceCache[l]=f}return t.debounceCache[l]},this.debounceCache={}},u={key:function(){return null},onlyResolvesLast:!0};t.default=function(e,t,n){var o=r({},u,n),i=new s;return function(){for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];return i.getDebouncedFunction(e,t,o,r).apply(void 0,r)}}},function(e,t,n){e.exports=n(1)(309)},function(e,t,n){"use strict";t.__esModule=!0;var r=u(n(23)),o=u(n(0)),i=u(n(7)),a=n(18),s=u(n(21));function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.history=(0,a.createBrowserHistory)(r.props),c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,r.default)(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return o.default.createElement(s.default,{history:this.history,children:this.props.children})},t}(o.default.Component);l.propTypes={basename:i.default.string,forceRefresh:i.default.bool,getUserConfirmation:i.default.func,keyLength:i.default.number,children:i.default.node},t.default=l},function(e,t,n){e.exports=n(1)(140)},function(e,t,n){e.exports=n(1)(141)},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=f(n(15)),a=f(n(19)),s=n(14),u=n(11),c=f(n(20)),l=n(24);function f(e){return e&&e.__esModule?e:{default:e}}var p=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(l.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,l.supportsHistory)(),f=!(0,l.supportsPopStateOnHashChange)(),d=e.forceRefresh,h=void 0!==d&&d,m=e.getUserConfirmation,y=void 0===m?l.getConfirmation:m,v=e.keyLength,b=void 0===v?6:v,g=e.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(e.basename)):"",_=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,i.default)(!g||(0,u.hasBasename)(a,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+g+'".'),g&&(a=(0,u.stripBasename)(a,g)),(0,s.createLocation)(a,r,n)},w=function(){return Math.random().toString(36).substr(2,b)},E=(0,c.default)(),S=function(e){o(A,e),A.length=t.length,E.notifyListeners(A.location,A.action)},O=function(e){(0,l.isExtraneousPopstateEvent)(e)||j(_(e.state))},P=function(){j(_(p()))},k=!1,j=function(e){k?(k=!1,S()):E.confirmTransitionTo(e,"POP",y,function(t){t?S({action:"POP",location:e}):R(e)})},R=function(e){var t=A.location,n=x.indexOf(t.key);-1===n&&(n=0);var r=x.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(k=!0,T(o))},C=_(p()),x=[C.key],M=function(e){return g+(0,u.createPath)(e)},T=function(e){t.go(e)},L=0,N=function(e){1===(L+=e)?((0,l.addEventListener)(window,"popstate",O),f&&(0,l.addEventListener)(window,"hashchange",P)):0===L&&((0,l.removeEventListener)(window,"popstate",O),f&&(0,l.removeEventListener)(window,"hashchange",P))},F=!1,A={length:t.length,action:"POP",location:C,createHref:M,push:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,s.createLocation)(e,o,w(),A.location);E.confirmTransitionTo(a,"PUSH",y,function(e){if(e){var r=M(a),o=a.key,s=a.state;if(n)if(t.pushState({key:o,state:s},null,r),h)window.location.href=r;else{var u=x.indexOf(A.location.key),c=x.slice(0,-1===u?0:u+1);c.push(a.key),x=c,S({action:"PUSH",location:a})}else(0,i.default)(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,s.createLocation)(e,o,w(),A.location);E.confirmTransitionTo(a,"REPLACE",y,function(e){if(e){var r=M(a),o=a.key,s=a.state;if(n)if(t.replaceState({key:o,state:s},null,r),h)window.location.replace(r);else{var u=x.indexOf(A.location.key);-1!==u&&(x[u]=a.key),S({action:"REPLACE",location:a})}else(0,i.default)(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:T,goBack:function(){return T(-1)},goForward:function(){return T(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return F||(N(1),F=!0),function(){return F&&(F=!1,N(-1)),t()}},listen:function(e){var t=E.appendListener(e);return N(1),function(){N(-1),t()}}};return A}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n(15)),i=l(n(19)),a=n(14),s=n(11),u=l(n(20)),c=n(24);function l(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,s.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:s.stripLeadingSlash,decodePath:s.addLeadingSlash},slash:{encodePath:s.addLeadingSlash,decodePath:s.addLeadingSlash}},p=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},d=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(c.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,c.supportsGoWithoutReloadUsingHash)(),l=e.getUserConfirmation,h=void 0===l?c.getConfirmation:l,m=e.hashType,y=void 0===m?"slash":m,v=e.basename?(0,s.stripTrailingSlash)((0,s.addLeadingSlash)(e.basename)):"",b=f[y],g=b.encodePath,_=b.decodePath,w=function(){var e=_(p());return(0,o.default)(!v||(0,s.hasBasename)(e,v),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+v+'".'),v&&(e=(0,s.stripBasename)(e,v)),(0,a.createLocation)(e)},E=(0,u.default)(),S=function(e){r(I,e),I.length=t.length,E.notifyListeners(I.location,I.action)},O=!1,P=null,k=function(){var e=p(),t=g(e);if(e!==t)d(t);else{var n=w(),r=I.location;if(!O&&(0,a.locationsAreEqual)(r,n))return;if(P===(0,s.createPath)(n))return;P=null,j(n)}},j=function(e){O?(O=!1,S()):E.confirmTransitionTo(e,"POP",h,function(t){t?S({action:"POP",location:e}):R(e)})},R=function(e){var t=I.location,n=T.lastIndexOf((0,s.createPath)(t));-1===n&&(n=0);var r=T.lastIndexOf((0,s.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(O=!0,L(o))},C=p(),x=g(C);C!==x&&d(x);var M=w(),T=[(0,s.createPath)(M)],L=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},N=0,F=function(e){1===(N+=e)?(0,c.addEventListener)(window,"hashchange",k):0===N&&(0,c.removeEventListener)(window,"hashchange",k)},A=!1,I={length:t.length,action:"POP",location:M,createHref:function(e){return"#"+g(v+(0,s.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,I.location);E.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(v+t);if(p()!==r){P=t,function(e){window.location.hash=e}(r);var i=T.lastIndexOf((0,s.createPath)(I.location)),a=T.slice(0,-1===i?0:i+1);a.push(t),T=a,S({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),S()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,I.location);E.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(v+t);p()!==r&&(P=t,d(r));var o=T.indexOf((0,s.createPath)(I.location));-1!==o&&(T[o]=t),S({action:"REPLACE",location:n})}})},go:L,goBack:function(){return L(-1)},goForward:function(){return L(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return A||(F(1),A=!0),function(){return A&&(A=!1,F(-1)),t()}},listen:function(e){var t=E.appendListener(e);return F(1),function(){F(-1),t()}}};return I}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=c(n(15)),a=n(11),s=n(14),u=c(n(20));function c(e){return e&&e.__esModule?e:{default:e}}var l=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,c=void 0===n?["/"]:n,f=e.initialIndex,p=void 0===f?0:f,d=e.keyLength,h=void 0===d?6:d,m=(0,u.default)(),y=function(e){o(E,e),E.length=E.entries.length,m.notifyListeners(E.location,E.action)},v=function(){return Math.random().toString(36).substr(2,h)},b=l(p,0,c.length-1),g=c.map(function(e){return"string"==typeof e?(0,s.createLocation)(e,void 0,v()):(0,s.createLocation)(e,void 0,e.key||v())}),_=a.createPath,w=function(e){var n=l(E.index+e,0,E.entries.length-1),r=E.entries[n];m.confirmTransitionTo(r,"POP",t,function(e){e?y({action:"POP",location:r,index:n}):y()})},E={length:g.length,action:"POP",location:g[b],index:b,entries:g,createHref:_,push:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,v(),E.location);m.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=E.index+1,n=E.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),y({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,v(),E.location);m.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(E.entries[E.index]=o,y({action:"REPLACE",location:o}))})},go:w,goBack:function(){return w(-1)},goForward:function(){return w(1)},canGo:function(e){var t=E.index+e;return t>=0&&t<E.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return E}},function(e,t,n){e.exports=n(1)(87)},function(e,t,n){"use strict";t.__esModule=!0;var r=u(n(23)),o=u(n(0)),i=u(n(7)),a=n(18),s=u(n(21));function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.history=(0,a.createHashHistory)(r.props),c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,r.default)(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return o.default.createElement(s.default,{history:this.history,children:this.props.children})},t}(o.default.Component);l.propTypes={basename:i.default.string,getUserConfirmation:i.default.func,hashType:i.default.oneOf(["hashbang","noslash","slash"]),children:i.default.node},t.default=l},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(61));t.default=r.default},function(e,t,n){e.exports=n(1)(284)},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=c(n(0)),a=c(n(7)),s=c(n(26)),u=c(n(25));function c(e){return e&&e.__esModule?e:{default:e}}var l=function(e){var t=e.to,n=e.exact,a=e.strict,c=e.location,l=e.activeClassName,f=e.className,p=e.activeStyle,d=e.style,h=e.isActive,m=e["aria-current"],y=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),v="object"===(void 0===t?"undefined":o(t))?t.pathname:t,b=v&&v.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return i.default.createElement(s.default,{path:b,exact:n,strict:a,location:c,children:function(e){var n=e.location,o=e.match,a=!!(h?h(o,n):o);return i.default.createElement(u.default,r({to:t,className:a?[f,l].filter(function(e){return e}).join(" "):f,style:a?r({},d,p):d,"aria-current":a&&m||null},y))}})};l.propTypes={to:u.default.propTypes.to,exact:a.default.bool,strict:a.default.bool,location:a.default.object,activeClassName:a.default.string,className:a.default.string,activeStyle:a.default.object,style:a.default.object,isActive:a.default.func,"aria-current":a.default.oneOf(["page","step","location","date","time","true"])},l.defaultProps={activeClassName:"active","aria-current":"page"},t.default=l},function(e,t,n){e.exports=n(1)(154)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(65));t.default=r.default},function(e,t,n){e.exports=n(1)(288)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(67));t.default=r.default},function(e,t,n){e.exports=n(1)(289)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(69));t.default=r.default},function(e,t,n){e.exports=n(1)(291)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(71));t.default=r.default},function(e,t,n){e.exports=n(1)(292)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(73));t.default=r.default},function(e,t,n){e.exports=n(1)(152)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(75));t.default=r.default},function(e,t,n){e.exports=n(1)(88)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(77));t.default=r.default},function(e,t,n){e.exports=n(1)(293)},function(e,t){},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(27);n(28);var o=function(){function e(t,n,o){var i=o||{};this.buildJsonPath=t,this.unityLoaderJsPath=n,this.uniqueID=++e.uniqueID,this.unityEvents=[],this.unityConfig={modules:i.modules||{},unityVersion:i.unityVersion||r.UnityVersion.UNITY_2018,adjustOnWindowResize:i.adjustOnWindowResize,id:i.id||"nill"}}return e.prototype.setComponentInstance=function(e){this.unityComponent=e},e.prototype.setUnityInstance=function(e){this.unityInstance=e},e.prototype.setFullscreen=function(e){null!=this.unityInstance&&this.unityInstance.SetFullscreen(!0===e?1:0)},e.prototype.send=function(e,t,n){null!=this.unityInstance&&(void 0===n?this.unityInstance.SendMessage(e,t):this.unityInstance.SendMessage(e,t,n))},e.prototype.on=function(e,t){this.unityEvents.push({eventName:e,eventCallback:t}),void 0===window.ReactUnityWebGL&&(window.ReactUnityWebGL={}),window.ReactUnityWebGL[e]=function(e){return t(e)}},e.prototype.triggerUnityEvent=function(e,t){for(var n=0;n<this.unityEvents.length;n++)this.unityEvents[n].eventName===e&&this.unityEvents[n].eventCallback(t)},e.uniqueID=0,e}();t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(82)),s=i(n(87));n(28);var u=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n.unityLoaderService=new s.default,n.onWindowResizeBinding=n.onWindowResize.bind(n),n.unityContent=n.props.unityContent,n.unityContent.setComponentInstance(n),n}return r(t,e),t.prototype.onProgress=function(e,t){this.unityContent.triggerUnityEvent("progress",t),1===t&&this.unityContent.triggerUnityEvent("loaded")},t.prototype.onWindowResize=function(){!0===this.unityContent.unityConfig.adjustOnWindowResize&&this.adjustCanvasToContainer()},t.prototype.adjustCanvasToContainer=function(){var e=this.htmlElement.offsetWidth,t=this.htmlElement.offsetHeight,n=this.htmlElement.getElementsByTagName("canvas")[0];null!==n&&(n.height!==t&&(n.height=t),n.width!==e&&(n.width=e))},t.prototype.componentDidMount=function(){var e=this;window.addEventListener("resize",this.onWindowResizeBinding),this.unityLoaderService.append(this.props.unityContent.unityLoaderJsPath,function(){e.unityContent.setUnityInstance(UnityLoader.instantiate("__ReactUnityWebGL_"+e.props.unityContent.uniqueID+"__",e.props.unityContent.buildJsonPath,{onProgress:e.onProgress.bind(e),Module:e.props.unityContent.unityConfig.modules,width:"100%",height:"100%"}))})},t.prototype.componentWillUnmount=function(){window.removeEventListener("resize",this.onWindowResizeBinding)},t.prototype.render=function(){var e=this;return a.createElement("div",{className:this.props.className||"",ref:function(t){return e.htmlElement=t},id:"__ReactUnityWebGL_"+this.props.unityContent.uniqueID+"__",style:{width:this.props.width||"800px",height:this.props.height||"600px"}})},t}(a.Component);t.default=u},function(e,t,n){"use strict";e.exports=n(83)},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(84),o=n(85),i=n(86),a=n(29),s="function"==typeof Symbol&&Symbol.for,u=s?Symbol.for("react.element"):60103,c=s?Symbol.for("react.portal"):60106,l=s?Symbol.for("react.fragment"):60107,f=s?Symbol.for("react.strict_mode"):60108,p=s?Symbol.for("react.profiler"):60114,d=s?Symbol.for("react.provider"):60109,h=s?Symbol.for("react.context"):60110,m=s?Symbol.for("react.async_mode"):60111,y=s?Symbol.for("react.forward_ref"):60112;s&&Symbol.for("react.timeout");var v="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function _(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||g}function w(){}function E(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||g}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=_.prototype;var S=E.prototype=new w;S.constructor=E,r(S,_.prototype),S.isPureReactComponent=!0;var O={current:null},P=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function j(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)P.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),l=0;l<s;l++)c[l]=arguments[l+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:u,type:e,key:i,ref:a,props:o,_owner:O.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var C=/\/+/g,x=[];function M(e,t,n,r){if(x.length){var o=x.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function T(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>x.length&&x.push(e)}function L(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case u:case c:i=!0}}if(i)return n(r,e,""===t?"."+N(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var s=t+N(o=e[a],a);i+=L(o,s,n,r)}else if(null===e||void 0===e?s=null:s="function"==typeof(s=v&&e[v]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),a=0;!(o=e.next()).done;)i+=L(o=o.value,s=t+N(o,a++),n,r);else"object"===o&&b("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function F(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,a.thatReturnsArgument):null!=e&&(R(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(C,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function I(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(C,"$&/")+"/"),t=M(t,i,r,o),null==e||L(e,"",A,t),T(t)}var D={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=M(null,null,t,n),null==e||L(e,"",F,t),T(t)},count:function(e){return null==e?0:L(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return I(e,t,null,a.thatReturnsArgument),t},only:function(e){return R(e)||b("143"),e}},createRef:function(){return{current:null}},Component:_,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:h,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:y,render:e}},Fragment:l,StrictMode:f,unstable_AsyncMode:m,unstable_Profiler:p,createElement:j,cloneElement:function(e,t,n){(null===e||void 0===e)&&b("267",e);var o=void 0,i=r({},e.props),a=e.key,s=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,c=O.current),void 0!==t.key&&(a=""+t.key);var l=void 0;for(o in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),t)P.call(t,o)&&!k.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==l?l[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){l=Array(o);for(var f=0;f<o;f++)l[f]=arguments[f+2];i.children=l}return{$$typeof:u,type:e.type,key:a,ref:s,props:i,_owner:c}},createFactory:function(e){var t=j.bind(null,e);return t.type=e,t},isValidElement:R,version:"16.4.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:O,assign:r}},U={default:D},W=U&&D||U;e.exports=W.default?W.default:W},function(e,t,n){e.exports=n(1)(56)},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,s,u){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,s,u],f=0;(c=new Error(t.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.documentHead=document.getElementsByTagName("head")[0]}return e.prototype.append=function(e,t){this.unityLoaderScript=document.createElement("script"),this.unityLoaderScript.type="text/javascript",this.unityLoaderScript.async=!0,this.unityLoaderScript.src=e,this.unityLoaderScript.onload=function(){t()},this.documentHead.appendChild(this.unityLoaderScript)},e}();t.default=r},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Thumbs=t.Carousel=void 0;var r=i(n(90)),o=i(n(34));function i(e){return e&&e.__esModule?e:{default:e}}t.Carousel=r.default,t.Thumbs=o.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=h(i),s=h(n(16)),u=h(n(7)),c=h(n(31)),l=h(n(32)),f=h(n(33)),p=h(n(34)),d=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(94));function h(e){return e&&e.__esModule?e:{default:e}}var m=function(){},y=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return v.call(n),n.state={initialized:!1,selectedItem:e.selectedItem,hasMount:!1,isMouseEntered:!1,autoPlay:e.autoPlay},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"componentDidMount",value:function(){this.props.children&&this.setupCarousel()}},{key:"componentWillReceiveProps",value:function(e){var t=this;e.selectedItem!==this.state.selectedItem&&(this.updateSizes(),this.moveTo(e.selectedItem)),e.autoPlay!==this.state.autoPlay&&this.setState({autoPlay:e.autoPlay},function(){t.state.autoPlay?t.setupAutoPlay():t.destroyAutoPlay()})}},{key:"componentDidUpdate",value:function(e,t){e.children||!this.props.children||this.state.initialized||this.setupCarousel(),t.swiping&&!this.state.swiping&&this.resetPosition()}},{key:"componentWillUnmount",value:function(){this.destroyCarousel()}},{key:"setupCarousel",value:function(){this.bindEvents(),this.state.autoPlay&&i.Children.count(this.props.children)>1&&this.setupAutoPlay(),this.setState({initialized:!0});var e=this.getInitialImage();e?e.addEventListener("load",this.setMountState):this.setMountState()}},{key:"destroyCarousel",value:function(){this.state.initialized&&(this.unbindEvents(),this.destroyAutoPlay())}},{key:"setupAutoPlay",value:function(){this.autoPlay();var e=this.carouselWrapperRef;this.props.stopOnHover&&e&&(e.addEventListener("mouseenter",this.stopOnHover),e.addEventListener("mouseleave",this.startOnLeave))}},{key:"destroyAutoPlay",value:function(){this.clearAutoPlay();var e=this.carouselWrapperRef;this.props.stopOnHover&&e&&(e.removeEventListener("mouseenter",this.stopOnHover),e.removeEventListener("mouseleave",this.startOnLeave))}},{key:"bindEvents",value:function(){window.addEventListener("resize",this.updateSizes),window.addEventListener("DOMContentLoaded",this.updateSizes),this.props.useKeyboardArrows&&document.addEventListener("keydown",this.navigateWithKeyboard)}},{key:"unbindEvents",value:function(){window.removeEventListener("resize",this.updateSizes),window.removeEventListener("DOMContentLoaded",this.updateSizes);var e=this.getInitialImage();e&&e.removeEventListener("load",this.setMountState),this.props.useKeyboardArrows&&document.removeEventListener("keydown",this.navigateWithKeyboard)}},{key:"getPosition",value:function(e){this.props.infiniteLoop&&++e;var t=i.Children.count(this.props.children);if(this.props.centerMode&&"horizontal"===this.props.axis){var n=-e*this.props.centerSlidePercentage,r=t-1;return e&&(e!==r||this.props.infiniteLoop)?n+=(100-this.props.centerSlidePercentage)/2:e===r&&(n+=100-this.props.centerSlidePercentage),n}return 100*-e}},{key:"renderItems",value:function(e){var t=this;return i.Children.map(this.props.children,function(n,r){var o={ref:function(e){return t.setItemsRef(e,r)},key:"itemKey"+r+(e?"clone":""),className:c.default.ITEM(!0,r===t.state.selectedItem),onClick:t.handleClickItem.bind(t,r,n)};return t.props.centerMode&&"horizontal"===t.props.axis&&(o.style={minWidth:t.props.centerSlidePercentage+"%"}),a.default.createElement("li",o,n)})}},{key:"renderControls",value:function(){var e=this;return this.props.showIndicators?a.default.createElement("ul",{className:"control-dots"},i.Children.map(this.props.children,function(t,n){return a.default.createElement("li",{className:c.default.DOT(n===e.state.selectedItem),onClick:e.changeItem,onKeyDown:e.changeItem,value:n,key:n,role:"button",tabIndex:0})})):null}},{key:"renderStatus",value:function(){return this.props.showStatus?a.default.createElement("p",{className:"carousel-status"},this.props.statusFormatter(this.state.selectedItem+1,i.Children.count(this.props.children))):null}},{key:"renderThumbs",value:function(){return this.props.showThumbs&&0!==i.Children.count(this.props.children)?a.default.createElement(p.default,{ref:this.setThumbsRef,onSelectItem:this.handleClickThumb,selectedItem:this.state.selectedItem,transitionTime:this.props.transitionTime,thumbWidth:this.props.thumbWidth},this.props.children):null}},{key:"render",value:function(){if(!this.props.children||0===i.Children.count(this.props.children))return null;var e="horizontal"===this.props.axis,t=this.props.showArrows&&i.Children.count(this.props.children)>1,n=t&&(this.state.selectedItem>0||this.props.infiniteLoop),o=t&&(this.state.selectedItem<i.Children.count(this.props.children)-1||this.props.infiniteLoop),s={},u=this.getPosition(this.state.selectedItem),p=(0,l.default)(u+"%",this.props.axis),d=this.props.transitionTime+"ms";s={WebkitTransform:p,MozTransform:p,MsTransform:p,OTransform:p,transform:p,msTransform:p},this.state.swiping||(s=r({},s,{WebkitTransitionDuration:d,MozTransitionDuration:d,MsTransitionDuration:d,OTransitionDuration:d,transitionDuration:d,msTransitionDuration:d}));var h=this.renderItems(!0),m=h.shift(),y=h.pop(),v={selectedItem:this.state.selectedItem,className:c.default.SLIDER(!0,this.state.swiping),onSwipeMove:this.onSwipeMove,onSwipeStart:this.onSwipeStart,onSwipeEnd:this.onSwipeEnd,style:s,tolerance:this.props.swipeScrollTolerance},b={};if(e){if(v.onSwipeLeft=this.onSwipeBackwards,v.onSwipeRight=this.onSwipeForward,this.props.dynamicHeight){var g=this.getVariableImageHeight(this.state.selectedItem);v.style.height=g||"auto",b.height=g||"auto"}}else v.onSwipeUp="natural"===this.props.verticalSwipe?this.onSwipeForward:this.onSwipeBackwards,v.onSwipeDown="natural"===this.props.verticalSwipe?this.onSwipeBackwards:this.onSwipeForward,v.style.height=this.state.itemSize,b.height=this.state.itemSize;return a.default.createElement("div",{className:this.props.className,ref:this.setCarouselWrapperRef},a.default.createElement("div",{className:c.default.CAROUSEL(!0),style:{width:this.props.width}},a.default.createElement("button",{type:"button",className:c.default.ARROW_PREV(!n),onClick:this.onClickPrev}),a.default.createElement("div",{className:c.default.WRAPPER(!0,this.props.axis),style:b,ref:this.setItemsWrapperRef},this.props.swipeable?a.default.createElement(f.default,r({tagName:"ul",ref:this.setListRef},v,{allowMouseEvents:this.props.emulateTouch}),this.props.infiniteLoop&&y,this.renderItems(),this.props.infiniteLoop&&m):a.default.createElement("ul",{className:c.default.SLIDER(!0,this.state.swiping),ref:this.setListRef,style:s},this.props.infiniteLoop&&y,this.renderItems(),this.props.infiniteLoop&&m)),a.default.createElement("button",{type:"button",className:c.default.ARROW_NEXT(!o),onClick:this.onClickNext}),this.renderControls(),this.renderStatus()),this.renderThumbs())}}]),t}();y.displayName="Carousel",y.propTypes={className:u.default.string,children:u.default.node,showArrows:u.default.bool,showStatus:u.default.bool,showIndicators:u.default.bool,infiniteLoop:u.default.bool,showThumbs:u.default.bool,thumbWidth:u.default.number,selectedItem:u.default.number,onClickItem:u.default.func.isRequired,onClickThumb:u.default.func.isRequired,onChange:u.default.func.isRequired,axis:u.default.oneOf(["horizontal","vertical"]),verticalSwipe:u.default.oneOf(["natural","standard"]),width:d.unit,useKeyboardArrows:u.default.bool,autoPlay:u.default.bool,stopOnHover:u.default.bool,interval:u.default.number,transitionTime:u.default.number,swipeScrollTolerance:u.default.number,swipeable:u.default.bool,dynamicHeight:u.default.bool,emulateTouch:u.default.bool,statusFormatter:u.default.func.isRequired,centerMode:u.default.bool,centerSlidePercentage:u.default.number},y.defaultProps={showIndicators:!0,showArrows:!0,showStatus:!0,showThumbs:!0,infiniteLoop:!1,selectedItem:0,axis:"horizontal",verticalSwipe:"standard",width:"100%",useKeyboardArrows:!1,autoPlay:!1,stopOnHover:!0,interval:3e3,transitionTime:350,swipeScrollTolerance:5,swipeable:!0,dynamicHeight:!1,emulateTouch:!1,onClickItem:m,onClickThumb:m,onChange:m,statusFormatter:function(e,t){return e+" of "+t},centerMode:!1,centerSlidePercentage:80};var v=function(){var e=this;this.setThumbsRef=function(t){e.thumbsRef=t},this.setCarouselWrapperRef=function(t){e.carouselWrapperRef=t},this.setListRef=function(t){e.listRef=t},this.setItemsWrapperRef=function(t){e.itemsWrapperRef=t},this.setItemsRef=function(t,n){e.itemsRef||(e.itemsRef=[]),e.itemsRef[n]=t},this.autoPlay=function(){!e.state.autoPlay||i.Children.count(e.props.children)<=1||(clearTimeout(e.timer),e.timer=setTimeout(function(){e.increment()},e.props.interval))},this.clearAutoPlay=function(){e.state.autoPlay&&clearTimeout(e.timer)},this.resetAutoPlay=function(){e.clearAutoPlay(),e.autoPlay()},this.stopOnHover=function(){e.setState({isMouseEntered:!0}),e.clearAutoPlay()},this.startOnLeave=function(){e.setState({isMouseEntered:!1}),e.autoPlay()},this.navigateWithKeyboard=function(t){var n="horizontal"===e.props.axis,r=n?37:38;(n?39:40)===t.keyCode?e.increment():r===t.keyCode&&e.decrement()},this.updateSizes=function(){if(e.state.initialized){var t="horizontal"===e.props.axis,n=e.itemsRef[0],r=t?n.clientWidth:n.clientHeight;e.setState(function(e,n){return{itemSize:r,wrapperSize:t?r*i.Children.count(n.children):r}}),e.thumbsRef&&e.thumbsRef.updateSizes()}},this.setMountState=function(){e.setState({hasMount:!0}),e.updateSizes()},this.handleClickItem=function(t,n){i.Children.count(e.props.children)<=1||(e.state.cancelClick?e.setState({cancelClick:!1}):(e.props.onClickItem(t,n),t!==e.state.selectedItem&&e.setState({selectedItem:t})))},this.handleOnChange=function(t,n){i.Children.count(e.props.children)<=1||e.props.onChange(t,n)},this.handleClickThumb=function(t,n){e.props.onClickThumb(t,n),e.selectItem({selectedItem:t})},this.onSwipeStart=function(){e.setState({swiping:!0}),e.clearAutoPlay()},this.onSwipeEnd=function(){e.setState({swiping:!1}),e.autoPlay()},this.onSwipeMove=function(t){var n="horizontal"===e.props.axis,r=i.Children.count(e.props.children),o=e.getPosition(e.state.selectedItem),a=e.props.infiniteLoop?e.getPosition(r-1)-100:e.getPosition(r-1),s=n?t.x:t.y,u=s;0===o&&s>0&&(u=0),o===a&&s<0&&(u=0);var c=o+100/(e.state.itemSize/u);e.props.infiniteLoop&&(0===e.state.selectedItem&&c>-100?c-=100*r:e.state.selectedItem===r-1&&c<100*-r&&(c+=100*r)),c+="%",e.setPosition(c);var l=Math.abs(s)>e.props.swipeScrollTolerance;return l&&!e.state.cancelClick&&e.setState({cancelClick:!0}),l},this.setPosition=function(t,n){var r=s.default.findDOMNode(e.listRef);["WebkitTransform","MozTransform","MsTransform","OTransform","transform","msTransform"].forEach(function(n){r.style[n]=(0,l.default)(t,e.props.axis)}),n&&r.offsetLeft},this.resetPosition=function(){var t=e.getPosition(e.state.selectedItem)+"%";e.setPosition(t)},this.decrement=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.moveTo(e.state.selectedItem-("number"==typeof t?t:1),n)},this.increment=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.moveTo(e.state.selectedItem+("number"==typeof t?t:1),n)},this.moveTo=function(t,n){var r=i.Children.count(e.props.children)-1,o=e.props.infiniteLoop&&!n&&(t<0||t>r),a=t;t<0&&(t=e.props.infiniteLoop?r:0),t>r&&(t=e.props.infiniteLoop?0:r),o?e.setState({swiping:!0},function(){a<0?e.props.centerMode&&"horizontal"===e.props.axis?e.setPosition("-"+((r+2)*e.props.centerSlidePercentage-(100-e.props.centerSlidePercentage)/2)+"%",!0):e.setPosition("-"+100*(r+2)+"%",!0):a>r&&e.setPosition(0,!0),e.selectItem({selectedItem:t,swiping:!1})}):e.selectItem({selectedItem:t}),e.state.autoPlay&&!1===e.state.isMouseEntered&&e.resetAutoPlay()},this.onClickNext=function(){e.increment(1,!1)},this.onClickPrev=function(){e.decrement(1,!1)},this.onSwipeForward=function(){e.increment(1,!0)},this.onSwipeBackwards=function(){e.decrement(1,!0)},this.changeItem=function(t){if(!t.key||"Enter"===t.key){var n=t.target.value;e.selectItem({selectedItem:n})}},this.selectItem=function(t,n){e.setState(t,n),e.handleOnChange(t.selectedItem,i.Children.toArray(e.props.children)[t.selectedItem])},this.getInitialImage=function(){var t=e.props.selectedItem,n=e.itemsRef&&e.itemsRef[t],r=n&&n.getElementsByTagName("img");return r&&r[t]},this.getVariableImageHeight=function(t){var n=e.itemsRef&&e.itemsRef[t],r=n&&n.getElementsByTagName("img");if(e.state.hasMount&&r.length>0){var o=r[0];if(!o.complete){o.addEventListener("load",function t(){e.forceUpdate(),o.removeEventListener("load",t)})}var i=o.clientHeight;return i>0?i:null}return null}};t.default=y},function(e,t,n){e.exports=n(1)(78)},function(e,t,n){var r,o,i;o=[t,n(0),n(7)],void 0===(i="function"==typeof(r=function(e,t,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setHasSupportToCaptureOption=u;var r=i(t),o=i(n);function i(e){return e&&e.__esModule?e:{default:e}}var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=!1;function u(e){s=e}try{addEventListener("test",null,Object.defineProperty({},"capture",{get:function(){u(!0)}}))}catch(e){}function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{capture:!0};return s?e:e.capture}function l(e){if("touches"in e){var t=e.touches[0],n=t.pageX,r=t.pageY;return{x:n,y:r}}var o=e.screenX,i=e.screenY;return{x:o,y:i}}var f=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i._handleSwipeStart=i._handleSwipeStart.bind(i),i._handleSwipeMove=i._handleSwipeMove.bind(i),i._handleSwipeEnd=i._handleSwipeEnd.bind(i),i._onMouseDown=i._onMouseDown.bind(i),i._onMouseMove=i._onMouseMove.bind(i),i._onMouseUp=i._onMouseUp.bind(i),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.swiper&&this.swiper.addEventListener("touchmove",this._handleSwipeMove,c({capture:!0,passive:!1}))}},{key:"componentWillUnmount",value:function(){this.swiper&&this.swiper.removeEventListener("touchmove",this._handleSwipeMove,c({capture:!0,passive:!1}))}},{key:"_onMouseDown",value:function(e){this.props.allowMouseEvents&&(this.mouseDown=!0,document.addEventListener("mouseup",this._onMouseUp),document.addEventListener("mousemove",this._onMouseMove),this._handleSwipeStart(e))}},{key:"_onMouseMove",value:function(e){this.mouseDown&&this._handleSwipeMove(e)}},{key:"_onMouseUp",value:function(e){this.mouseDown=!1,document.removeEventListener("mouseup",this._onMouseUp),document.removeEventListener("mousemove",this._onMouseMove),this._handleSwipeEnd(e)}},{key:"_handleSwipeStart",value:function(e){var t=l(e),n=t.x,r=t.y;this.moveStart={x:n,y:r},this.props.onSwipeStart(e)}},{key:"_handleSwipeMove",value:function(e){if(this.moveStart){var t=l(e),n=t.x,r=t.y,o=n-this.moveStart.x,i=r-this.moveStart.y;this.moving=!0;var a=this.props.onSwipeMove({x:o,y:i},e);a&&e.preventDefault(),this.movePosition={deltaX:o,deltaY:i}}}},{key:"_handleSwipeEnd",value:function(e){this.props.onSwipeEnd(e);var t=this.props.tolerance;this.moving&&this.movePosition&&(this.movePosition.deltaX<-t?this.props.onSwipeLeft(1,e):this.movePosition.deltaX>t&&this.props.onSwipeRight(1,e),this.movePosition.deltaY<-t?this.props.onSwipeUp(1,e):this.movePosition.deltaY>t&&this.props.onSwipeDown(1,e)),this.moveStart=null,this.moving=!1,this.movePosition=null}},{key:"render",value:function(){var e=this;return r.default.createElement(this.props.tagName,{ref:function(t){return e.swiper=t},onMouseDown:this._onMouseDown,onTouchStart:this._handleSwipeStart,onTouchEnd:this._handleSwipeEnd,className:this.props.className,style:this.props.style},this.props.children)}}]),t}(t.Component);f.displayName="ReactSwipe",f.propTypes={tagName:o.default.string,className:o.default.string,style:o.default.object,children:o.default.node,allowMouseEvents:o.default.bool,onSwipeUp:o.default.func,onSwipeDown:o.default.func,onSwipeLeft:o.default.func,onSwipeRight:o.default.func,onSwipeStart:o.default.func,onSwipeMove:o.default.func,onSwipeEnd:o.default.func,tolerance:o.default.number.isRequired},f.defaultProps={tagName:"div",allowMouseEvents:!1,onSwipeUp:function(){},onSwipeDown:function(){},onSwipeLeft:function(){},onSwipeRight:function(){},onSwipeStart:function(){},onSwipeMove:function(){},onSwipeEnd:function(){},tolerance:0},e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.outerWidth=function(e){var t=e.offsetWidth,n=getComputedStyle(e);return t+=parseInt(n.marginLeft)+parseInt(n.marginRight)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.unit=function(e,t,n){if(!/(pt|px|em|rem|vw|vh|%)$/.test(e[t]))return new Error("Invalid prop `"+t+"` supplied to `"+n+"`. Validation failed. It needs to be a size unit like pt, px, em, rem, vw, %")}},function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(t,"__esModule",{value:!0});var o,i=n(96),a=n(0),s=r(n(97)),u=r(n(98)),c=r(n(102)),l=r(n(104)),f=r(n(105)),p=r(n(106)),d=r(n(107)),h=(o=u({})).Provider,m=o.Consumer;function y(e){var t=function(t){return a.createElement(m,null,function(n){return a.createElement(e,i.__assign({},t,{formik:n}))})};return t.WrappedComponent=e,s(t,e)}function v(e,t,n,r){void 0===r&&(r=0);for(var o=l(t);e&&r<o.length;)e=e[o[r++]];return void 0===e?n:e}function b(e,t,n){for(var r={},o=r,a=0,s=l(t);a<s.length-1;a++){var u=s[a],f=v(e,s.slice(0,a+1));if(o[u])o=o[u];else if(f)o=o[u]=c(f);else{var p=s[a+1];o=o[u]=E(p)&&Number(p)>=0?[]:{}}}if((0===a?e:o)[s[a]]===n)return e;void 0===n?delete o[s[a]]:o[s[a]]=n;var d=i.__assign({},e,r);return 0===a&&void 0===n&&delete d[s[a]],d}function g(e,t,n,r){void 0===n&&(n=new WeakMap),void 0===r&&(r={});for(var o=0,i=Object.keys(e);o<i.length;o++){var a=i[o],s=e[a];w(s)?n.get(s)||(n.set(s,!0),r[a]=Array.isArray(s)?[]:{},g(s,t,n,r[a])):r[a]=t}return r}var _=function(e){return"function"==typeof e},w=function(e){return null!==e&&"object"==typeof e},E=function(e){return String(Math.floor(Number(e)))===e},S=function(e){return"[object String]"===Object.prototype.toString.call(e)},O=function(e){return e!=e},P=function(e){return 0===a.Children.count(e)},k=function(e){return w(e)&&_(e.then)};var j=function(e){function t(t){var n=e.call(this,t)||this;return n.hcCache={},n.hbCache={},n.registerField=function(e,t){n.fields[e]=t},n.unregisterField=function(e){delete n.fields[e]},n.setErrors=function(e){n.setState({errors:e})},n.setTouched=function(e){n.setState({touched:e},function(){n.props.validateOnBlur&&n.runValidations(n.state.values)})},n.setValues=function(e){n.setState({values:e},function(){n.props.validateOnChange&&n.runValidations(e)})},n.setStatus=function(e){n.setState({status:e})},n.setError=function(e){n.setState({error:e})},n.setSubmitting=function(e){n.didMount&&n.setState({isSubmitting:e})},n.validateField=function(e){n.setState({isValidating:!0}),n.runSingleFieldLevelValidation(e,v(n.state.values,e)).then(function(t){n.didMount&&n.setState({errors:b(n.state.errors,e,t),isValidating:!1})})},n.runSingleFieldLevelValidation=function(e,t){return new Promise(function(r){return r(n.fields[e].props.validate(t))}).then(function(e){return e},function(e){return e})},n.runValidationSchema=function(e){return new Promise(function(t){var r=n.props.validationSchema,o=_(r)?r():r;C(e,o).then(function(){t({})},function(e){t(R(e))})})},n.runValidations=function(e){return void 0===e&&(e=n.state.values),n.setState({isValidating:!0}),Promise.all([n.runFieldLevelValidations(e),n.props.validationSchema?n.runValidationSchema(e):{},n.props.validate?n.runValidateHandler(e):{}]).then(function(e){var t=e[0],r=e[1],o=e[2],i=d.all([t,r,o],{arrayMerge:x});return n.didMount&&n.setState({isValidating:!1,errors:i}),i})},n.handleChange=function(e){var t=function(e,t){var r,o=t,a=e;if(!S(e)){e.persist&&e.persist();var s=e.target,u=s.type,c=s.name,l=s.id,f=s.value,p=s.checked;s.outerHTML;o=t||(c||l),a=/number|range/.test(u)?(r=parseFloat(f),O(r)?"":r):/checkbox/.test(u)?p:f}o&&n.setState(function(e){return i.__assign({},e,{values:b(e.values,o,a)})},function(){n.props.validateOnChange&&n.runValidations(b(n.state.values,o,a))})};if(S(e))return _(n.hcCache[e])?n.hcCache[e]:n.hcCache[e]=function(n){return t(n,e)};t(e)},n.setFieldValue=function(e,t,r){void 0===r&&(r=!0),n.didMount&&n.setState(function(n){return i.__assign({},n,{values:b(n.values,e,t)})},function(){n.props.validateOnChange&&r&&n.runValidations(n.state.values)})},n.handleSubmit=function(e){e&&e.preventDefault&&e.preventDefault(),n.submitForm()},n.submitForm=function(){return n.setState(function(e){return{touched:g(e.values,!0),isSubmitting:!0,submitCount:e.submitCount+1}}),n.runValidations().then(function(e){0===Object.keys(e).length?n.executeSubmit():n.didMount&&n.setState({isSubmitting:!1})})},n.executeSubmit=function(){n.props.onSubmit(n.state.values,n.getFormikActions())},n.handleBlur=function(e){var t=function(e,t){e.persist&&e.persist();var r=e.target,o=r.name,i=r.id,a=(r.outerHTML,t||(o||i));n.setState(function(e){return{touched:b(e.touched,a,!0)}}),n.props.validateOnBlur&&n.runValidations(n.state.values)};if(S(e))return _(n.hbCache[e])?n.hbCache[e]:n.hbCache[e]=function(n){return t(n,e)};t(e)},n.setFieldTouched=function(e,t,r){void 0===t&&(t=!0),void 0===r&&(r=!0),n.setState(function(n){return i.__assign({},n,{touched:b(n.touched,e,t)})},function(){n.props.validateOnBlur&&r&&n.runValidations(n.state.values)})},n.setFieldError=function(e,t){n.setState(function(n){return i.__assign({},n,{errors:b(n.errors,e,t)})})},n.resetForm=function(e){var t=e||n.props.initialValues;n.initialValues=t,n.setState({isSubmitting:!1,isValidating:!1,errors:{},touched:{},error:void 0,status:void 0,values:t,submitCount:0})},n.handleReset=function(){if(n.props.onReset){var e=n.props.onReset(n.state.values,n.getFormikActions());k(e)?e.then(n.resetForm):n.resetForm()}else n.resetForm()},n.setFormikState=function(e,t){return n.setState(e,t)},n.getFormikActions=function(){return{resetForm:n.resetForm,submitForm:n.submitForm,validateForm:n.runValidations,validateField:n.validateField,setError:n.setError,setErrors:n.setErrors,setFieldError:n.setFieldError,setFieldTouched:n.setFieldTouched,setFieldValue:n.setFieldValue,setStatus:n.setStatus,setSubmitting:n.setSubmitting,setTouched:n.setTouched,setValues:n.setValues,setFormikState:n.setFormikState}},n.getFormikComputedProps=function(){var e=n.props.isInitialValid,t=!f(n.initialValues,n.state.values);return{dirty:t,isValid:t?n.state.errors&&0===Object.keys(n.state.errors).length:!1!==e&&_(e)?e(n.props):e,initialValues:n.initialValues}},n.getFormikBag=function(){return i.__assign({},n.state,n.getFormikActions(),n.getFormikComputedProps(),{registerField:n.registerField,unregisterField:n.unregisterField,handleBlur:n.handleBlur,handleChange:n.handleChange,handleReset:n.handleReset,handleSubmit:n.handleSubmit,validateOnChange:n.props.validateOnChange,validateOnBlur:n.props.validateOnBlur})},n.getFormikContext=function(){return i.__assign({},n.getFormikBag(),{validationSchema:n.props.validationSchema,validate:n.props.validate,initialValues:n.initialValues})},n.state={values:t.initialValues||{},errors:{},touched:{},isSubmitting:!1,isValidating:!1,submitCount:0},n.didMount=!1,n.fields={},n.initialValues=t.initialValues||{},p(!(t.component&&t.render),"You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored"),p(!(t.component&&t.children&&!P(t.children)),"You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored"),p(!(t.render&&t.children&&!P(t.children)),"You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored"),n}return i.__extends(t,e),t.prototype.componentDidMount=function(){this.didMount=!0},t.prototype.componentWillUnmount=function(){this.didMount=!1},t.prototype.componentDidUpdate=function(e){this.props.enableReinitialize&&!f(e.initialValues,this.props.initialValues)&&(this.initialValues=this.props.initialValues,this.resetForm(this.props.initialValues))},t.prototype.runFieldLevelValidations=function(e){var t=this,n=Object.keys(this.fields).filter(function(e){return t.fields&&t.fields[e]&&t.fields[e].props.validate&&_(t.fields[e].props.validate)}),r=n.length>0?n.map(function(n){return t.runSingleFieldLevelValidation(n,v(e,n))}):[Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];return Promise.all(r).then(function(e){return e.reduce(function(e,t,r){return"DO_NOT_DELETE_YOU_WILL_BE_FIRED"===t?e:(t&&(e=b(e,n[r],t)),e)},{})})},t.prototype.runValidateHandler=function(e){var t=this;return new Promise(function(n){var r=t.props.validate(e);void 0===r?n({}):k(r)?r.then(function(){n({})},function(e){n(e)}):n(r)})},t.prototype.render=function(){var e=this.props,t=e.component,n=e.render,r=e.children,o=this.getFormikBag(),i=this.getFormikContext();return a.createElement(h,{value:i},t?a.createElement(t,o):n?n(o):r?_(r)?r(o):P(r)?null:a.Children.only(r):null)},t.defaultProps={validateOnChange:!0,validateOnBlur:!0,isInitialValid:!1,enableReinitialize:!1},t}(a.Component);function R(e){var t={};if(0===e.inner.length)return b(t,e.path,e.message);for(var n=0,r=e.inner;n<r.length;n++){var o=r[n];t[o.path]||(t=b(t,o.path,o.message))}return t}function C(e,t,n,r){void 0===n&&(n=!1),void 0===r&&(r={});var o={};for(var i in e)if(e.hasOwnProperty(i)){var a=String(i);o[a]=""!==e[a]?e[a]:void 0}return t[n?"validateSync":"validate"](o,{abortEarly:!1,context:r})}function x(e,t,n){var r=e.slice();return t.forEach(function(t,o){if(void 0===r[o]){var i=!1!==n.clone&&n.isMergeableObject(t);r[o]=i?d(Array.isArray(t)?[]:{},t,n):t}else n.isMergeableObject(t)?r[o]=d(e[o],t,n):-1===e.indexOf(t)&&r.push(t)}),r}var M=y(function(e){function t(t){var n=e.call(this,t)||this,r=t.render,o=t.children,i=t.component;return p(!(i&&r),"You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored"),p(!(i&&o&&_(o)),"You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored."),p(!(r&&o&&!P(o)),"You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored"),n}return i.__extends(t,e),t.prototype.componentDidMount=function(){this.props.formik.registerField(this.props.name,this)},t.prototype.componentDidUpdate=function(e){this.props.name!==e.name&&(this.props.formik.unregisterField(e.name),this.props.formik.registerField(this.props.name,this)),this.props.validate!==e.validate&&this.props.formik.registerField(this.props.name,this)},t.prototype.componentWillUnmount=function(){this.props.formik.unregisterField(this.props.name)},t.prototype.render=function(){var e=this.props,t=(e.validate,e.name),n=e.render,r=e.children,o=e.component,s=void 0===o?"input":o,u=e.formik,c=i.__rest(e,["validate","name","render","children","component","formik"]),l=(u.validate,u.validationSchema,i.__rest(u,["validate","validationSchema"])),f={value:"radio"===c.type||"checkbox"===c.type?c.value:v(u.values,t),name:t,onChange:u.handleChange,onBlur:u.handleBlur},p={field:f,form:l};if(n)return n(p);if(_(r))return r(p);if("string"==typeof s){var d=c.innerRef,h=i.__rest(c,["innerRef"]);return a.createElement(s,i.__assign({ref:d},f,h,{children:r}))}return a.createElement(s,i.__assign({},p,c,{children:r}))},t}(a.Component)),T=y(function(e){var t=e.formik,n=t.handleReset,r=t.handleSubmit,o=i.__rest(e,["formik"]);return a.createElement("form",i.__assign({onReset:n,onSubmit:r},o))});T.displayName="Form";var L=function(e,t,n){var r=(e||[]).slice(),o=r[t];return r.splice(t,1),r.splice(n,0,o),r},N=function(e,t,n){var r=(e||[]).slice(),o=r[t];return r[t]=r[n],r[n]=o,r},F=function(e,t,n){var r=(e||[]).slice();return r.splice(t,0,n),r},A=function(e,t,n){var r=(e||[]).slice();return r[t]=n,r},I=y(function(e){function t(t){var n=e.call(this,t)||this;return n.updateArrayField=function(e,t,r){var o=n.props,a=o.name,s=o.validateOnChange,u=o.formik,c=u.setFormikState,l=u.validateForm,f=u.values,p=u.touched,d=u.errors;c(function(n){return i.__assign({},n,{values:b(n.values,a,e(v(f,a))),errors:r?b(n.errors,a,e(v(d,a))):n.errors,touched:t?b(n.touched,a,e(v(p,a))):n.touched})},function(){s&&l()})},n.push=function(e){return n.updateArrayField(function(t){return(t||[]).concat([c(e)])},!1,!1)},n.handlePush=function(e){return function(){return n.push(e)}},n.swap=function(e,t){return n.updateArrayField(function(n){return N(n,e,t)},!0,!0)},n.handleSwap=function(e,t){return function(){return n.swap(e,t)}},n.move=function(e,t){return n.updateArrayField(function(n){return L(n,e,t)},!0,!0)},n.handleMove=function(e,t){return function(){return n.move(e,t)}},n.insert=function(e,t){return n.updateArrayField(function(n){return F(n,e,t)},!0,!0)},n.handleInsert=function(e,t){return function(){return n.insert(e,t)}},n.replace=function(e,t){return n.updateArrayField(function(n){return A(n,e,t)},!1,!1)},n.handleReplace=function(e,t){return function(){return n.replace(e,t)}},n.unshift=function(e){var t=-1;return n.updateArrayField(function(n){var r=n?[e].concat(n):[e];return t<0&&(t=r.length),r},!0,!0),t},n.handleUnshift=function(e){return function(){return n.unshift(e)}},n.handleRemove=function(e){return function(){return n.remove(e)}},n.handlePop=function(){return function(){return n.pop()}},n.remove=n.remove.bind(n),n.pop=n.pop.bind(n),n}return i.__extends(t,e),t.prototype.remove=function(e){var t;return this.updateArrayField(function(n){var r=n?n.slice():[];return t||(t=r[e]),_(r.splice)&&r.splice(e,1),r},!0,!0),t},t.prototype.pop=function(){var e;return this.updateArrayField(function(t){var n=t;return e||(e=n&&n.pop&&n.pop()),n},!0,!0),e},t.prototype.render=function(){var e={push:this.push,pop:this.pop,swap:this.swap,move:this.move,insert:this.insert,replace:this.replace,unshift:this.unshift,remove:this.remove,handlePush:this.handlePush,handlePop:this.handlePop,handleSwap:this.handleSwap,handleMove:this.handleMove,handleInsert:this.handleInsert,handleReplace:this.handleReplace,handleUnshift:this.handleUnshift,handleRemove:this.handleRemove},t=this.props,n=t.component,r=t.render,o=t.children,s=t.name,u=t.formik,c=(u.validate,u.validationSchema,i.__rest(u,["validate","validationSchema"])),l=i.__assign({},e,{form:c,name:s});return n?a.createElement(n,l):r?r(l):o?"function"==typeof o?o(l):P(o)?null:a.Children.only(o):null},t.defaultProps={validateOnChange:!0},t}(a.Component)),D=y(function(e){function t(t){var n=e.call(this,t)||this,r=t.render,o=t.children,i=t.component;return p(!(i&&r),"You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored"),p(!(i&&o&&_(o)),"You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored."),p(!(r&&o&&!P(o)),"You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored"),n}return i.__extends(t,e),t.prototype.shouldComponentUpdate=function(e){return this.props.shouldUpdate?this.props.shouldUpdate(e,this.props):v(this.props.formik.values,this.props.name)!==v(e.formik.values,this.props.name)||v(this.props.formik.errors,this.props.name)!==v(e.formik.errors,this.props.name)||v(this.props.formik.touched,this.props.name)!==v(e.formik.touched,this.props.name)||Object.keys(this.props).length!==Object.keys(e).length||this.props.formik.isSubmitting!==e.formik.isSubmitting},t.prototype.componentDidMount=function(){this.props.formik.registerField(this.props.name,this)},t.prototype.componentDidUpdate=function(e){this.props.name!==e.name&&(this.props.formik.unregisterField(e.name),this.props.formik.registerField(this.props.name,this)),this.props.validate!==e.validate&&this.props.formik.registerField(this.props.name,this)},t.prototype.componentWillUnmount=function(){this.props.formik.unregisterField(this.props.name)},t.prototype.render=function(){var e=this.props,t=(e.validate,e.name),n=e.render,r=e.children,o=e.component,s=void 0===o?"input":o,u=e.formik,c=i.__rest(e,["validate","name","render","children","component","formik"]),l=(u.validate,u.validationSchema,i.__rest(u,["validate","validationSchema"])),f={value:"radio"===c.type||"checkbox"===c.type?c.value:v(u.values,t),name:t,onChange:u.handleChange,onBlur:u.handleBlur},p={field:f,form:l};if(n)return n(p);if(_(r))return r(p);if("string"==typeof s){var d=c.innerRef,h=i.__rest(c,["innerRef"]);return a.createElement(s,i.__assign({ref:d},f,h,{children:r}))}return a.createElement(s,i.__assign({},p,c,{children:r}))},t}(a.Component)),U=y(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i.__extends(t,e),t.prototype.shouldComponentUpdate=function(e){return v(this.props.formik.errors,this.props.name)!==v(e.formik.errors,this.props.name)||v(this.props.formik.touched,this.props.name)!==v(e.formik.touched,this.props.name)||Object.keys(this.props).length!==Object.keys(e).length},t.prototype.render=function(){var e=this.props,t=e.component,n=e.formik,r=e.render,o=e.children,s=e.name,u=i.__rest(e,["component","formik","render","children","name"]),c=v(n.touched,s),l=v(n.errors,s);return c&&l?r?_(r)?r(l):null:o?_(o)?o(l):null:t?a.createElement(t,u,l):l:null},t}(a.Component));t.Formik=j,t.yupToFormErrors=R,t.validateYupSchema=C,t.Field=M,t.Form=T,t.withFormik=function(e){var t=e.mapPropsToValues,n=void 0===t?function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&"function"!=typeof e[n]&&(t[n]=e[n]);return t}:t,r=i.__rest(e,["mapPropsToValues"]);return function(e){var t=e.displayName||e.name||e.constructor&&e.constructor.name||"Component",o=function(o){function s(){var t=null!==o&&o.apply(this,arguments)||this;return t.validate=function(e){return r.validate(e,t.props)},t.validationSchema=function(){return _(r.validationSchema)?r.validationSchema(t.props):r.validationSchema},t.handleSubmit=function(e,n){return r.handleSubmit(e,i.__assign({},n,{props:t.props}))},t.renderFormComponent=function(n){return a.createElement(e,i.__assign({},t.props,n))},t}return i.__extends(s,o),s.prototype.render=function(){var e=this.props,t=(e.children,i.__rest(e,["children"]));return a.createElement(j,i.__assign({},t,r,{validate:r.validate&&this.validate,validationSchema:r.validationSchema&&this.validationSchema,initialValues:n(this.props),onSubmit:this.handleSubmit,render:this.renderFormComponent}))},s.displayName="WithFormik("+t+")",s}(a.Component);return s(o,e)}},t.move=L,t.swap=N,t.insert=F,t.replace=A,t.FieldArray=I,t.getIn=v,t.setIn=b,t.setNestedObjectValues=g,t.isFunction=_,t.isObject=w,t.isInteger=E,t.isString=S,t.isNaN=O,t.isEmptyChildren=P,t.isPromise=k,t.getActiveElement=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}},t.FastField=D,t.FormikProvider=h,t.FormikConsumer=m,t.connect=y,t.ErrorMessage=U},function(e,t,n){var r,o,i,a,s,u,c,l,f,p,d,h,m,y,v,b,g,_,w,E;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */!function(n){var S="object"==typeof global?global:"object"==typeof self?self:"object"==typeof this?this:{};function O(e,t){return e!==S&&("function"==typeof Object.create?Object.defineProperty(e,"__esModule",{value:!0}):e.__esModule=!0),function(n,r){return e[n]=t?t(n,r):r}}void 0===(r=function(e){!function(e){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};o=function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)},i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var o=0,r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]]);return n},s=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},u=function(e,t){return function(n,r){t(n,r,e)}},c=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},l=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}u((r=r.apply(e,t||[])).next())})},f=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},p=function(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])},d=function(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}},h=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},m=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(h(arguments[t]));return e},y=function(e){return this instanceof y?(this.v=e,this):new y(e)},v=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise(function(n,r){i.push([e,t,n,r])>1||s(e,t)})})}function s(e,t){try{!function(e){e.value instanceof y?Promise.resolve(e.value.v).then(u,c):l(i[0][2],e)}(o[e](t))}catch(e){l(i[0][3],e)}}function u(e){s("next",e)}function c(e){s("throw",e)}function l(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}},b=function(e){var t,n;return t={},r("next"),r("throw",function(e){throw e}),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:y(e[r](t)),done:"return"===r}:o?o(t):t}:o}},g=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e="function"==typeof d?d(e):e[Symbol.iterator](),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise(function(r,o){t=e[n](t),function(e,t,n,r){Promise.resolve(r).then(function(t){e({value:t,done:n})},t)}(r,o,t.done,t.value)})}}},_=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},w=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},E=function(e){return e&&e.__esModule?e:{default:e}},e("__extends",o),e("__assign",i),e("__rest",a),e("__decorate",s),e("__param",u),e("__metadata",c),e("__awaiter",l),e("__generator",f),e("__exportStar",p),e("__values",d),e("__read",h),e("__spread",m),e("__await",y),e("__asyncGenerator",v),e("__asyncDelegator",b),e("__asyncValues",g),e("__makeTemplateObject",_),e("__importStar",w),e("__importDefault",E)}(O(S,O(e)))}.apply(t,[t]))||(e.exports=r)}()},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,u=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,l=c&&c(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(l){var p=c(n);p&&p!==l&&e(t,p,f)}var d=a(n);s&&(d=d.concat(s(n)));for(var h=0;h<d.length;++h){var m=d[h];if(!(r[m]||o[m]||f&&f[m])){var y=u(n,m);try{i(t,m,y)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(0)),o=i(n(99));function i(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.createContext||o.default,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0),o=(a(r),a(n(7))),i=a(n(100));a(n(101));function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var l=1073741823;t.default=function(e,t){var n,a,f="__create-react-context-"+(0,i.default)()+"__",p=function(e){function n(){var t,r;s(this,n);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return t=r=u(this,e.call.apply(e,[this].concat(i))),r.emitter=function(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter(function(t){return t!==e})},get:function(){return e},set:function(n,r){e=n,t.forEach(function(t){return t(e,r)})}}}(r.props.value),u(r,t)}return c(n,e),n.prototype.getChildContext=function(){var e;return(e={})[f]=this.emitter,e},n.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n=this.props.value,r=e.value,o=void 0;!function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,r)?(o="function"==typeof t?t(n,r):l,0!=(o|=0)&&this.emitter.set(e.value,o)):o=0}},n.prototype.render=function(){return this.props.children},n}(r.Component);p.childContextTypes=((n={})[f]=o.default.object.isRequired,n);var d=function(t){function n(){var e,r;s(this,n);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=u(this,t.call.apply(t,[this].concat(i))),r.state={value:r.getValue()},r.onUpdate=function(e,t){0!=((0|r.observedBits)&t)&&r.setState({value:r.getValue()})},u(r,e)}return c(n,t),n.prototype.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=void 0===t||null===t?l:t},n.prototype.componentDidMount=function(){this.context[f]&&this.context[f].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=void 0===e||null===e?l:e},n.prototype.componentWillUnmount=function(){this.context[f]&&this.context[f].off(this.onUpdate)},n.prototype.getValue=function(){return this.context[f]?this.context[f].get():e},n.prototype.render=function(){return function(e){return Array.isArray(e)?e[0]:e}(this.props.children)(this.state.value)},n}(r.Component);return d.contextTypes=((a={})[f]=o.default.object,a),{Provider:p,Consumer:d}},e.exports=t.default},function(e,t,n){"use strict";var r="__global_unique_id__";e.exports=function(){return global[r]=(global[r]||0)+1}},function(e,t,n){"use strict";var r=n(29);e.exports=r},function(e,t,n){(function(e){var n=200,r="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",a="[object Boolean]",s="[object Date]",u="[object Function]",c="[object GeneratorFunction]",l="[object Map]",f="[object Number]",p="[object Object]",d="[object RegExp]",h="[object Set]",m="[object String]",y="[object Symbol]",v="[object ArrayBuffer]",b="[object DataView]",g="[object Float32Array]",_="[object Float64Array]",w="[object Int8Array]",E="[object Int16Array]",S="[object Int32Array]",O="[object Uint8Array]",P="[object Uint8ClampedArray]",k="[object Uint16Array]",j="[object Uint32Array]",R=/\w*$/,C=/^\[object .+?Constructor\]$/,x=/^(?:0|[1-9]\d*)$/,M={};M[i]=M["[object Array]"]=M[v]=M[b]=M[a]=M[s]=M[g]=M[_]=M[w]=M[E]=M[S]=M[l]=M[f]=M[p]=M[d]=M[h]=M[m]=M[y]=M[O]=M[P]=M[k]=M[j]=!0,M["[object Error]"]=M[u]=M["[object WeakMap]"]=!1;var T="object"==typeof global&&global&&global.Object===Object&&global,L="object"==typeof self&&self&&self.Object===Object&&self,N=T||L||Function("return this")(),F=t&&!t.nodeType&&t,A=F&&"object"==typeof e&&e&&!e.nodeType&&e,I=A&&A.exports===F;function D(e,t){return e.set(t[0],t[1]),e}function U(e,t){return e.add(t),e}function W(e,t,n,r){var o=-1,i=e?e.length:0;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function B(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function z(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function V(e,t){return function(n){return e(t(n))}}function H(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}var q=Array.prototype,G=Function.prototype,$=Object.prototype,J=N["__core-js_shared__"],Y=function(){var e=/[^.]+$/.exec(J&&J.keys&&J.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),K=G.toString,X=$.hasOwnProperty,Q=$.toString,Z=RegExp("^"+K.call(X).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ee=I?N.Buffer:void 0,te=N.Symbol,ne=N.Uint8Array,re=V(Object.getPrototypeOf,Object),oe=Object.create,ie=$.propertyIsEnumerable,ae=q.splice,se=Object.getOwnPropertySymbols,ue=ee?ee.isBuffer:void 0,ce=V(Object.keys,Object),le=Fe(N,"DataView"),fe=Fe(N,"Map"),pe=Fe(N,"Promise"),de=Fe(N,"Set"),he=Fe(N,"WeakMap"),me=Fe(Object,"create"),ye=We(le),ve=We(fe),be=We(pe),ge=We(de),_e=We(he),we=te?te.prototype:void 0,Ee=we?we.valueOf:void 0;function Se(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Oe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Pe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ke(e){this.__data__=new Oe(e)}function je(e,t){var n=ze(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&Ve(e)}(e)&&X.call(e,"callee")&&(!ie.call(e,"callee")||Q.call(e)==i)}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,o=!!r;for(var a in e)!t&&!X.call(e,a)||o&&("length"==a||De(a,r))||n.push(a);return n}function Re(e,t,n){var r=e[t];X.call(e,t)&&Be(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function Ce(e,t){for(var n=e.length;n--;)if(Be(e[n][0],t))return n;return-1}function xe(e,t,n,r,o,C,x){var T;if(r&&(T=C?r(e,o,C,x):r(e)),void 0!==T)return T;if(!Ge(e))return e;var L=ze(e);if(L){if(T=function(e){var t=e.length,n=e.constructor(t);t&&"string"==typeof e[0]&&X.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!t)return function(e,t){var n=-1,r=e.length;t||(t=Array(r));for(;++n<r;)t[n]=e[n];return t}(e,T)}else{var N=Ie(e),F=N==u||N==c;if(He(e))return function(e,t){if(t)return e.slice();var n=new e.constructor(e.length);return e.copy(n),n}(e,t);if(N==p||N==i||F&&!C){if(B(e))return C?e:{};if(T=function(e){return"function"!=typeof e.constructor||Ue(e)?{}:function(e){return Ge(e)?oe(e):{}}(re(e))}(F?{}:e),!t)return function(e,t){return Le(e,Ae(e),t)}(e,function(e,t){return e&&Le(t,$e(t),e)}(T,e))}else{if(!M[N])return C?e:{};T=function(e,t,n,r){var o=e.constructor;switch(t){case v:return Te(e);case a:case s:return new o(+e);case b:return function(e,t){var n=t?Te(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,r);case g:case _:case w:case E:case S:case O:case P:case k:case j:return function(e,t){var n=t?Te(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}(e,r);case l:return function(e,t,n){return W(t?n(z(e),!0):z(e),D,new e.constructor)}(e,r,n);case f:case m:return new o(e);case d:return function(e){var t=new e.constructor(e.source,R.exec(e));return t.lastIndex=e.lastIndex,t}(e);case h:return function(e,t,n){return W(t?n(H(e),!0):H(e),U,new e.constructor)}(e,r,n);case y:return function(e){return Ee?Object(Ee.call(e)):{}}(e)}}(e,N,xe,t)}}x||(x=new ke);var A=x.get(e);if(A)return A;if(x.set(e,T),!L)var I=n?function(e){return function(e,t,n){var r=t(e);return ze(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,$e,Ae)}(e):$e(e);return function(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););}(I||e,function(o,i){I&&(o=e[i=o]),Re(T,i,xe(o,t,n,r,i,e,x))}),T}function Me(e){return!(!Ge(e)||function(e){return!!Y&&Y in e}(e))&&(qe(e)||B(e)?Z:C).test(We(e))}function Te(e){var t=new e.constructor(e.byteLength);return new ne(t).set(new ne(e)),t}function Le(e,t,n,r){n||(n={});for(var o=-1,i=t.length;++o<i;){var a=t[o],s=r?r(n[a],e[a],a,n,e):void 0;Re(n,a,void 0===s?e[a]:s)}return n}function Ne(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function Fe(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Me(n)?n:void 0}Se.prototype.clear=function(){this.__data__=me?me(null):{}},Se.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},Se.prototype.get=function(e){var t=this.__data__;if(me){var n=t[e];return n===r?void 0:n}return X.call(t,e)?t[e]:void 0},Se.prototype.has=function(e){var t=this.__data__;return me?void 0!==t[e]:X.call(t,e)},Se.prototype.set=function(e,t){return this.__data__[e]=me&&void 0===t?r:t,this},Oe.prototype.clear=function(){this.__data__=[]},Oe.prototype.delete=function(e){var t=this.__data__,n=Ce(t,e);return!(n<0||(n==t.length-1?t.pop():ae.call(t,n,1),0))},Oe.prototype.get=function(e){var t=this.__data__,n=Ce(t,e);return n<0?void 0:t[n][1]},Oe.prototype.has=function(e){return Ce(this.__data__,e)>-1},Oe.prototype.set=function(e,t){var n=this.__data__,r=Ce(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},Pe.prototype.clear=function(){this.__data__={hash:new Se,map:new(fe||Oe),string:new Se}},Pe.prototype.delete=function(e){return Ne(this,e).delete(e)},Pe.prototype.get=function(e){return Ne(this,e).get(e)},Pe.prototype.has=function(e){return Ne(this,e).has(e)},Pe.prototype.set=function(e,t){return Ne(this,e).set(e,t),this},ke.prototype.clear=function(){this.__data__=new Oe},ke.prototype.delete=function(e){return this.__data__.delete(e)},ke.prototype.get=function(e){return this.__data__.get(e)},ke.prototype.has=function(e){return this.__data__.has(e)},ke.prototype.set=function(e,t){var r=this.__data__;if(r instanceof Oe){var o=r.__data__;if(!fe||o.length<n-1)return o.push([e,t]),this;r=this.__data__=new Pe(o)}return r.set(e,t),this};var Ae=se?V(se,Object):function(){return[]},Ie=function(e){return Q.call(e)};function De(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||x.test(e))&&e>-1&&e%1==0&&e<t}function Ue(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||$)}function We(e){if(null!=e){try{return K.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Be(e,t){return e===t||e!=e&&t!=t}(le&&Ie(new le(new ArrayBuffer(1)))!=b||fe&&Ie(new fe)!=l||pe&&"[object Promise]"!=Ie(pe.resolve())||de&&Ie(new de)!=h||he&&"[object WeakMap]"!=Ie(new he))&&(Ie=function(e){var t=Q.call(e),n=t==p?e.constructor:void 0,r=n?We(n):void 0;if(r)switch(r){case ye:return b;case ve:return l;case be:return"[object Promise]";case ge:return h;case _e:return"[object WeakMap]"}return t});var ze=Array.isArray;function Ve(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}(e.length)&&!qe(e)}var He=ue||function(){return!1};function qe(e){var t=Ge(e)?Q.call(e):"";return t==u||t==c}function Ge(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function $e(e){return Ve(e)?je(e):function(e){if(!Ue(e))return ce(e);var t=[];for(var n in Object(e))X.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)}e.exports=function(e){return xe(e,!0,!0)}}).call(this,n(103)(e))},function(e,t,n){e.exports=n(1)(277)},function(e,t){var n="Expected a function",r="__lodash_hash_undefined__",o=1/0,i="[object Function]",a="[object GeneratorFunction]",s="[object Symbol]",u=/^\./,c=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,l=/\\(\\)?/g,f=/^\[object .+?Constructor\]$/,p="object"==typeof global&&global&&global.Object===Object&&global,d="object"==typeof self&&self&&self.Object===Object&&self,h=p||d||Function("return this")();var m=Array.prototype,y=Function.prototype,v=Object.prototype,b=h["__core-js_shared__"],g=function(){var e=/[^.]+$/.exec(b&&b.keys&&b.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),_=y.toString,w=v.hasOwnProperty,E=v.toString,S=RegExp("^"+_.call(w).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),O=h.Symbol,P=m.splice,k=A(h,"Map"),j=A(Object,"create"),R=O?O.prototype:void 0,C=R?R.toString:void 0;function x(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function M(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function T(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function L(e,t){for(var n=e.length;n--;)if(W(e[n][0],t))return n;return-1}function N(e){return!(!z(e)||function(e){return!!g&&g in e}(e))&&(function(e){var t=z(e)?E.call(e):"";return t==i||t==a}(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e)?S:f).test(function(e){if(null!=e){try{return _.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}function F(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function A(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return N(n)?n:void 0}x.prototype.clear=function(){this.__data__=j?j(null):{}},x.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},x.prototype.get=function(e){var t=this.__data__;if(j){var n=t[e];return n===r?void 0:n}return w.call(t,e)?t[e]:void 0},x.prototype.has=function(e){var t=this.__data__;return j?void 0!==t[e]:w.call(t,e)},x.prototype.set=function(e,t){return this.__data__[e]=j&&void 0===t?r:t,this},M.prototype.clear=function(){this.__data__=[]},M.prototype.delete=function(e){var t=this.__data__,n=L(t,e);return!(n<0||(n==t.length-1?t.pop():P.call(t,n,1),0))},M.prototype.get=function(e){var t=this.__data__,n=L(t,e);return n<0?void 0:t[n][1]},M.prototype.has=function(e){return L(this.__data__,e)>-1},M.prototype.set=function(e,t){var n=this.__data__,r=L(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},T.prototype.clear=function(){this.__data__={hash:new x,map:new(k||M),string:new x}},T.prototype.delete=function(e){return F(this,e).delete(e)},T.prototype.get=function(e){return F(this,e).get(e)},T.prototype.has=function(e){return F(this,e).has(e)},T.prototype.set=function(e,t){return F(this,e).set(e,t),this};var I=U(function(e){e=function(e){return null==e?"":function(e){if("string"==typeof e)return e;if(V(e))return C?C.call(e):"";var t=e+"";return"0"==t&&1/e==-o?"-0":t}(e)}(e);var t=[];return u.test(e)&&t.push(""),e.replace(c,function(e,n,r,o){t.push(r?o.replace(l,"$1"):n||e)}),t});function D(e){if("string"==typeof e||V(e))return e;var t=e+"";return"0"==t&&1/e==-o?"-0":t}function U(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError(n);var r=function(){var n=arguments,o=t?t.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var a=e.apply(this,n);return r.cache=i.set(o,a),a};return r.cache=new(U.Cache||T),r}function W(e,t){return e===t||e!=e&&t!=t}U.Cache=T;var B=Array.isArray;function z(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function V(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&E.call(e)==s}e.exports=function(e){return B(e)?function(e,t){for(var n=-1,r=e?e.length:0,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}(e,D):V(e)?[e]:function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}(I(e))}},function(e,t,n){"use strict";var r=Array.isArray,o=Object.keys,i=Object.prototype.hasOwnProperty;e.exports=function(e,t){try{return function e(t,n){if(t===n)return!0;var a,s,u,c=r(t),l=r(n);if(c&&l){if((s=t.length)!=n.length)return!1;for(a=0;a<s;a++)if(!e(t[a],n[a]))return!1;return!0}if(c!=l)return!1;var f=t instanceof Date,p=n instanceof Date;if(f!=p)return!1;if(f&&p)return t.getTime()==n.getTime();var d=t instanceof RegExp,h=n instanceof RegExp;if(d!=h)return!1;if(d&&h)return t.toString()==n.toString();if(t instanceof Object&&n instanceof Object){var m=o(t);if((s=m.length)!==o(n).length)return!1;for(a=0;a<s;a++)if(!i.call(n,m[a]))return!1;for(a=0;a<s;a++)if(!("_owner"===(u=m[a])&&t.$$typeof&&t._store||e(t[u],n[u])))return!1;return!0}return!1}(e,t)}catch(e){if(e.message&&e.message.match(/stack|recursion/i))return console.warn("Warning: react-fast-compare does not handle circular references.",e.name,e.message),!1;throw e}}},function(e,t,n){e.exports=n(1)(59)},function(e,t,n){e.exports=function(){"use strict";var e=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var n=Object.prototype.toString.call(e);return"[object RegExp]"===n||"[object Date]"===n||function(e){return e.$$typeof===t}(e)}(e)},t="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function n(e,t){return!1!==t.clone&&t.isMergeableObject(e)?o(function(e){return Array.isArray(e)?[]:{}}(e),e,t):e}function r(e,t,r){return e.concat(t).map(function(e){return n(e,r)})}function o(t,i,a){(a=a||{}).arrayMerge=a.arrayMerge||r,a.isMergeableObject=a.isMergeableObject||e;var s=Array.isArray(i),u=Array.isArray(t),c=s===u;return c?s?a.arrayMerge(t,i,a):function(e,t,r){var i={};return r.isMergeableObject(e)&&Object.keys(e).forEach(function(t){i[t]=n(e[t],r)}),Object.keys(t).forEach(function(a){r.isMergeableObject(t[a])&&e[a]?i[a]=o(e[a],t[a],r):i[a]=n(t[a],r)}),i}(t,i,a):n(i,a)}return o.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,n){return o(e,n,t)},{})},o}()},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=void 0,i=void 0,a=void 0,s=[];return function(){var u=function(e){return"function"==typeof e?e():e}(t),c=(new Date).getTime(),l=!o||c-o>u;o=c;for(var f=arguments.length,p=Array(f),d=0;d<f;d++)p[d]=arguments[d];if(l&&n.leading)return n.accumulate?Promise.resolve(e.call(this,[p])).then(function(e){return e[0]}):Promise.resolve(e.call.apply(e,[this].concat(p)));if(i?clearTimeout(a):i=function(){var e={};return e.promise=new Promise(function(t,n){e.resolve=t,e.reject=n}),e}(),s.push(p),a=setTimeout(function(){var t=i;clearTimeout(a),Promise.resolve(n.accumulate?e.call(this,s):e.apply(this,s[s.length-1])).then(t.resolve,t.reject),s=[],i=null}.bind(this),u),n.accumulate){var h=function(){var e=s.length-1;return{v:i.promise.then(function(t){return t[e]})}}();if("object"===(void 0===h?"undefined":r(h)))return h.v}return i.promise}}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n(10),i=n(35),a=n(4),s=n(12),u=n(36),c=n(37),l=n(5),f=n(8),p=function(){function e(){}return e.showErrors=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];e.forEach(function(e){Array.isArray(e)?e.forEach(function(e){return f.toast.error(e)}):f.toast.error(e)})},e.showInfo=function(e){f.toast.info(e)},e}(),d=function(){function e(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.value=e,this.errors=void 0==t[0]||null==t[0]?[]:t}return Object.defineProperty(e.prototype,"hasErrors",{get:function(){return null!=this.errors&&Array.isArray(this.errors)&&this.errors.length>0},enumerable:!0,configurable:!0}),e}(),h=n(6),m=n.n(h),y=n(9),v=n(38),b=n.n(v);function g(e){return JSON.parse(JSON.stringify(e))}function _(){return"object"==typeof process&&process.versions&&!!process.versions.node}var w,E=n(17),S=function(){return(S=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},O=function(){function e(){}return e.reset=function(){this.isInitialized=!1,this.gameReady=!1,this.data={}},e.init=function(e){if(this.isInitialized)throw Error("Globals is already initialized.");this.data=e||{public:{},private:{}},this.isInitialized=!0,E.NSerializeJson.options.useDotSeparatorInPath=!0},e.setGameReady=function(e){this.gameReady=e},e.isGameReady=function(){return this.gameReady},e.throwIfNotInitialized=function(){if(!this.isInitialized)throw Error("Globals is not initialized. You have to call Session.init before.")},e.getData=function(){return this.throwIfNotInitialized(),this.data},e.setData=function(e){this.throwIfNotInitialized();var t=this.data;this.data=S({},t,e)},Object.defineProperty(e,"serviceUser",{get:function(){return this.getData().public.serviceUser},set:function(e){this.setData({public:{serviceUser:e}})},enumerable:!0,configurable:!0}),Object.defineProperty(e,"isAuthenticated",{get:function(){return null!=this.serviceUser},enumerable:!0,configurable:!0}),e.isInitialized=!1,e.gameReady=!1,e.data={},e}(),P=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}u((r=r.apply(e,t||[])).next())})},k=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},j=function(){function e(){}return e.requestJson=function(e){return P(this,void 0,Promise,function(){var t,n,r,o,i;return k(this,function(a){switch(a.label){case 0:t=null,n=null,e.url=Object(y.transformUrl)(e.url),r=function(e,t){return t?e+"?"+b()(t):e},_()&&(o={headers:{Cookie:O.getData().private.cookie}}),a.label=1;case 1:switch(a.trys.push([1,13,,14]),e.method){case"GET":return[3,2];case"POST":return[3,4];case"PUT":return[3,6];case"PATCH":return[3,8];case"DELETE":return[3,10]}return[3,12];case 2:return[4,m.a.get(r(e.url,e.data),o)];case 3:return t=a.sent(),[3,12];case 4:return[4,m.a.post(e.url,e.data,o)];case 5:return t=a.sent(),[3,12];case 6:return[4,m.a.put(e.url,e.data,o)];case 7:return t=a.sent(),[3,12];case 8:return[4,m.a.patch(e.url,e.data,o)];case 9:return t=a.sent(),[3,12];case 10:return[4,m.a.delete(r(e.url,e.data),o)];case 11:return t=a.sent(),[3,12];case 12:return n=new(d.bind.apply(d,[void 0,t.data.value].concat(t.data.errors))),[3,14];case 13:return i=a.sent(),n=new d(null,i.message),[3,14];case 14:return n.hasErrors&&p.showErrors.apply(p,n.errors),[2,n]}})})},e.sendFormData=function(e){return P(this,void 0,Promise,function(){var t,n,r,o;return k(this,function(i){switch(i.label){case 0:t=null,n=null,e.url=Object(y.transformUrl)(e.url),r={headers:{"Content-Type":"multipart/form-data"}},i.label=1;case 1:switch(i.trys.push([1,9,,10]),e.method){case"POST":return[3,2];case"PUT":return[3,4];case"PATCH":return[3,6]}return[3,8];case 2:return[4,m.a.post(e.url,e.data,r)];case 3:return t=i.sent(),[3,8];case 4:return[4,m.a.put(e.url,e.data,r)];case 5:return t=i.sent(),[3,8];case 6:return[4,m.a.patch(e.url,e.data,r)];case 7:return t=i.sent(),[3,8];case 8:return n=new(d.bind.apply(d,[void 0,t.data.value].concat(t.data.errors))),[3,10];case 9:return o=i.sent(),n=new d(null,o.message),[3,10];case 10:return n.hasErrors&&p.showErrors.apply(p,n.errors),[2,n]}})})},e}(),R=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),C=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}u((r=r.apply(e,t||[])).next())})},x=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},M=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return R(t,e),t.login=function(e){return C(this,void 0,Promise,function(){var t;return x(this,function(n){switch(n.label){case 0:return[4,this.requestJson({url:"api/Account/Login",method:"POST",data:e})];case 1:return(t=n.sent()).hasErrors||(O.serviceUser=t.value),[2,t]}})})},t.logout=function(){return C(this,void 0,Promise,function(){var e;return x(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"api/Account/Logout",method:"POST"})];case 1:return(e=t.sent()).hasErrors||(O.serviceUser=null),[2,e]}})})},t}(j),T=n(2),L=n.n(T),N=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),F=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},A=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}u((r=r.apply(e,t||[])).next())})},I=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},D=function(e){function t(t){var n=e.call(this,t)||this;return n.state={logoutAction:!1},n}return N(t,e),t.prototype.onClickSignOut=function(e){return A(this,void 0,void 0,function(){return I(this,function(t){switch(t.label){case 0:return e.preventDefault(),[4,M.logout()];case 1:return t.sent(),this.setState({logoutAction:!0}),[2]}})})},t.prototype.componentDidMount=function(){},t.prototype.componentDidUpdate=function(){},t.prototype.render=function(){return this.state.logoutAction&&window.location.reload(),r.createElement("nav",{className:"navbar navbar-expand-md navbar-light bg-light"},r.createElement(a.NavLink,{exact:!0,to:"/",className:"navbar-brand"},"Jaycee Griffith"),r.createElement("button",{className:"navbar-toggler",type:"button","data-toggle":"collapse","data-target":"#navbarNav","aria-controls":"navbarNav","aria-expanded":"false","aria-label":"Toggle navigation"},r.createElement("span",{className:"navbar-toggler-icon"})),r.createElement("div",{className:"collapse navbar-collapse",id:"navbarNav"},r.createElement("ul",{className:"navbar-nav"},r.createElement("li",{className:"nav-item active"},r.createElement(a.NavLink,{exact:!0,to:"/",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Home")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/portfolio",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Portfolio")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/reading",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Reading")))))},F([L.a],t.prototype,"onClickSignOut",null),t}(r.Component),U=Object(l.withRouter)(D),W=(n(78),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),B=function(e){function t(t){return e.call(this,t)||this}return W(t,e),t.prototype.render=function(){return r.createElement("footer",{className:"footer text-center"})},t}(r.Component),z=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),V=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return z(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement("div",{id:"authorizedLayout",className:"layout"},r.createElement(U,null),r.createElement("div",{className:"container container-content"},this.props.children),r.createElement(f.ToastContainer,null),r.createElement(B,null)))},t}(r.Component),H=(n(79),n(16)),q=n.n(H),G=n(22),$=n.n(G),J=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Y=function(e){function t(t){var n=e.call(this,t)||this;return n.unlisten=n.props.history.listen(function(e,t){O.currentLocation=e.pathname,"/"==O.currentLocation?(O.prevLocation="",O.nextLocation="/portfolio"):"/portfolio"==O.currentLocation?(O.prevLocation="/",O.nextLocation="/reading"):"/reading"==O.currentLocation&&(O.prevLocation="/portfolio",O.nextLocation="/"),n.JGWGame.send("GameController","UpdatePageNavigation","{ currentLocation: "+O.currentLocation+", nextLocation: "+O.nextLocation+", prevLocation: "+O.prevLocation+" }")}),n}return J(t,e),t.prototype.componentDidMount=function(){var e=this;O.currentLocation=this.props.location.pathname,O.setGameReady(!1),"undefined"!=typeof window&&(this.JGWGame=new G.UnityContent("JayceeGriffithWebsiteGame/Build.json","JayceeGriffithWebsiteGame/UnityLoader.js"),this.JGWGame.on("OnReady",function(){O.setGameReady(!0),document.getElementById("preloader").classList.add("hidden"),document.getElementById("unityGame").classList.add("disablepointer"),e.JGWGame.send("GameController","Connected")}),this.JGWGame.on("GetPageNavigation",function(){"/"==O.currentLocation?(O.prevLocation="",O.nextLocation="/portfolio"):"/portfolio"==O.currentLocation?(O.prevLocation="/",O.nextLocation="/reading"):"/reading"==O.currentLocation&&(O.prevLocation="/portfolio",O.nextLocation="/"),e.JGWGame.send("GameController","UpdatePageNavigation","{ currentLocation: "+O.currentLocation+", nextLocation: "+O.nextLocation+", prevLocation: "+O.prevLocation+" }")}),this.JGWGame.on("SetPage",function(t){t!=O.currentLocation&&e.props.history.push(t)}),this.JGWGame.on("OpenNewTab",function(e){window.open(e,"_blank").focus()}),q.a.render(r.createElement($.a,{unityContent:this.JGWGame}),document.getElementById("unityGame")))},t.prototype.componentDidUpdate=function(e){},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props;e.match,e.location,e.history;return r.createElement("div",{id:"unityGame",className:"unityGame"})},t}(r.Component),K=Object(a.withRouter)(Y),X=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Q=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return X(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement("div",{id:"guestLayout",className:"layout"},r.createElement(U,null),r.createElement("div",{className:"container container-content"},this.props.children),r.createElement(f.ToastContainer,null),r.createElement(K,null),r.createElement(B,null)))},t}(r.Component),Z=(n(88),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),ee=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},te=function(e){function t(t){var n=e.call(this,t)||this;return n.renderKey=0,n}return Z(t,e),t.prototype.forceUpdate=function(){this.renderKey=Math.random()},ee([L.a],t.prototype,"forceUpdate",null),t}(r.Component),ne=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),re=function(e){function t(t){return e.call(this,t)||this}return ne(t,e),t.prototype.render=function(){var e={display:"none"};return _()||(e={display:this.props.show?"block":"none"}),r.createElement("div",{key:this.renderKey,className:"loader-bg",style:e},r.createElement("div",{className:"sk-circle"},r.createElement("div",{className:"sk-circle1 sk-child"}),r.createElement("div",{className:"sk-circle2 sk-child"}),r.createElement("div",{className:"sk-circle3 sk-child"}),r.createElement("div",{className:"sk-circle4 sk-child"}),r.createElement("div",{className:"sk-circle5 sk-child"}),r.createElement("div",{className:"sk-circle6 sk-child"}),r.createElement("div",{className:"sk-circle7 sk-child"}),r.createElement("div",{className:"sk-circle8 sk-child"}),r.createElement("div",{className:"sk-circle9 sk-child"}),r.createElement("div",{className:"sk-circle10 sk-child"}),r.createElement("div",{className:"sk-circle11 sk-child"}),r.createElement("div",{className:"sk-circle12 sk-child"})))},t}(te),oe=function(){return(oe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ie=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}u((r=r.apply(e,t||[])).next())})},ae=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};!function(e){var t,n=this;!function(e){e.Init="LOGIN_INIT",e.Request="LOGIN_REQUEST",e.Success="LOGIN_SUCCESS",e.Failure="LOGIN_FAILURE"}(t=e.Actions||(e.Actions={})),e.actionCreators={init:function(){return function(e,r){return ie(n,void 0,void 0,function(){return ae(this,function(n){return e({type:t.Init}),[2]})})}},loginRequest:function(e){return function(r,o){return ie(n,void 0,void 0,function(){var n;return ae(this,function(o){switch(o.label){case 0:return r({type:t.Request}),[4,M.login(e)];case 1:return(n=o.sent()).hasErrors?(r({type:t.Failure}),[2]):(r({type:t.Success,payload:n.value}),[2])}})})}}};var r={indicators:{operationLoading:!1,loginSuccess:!1}};e.reducer=function(e,n){var o=n,i=function(){return g(e.indicators)};switch(o.type){case t.Init:return r;case t.Request:return(a=i()).operationLoading=!0,oe({},e,{indicators:a});case t.Success:return(a=i()).operationLoading=!1,a.loginSuccess=!0,oe({},e,{indicators:a});case t.Failure:var a;return(a=i()).operationLoading=!1,oe({},e,{indicators:a});default:}return e||r}}(w||(w={}));n(30);var se,ue=n(3),ce=n(39),le=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),fe=function(){return(fe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},pe=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},de=function(e){function t(t){return e.call(this,t)||this}return le(t,e),t.prototype.isValid=function(){return this.validator.isValid()},t.prototype.emptyForm=function(){!function(e){Array.from(e.querySelectorAll("input, select, textarea")).forEach(function(e){var t=e.getAttribute("type");"checkbox"===t||"radio"===t?e.checked=!1:e.value=""})}(this.elForm)},t.prototype.getData=function(){return E.NSerializeJson.serializeForm(this.elForm)},t.prototype.componentDidMount=function(){this.validator=new ce.NValTippy(this.elForm)},t.prototype.render=function(){var e=this;return r.createElement("form",fe({},this.props,{ref:function(t){return e.elForm=t}}),this.props.children)},pe([L.a],t.prototype,"isValid",null),pe([L.a],t.prototype,"emptyForm",null),pe([L.a],t.prototype,"getData",null),t}(r.Component),he=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),me=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},ye=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}u((r=r.apply(e,t||[])).next())})},ve=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},be=function(e){function t(t){return e.call(this,t)||this}return he(t,e),t.prototype.componentDidMount=function(){this.props.init(),this.elLoader&&this.elLoader.forceUpdate()},t.prototype.onClickSubmitBtn=function(e){return ye(this,void 0,void 0,function(){var t;return ve(this,function(n){return e.preventDefault(),this.elForm.isValid()&&(t=this.elForm.getData(),this.props.loginRequest(t)),[2]})})},t.prototype.render=function(){var e=this;return this.props.indicators.loginSuccess?r.createElement(l.Redirect,{to:"/"}):r.createElement("div",{id:"loginPage"},r.createElement(ue.Helmet,null,r.createElement("title",null,"Login page - Jaycee Griffith")),r.createElement(re,{ref:function(t){return e.elLoader=t},show:this.props.indicators.operationLoading}),r.createElement("div",{id:"loginContainer"},r.createElement("p",{className:"text-center"},"Type any login and password to enter."),r.createElement(de,{ref:function(t){return e.elForm=t}},r.createElement("div",{className:"form-group"},r.createElement("label",{htmlFor:"inputLogin"},"Login"),r.createElement("input",{type:"text",name:"login","data-value-type":"string",className:"form-control",id:"inputLogin","data-val-required":"true","data-msg-required":"Login is required."})),r.createElement("div",{className:"form-group"},r.createElement("label",{htmlFor:"inputLogin"},"Password"),r.createElement("input",{type:"password",name:"password","data-value-type":"string",className:"form-control",id:"inputPassword","data-val-required":"true","data-msg-required":"Password is required."})),r.createElement("div",{className:"form-inline"},r.createElement("button",{className:"btn btn-success",onClick:this.onClickSubmitBtn},"Sign in")))))},me([L.a],t.prototype,"onClickSubmitBtn",null),t}(r.Component),ge=Object(o.connect)(function(e){return e.login},w.actionCreators)(be),_e=Object(l.withRouter)(ge),we=function(){return(we=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Ee=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]])}return n},Se=function(e){var t=e.component,n=e.layout,o=e.path,i=Ee(e,["component","layout","path"]),a="/admin"===o,s="/login"===o;return!O.isAuthenticated&&a?r.createElement(l.Redirect,{to:"/login"}):O.isAuthenticated&&s?r.createElement(l.Redirect,{to:"/"}):r.createElement(l.Route,we({},i,{render:function(e){return r.createElement(n,null,r.createElement(t,we({},e)))}}))},Oe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Pe=function(e){function t(t){return e.call(this,t)||this}return Oe(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Home")))},t}(r.Component),ke=n(40),je=n.n(ke),Re=n(41),Ce=n.n(Re),xe=n(42),Me=n.n(xe),Te=n(43),Le=n.n(Te),Ne=n(44),Fe=n.n(Ne),Ae=n(45),Ie=n.n(Ae),De=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ue=(n(16),n(89).Carousel),We=function(e){function t(t){return e.call(this,t)||this}return De(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Portfolio")),r.createElement("div",{className:"text-center"},r.createElement("h2",null,"Here is a few things that I've done")),r.createElement("div",null,r.createElement(Ue,{className:"col-md",showArrows:!0,showThumbs:!1},r.createElement("div",null,r.createElement("img",{src:Ce.a}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Kitten Fully Rigged "),r.createElement("span",null,"Feel free to download the kitten | "),r.createElement("a",{href:"https://drive.google.com/open?id=1w56ctmWSgPDhRB7fKY-v-waFzBPImjZy",target:"_blank"},"Kitten Red_Final.zip"))),r.createElement("div",null,r.createElement("img",{src:je.a}),r.createElement("p",{className:"legend"},r.createElement("span",null,"3ds Max Kitten Fur "),r.createElement("span",null,"Feel free to download the kitten | "),r.createElement("a",{href:"https://drive.google.com/open?id=1w56ctmWSgPDhRB7fKY-v-waFzBPImjZy",target:"_blank"},"Kitten Red_Final.zip"))),r.createElement("div",null,r.createElement("img",{src:Fe.a}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Download and play Life of Gooba | "),r.createElement("a",{href:"https://jgriffith3433.itch.io/lifeofgooba",target:"_blank"},"Itch.io game page"))),r.createElement("div",null,r.createElement("img",{src:Me.a}),r.createElement("p",{className:"legend"},"Low Poly Character Modeling")),r.createElement("div",null,r.createElement("img",{src:Ie.a}),r.createElement("p",{className:"legend"},"UDK training simulation")),r.createElement("div",null,r.createElement("img",{src:Le.a}),r.createElement("p",{className:"legend"},"3ds Max Smiling Boy")),r.createElement("div",null,r.createElement("iframe",{style:{marginTop:"50px"},width:"560",height:"560",src:"https://www.youtube.com/embed/j2jXD46B4Vw",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),r.createElement("p",{className:"legend"},r.createElement("span",null,"To play the Space Shooter Game, download and extract the zip file. Then use internet explorer and download the web player, don't worry it's safe and comes directly from Unity3d.com | "),r.createElement("a",{href:"https://drive.google.com/open?id=1Y2UwkA_pACRiDt2OCTH38uRfwbM_1AZW",target:"_blank"},"spaceshooter.zip"))),r.createElement("div",null,r.createElement("iframe",{style:{marginTop:"50px"},width:"560",height:"560",src:"https://www.youtube.com/embed/ns9sM42IP-I",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),r.createElement("p",{className:"legend"},r.createElement("span",null,"To play the Hoop Jones Game, download and extract the zip file. Then use internet explorer and download the web player, don't worry it's safe and comes directly from Unity3d.com | "),r.createElement("a",{href:"https://drive.google.com/open?id=1hyRouxDJZufhvFK6tULyUaqJVrcTnrkw",target:"_blank"},"hoopjones.zip"))))),r.createElement("div",{className:"text-center externallinks"},r.createElement("span",null,r.createElement("b",null,"External profile links")),r.createElement("p",{className:"text-center"},r.createElement("span",null,"Github | "),r.createElement("a",{href:"https://github.com/jgriffith3433",target:"_blank"},"http://github.com/jgriffith3433")),r.createElement("p",{className:"text-center"},r.createElement("span",null,"Sound Cloud | "),r.createElement("a",{href:"https://soundcloud.com/jacobsgriffith",target:"_blank"},"https://soundcloud.com/jacobsgriffith")),r.createElement("p",{className:"text-center"},r.createElement("span",null,"Stack Overflow | "),r.createElement("a",{href:"https://stackoverflow.com/users/941632/jacobsgriffith",target:"_blank"},"https://stackoverflow.com/users/941632/jacobsgriffith")),r.createElement("p",{className:"text-center"},r.createElement("span",null,"Itch.io | "),r.createElement("a",{href:"https://jgriffith3433.itch.io/lifeofgooba",target:"_blank"},"https://jgriffith3433.itch.io/lifeofgooba")),r.createElement("p",{className:"text-center"},r.createElement("span",null,"Kickstarter | "),r.createElement("a",{href:"https://www.kickstarter.com/profile/jgriffith3433",target:"_blank"},"https://www.kickstarter.com/profile/jgriffith3433"))))},t}(r.Component),Be=Object(a.withRouter)(We),ze=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ve=function(e){function t(t){return e.call(this,t)||this}return ze(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Traveling")))},t}(r.Component),He=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),qe=function(e){function t(t){return e.call(this,t)||this}return He(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Summer 2018")))},t}(r.Component),Ge=n(46),$e=n.n(Ge),Je=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ye=function(e){function t(t){return e.call(this,t)||this}return Je(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Reading")),r.createElement("div",{className:"text-center"},r.createElement("h2",null,"I love the star wars books")),r.createElement("div",{className:"text-center"},r.createElement("p",null,"They are even better than the movies and you can read them chronologically"),r.createElement("img",{src:$e.a,alt:"Star Wars Books",className:"img-fluid"})),r.createElement("div",{className:"text-center"},r.createElement("h3",null,"Something, something, something... Complete.")),r.createElement("div",{className:"text-center"},r.createElement("ul",null,r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/B00JN8H2TC/ref=cm_sw_em_r_mt_dp_U_MU1uCbF9FCBSZ",target:"_blank"},"Into the Void: Star Wars (Dawn of the Jedi)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345541324/ref=cm_sw_em_r_mt_dp_U_C41uCb9FHQ4BH",target:"_blank"},"Star Wars: Lost Tribe of the Sith - The Collected Stories (Star Wars: Lost Tribe of the Sith - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511352/ref=cm_sw_em_r_mt_dp_U_k51uCbDBCV9PR",target:"_blank"},"Star Wars: The Old Republic - Revan (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511395/ref=cm_sw_em_r_mt_dp_U_P51uCbPA6BPE7",target:"_blank"},"Star Wars: The Old Republic - Deceived (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345518594/ref=cm_sw_em_r_mt_dp_U_A61uCbNSRBSFT",target:"_blank"},"Star Wars: Red Harvest")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511336/ref=cm_sw_em_r_mt_dp_U_s71uCb3T663RH",target:"_blank"},"Fatal Alliance (Star Wars: The Old Republic) (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345529421/ref=cm_sw_em_r_mt_dp_U_Z71uCbW0C197J",target:"_blank"},"Annihilation: Star Wars Legends (The Old Republic) (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345522648/ref=cm_sw_em_r_mt_dp_U_q81uCbKK0TD18",target:"_blank"},"Star Wars: Knight Errant")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345477375/ref=cm_sw_em_r_mt_dp_U_s91uCbRXD4FG9",target:"_blank"},"Path of Destruction (Star Wars: Darth Bane, Book 1)")),r.createElement("span",null," | "),r.createElement("span",null,"Currently Reading")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345477499/ref=cm_sw_em_r_mt_dp_U_u91uCb5930RYF",target:"_blank"},"Rule of Two (Star Wars: Darth Bane, Book 2)")),r.createElement("span",null," | "),r.createElement("span",null,"Queued")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511573/ref=cm_sw_em_r_mt_dp_U_q91uCb786RBNS",target:"_blank"},"Dynasty of Evil (Star Wars: Darth Bane, Book 3)")),r.createElement("span",null," | "),r.createElement("span",null,"Queued")))))},t}(r.Component),Ke=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Xe=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}u((r=r.apply(e,t||[])).next())})},Qe=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},Ze=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ke(t,e),t.search=function(e){return void 0===e&&(e=null),Xe(this,void 0,Promise,function(){return Qe(this,function(t){switch(t.label){case 0:return null==e&&(e=""),[4,this.requestJson({url:"/api/Person/Search?term="+e,method:"GET"})];case 1:return[2,t.sent()]}})})},t.update=function(e){return Xe(this,void 0,Promise,function(){return Qe(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person",method:"PATCH",data:e})];case 1:return[2,t.sent()]}})})},t.delete=function(e){return Xe(this,void 0,Promise,function(){return Qe(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person/"+e,method:"DELETE"})];case 1:return[2,t.sent()]}})})},t.add=function(e){return Xe(this,void 0,Promise,function(){return Qe(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person/Add",method:"POST",data:e})];case 1:return[2,t.sent()]}})})},t}(j),et=function(){return(et=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},tt=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}u((r=r.apply(e,t||[])).next())})},nt=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};!function(e){var t,n=this;!function(e){e.SearchRequest="PERSON_SEARCH_REQUEST",e.SearchResponse="PERSON_SEARCH_RESPONSE",e.AddRequest="PERSON_ADD_REQUEST",e.AddResponse="PERSON_ADD_RESPONSE",e.UpdateRequest="PERSON_UPDATE_REQUEST",e.UpdateResponse="PERSON_UPDATE_RESPONSE",e.DeleteRequest="PERSON_DELETE_REQUEST",e.DeleteResponse="PERSON_DELETE_RESPONSE"}(t=e.Actions||(e.Actions={})),e.actionCreators={searchRequest:function(e){return function(r,o){return tt(n,void 0,void 0,function(){var n=this;return nt(this,function(o){switch(o.label){case 0:return[4,Object(y.wait)(function(o){return tt(n,void 0,void 0,function(){var n;return nt(this,function(o){switch(o.label){case 0:return r({type:t.SearchRequest}),[4,Ze.search(e)];case 1:return(n=o.sent()).hasErrors||r({type:t.SearchResponse,payload:n.value}),[2]}})})})];case 1:return o.sent(),[2]}})})}},addRequest:function(e){return function(r,o){return tt(n,void 0,void 0,function(){var n;return nt(this,function(o){switch(o.label){case 0:return r({type:t.AddRequest}),[4,Ze.add(e)];case 1:return(n=o.sent()).hasErrors||(e.id=n.value,r({type:t.AddResponse,payload:e})),[2]}})})}},updateRequest:function(e){return function(r,o){return tt(n,void 0,void 0,function(){return nt(this,function(n){switch(n.label){case 0:return r({type:t.UpdateRequest}),[4,Ze.update(e)];case 1:return n.sent().hasErrors||r({type:t.UpdateResponse,payload:e}),[2]}})})}},deleteRequest:function(e){return function(r,o){return tt(n,void 0,void 0,function(){return nt(this,function(n){switch(n.label){case 0:return r({type:t.DeleteRequest}),[4,Ze.delete(e)];case 1:return n.sent().hasErrors||r({type:t.DeleteResponse,id:e}),[2]}})})}}};var r={people:[],indicators:{operationLoading:!1}};e.reducer=function(e,n){var o=n,i=function(){return g(e.indicators)};switch(o.type){case t.SearchRequest:return(s=i()).operationLoading=!0,et({},e,{indicators:s});case t.SearchResponse:return(s=i()).operationLoading=!1,et({},e,{indicators:s,people:o.payload});case t.UpdateRequest:return(s=i()).operationLoading=!0,et({},e,{indicators:s});case t.UpdateResponse:(s=i()).operationLoading=!1;var a=(u=g(e.people)).filter(function(e){return e.id===o.payload.id})[0];return a.firstName=o.payload.firstName,a.lastName=o.payload.lastName,et({},e,{indicators:s,people:u});case t.AddRequest:return(s=i()).operationLoading=!0,et({},e,{indicators:s});case t.AddResponse:return(s=i()).operationLoading=!1,(u=g(e.people)).push(o.payload),et({},e,{indicators:s,people:u});case t.DeleteRequest:return(s=i()).operationLoading=!0,et({},e,{indicators:s});case t.DeleteResponse:var s;(s=i()).operationLoading=!1;var u=g(e.people).filter(function(e){return e.id!==o.id});return et({},e,{indicators:s,people:u});default:}return e||r}}(se||(se={}));var rt=n(47),ot=n.n(rt),it=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),at=function(){return(at=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},st=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},ut=function(e){function t(t){return e.call(this,t)||this}return it(t,e),t.prototype.setFirstPage=function(){this.elFirstPageBtn.click()},t.prototype.setLastPage=function(){this.elLastPageBtn.click()},t.prototype.render=function(){var e=this;return r.createElement(ot.a,{total:this.props.totalResults,limit:this.props.limitPerPage,currentPage:this.props.currentPage},function(t){var n=t.pages,o=t.currentPage,i=t.hasNextPage,a=t.hasPreviousPage,s=t.previousPage,u=t.nextPage,c=t.totalPages,l=t.getPageItemProps;return r.createElement("ul",{className:"pagination"},r.createElement("li",null,r.createElement("span",at({},l({pageValue:1,onPageChange:e.props.onChangePage}),{ref:function(t){return e.elFirstPageBtn=t}}),"first")),a&&r.createElement("li",null,r.createElement("span",at({},l({pageValue:s,onPageChange:e.props.onChangePage})),"<")),n.map(function(t){return r.createElement("li",{key:t,className:t===o?"active":""},r.createElement("span",at({},l({pageValue:t,onPageChange:e.props.onChangePage})),t))}),i&&r.createElement("li",null,r.createElement("span",at({},l({pageValue:u,onPageChange:e.props.onChangePage})),">")),r.createElement("li",null,r.createElement("span",at({},l({pageValue:c,onPageChange:e.props.onChangePage}),{ref:function(t){return e.elLastPageBtn=t}}),"last")))})},st([L.a],t.prototype,"setFirstPage",null),st([L.a],t.prototype,"setLastPage",null),t}(r.Component),ct=n(48),lt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ft=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},pt=function(e){function t(t){return e.call(this,t)||this}return lt(t,e),t.prototype.emptyForm=function(){this.elForm&&this.elForm.emptyForm()},t.prototype.componentDidMount=function(){},t.prototype.render=function(){var e=this;return r.createElement(ct.Formik,{enableReinitialize:!0,initialValues:{firstName:this.props.data.firstName||"",lastName:this.props.data.lastName||""},onSubmit:function(e,t){t.setSubmitting}},function(t){var n=t.values,o=(t.errors,t.touched,t.handleChange),i=t.handleBlur;t.handleSubmit,t.isSubmitting;return r.createElement(de,{className:"form",ref:function(t){return e.elForm=t}},r.createElement("input",{type:"hidden",name:"id",defaultValue:(e.props.data.id||0).toString()}),r.createElement("div",{className:"form-group"},r.createElement("label",{className:"control-label required",htmlFor:"person__firstName"},"First name"),r.createElement("input",{type:"text",className:"form-control",id:"person__firstName",name:"firstName","data-value-type":"string","data-val-required":"true","data-msg-required":"First name is required.",value:n.firstName,onChange:o,onBlur:i})),r.createElement("div",{className:"form-group"},r.createElement("label",{className:"control-label required",htmlFor:"person__lastName"},"Last name"),r.createElement("input",{type:"text",className:"form-control",id:"person__lastName",name:"lastName","data-value-type":"string","data-val-required":"true","data-msg-required":"Last name is required.",value:n.lastName,onChange:o,onBlur:i})))})},ft([L.a],t.prototype,"emptyForm",null),t}(r.Component),dt=n(49),ht=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),mt=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},yt=function(e){function t(t){return e.call(this,t)||this}return ht(t,e),t.prototype.show=function(){this.modalPlugin.show()},t.prototype.hide=function(){this.modalPlugin.hide()},t.prototype.componentDidMount=function(){var e=this;this.modalPlugin=new dt.Modal(this.elModal),this.props.onShow&&this.elModal.addEventListener("show.bs.modal",function(){return e.props.onShow()}),this.props.onHide&&this.elModal.addEventListener("hide.bs.modal",function(){return e.props.onHide()})},t.prototype.componentWillUnmount=function(){this.modalPlugin.hide()},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"modal fade",tabIndex:-1,role:"dialog",ref:function(t){return e.elModal=t}},r.createElement("div",{className:"modal-dialog",role:"document"},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("button",{type:"button",className:"close","data-dismiss":"modal","aria-label":"Close"},r.createElement("span",{"aria-hidden":"true"},"×")),r.createElement("h4",{className:"modal-title"},this.props.title)),r.createElement("div",{className:"modal-body"},this.props.children),r.createElement("div",{className:"modal-footer"},this.props.buttons))))},mt([L.a],t.prototype,"show",null),mt([L.a],t.prototype,"hide",null),t}(r.Component),vt=n(50),bt=n.n(vt),gt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),_t=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},wt=function(e){function t(t){var n=e.call(this,t)||this;return n.state={searchTerm:"",pageNum:1,limitPerPage:5,rowOffset:0,modelForEdit:{}},n.debouncedSearch=bt()(function(e){t.searchRequest(e)},500),n}return gt(t,e),t.prototype.componentWillMount=function(){this.props.searchRequest()},t.prototype.componentWillUnmount=function(){this.elModalAdd&&this.elModalAdd.hide(),this.elModalEdit&&this.elModalEdit.hide(),this.elModalDelete&&this.elModalDelete.hide()},t.prototype.onChangePage=function(e){var t=Math.ceil((e-1)*this.state.limitPerPage);this.setState({pageNum:e,rowOffset:t})},t.prototype.onClickShowAddModal=function(e){this.elModalAdd.show()},t.prototype.onClickShowEditModal=function(e,t){this.setState({modelForEdit:t}),this.elModalEdit.show()},t.prototype.onClickShowDeleteModal=function(e,t){this.setState({modelForEdit:t}),this.elModalDelete.show()},t.prototype.onClickPersonEditorAdd__saveBtn=function(e){e.preventDefault(),this.personEditorAdd.elForm.isValid()&&(this.props.addRequest(this.personEditorAdd.elForm.getData()),this.pagingBar.setLastPage(),this.elModalAdd.hide())},t.prototype.onClickPersonEditorEdit__saveBtn=function(e){if(this.personEditorEdit.elForm.isValid()){var t=this.personEditorEdit.elForm.getData();this.props.updateRequest(t),this.elModalEdit.hide()}},t.prototype.onClickPersonEditorDelete__saveBtn=function(e){this.props.deleteRequest(this.state.modelForEdit.id),this.elModalDelete.hide()},t.prototype.renderRow=function(e){var t=this;return r.createElement("tr",{key:e.id},r.createElement("td",null,e.firstName),r.createElement("td",null,e.lastName),r.createElement("td",null,r.createElement("button",{className:"btn btn-info",onClick:function(n){return t.onClickShowEditModal(n,e)}},"Edit")," ",r.createElement("button",{className:"btn btn-danger",onClick:function(n){return t.onClickShowDeleteModal(n,e)}},"Delete")))},t.prototype.renderRows=function(e){var t=this;return e.slice(this.state.rowOffset,this.state.rowOffset+this.state.limitPerPage).map(function(e){return t.renderRow(e)})},t.prototype.onChangeSearchInput=function(e){var t=e.currentTarget.value;this.debouncedSearch(t),this.pagingBar.setFirstPage()},t.prototype.render=function(){var e=this;return r.createElement("div",null,r.createElement(ue.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Portfolio")),r.createElement(re,{show:this.props.indicators.operationLoading}),r.createElement("div",{className:"panel panel-default"},r.createElement("div",{className:"panel-body row"},r.createElement("div",{className:"col-sm-1"},r.createElement("button",{className:"btn btn-success",onClick:this.onClickShowAddModal},"Add")),r.createElement("div",{className:"col-sm-11"},r.createElement("input",{type:"text",className:"form-control",defaultValue:"",onChange:this.onChangeSearchInput,placeholder:"Search for people..."})))),r.createElement("table",{className:"table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"First name"),r.createElement("th",null,"Last name"),r.createElement("th",null))),r.createElement("tbody",null,this.renderRows(this.props.people))),r.createElement(yt,{ref:function(t){return e.elModalAdd=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-primary",onClick:this.onClickPersonEditorAdd__saveBtn},"Save")),title:"Add person",onHide:function(){e.personEditorAdd&&e.personEditorAdd.emptyForm()}},r.createElement(pt,{ref:function(t){return e.personEditorAdd=t},data:{}})),r.createElement(yt,{ref:function(t){return e.elModalEdit=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-primary",onClick:this.onClickPersonEditorEdit__saveBtn},"Save")),title:"Edit person: "+this.state.modelForEdit.firstName+" "+this.state.modelForEdit.lastName,onHide:function(){e.personEditorEdit&&e.setState({modelForEdit:{}})}},r.createElement(pt,{ref:function(t){return e.personEditorEdit=t},data:this.state.modelForEdit})),r.createElement(yt,{ref:function(t){return e.elModalDelete=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-danger",onClick:this.onClickPersonEditorDelete__saveBtn},"Delete")),title:"Delete person: "+this.state.modelForEdit.firstName+" "+this.state.modelForEdit.lastName},r.createElement("p",null,"Do you really want to delete this person?")),r.createElement(ut,{ref:function(t){return e.pagingBar=t},totalResults:this.props.people.length,limitPerPage:this.state.limitPerPage,currentPage:this.state.pageNum,onChangePage:this.onChangePage}))},_t([L.a],t.prototype,"onChangePage",null),_t([L.a],t.prototype,"onClickShowAddModal",null),_t([L.a],t.prototype,"onClickShowEditModal",null),_t([L.a],t.prototype,"onClickShowDeleteModal",null),_t([L.a],t.prototype,"onClickPersonEditorAdd__saveBtn",null),_t([L.a],t.prototype,"onClickPersonEditorEdit__saveBtn",null),_t([L.a],t.prototype,"onClickPersonEditorDelete__saveBtn",null),_t([L.a],t.prototype,"renderRow",null),_t([L.a],t.prototype,"renderRows",null),_t([L.a],t.prototype,"onChangeSearchInput",null),t}(r.Component),Et=Object(o.connect)(function(e){return e.person},se.actionCreators)(wt),St=Object(l.withRouter)(Et),Ot=r.createElement(a.Switch,null,r.createElement(Se,{layout:Q,exact:!0,path:"/login",component:_e}),r.createElement(Se,{layout:Q,exact:!0,path:"/",component:Pe}),r.createElement(Se,{layout:Q,exact:!0,path:"/portfolio",component:Be}),r.createElement(Se,{layout:Q,exact:!0,path:"/traveling",component:Ve}),r.createElement(Se,{layout:Q,exact:!0,path:"/traveling/summer2018",component:qe}),r.createElement(Se,{layout:Q,exact:!0,path:"/reading",component:Ye}),r.createElement(Se,{layout:V,exact:!0,path:"/admin",component:St})),Pt=n(13),kt=n(51),jt=n.n(kt),Rt={login:w.reducer,person:se.reducer},Ct=function(){return(Ct=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function xt(e,t){var n="undefined"==typeof window?null:window,r=n&&n.__REDUX_DEVTOOLS_EXTENSION__;return Object(Pt.compose)(Object(Pt.applyMiddleware)(jt.a,Object(s.routerMiddleware)(e)),r?r():function(e){return e})(Pt.createStore)(function(e,t){return Object(Pt.combineReducers)(Ct({},e,{router:Mt(t)}))}(Rt,e),t)}var Mt=function(e){var t={location:e.location,action:e.action};return function(e,n){return void 0===e&&(e=t),void 0===n&&(n={}),n.type===s.LOCATION_CHANGE?Ct({},e,n.payload):e}};var Tt=function(){var e=ue.Helmet.renderStatic(),t="";for(var n in e)e.hasOwnProperty(n)&&(t+=e[n].toString());return t},Lt=function(e,t,n){return{completedTasks:y.completedTasks,nodeSession:e,initialReduxState:t,helmetStrings:n}};t.default=Object(c.createServerRenderer)(function(e){return O.reset(),O.init(e.data),new Promise(function(t,n){var c=e.baseUrl.substring(0,e.baseUrl.length-1),l=e.url.substring(c.length),f=xt(Object(u.createMemoryHistory)());f.dispatch(Object(s.replace)(l));var p={},d=r.createElement(o.Provider,{store:f},r.createElement(a.StaticRouter,{basename:c,context:p,location:e.location.path,children:Ot})),h=function(){return Object(i.renderToString)(d)};h(),p.url?t({redirectUrl:p.url,globals:Lt(e.data,f.getState(),Tt())}):e.domainTasks.then(function(){t({html:h(),globals:Lt(e.data,f.getState(),Tt())})},n)})})}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,