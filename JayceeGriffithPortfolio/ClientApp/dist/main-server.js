!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="dist/",n(n.s=115)}([function(e,t,n){e.exports=n(1)(4)},function(e,t){e.exports=require("./vendor")},function(e,t,n){"use strict";var r;function o(e,t,n){if(!n||typeof n.value!==r.typeOfFunction)throw new TypeError("Only methods can be decorated with @bind. <"+t+"> is not a method!");return{configurable:r.boolTrue,get:function(){var e=n.value.bind(this);return Object.defineProperty(this,t,{value:e,configurable:r.boolTrue,writable:r.boolTrue}),e}}}Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.typeOfFunction="function",e.boolTrue=!0}(r||(r={})),t.bind=o,t.default=o},function(e,t,n){e.exports=n(1)(301)},function(e,t,n){"use strict";t.__esModule=!0,t.withRouter=t.matchPath=t.generatePath=t.Switch=t.StaticRouter=t.Router=t.Route=t.Redirect=t.Prompt=t.NavLink=t.MemoryRouter=t.Link=t.HashRouter=t.BrowserRouter=void 0;var r=y(n(56)),o=y(n(63)),i=y(n(33)),a=y(n(64)),s=y(n(66)),l=y(n(68)),c=y(n(70)),u=y(n(34)),f=y(n(22)),p=y(n(72)),d=y(n(74)),h=y(n(76)),m=y(n(78)),v=y(n(80));function y(e){return e&&e.__esModule?e:{default:e}}t.BrowserRouter=r.default,t.HashRouter=o.default,t.Link=i.default,t.MemoryRouter=a.default,t.NavLink=s.default,t.Prompt=l.default,t.Redirect=c.default,t.Route=u.default,t.Router=f.default,t.StaticRouter=p.default,t.Switch=d.default,t.generatePath=h.default,t.matchPath=m.default,t.withRouter=v.default},function(e,t,n){e.exports=n(1)(84)},function(e,t,n){e.exports=n(1)(7)},function(e,t,n){e.exports=n(1)(195)},function(e,t,n){e.exports=n(1)(229)},function(e,t,n){e.exports=n(1)(187)},function(e,t,n){e.exports=n(1)(143)},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){e.exports=n(1)(264)},function(e,t,n){e.exports=n(1)(148)},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n(57)),i=s(n(58)),a=n(11);function s(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,i){var s=void 0;"string"==typeof e?(s=(0,a.parsePath)(e)).state=t:(void 0===(s=r({},e)).pathname&&(s.pathname=""),s.search?"?"!==s.search.charAt(0)&&(s.search="?"+s.search):s.search="",s.hash?"#"!==s.hash.charAt(0)&&(s.hash="#"+s.hash):s.hash="",void 0!==t&&void 0===s.state&&(s.state=t));try{s.pathname=decodeURI(s.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+s.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(s.key=n),i?s.pathname?"/"!==s.pathname.charAt(0)&&(s.pathname=(0,o.default)(s.pathname,i.pathname)):s.pathname=i.pathname:s.pathname||(s.pathname="/"),s},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,i.default)(e.state,t.state)}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){e.exports=n(1)(132)},function(e,t,n){e.exports=n(1)(242)},function(e,t,n){e.exports=n(1)(253)},function(e,t,n){"use strict";t.__esModule=!0,t.createPath=t.parsePath=t.locationsAreEqual=t.createLocation=t.createMemoryHistory=t.createHashHistory=t.createBrowserHistory=void 0;var r=n(14);Object.defineProperty(t,"createLocation",{enumerable:!0,get:function(){return r.createLocation}}),Object.defineProperty(t,"locationsAreEqual",{enumerable:!0,get:function(){return r.locationsAreEqual}});var o=n(11);Object.defineProperty(t,"parsePath",{enumerable:!0,get:function(){return o.parsePath}}),Object.defineProperty(t,"createPath",{enumerable:!0,get:function(){return o.createPath}});var i=l(n(59)),a=l(n(60)),s=l(n(61));function l(e){return e&&e.__esModule?e:{default:e}}t.createBrowserHistory=i.default,t.createHashHistory=a.default,t.createMemoryHistory=s.default},function(e,t,n){e.exports=n(1)(19)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(15));t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,r.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,o,i){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof o?o(a,i):((0,r.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==a)}else i(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(62));t.default=r.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(35);t.UnityVersion=o.UnityVersion;var i=r(n(84));t.UnityContent=i.default;var a=r(n(85));t.default=a.default},function(e,t,n){e.exports=n.p+"ca6e18d297f499728270623baa09432b.jpg"},function(e,t,n){e.exports=n.p+"a1d58cf19b77fb6f6917befb472cdc8d.jpg"},function(e,t,n){e.exports=n.p+"6b7dcfac373293aa5eadf6eb0a29418e.jpg"},function(e,t,n){e.exports=n.p+"f215b8ab565c09e3da83575440569612.jpg"},function(e,t,n){e.exports=n.p+"f2f30dc7704b93cd414dba2533f7a0f7.jpg"},function(e,t,n){e.exports=n.p+"6254da913578421dc62065fede06f3e9.jpg"},function(e,t,n){e.exports=n.p+"e2b29d705fb34bbfc88be3bd0dfd2e3f.jpg"},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n(0)),i=l(n(6)),a=l(n(20)),s=n(19);function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},f=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!u(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);(0,a.default)(this.context.router,"You should not use <Link> outside a <Router>"),(0,a.default)(void 0!==t,'You must specify the "to" property');var l=this.context.router.history,c="string"==typeof t?(0,s.createLocation)(t,null,null,l.location):t,u=l.createHref(c);return o.default.createElement("a",r({},i,{onClick:this.handleClick,href:u,ref:n}))},t}(o.default.Component);f.propTypes={onClick:i.default.func,target:i.default.string,replace:i.default.bool,to:i.default.oneOfType([i.default.string,i.default.object]).isRequired,innerRef:i.default.oneOfType([i.default.string,i.default.func])},f.defaultProps={replace:!1},f.contextTypes={router:i.default.shape({history:i.default.shape({push:i.default.func.isRequired,replace:i.default.func.isRequired,createHref:i.default.func.isRequired}).isRequired}).isRequired},t.default=f},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(67));t.default=r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.UNITY_5_6=0]="UNITY_5_6",e[e.UNITY_2017=1]="UNITY_2017",e[e.UNITY_2018=2]="UNITY_2018"}(t.UnityVersion||(t.UnityVersion={}))},function(e,t,n){"use strict"},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(97));t.default={CAROUSEL:function(e){return(0,r.default)({carousel:!0,"carousel-slider":e})},WRAPPER:function(e,t){return(0,r.default)({"thumbs-wrapper":!e,"slider-wrapper":e,"axis-horizontal":"horizontal"===t,"axis-vertical":"horizontal"!==t})},SLIDER:function(e,t){return(0,r.default)({thumbs:!e,slider:e,animated:!t})},ITEM:function(e,t){return(0,r.default)({thumb:!e,slide:e,selected:t})},ARROW_PREV:function(e){return(0,r.default)({"control-arrow control-prev":!0,"control-disabled":e})},ARROW_NEXT:function(e){return(0,r.default)({"control-arrow control-next":!0,"control-disabled":e})},DOT:function(e){return(0,r.default)({dot:!0,selected:e})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return"translate3d"+("("+("horizontal"===t?[e,0,0]:[0,e,0]).join(",")+")")}},function(e,t,n){var r,o,i;o=[t,n(98)],void 0===(i="function"==typeof(r=function(e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(e){return e&&e.__esModule?e:{default:e}}(t);e.default=n.default})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=p(i),s=p(n(6)),l=p(n(39)),c=n(99),u=p(n(40)),f=p(n(41));function p(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return h.call(n),n.state={selectedItem:e.selectedItem,hasMount:!1,firstItem:0,itemSize:null,visibleItems:0,lastPosition:0,showArrows:!1,images:n.getImages()},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"componentDidMount",value:function(e){this.setupThumbs()}},{key:"componentWillReceiveProps",value:function(e,t){e.selectedItem!==this.state.selectedItem&&this.setState({selectedItem:e.selectedItem,firstItem:this.getFirstItem(e.selectedItem)}),e.children!==this.props.children&&this.setState({images:this.getImages()})}},{key:"componentDidUpdate",value:function(e){this.props.children!==e.children&&this.updateSizes()}},{key:"componentWillUnmount",value:function(){this.destroyThumbs()}},{key:"setupThumbs",value:function(){window.addEventListener("resize",this.updateSizes),window.addEventListener("DOMContentLoaded",this.updateSizes),this.updateSizes()}},{key:"destroyThumbs",value:function(){window.removeEventListener("resize",this.updateSizes),window.removeEventListener("DOMContentLoaded",this.updateSizes)}},{key:"getImages",value:function(){var e=i.Children.map(this.props.children,function(e,t){var n=e;return"img"!==e.type&&(n=i.Children.toArray(e.props.children).filter(function(e){return"img"===e.type})[0]),n&&0!==n.length?n:null});return 0===e.filter(function(e){return null!==e}).length?(console.warn("No images found! Can't build the thumb list without images. If you don't need thumbs, set showThumbs={false} in the Carousel. Note that it's not possible to get images rendered inside custom components. More info at https://github.com/leandrowd/react-responsive-carousel/blob/master/TROUBLESHOOTING.md"),null):e}},{key:"getFirstItem",value:function(e){var t=e;return e>=this.state.lastPosition&&(t=this.state.lastPosition),e<this.state.firstItem+this.state.visibleItems&&(t=this.state.firstItem),e<this.state.firstItem&&(t=e),t}},{key:"renderItems",value:function(){var e=this;return this.state.images.map(function(t,n){var o=l.default.ITEM(!1,n===e.state.selectedItem&&e.state.hasMount),i={key:n,ref:function(t){return e.setThumbsRef(t,n)},className:o,onClick:e.handleClickItem.bind(e,n,e.props.children[n]),onKeyDown:e.handleClickItem.bind(e,n,e.props.children[n])};return 0===n&&(t=a.default.cloneElement(t,{onLoad:e.setMountState})),a.default.createElement("li",r({},i,{role:"button",tabIndex:0}),t)})}},{key:"render",value:function(){if(!this.props.children)return null;var e,t=this.state.showArrows&&this.state.firstItem>0,n=this.state.showArrows&&this.state.firstItem<this.state.lastPosition,r=-this.state.firstItem*this.state.itemSize+"px",o=(0,u.default)(r,this.props.axis),i=this.props.transitionTime+"ms";return e={WebkitTransform:o,MozTransform:o,MsTransform:o,OTransform:o,transform:o,msTransform:o,WebkitTransitionDuration:i,MozTransitionDuration:i,MsTransitionDuration:i,OTransitionDuration:i,transitionDuration:i,msTransitionDuration:i},a.default.createElement("div",{className:l.default.CAROUSEL(!1)},a.default.createElement("div",{className:l.default.WRAPPER(!1),ref:this.setItemsWrapperRef},a.default.createElement("button",{type:"button",className:l.default.ARROW_PREV(!t),onClick:this.slideRight}),a.default.createElement(f.default,{tagName:"ul",selectedItem:this.state.selectedItem,className:l.default.SLIDER(!1,this.state.swiping),onSwipeLeft:this.slideLeft,onSwipeRight:this.slideRight,onSwipeMove:this.onSwipeMove,onSwipeStart:this.onSwipeStart,onSwipeEnd:this.onSwipeEnd,style:e,ref:this.setItemsListRef},this.renderItems()),a.default.createElement("button",{type:"button",className:l.default.ARROW_NEXT(!n),onClick:this.slideLeft})))}}]),t}();d.displayName="Thumbs",d.propsTypes={children:s.default.element.isRequired,transitionTime:s.default.number,selectedItem:s.default.number,thumbWidth:s.default.number},d.defaultProps={selectedItem:0,transitionTime:350,axis:"horizontal"};var h=function(){var e=this;this.setItemsWrapperRef=function(t){e.itemsWrapperRef=t},this.setItemsListRef=function(t){e.itemsListRef=t},this.setThumbsRef=function(t,n){e.thumbsRef||(e.thumbsRef=[]),e.thumbsRef[n]=t},this.updateSizes=function(){if(e.props.children&&e.itemsWrapperRef){var t=e.props.children.length,n=e.itemsWrapperRef.clientWidth,r=e.props.thumbWidth?e.props.thumbWidth:(0,c.outerWidth)(e.thumbsRef[0]),o=Math.floor(n/r),i=t-o,a=o<t;e.setState(function(t,n){return{itemSize:r,visibleItems:o,firstItem:a?e.getFirstItem(n.selectedItem):0,lastPosition:i,showArrows:a}})}},this.setMountState=function(){e.setState({hasMount:!0}),e.updateSizes()},this.handleClickItem=function(t,n,r){if(!r.keyCode||"Enter"===r.key){var o=e.props.onSelectItem;"function"==typeof o&&o(t,n)}},this.onSwipeStart=function(){e.setState({swiping:!0})},this.onSwipeEnd=function(){e.setState({swiping:!1})},this.onSwipeMove=function(t){var n=-e.state.firstItem*e.state.itemSize,r=-e.state.visibleItems*e.state.itemSize;0===n&&t>0&&(t=0),n===r&&t<0&&(t=0);var o=n+100/(e.itemsWrapperRef.clientWidth/t)+"%";e.itemsListRef&&["WebkitTransform","MozTransform","MsTransform","OTransform","transform","msTransform"].forEach(function(t){e.itemsListRef.style[t]=(0,u.default)(o,e.props.axis)})},this.slideRight=function(t){e.moveTo(e.state.firstItem-("number"==typeof t?t:1))},this.slideLeft=function(t){e.moveTo(e.state.firstItem+("number"==typeof t?t:1))},this.moveTo=function(t){t=(t=t<0?0:t)>=e.lastPosition?e.lastPosition:t,e.setState({firstItem:t,selectedItem:e.state.selectedItem})}};t.default=d},function(e,t,n){e.exports=n(1)(481)},function(e,t,n){e.exports=n(1)(260)},function(e,t,n){e.exports=n(1)(478)},function(e,t,n){e.exports=n(1)(186)},function(e,t){e.exports=require("timers")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(92));t.default=r.default,e.exports=t.default},function(e,t,n){e.exports=n(1)(246)},function(e,t,n){e.exports=n.p+"6a50cb30e6d0464aba45ec14263058d2.jpg"},function(e,t,n){e.exports=n.p+"d1c37ec98e69508cb302acdd4e208240.jpg"},function(e,t,n){e.exports=n(1)(189)},function(e,t,n){"use strict";e.exports=n(101)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DebounceCache=t.onlyResolvesLast=t.debounce=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){return e&&e.__esModule?e:{default:e}}(n(114));var i=t.debounce=function(e,t,n){return(0,o.default)(e,t,n)},a=t.onlyResolvesLast=function(e){var t=void 0;return function(){t&&t();var n=function(e){var t=!1;return{promise:new Promise(function(n,r){e.then(function(e){return t?void 0:n(e)},function(e){return t?void 0:r(e)})}),cancel:function(){t=!0}}}(e.apply(void 0,arguments)),r=n.promise,o=n.cancel;return t=o,r}},s=t.DebounceCache=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.getDebouncedFunction=function(e,n,r,o){var s=r.key,l=r.onlyResolvesLast,c=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(r,["key","onlyResolvesLast"]),u=s.apply(void 0,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(o));if(!t.debounceCache[u]){var f=i(e,n,c);l&&(f=a(f)),t.debounceCache[u]=f}return t.debounceCache[u]},this.debounceCache={}},l={key:function(){return null},onlyResolvesLast:!0};t.default=function(e,t,n){var o=r({},l,n),i=new s;return function(){for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];return i.getDebouncedFunction(e,t,o,r).apply(void 0,r)}}},function(e,t,n){e.exports=n(1)(309)},function(e,t,n){"use strict";t.__esModule=!0;var r=l(n(31)),o=l(n(0)),i=l(n(6)),a=n(19),s=l(n(22));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.history=(0,a.createBrowserHistory)(r.props),c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,r.default)(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return o.default.createElement(s.default,{history:this.history,children:this.props.children})},t}(o.default.Component);u.propTypes={basename:i.default.string,forceRefresh:i.default.bool,getUserConfirmation:i.default.func,keyLength:i.default.number,children:i.default.node},t.default=u},function(e,t,n){e.exports=n(1)(140)},function(e,t,n){e.exports=n(1)(141)},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=f(n(15)),a=f(n(20)),s=n(14),l=n(11),c=f(n(21)),u=n(32);function f(e){return e&&e.__esModule?e:{default:e}}var p=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(u.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,u.supportsHistory)(),f=!(0,u.supportsPopStateOnHashChange)(),d=e.forceRefresh,h=void 0!==d&&d,m=e.getUserConfirmation,v=void 0===m?u.getConfirmation:m,y=e.keyLength,b=void 0===y?6:y,g=e.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(e.basename)):"",w=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,i.default)(!g||(0,l.hasBasename)(a,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+g+'".'),g&&(a=(0,l.stripBasename)(a,g)),(0,s.createLocation)(a,r,n)},_=function(){return Math.random().toString(36).substr(2,b)},E=(0,c.default)(),S=function(e){o(I,e),I.length=t.length,E.notifyListeners(I.location,I.action)},P=function(e){(0,u.isExtraneousPopstateEvent)(e)||R(w(e.state))},O=function(){R(w(p()))},k=!1,R=function(e){k?(k=!1,S()):E.confirmTransitionTo(e,"POP",v,function(t){t?S({action:"POP",location:e}):j(e)})},j=function(e){var t=I.location,n=x.indexOf(t.key);-1===n&&(n=0);var r=x.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(k=!0,L(o))},C=w(p()),x=[C.key],T=function(e){return g+(0,l.createPath)(e)},L=function(e){t.go(e)},M=0,N=function(e){1===(M+=e)?((0,u.addEventListener)(window,"popstate",P),f&&(0,u.addEventListener)(window,"hashchange",O)):0===M&&((0,u.removeEventListener)(window,"popstate",P),f&&(0,u.removeEventListener)(window,"hashchange",O))},A=!1,I={length:t.length,action:"POP",location:C,createHref:T,push:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,s.createLocation)(e,o,_(),I.location);E.confirmTransitionTo(a,"PUSH",v,function(e){if(e){var r=T(a),o=a.key,s=a.state;if(n)if(t.pushState({key:o,state:s},null,r),h)window.location.href=r;else{var l=x.indexOf(I.location.key),c=x.slice(0,-1===l?0:l+1);c.push(a.key),x=c,S({action:"PUSH",location:a})}else(0,i.default)(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,s.createLocation)(e,o,_(),I.location);E.confirmTransitionTo(a,"REPLACE",v,function(e){if(e){var r=T(a),o=a.key,s=a.state;if(n)if(t.replaceState({key:o,state:s},null,r),h)window.location.replace(r);else{var l=x.indexOf(I.location.key);-1!==l&&(x[l]=a.key),S({action:"REPLACE",location:a})}else(0,i.default)(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:L,goBack:function(){return L(-1)},goForward:function(){return L(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return A||(N(1),A=!0),function(){return A&&(A=!1,N(-1)),t()}},listen:function(e){var t=E.appendListener(e);return N(1),function(){N(-1),t()}}};return I}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(15)),i=u(n(20)),a=n(14),s=n(11),l=u(n(21)),c=n(32);function u(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,s.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:s.stripLeadingSlash,decodePath:s.addLeadingSlash},slash:{encodePath:s.addLeadingSlash,decodePath:s.addLeadingSlash}},p=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},d=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(c.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,c.supportsGoWithoutReloadUsingHash)(),u=e.getUserConfirmation,h=void 0===u?c.getConfirmation:u,m=e.hashType,v=void 0===m?"slash":m,y=e.basename?(0,s.stripTrailingSlash)((0,s.addLeadingSlash)(e.basename)):"",b=f[v],g=b.encodePath,w=b.decodePath,_=function(){var e=w(p());return(0,o.default)(!y||(0,s.hasBasename)(e,y),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+y+'".'),y&&(e=(0,s.stripBasename)(e,y)),(0,a.createLocation)(e)},E=(0,l.default)(),S=function(e){r(F,e),F.length=t.length,E.notifyListeners(F.location,F.action)},P=!1,O=null,k=function(){var e=p(),t=g(e);if(e!==t)d(t);else{var n=_(),r=F.location;if(!P&&(0,a.locationsAreEqual)(r,n))return;if(O===(0,s.createPath)(n))return;O=null,R(n)}},R=function(e){P?(P=!1,S()):E.confirmTransitionTo(e,"POP",h,function(t){t?S({action:"POP",location:e}):j(e)})},j=function(e){var t=F.location,n=L.lastIndexOf((0,s.createPath)(t));-1===n&&(n=0);var r=L.lastIndexOf((0,s.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(P=!0,M(o))},C=p(),x=g(C);C!==x&&d(x);var T=_(),L=[(0,s.createPath)(T)],M=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},N=0,A=function(e){1===(N+=e)?(0,c.addEventListener)(window,"hashchange",k):0===N&&(0,c.removeEventListener)(window,"hashchange",k)},I=!1,F={length:t.length,action:"POP",location:T,createHref:function(e){return"#"+g(y+(0,s.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,F.location);E.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(y+t);if(p()!==r){O=t,function(e){window.location.hash=e}(r);var i=L.lastIndexOf((0,s.createPath)(F.location)),a=L.slice(0,-1===i?0:i+1);a.push(t),L=a,S({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),S()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,F.location);E.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(y+t);p()!==r&&(O=t,d(r));var o=L.indexOf((0,s.createPath)(F.location));-1!==o&&(L[o]=t),S({action:"REPLACE",location:n})}})},go:M,goBack:function(){return M(-1)},goForward:function(){return M(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return I||(A(1),I=!0),function(){return I&&(I=!1,A(-1)),t()}},listen:function(e){var t=E.appendListener(e);return A(1),function(){A(-1),t()}}};return F}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=c(n(15)),a=n(11),s=n(14),l=c(n(21));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,c=void 0===n?["/"]:n,f=e.initialIndex,p=void 0===f?0:f,d=e.keyLength,h=void 0===d?6:d,m=(0,l.default)(),v=function(e){o(E,e),E.length=E.entries.length,m.notifyListeners(E.location,E.action)},y=function(){return Math.random().toString(36).substr(2,h)},b=u(p,0,c.length-1),g=c.map(function(e){return"string"==typeof e?(0,s.createLocation)(e,void 0,y()):(0,s.createLocation)(e,void 0,e.key||y())}),w=a.createPath,_=function(e){var n=u(E.index+e,0,E.entries.length-1),r=E.entries[n];m.confirmTransitionTo(r,"POP",t,function(e){e?v({action:"POP",location:r,index:n}):v()})},E={length:g.length,action:"POP",location:g[b],index:b,entries:g,createHref:w,push:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,y(),E.location);m.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=E.index+1,n=E.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),v({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,y(),E.location);m.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(E.entries[E.index]=o,v({action:"REPLACE",location:o}))})},go:_,goBack:function(){return _(-1)},goForward:function(){return _(1)},canGo:function(e){var t=E.index+e;return t>=0&&t<E.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return E}},function(e,t,n){e.exports=n(1)(87)},function(e,t,n){"use strict";t.__esModule=!0;var r=l(n(31)),o=l(n(0)),i=l(n(6)),a=n(19),s=l(n(22));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.history=(0,a.createHashHistory)(r.props),c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,r.default)(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return o.default.createElement(s.default,{history:this.history,children:this.props.children})},t}(o.default.Component);u.propTypes={basename:i.default.string,getUserConfirmation:i.default.func,hashType:i.default.oneOf(["hashbang","noslash","slash"]),children:i.default.node},t.default=u},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(65));t.default=r.default},function(e,t,n){e.exports=n(1)(284)},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=c(n(0)),a=c(n(6)),s=c(n(34)),l=c(n(33));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e){var t=e.to,n=e.exact,a=e.strict,c=e.location,u=e.activeClassName,f=e.className,p=e.activeStyle,d=e.style,h=e.isActive,m=e["aria-current"],v=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),y="object"===(void 0===t?"undefined":o(t))?t.pathname:t,b=y&&y.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return i.default.createElement(s.default,{path:b,exact:n,strict:a,location:c,children:function(e){var n=e.location,o=e.match,a=!!(h?h(o,n):o);return i.default.createElement(l.default,r({to:t,className:a?[f,u].filter(function(e){return e}).join(" "):f,style:a?r({},d,p):d,"aria-current":a&&m||null},v))}})};u.propTypes={to:l.default.propTypes.to,exact:a.default.bool,strict:a.default.bool,location:a.default.object,activeClassName:a.default.string,className:a.default.string,activeStyle:a.default.object,style:a.default.object,isActive:a.default.func,"aria-current":a.default.oneOf(["page","step","location","date","time","true"])},u.defaultProps={activeClassName:"active","aria-current":"page"},t.default=u},function(e,t,n){e.exports=n(1)(154)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(69));t.default=r.default},function(e,t,n){e.exports=n(1)(288)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(71));t.default=r.default},function(e,t,n){e.exports=n(1)(289)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(73));t.default=r.default},function(e,t,n){e.exports=n(1)(291)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(75));t.default=r.default},function(e,t,n){e.exports=n(1)(292)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(77));t.default=r.default},function(e,t,n){e.exports=n(1)(152)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(79));t.default=r.default},function(e,t,n){e.exports=n(1)(88)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(81));t.default=r.default},function(e,t,n){e.exports=n(1)(293)},function(e,t){},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(35);n(36);var o=function(){function e(t,n,o){var i=o||{};this.buildJsonPath=t,this.unityLoaderJsPath=n,this.uniqueID=++e.uniqueID,this.unityEvents=[],this.unityConfig={modules:i.modules||{},unityVersion:i.unityVersion||r.UnityVersion.UNITY_2018,adjustOnWindowResize:i.adjustOnWindowResize,id:i.id||"nill"}}return e.prototype.setComponentInstance=function(e){this.unityComponent=e},e.prototype.setUnityInstance=function(e){this.unityInstance=e},e.prototype.setFullscreen=function(e){null!=this.unityInstance&&this.unityInstance.SetFullscreen(!0===e?1:0)},e.prototype.send=function(e,t,n){null!=this.unityInstance&&(void 0===n?this.unityInstance.SendMessage(e,t):this.unityInstance.SendMessage(e,t,n))},e.prototype.on=function(e,t){this.unityEvents.push({eventName:e,eventCallback:t}),void 0===window.ReactUnityWebGL&&(window.ReactUnityWebGL={}),window.ReactUnityWebGL[e]=function(e){return t(e)}},e.prototype.triggerUnityEvent=function(e,t){for(var n=0;n<this.unityEvents.length;n++)this.unityEvents[n].eventName===e&&this.unityEvents[n].eventCallback(t)},e.uniqueID=0,e}();t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(86)),s=i(n(91));n(36);var l=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n.unityLoaderService=new s.default,n.onWindowResizeBinding=n.onWindowResize.bind(n),n.unityContent=n.props.unityContent,n.unityContent.setComponentInstance(n),n}return r(t,e),t.prototype.onProgress=function(e,t){this.unityContent.triggerUnityEvent("progress",t),1===t&&this.unityContent.triggerUnityEvent("loaded")},t.prototype.onWindowResize=function(){!0===this.unityContent.unityConfig.adjustOnWindowResize&&this.adjustCanvasToContainer()},t.prototype.adjustCanvasToContainer=function(){var e=this.htmlElement.offsetWidth,t=this.htmlElement.offsetHeight,n=this.htmlElement.getElementsByTagName("canvas")[0];null!==n&&(n.height!==t&&(n.height=t),n.width!==e&&(n.width=e))},t.prototype.componentDidMount=function(){var e=this;window.addEventListener("resize",this.onWindowResizeBinding),this.unityLoaderService.append(this.props.unityContent.unityLoaderJsPath,function(){e.unityContent.setUnityInstance(UnityLoader.instantiate("__ReactUnityWebGL_"+e.props.unityContent.uniqueID+"__",e.props.unityContent.buildJsonPath,{onProgress:e.onProgress.bind(e),Module:e.props.unityContent.unityConfig.modules,width:"100%",height:"100%"}))})},t.prototype.componentWillUnmount=function(){window.removeEventListener("resize",this.onWindowResizeBinding)},t.prototype.render=function(){var e=this;return a.createElement("div",{className:this.props.className||"",ref:function(t){return e.htmlElement=t},id:"__ReactUnityWebGL_"+this.props.unityContent.uniqueID+"__",style:{width:this.props.width||"800px",height:this.props.height||"600px"}})},t}(a.Component);t.default=l},function(e,t,n){"use strict";e.exports=n(87)},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(88),o=n(89),i=n(90),a=n(37),s="function"==typeof Symbol&&Symbol.for,l=s?Symbol.for("react.element"):60103,c=s?Symbol.for("react.portal"):60106,u=s?Symbol.for("react.fragment"):60107,f=s?Symbol.for("react.strict_mode"):60108,p=s?Symbol.for("react.profiler"):60114,d=s?Symbol.for("react.provider"):60109,h=s?Symbol.for("react.context"):60110,m=s?Symbol.for("react.async_mode"):60111,v=s?Symbol.for("react.forward_ref"):60112;s&&Symbol.for("react.timeout");var y="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function w(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||g}function _(){}function E(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=w.prototype;var S=E.prototype=new _;S.constructor=E,r(S,w.prototype),S.isPureReactComponent=!0;var P={current:null},O=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function R(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)O.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:l,type:e,key:i,ref:a,props:o,_owner:P.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var C=/\/+/g,x=[];function T(e,t,n,r){if(x.length){var o=x.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function L(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>x.length&&x.push(e)}function M(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case l:case c:i=!0}}if(i)return n(r,e,""===t?"."+N(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var s=t+N(o=e[a],a);i+=M(o,s,n,r)}else if(null===e||void 0===e?s=null:s="function"==typeof(s=y&&e[y]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),a=0;!(o=e.next()).done;)i+=M(o=o.value,s=t+N(o,a++),n,r);else"object"===o&&b("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,a.thatReturnsArgument):null!=e&&(j(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(C,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(C,"$&/")+"/"),t=T(t,i,r,o),null==e||M(e,"",I,t),L(t)}var D={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=T(null,null,t,n),null==e||M(e,"",A,t),L(t)},count:function(e){return null==e?0:M(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return F(e,t,null,a.thatReturnsArgument),t},only:function(e){return j(e)||b("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:h,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:v,render:e}},Fragment:u,StrictMode:f,unstable_AsyncMode:m,unstable_Profiler:p,createElement:R,cloneElement:function(e,t,n){(null===e||void 0===e)&&b("267",e);var o=void 0,i=r({},e.props),a=e.key,s=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,c=P.current),void 0!==t.key&&(a=""+t.key);var u=void 0;for(o in e.type&&e.type.defaultProps&&(u=e.type.defaultProps),t)O.call(t,o)&&!k.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==u?u[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){u=Array(o);for(var f=0;f<o;f++)u[f]=arguments[f+2];i.children=u}return{$$typeof:l,type:e.type,key:a,ref:s,props:i,_owner:c}},createFactory:function(e){var t=R.bind(null,e);return t.type=e,t},isValidElement:j,version:"16.4.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:P,assign:r}},W={default:D},U=W&&D||W;e.exports=U.default?U.default:U},function(e,t,n){e.exports=n(1)(56)},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,s,l){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,o,i,a,s,l],f=0;(c=new Error(t.replace(/%s/g,function(){return u[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.documentHead=document.getElementsByTagName("head")[0]}return e.prototype.append=function(e,t){this.unityLoaderScript=document.createElement("script"),this.unityLoaderScript.type="text/javascript",this.unityLoaderScript.async=!0,this.unityLoaderScript.src=e,this.unityLoaderScript.onload=function(){t()},this.documentHead.appendChild(this.unityLoaderScript)},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=l(o),a=n(6),s=l(n(93));function l(e){return e&&e.__esModule?e:{default:e}}var c={"ps-scroll-y":"onScrollY","ps-scroll-x":"onScrollX","ps-scroll-up":"onScrollUp","ps-scroll-down":"onScrollDown","ps-scroll-left":"onScrollLeft","ps-scroll-right":"onScrollRight","ps-y-reach-start":"onYReachStart","ps-y-reach-end":"onYReachEnd","ps-x-reach-start":"onXReachStart","ps-x-reach-end":"onXReachEnd"};Object.freeze(c);var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleRef=n.handleRef.bind(n),n._handlerByEvent={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this._ps=new s.default(this._container,this.props.option),this._updateEventHook()}},{key:"componentDidUpdate",value:function(e){this._updateEventHook(e),this._ps.update()}},{key:"componentWillUnmount",value:function(){var e=this;Object.keys(this._handlerByEvent).forEach(function(t){var n=e._handlerByEvent[t];n&&e._container.removeEventListener(t,n,!1)}),this._handlerByEvent={},this._ps.destroy(),this._ps=null}},{key:"_updateEventHook",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object.keys(c).forEach(function(n){var r=e.props[c[n]],o=t[c[n]];if(r!==o){if(o){var i=e._handlerByEvent[n];e._container.removeEventListener(n,i,!1),e._handlerByEvent[n]=null}if(r){var a=function(){return r(e._container)};e._container.addEventListener(n,a,!1),e._handlerByEvent[n]=a}}})}},{key:"updateScroll",value:function(){this._ps.update()}},{key:"handleRef",value:function(e){this._container=e,this.props.containerRef(e)}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.component,r=e.className,o=e.style,a=n;return i.default.createElement(a,{style:o,className:"scrollbar-container "+r,ref:this.handleRef},t)}}]),t}();t.default=u,u.defaultProps={className:"",style:void 0,option:void 0,containerRef:function(){},onScrollY:void 0,onScrollX:void 0,onScrollUp:void 0,onScrollDown:void 0,onScrollLeft:void 0,onScrollRight:void 0,onYReachStart:void 0,onYReachEnd:void 0,onXReachStart:void 0,onXReachEnd:void 0,component:"div"},u.propTypes={children:a.PropTypes.node.isRequired,className:a.PropTypes.string,style:a.PropTypes.object,option:a.PropTypes.object,containerRef:a.PropTypes.func,onScrollY:a.PropTypes.func,onScrollX:a.PropTypes.func,onScrollUp:a.PropTypes.func,onScrollDown:a.PropTypes.func,onScrollLeft:a.PropTypes.func,onScrollRight:a.PropTypes.func,onYReachStart:a.PropTypes.func,onYReachEnd:a.PropTypes.func,onXReachStart:a.PropTypes.func,onXReachEnd:a.PropTypes.func,component:a.PropTypes.string},e.exports=t.default},function(e,t,n){"use strict";
/*!
 * perfect-scrollbar v1.4.0
 * (c) 2018 Hyunje Jun
 * @license MIT
 */function r(e){return getComputedStyle(e)}function o(e,t){for(var n in t){var r=t[n];"number"==typeof r&&(r+="px"),e.style[n]=r}return e}function i(e){var t=document.createElement("div");return t.className=e,t}var a="undefined"!=typeof Element&&(Element.prototype.matches||Element.prototype.webkitMatchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector);function s(e,t){if(!a)throw new Error("No element matching method supported");return a.call(e,t)}function l(e){e.remove?e.remove():e.parentNode&&e.parentNode.removeChild(e)}function c(e,t){return Array.prototype.filter.call(e.children,function(e){return s(e,t)})}var u={main:"ps",element:{thumb:function(e){return"ps__thumb-"+e},rail:function(e){return"ps__rail-"+e},consuming:"ps__child--consume"},state:{focus:"ps--focus",clicking:"ps--clicking",active:function(e){return"ps--active-"+e},scrolling:function(e){return"ps--scrolling-"+e}}},f={x:null,y:null};function p(e,t){var n=e.element.classList,r=u.state.scrolling(t);n.contains(r)?clearTimeout(f[t]):n.add(r)}function d(e,t){f[t]=setTimeout(function(){return e.isAlive&&e.element.classList.remove(u.state.scrolling(t))},e.settings.scrollingThreshold)}var h=function(e){this.element=e,this.handlers={}},m={isEmpty:{configurable:!0}};h.prototype.bind=function(e,t){void 0===this.handlers[e]&&(this.handlers[e]=[]),this.handlers[e].push(t),this.element.addEventListener(e,t,!1)},h.prototype.unbind=function(e,t){var n=this;this.handlers[e]=this.handlers[e].filter(function(r){return!(!t||r===t)||(n.element.removeEventListener(e,r,!1),!1)})},h.prototype.unbindAll=function(){for(var e in this.handlers)this.unbind(e)},m.isEmpty.get=function(){var e=this;return Object.keys(this.handlers).every(function(t){return 0===e.handlers[t].length})},Object.defineProperties(h.prototype,m);var v=function(){this.eventElements=[]};function y(e){if("function"==typeof window.CustomEvent)return new CustomEvent(e);var t=document.createEvent("CustomEvent");return t.initCustomEvent(e,!1,!1,void 0),t}v.prototype.eventElement=function(e){var t=this.eventElements.filter(function(t){return t.element===e})[0];return t||(t=new h(e),this.eventElements.push(t)),t},v.prototype.bind=function(e,t,n){this.eventElement(e).bind(t,n)},v.prototype.unbind=function(e,t,n){var r=this.eventElement(e);r.unbind(t,n),r.isEmpty&&this.eventElements.splice(this.eventElements.indexOf(r),1)},v.prototype.unbindAll=function(){this.eventElements.forEach(function(e){return e.unbindAll()}),this.eventElements=[]},v.prototype.once=function(e,t,n){var r=this.eventElement(e),o=function(e){r.unbind(t,o),n(e)};r.bind(t,o)};var b=function(e,t,n,r,o){var i;if(void 0===r&&(r=!0),void 0===o&&(o=!1),"top"===t)i=["contentHeight","containerHeight","scrollTop","y","up","down"];else{if("left"!==t)throw new Error("A proper axis should be provided");i=["contentWidth","containerWidth","scrollLeft","x","left","right"]}!function(e,t,n,r,o){var i=n[0],a=n[1],s=n[2],l=n[3],c=n[4],u=n[5];void 0===r&&(r=!0);void 0===o&&(o=!1);var f=e.element;e.reach[l]=null,f[s]<1&&(e.reach[l]="start");f[s]>e[i]-e[a]-1&&(e.reach[l]="end");t&&(f.dispatchEvent(y("ps-scroll-"+l)),t<0?f.dispatchEvent(y("ps-scroll-"+c)):t>0&&f.dispatchEvent(y("ps-scroll-"+u)),r&&function(e,t){p(e,t),d(e,t)}(e,l));e.reach[l]&&(t||o)&&f.dispatchEvent(y("ps-"+l+"-reach-"+e.reach[l]))}(e,n,i,r,o)};function g(e){return parseInt(e,10)||0}var w={isWebKit:"undefined"!=typeof document&&"WebkitAppearance"in document.documentElement.style,supportsTouch:"undefined"!=typeof window&&("ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch),supportsIePointer:"undefined"!=typeof navigator&&navigator.msMaxTouchPoints,isChrome:"undefined"!=typeof navigator&&/Chrome/i.test(navigator&&navigator.userAgent)},_=function(e){var t=e.element,n=Math.floor(t.scrollTop);e.containerWidth=t.clientWidth,e.containerHeight=t.clientHeight,e.contentWidth=t.scrollWidth,e.contentHeight=t.scrollHeight,t.contains(e.scrollbarXRail)||(c(t,u.element.rail("x")).forEach(function(e){return l(e)}),t.appendChild(e.scrollbarXRail)),t.contains(e.scrollbarYRail)||(c(t,u.element.rail("y")).forEach(function(e){return l(e)}),t.appendChild(e.scrollbarYRail)),!e.settings.suppressScrollX&&e.containerWidth+e.settings.scrollXMarginOffset<e.contentWidth?(e.scrollbarXActive=!0,e.railXWidth=e.containerWidth-e.railXMarginWidth,e.railXRatio=e.containerWidth/e.railXWidth,e.scrollbarXWidth=E(e,g(e.railXWidth*e.containerWidth/e.contentWidth)),e.scrollbarXLeft=g((e.negativeScrollAdjustment+t.scrollLeft)*(e.railXWidth-e.scrollbarXWidth)/(e.contentWidth-e.containerWidth))):e.scrollbarXActive=!1,!e.settings.suppressScrollY&&e.containerHeight+e.settings.scrollYMarginOffset<e.contentHeight?(e.scrollbarYActive=!0,e.railYHeight=e.containerHeight-e.railYMarginHeight,e.railYRatio=e.containerHeight/e.railYHeight,e.scrollbarYHeight=E(e,g(e.railYHeight*e.containerHeight/e.contentHeight)),e.scrollbarYTop=g(n*(e.railYHeight-e.scrollbarYHeight)/(e.contentHeight-e.containerHeight))):e.scrollbarYActive=!1,e.scrollbarXLeft>=e.railXWidth-e.scrollbarXWidth&&(e.scrollbarXLeft=e.railXWidth-e.scrollbarXWidth),e.scrollbarYTop>=e.railYHeight-e.scrollbarYHeight&&(e.scrollbarYTop=e.railYHeight-e.scrollbarYHeight),function(e,t){var n={width:t.railXWidth},r=Math.floor(e.scrollTop);t.isRtl?n.left=t.negativeScrollAdjustment+e.scrollLeft+t.containerWidth-t.contentWidth:n.left=e.scrollLeft;t.isScrollbarXUsingBottom?n.bottom=t.scrollbarXBottom-r:n.top=t.scrollbarXTop+r;o(t.scrollbarXRail,n);var i={top:r,height:t.railYHeight};t.isScrollbarYUsingRight?t.isRtl?i.right=t.contentWidth-(t.negativeScrollAdjustment+e.scrollLeft)-t.scrollbarYRight-t.scrollbarYOuterWidth:i.right=t.scrollbarYRight-e.scrollLeft:t.isRtl?i.left=t.negativeScrollAdjustment+e.scrollLeft+2*t.containerWidth-t.contentWidth-t.scrollbarYLeft-t.scrollbarYOuterWidth:i.left=t.scrollbarYLeft+e.scrollLeft;o(t.scrollbarYRail,i),o(t.scrollbarX,{left:t.scrollbarXLeft,width:t.scrollbarXWidth-t.railBorderXWidth}),o(t.scrollbarY,{top:t.scrollbarYTop,height:t.scrollbarYHeight-t.railBorderYWidth})}(t,e),e.scrollbarXActive?t.classList.add(u.state.active("x")):(t.classList.remove(u.state.active("x")),e.scrollbarXWidth=0,e.scrollbarXLeft=0,t.scrollLeft=0),e.scrollbarYActive?t.classList.add(u.state.active("y")):(t.classList.remove(u.state.active("y")),e.scrollbarYHeight=0,e.scrollbarYTop=0,t.scrollTop=0)};function E(e,t){return e.settings.minScrollbarLength&&(t=Math.max(t,e.settings.minScrollbarLength)),e.settings.maxScrollbarLength&&(t=Math.min(t,e.settings.maxScrollbarLength)),t}function S(e,t){var n=t[0],r=t[1],o=t[2],i=t[3],a=t[4],s=t[5],l=t[6],c=t[7],f=t[8],h=e.element,m=null,v=null,y=null;function b(t){h[l]=m+y*(t[o]-v),p(e,c),_(e),t.stopPropagation(),t.preventDefault()}function g(){d(e,c),e[f].classList.remove(u.state.clicking),e.event.unbind(e.ownerDocument,"mousemove",b)}e.event.bind(e[a],"mousedown",function(t){m=h[l],v=t[o],y=(e[r]-e[n])/(e[i]-e[s]),e.event.bind(e.ownerDocument,"mousemove",b),e.event.once(e.ownerDocument,"mouseup",g),e[f].classList.add(u.state.clicking),t.stopPropagation(),t.preventDefault()})}var P={"click-rail":function(e){e.event.bind(e.scrollbarY,"mousedown",function(e){return e.stopPropagation()}),e.event.bind(e.scrollbarYRail,"mousedown",function(t){var n=t.pageY-window.pageYOffset-e.scrollbarYRail.getBoundingClientRect().top>e.scrollbarYTop?1:-1;e.element.scrollTop+=n*e.containerHeight,_(e),t.stopPropagation()}),e.event.bind(e.scrollbarX,"mousedown",function(e){return e.stopPropagation()}),e.event.bind(e.scrollbarXRail,"mousedown",function(t){var n=t.pageX-window.pageXOffset-e.scrollbarXRail.getBoundingClientRect().left>e.scrollbarXLeft?1:-1;e.element.scrollLeft+=n*e.containerWidth,_(e),t.stopPropagation()})},"drag-thumb":function(e){S(e,["containerWidth","contentWidth","pageX","railXWidth","scrollbarX","scrollbarXWidth","scrollLeft","x","scrollbarXRail"]),S(e,["containerHeight","contentHeight","pageY","railYHeight","scrollbarY","scrollbarYHeight","scrollTop","y","scrollbarYRail"])},keyboard:function(e){var t=e.element;e.event.bind(e.ownerDocument,"keydown",function(n){if(!(n.isDefaultPrevented&&n.isDefaultPrevented()||n.defaultPrevented)&&(s(t,":hover")||s(e.scrollbarX,":focus")||s(e.scrollbarY,":focus"))){var r=document.activeElement?document.activeElement:e.ownerDocument.activeElement;if(r){if("IFRAME"===r.tagName)r=r.contentDocument.activeElement;else for(;r.shadowRoot;)r=r.shadowRoot.activeElement;if(function(e){return s(e,"input,[contenteditable]")||s(e,"select,[contenteditable]")||s(e,"textarea,[contenteditable]")||s(e,"button,[contenteditable]")}(r))return}var o=0,i=0;switch(n.which){case 37:o=n.metaKey?-e.contentWidth:n.altKey?-e.containerWidth:-30;break;case 38:i=n.metaKey?e.contentHeight:n.altKey?e.containerHeight:30;break;case 39:o=n.metaKey?e.contentWidth:n.altKey?e.containerWidth:30;break;case 40:i=n.metaKey?-e.contentHeight:n.altKey?-e.containerHeight:-30;break;case 32:i=n.shiftKey?e.containerHeight:-e.containerHeight;break;case 33:i=e.containerHeight;break;case 34:i=-e.containerHeight;break;case 36:i=e.contentHeight;break;case 35:i=-e.contentHeight;break;default:return}e.settings.suppressScrollX&&0!==o||e.settings.suppressScrollY&&0!==i||(t.scrollTop-=i,t.scrollLeft+=o,_(e),function(n,r){var o=Math.floor(t.scrollTop);if(0===n){if(!e.scrollbarYActive)return!1;if(0===o&&r>0||o>=e.contentHeight-e.containerHeight&&r<0)return!e.settings.wheelPropagation}var i=t.scrollLeft;if(0===r){if(!e.scrollbarXActive)return!1;if(0===i&&n<0||i>=e.contentWidth-e.containerWidth&&n>0)return!e.settings.wheelPropagation}return!0}(o,i)&&n.preventDefault())}})},wheel:function(e){var t=e.element;function n(n){var o=function(e){var t=e.deltaX,n=-1*e.deltaY;return void 0!==t&&void 0!==n||(t=-1*e.wheelDeltaX/6,n=e.wheelDeltaY/6),e.deltaMode&&1===e.deltaMode&&(t*=10,n*=10),t!=t&&n!=n&&(t=0,n=e.wheelDelta),e.shiftKey?[-n,-t]:[t,n]}(n),i=o[0],a=o[1];if(!function(e,n,o){if(!w.isWebKit&&t.querySelector("select:focus"))return!0;if(!t.contains(e))return!1;for(var i=e;i&&i!==t;){if(i.classList.contains(u.element.consuming))return!0;var a=r(i);if([a.overflow,a.overflowX,a.overflowY].join("").match(/(scroll|auto)/)){var s=i.scrollHeight-i.clientHeight;if(s>0&&!(0===i.scrollTop&&o>0||i.scrollTop===s&&o<0))return!0;var l=i.scrollWidth-i.clientWidth;if(l>0&&!(0===i.scrollLeft&&n<0||i.scrollLeft===l&&n>0))return!0}i=i.parentNode}return!1}(n.target,i,a)){var s=!1;e.settings.useBothWheelAxes?e.scrollbarYActive&&!e.scrollbarXActive?(a?t.scrollTop-=a*e.settings.wheelSpeed:t.scrollTop+=i*e.settings.wheelSpeed,s=!0):e.scrollbarXActive&&!e.scrollbarYActive&&(i?t.scrollLeft+=i*e.settings.wheelSpeed:t.scrollLeft-=a*e.settings.wheelSpeed,s=!0):(t.scrollTop-=a*e.settings.wheelSpeed,t.scrollLeft+=i*e.settings.wheelSpeed),_(e),(s=s||function(n,r){var o=Math.floor(t.scrollTop),i=0===t.scrollTop,a=o+t.offsetHeight===t.scrollHeight,s=0===t.scrollLeft,l=t.scrollLeft+t.offsetWidth===t.scrollWidth;return!(Math.abs(r)>Math.abs(n)?i||a:s||l)||!e.settings.wheelPropagation}(i,a))&&!n.ctrlKey&&(n.stopPropagation(),n.preventDefault())}}void 0!==window.onwheel?e.event.bind(t,"wheel",n):void 0!==window.onmousewheel&&e.event.bind(t,"mousewheel",n)},touch:function(e){if(w.supportsTouch||w.supportsIePointer){var t=e.element,n={},o=0,i={},a=null;w.supportsTouch?(e.event.bind(t,"touchstart",f),e.event.bind(t,"touchmove",p),e.event.bind(t,"touchend",d)):w.supportsIePointer&&(window.PointerEvent?(e.event.bind(t,"pointerdown",f),e.event.bind(t,"pointermove",p),e.event.bind(t,"pointerup",d)):window.MSPointerEvent&&(e.event.bind(t,"MSPointerDown",f),e.event.bind(t,"MSPointerMove",p),e.event.bind(t,"MSPointerUp",d)))}function s(n,r){t.scrollTop-=r,t.scrollLeft-=n,_(e)}function l(e){return e.targetTouches?e.targetTouches[0]:e}function c(e){return!(e.pointerType&&"pen"===e.pointerType&&0===e.buttons||(!e.targetTouches||1!==e.targetTouches.length)&&(!e.pointerType||"mouse"===e.pointerType||e.pointerType===e.MSPOINTER_TYPE_MOUSE))}function f(e){if(c(e)){var t=l(e);n.pageX=t.pageX,n.pageY=t.pageY,o=(new Date).getTime(),null!==a&&clearInterval(a)}}function p(a){if(c(a)){var f=l(a),p={pageX:f.pageX,pageY:f.pageY},d=p.pageX-n.pageX,h=p.pageY-n.pageY;if(function(e,n,o){if(!t.contains(e))return!1;for(var i=e;i&&i!==t;){if(i.classList.contains(u.element.consuming))return!0;var a=r(i);if([a.overflow,a.overflowX,a.overflowY].join("").match(/(scroll|auto)/)){var s=i.scrollHeight-i.clientHeight;if(s>0&&!(0===i.scrollTop&&o>0||i.scrollTop===s&&o<0))return!0;var l=i.scrollLeft-i.clientWidth;if(l>0&&!(0===i.scrollLeft&&n<0||i.scrollLeft===l&&n>0))return!0}i=i.parentNode}return!1}(a.target,d,h))return;s(d,h),n=p;var m=(new Date).getTime(),v=m-o;v>0&&(i.x=d/v,i.y=h/v,o=m),function(n,r){var o=Math.floor(t.scrollTop),i=t.scrollLeft,a=Math.abs(n),s=Math.abs(r);if(s>a){if(r<0&&o===e.contentHeight-e.containerHeight||r>0&&0===o)return 0===window.scrollY&&r>0&&w.isChrome}else if(a>s&&(n<0&&i===e.contentWidth-e.containerWidth||n>0&&0===i))return!0;return!0}(d,h)&&a.preventDefault()}}function d(){e.settings.swipeEasing&&(clearInterval(a),a=setInterval(function(){e.isInitialized?clearInterval(a):i.x||i.y?Math.abs(i.x)<.01&&Math.abs(i.y)<.01?clearInterval(a):(s(30*i.x,30*i.y),i.x*=.8,i.y*=.8):clearInterval(a)},10))}}},O=function(e,t){var n=this;if(void 0===t&&(t={}),"string"==typeof e&&(e=document.querySelector(e)),!e||!e.nodeName)throw new Error("no element is specified to initialize PerfectScrollbar");for(var a in this.element=e,e.classList.add(u.main),this.settings={handlers:["click-rail","drag-thumb","keyboard","wheel","touch"],maxScrollbarLength:null,minScrollbarLength:null,scrollingThreshold:1e3,scrollXMarginOffset:0,scrollYMarginOffset:0,suppressScrollX:!1,suppressScrollY:!1,swipeEasing:!0,useBothWheelAxes:!1,wheelPropagation:!0,wheelSpeed:1},t)n.settings[a]=t[a];this.containerWidth=null,this.containerHeight=null,this.contentWidth=null,this.contentHeight=null;var s=function(){return e.classList.add(u.state.focus)},l=function(){return e.classList.remove(u.state.focus)};this.isRtl="rtl"===r(e).direction,this.isNegativeScroll=function(){var t,n=e.scrollLeft;return e.scrollLeft=-1,t=e.scrollLeft<0,e.scrollLeft=n,t}(),this.negativeScrollAdjustment=this.isNegativeScroll?e.scrollWidth-e.clientWidth:0,this.event=new v,this.ownerDocument=e.ownerDocument||document,this.scrollbarXRail=i(u.element.rail("x")),e.appendChild(this.scrollbarXRail),this.scrollbarX=i(u.element.thumb("x")),this.scrollbarXRail.appendChild(this.scrollbarX),this.scrollbarX.setAttribute("tabindex",0),this.event.bind(this.scrollbarX,"focus",s),this.event.bind(this.scrollbarX,"blur",l),this.scrollbarXActive=null,this.scrollbarXWidth=null,this.scrollbarXLeft=null;var c=r(this.scrollbarXRail);this.scrollbarXBottom=parseInt(c.bottom,10),isNaN(this.scrollbarXBottom)?(this.isScrollbarXUsingBottom=!1,this.scrollbarXTop=g(c.top)):this.isScrollbarXUsingBottom=!0,this.railBorderXWidth=g(c.borderLeftWidth)+g(c.borderRightWidth),o(this.scrollbarXRail,{display:"block"}),this.railXMarginWidth=g(c.marginLeft)+g(c.marginRight),o(this.scrollbarXRail,{display:""}),this.railXWidth=null,this.railXRatio=null,this.scrollbarYRail=i(u.element.rail("y")),e.appendChild(this.scrollbarYRail),this.scrollbarY=i(u.element.thumb("y")),this.scrollbarYRail.appendChild(this.scrollbarY),this.scrollbarY.setAttribute("tabindex",0),this.event.bind(this.scrollbarY,"focus",s),this.event.bind(this.scrollbarY,"blur",l),this.scrollbarYActive=null,this.scrollbarYHeight=null,this.scrollbarYTop=null;var f=r(this.scrollbarYRail);this.scrollbarYRight=parseInt(f.right,10),isNaN(this.scrollbarYRight)?(this.isScrollbarYUsingRight=!1,this.scrollbarYLeft=g(f.left)):this.isScrollbarYUsingRight=!0,this.scrollbarYOuterWidth=this.isRtl?function(e){var t=r(e);return g(t.width)+g(t.paddingLeft)+g(t.paddingRight)+g(t.borderLeftWidth)+g(t.borderRightWidth)}(this.scrollbarY):null,this.railBorderYWidth=g(f.borderTopWidth)+g(f.borderBottomWidth),o(this.scrollbarYRail,{display:"block"}),this.railYMarginHeight=g(f.marginTop)+g(f.marginBottom),o(this.scrollbarYRail,{display:""}),this.railYHeight=null,this.railYRatio=null,this.reach={x:e.scrollLeft<=0?"start":e.scrollLeft>=this.contentWidth-this.containerWidth?"end":null,y:e.scrollTop<=0?"start":e.scrollTop>=this.contentHeight-this.containerHeight?"end":null},this.isAlive=!0,this.settings.handlers.forEach(function(e){return P[e](n)}),this.lastScrollTop=Math.floor(e.scrollTop),this.lastScrollLeft=e.scrollLeft,this.event.bind(this.element,"scroll",function(e){return n.onScroll(e)}),_(this)};O.prototype.update=function(){this.isAlive&&(this.negativeScrollAdjustment=this.isNegativeScroll?this.element.scrollWidth-this.element.clientWidth:0,o(this.scrollbarXRail,{display:"block"}),o(this.scrollbarYRail,{display:"block"}),this.railXMarginWidth=g(r(this.scrollbarXRail).marginLeft)+g(r(this.scrollbarXRail).marginRight),this.railYMarginHeight=g(r(this.scrollbarYRail).marginTop)+g(r(this.scrollbarYRail).marginBottom),o(this.scrollbarXRail,{display:"none"}),o(this.scrollbarYRail,{display:"none"}),_(this),b(this,"top",0,!1,!0),b(this,"left",0,!1,!0),o(this.scrollbarXRail,{display:""}),o(this.scrollbarYRail,{display:""}))},O.prototype.onScroll=function(e){this.isAlive&&(_(this),b(this,"top",this.element.scrollTop-this.lastScrollTop),b(this,"left",this.element.scrollLeft-this.lastScrollLeft),this.lastScrollTop=Math.floor(this.element.scrollTop),this.lastScrollLeft=this.element.scrollLeft)},O.prototype.destroy=function(){this.isAlive&&(this.event.unbindAll(),l(this.scrollbarX),l(this.scrollbarY),l(this.scrollbarXRail),l(this.scrollbarYRail),this.removePsClasses(),this.element=null,this.scrollbarX=null,this.scrollbarY=null,this.scrollbarXRail=null,this.scrollbarYRail=null,this.isAlive=!1)},O.prototype.removePsClasses=function(){this.element.className=this.element.className.split(" ").filter(function(e){return!e.match(/^ps([-_].+|)$/)}).join(" ")},e.exports=O},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Thumbs=t.Carousel=void 0;var r=i(n(96)),o=i(n(42));function i(e){return e&&e.__esModule?e:{default:e}}t.Carousel=r.default,t.Thumbs=o.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=h(i),s=h(n(16)),l=h(n(6)),c=h(n(39)),u=h(n(40)),f=h(n(41)),p=h(n(42)),d=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(100));function h(e){return e&&e.__esModule?e:{default:e}}var m=function(){},v=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return y.call(n),n.state={initialized:!1,selectedItem:e.selectedItem,hasMount:!1,isMouseEntered:!1,autoPlay:e.autoPlay},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"componentDidMount",value:function(){this.props.children&&this.setupCarousel()}},{key:"componentWillReceiveProps",value:function(e){var t=this;e.selectedItem!==this.state.selectedItem&&(this.updateSizes(),this.moveTo(e.selectedItem)),e.autoPlay!==this.state.autoPlay&&this.setState({autoPlay:e.autoPlay},function(){t.state.autoPlay?t.setupAutoPlay():t.destroyAutoPlay()})}},{key:"componentDidUpdate",value:function(e,t){e.children||!this.props.children||this.state.initialized||this.setupCarousel(),t.swiping&&!this.state.swiping&&this.resetPosition()}},{key:"componentWillUnmount",value:function(){this.destroyCarousel()}},{key:"setupCarousel",value:function(){this.bindEvents(),this.state.autoPlay&&i.Children.count(this.props.children)>1&&this.setupAutoPlay(),this.setState({initialized:!0});var e=this.getInitialImage();e?e.addEventListener("load",this.setMountState):this.setMountState()}},{key:"destroyCarousel",value:function(){this.state.initialized&&(this.unbindEvents(),this.destroyAutoPlay())}},{key:"setupAutoPlay",value:function(){this.autoPlay();var e=this.carouselWrapperRef;this.props.stopOnHover&&e&&(e.addEventListener("mouseenter",this.stopOnHover),e.addEventListener("mouseleave",this.startOnLeave))}},{key:"destroyAutoPlay",value:function(){this.clearAutoPlay();var e=this.carouselWrapperRef;this.props.stopOnHover&&e&&(e.removeEventListener("mouseenter",this.stopOnHover),e.removeEventListener("mouseleave",this.startOnLeave))}},{key:"bindEvents",value:function(){window.addEventListener("resize",this.updateSizes),window.addEventListener("DOMContentLoaded",this.updateSizes),this.props.useKeyboardArrows&&document.addEventListener("keydown",this.navigateWithKeyboard)}},{key:"unbindEvents",value:function(){window.removeEventListener("resize",this.updateSizes),window.removeEventListener("DOMContentLoaded",this.updateSizes);var e=this.getInitialImage();e&&e.removeEventListener("load",this.setMountState),this.props.useKeyboardArrows&&document.removeEventListener("keydown",this.navigateWithKeyboard)}},{key:"getPosition",value:function(e){this.props.infiniteLoop&&++e;var t=i.Children.count(this.props.children);if(this.props.centerMode&&"horizontal"===this.props.axis){var n=-e*this.props.centerSlidePercentage,r=t-1;return e&&(e!==r||this.props.infiniteLoop)?n+=(100-this.props.centerSlidePercentage)/2:e===r&&(n+=100-this.props.centerSlidePercentage),n}return 100*-e}},{key:"renderItems",value:function(e){var t=this;return i.Children.map(this.props.children,function(n,r){var o={ref:function(e){return t.setItemsRef(e,r)},key:"itemKey"+r+(e?"clone":""),className:c.default.ITEM(!0,r===t.state.selectedItem),onClick:t.handleClickItem.bind(t,r,n)};return t.props.centerMode&&"horizontal"===t.props.axis&&(o.style={minWidth:t.props.centerSlidePercentage+"%"}),a.default.createElement("li",o,n)})}},{key:"renderControls",value:function(){var e=this;return this.props.showIndicators?a.default.createElement("ul",{className:"control-dots"},i.Children.map(this.props.children,function(t,n){return a.default.createElement("li",{className:c.default.DOT(n===e.state.selectedItem),onClick:e.changeItem,onKeyDown:e.changeItem,value:n,key:n,role:"button",tabIndex:0})})):null}},{key:"renderStatus",value:function(){return this.props.showStatus?a.default.createElement("p",{className:"carousel-status"},this.props.statusFormatter(this.state.selectedItem+1,i.Children.count(this.props.children))):null}},{key:"renderThumbs",value:function(){return this.props.showThumbs&&0!==i.Children.count(this.props.children)?a.default.createElement(p.default,{ref:this.setThumbsRef,onSelectItem:this.handleClickThumb,selectedItem:this.state.selectedItem,transitionTime:this.props.transitionTime,thumbWidth:this.props.thumbWidth},this.props.children):null}},{key:"render",value:function(){if(!this.props.children||0===i.Children.count(this.props.children))return null;var e="horizontal"===this.props.axis,t=this.props.showArrows&&i.Children.count(this.props.children)>1,n=t&&(this.state.selectedItem>0||this.props.infiniteLoop),o=t&&(this.state.selectedItem<i.Children.count(this.props.children)-1||this.props.infiniteLoop),s={},l=this.getPosition(this.state.selectedItem),p=(0,u.default)(l+"%",this.props.axis),d=this.props.transitionTime+"ms";s={WebkitTransform:p,MozTransform:p,MsTransform:p,OTransform:p,transform:p,msTransform:p},this.state.swiping||(s=r({},s,{WebkitTransitionDuration:d,MozTransitionDuration:d,MsTransitionDuration:d,OTransitionDuration:d,transitionDuration:d,msTransitionDuration:d}));var h=this.renderItems(!0),m=h.shift(),v=h.pop(),y={selectedItem:this.state.selectedItem,className:c.default.SLIDER(!0,this.state.swiping),onSwipeMove:this.onSwipeMove,onSwipeStart:this.onSwipeStart,onSwipeEnd:this.onSwipeEnd,style:s,tolerance:this.props.swipeScrollTolerance},b={};if(e){if(y.onSwipeLeft=this.onSwipeBackwards,y.onSwipeRight=this.onSwipeForward,this.props.dynamicHeight){var g=this.getVariableImageHeight(this.state.selectedItem);y.style.height=g||"auto",b.height=g||"auto"}}else y.onSwipeUp="natural"===this.props.verticalSwipe?this.onSwipeForward:this.onSwipeBackwards,y.onSwipeDown="natural"===this.props.verticalSwipe?this.onSwipeBackwards:this.onSwipeForward,y.style.height=this.state.itemSize,b.height=this.state.itemSize;return a.default.createElement("div",{className:this.props.className,ref:this.setCarouselWrapperRef},a.default.createElement("div",{className:c.default.CAROUSEL(!0),style:{width:this.props.width}},a.default.createElement("button",{type:"button",className:c.default.ARROW_PREV(!n),onClick:this.onClickPrev}),a.default.createElement("div",{className:c.default.WRAPPER(!0,this.props.axis),style:b,ref:this.setItemsWrapperRef},this.props.swipeable?a.default.createElement(f.default,r({tagName:"ul",ref:this.setListRef},y,{allowMouseEvents:this.props.emulateTouch}),this.props.infiniteLoop&&v,this.renderItems(),this.props.infiniteLoop&&m):a.default.createElement("ul",{className:c.default.SLIDER(!0,this.state.swiping),ref:this.setListRef,style:s},this.props.infiniteLoop&&v,this.renderItems(),this.props.infiniteLoop&&m)),a.default.createElement("button",{type:"button",className:c.default.ARROW_NEXT(!o),onClick:this.onClickNext}),this.renderControls(),this.renderStatus()),this.renderThumbs())}}]),t}();v.displayName="Carousel",v.propTypes={className:l.default.string,children:l.default.node,showArrows:l.default.bool,showStatus:l.default.bool,showIndicators:l.default.bool,infiniteLoop:l.default.bool,showThumbs:l.default.bool,thumbWidth:l.default.number,selectedItem:l.default.number,onClickItem:l.default.func.isRequired,onClickThumb:l.default.func.isRequired,onChange:l.default.func.isRequired,axis:l.default.oneOf(["horizontal","vertical"]),verticalSwipe:l.default.oneOf(["natural","standard"]),width:d.unit,useKeyboardArrows:l.default.bool,autoPlay:l.default.bool,stopOnHover:l.default.bool,interval:l.default.number,transitionTime:l.default.number,swipeScrollTolerance:l.default.number,swipeable:l.default.bool,dynamicHeight:l.default.bool,emulateTouch:l.default.bool,statusFormatter:l.default.func.isRequired,centerMode:l.default.bool,centerSlidePercentage:l.default.number},v.defaultProps={showIndicators:!0,showArrows:!0,showStatus:!0,showThumbs:!0,infiniteLoop:!1,selectedItem:0,axis:"horizontal",verticalSwipe:"standard",width:"100%",useKeyboardArrows:!1,autoPlay:!1,stopOnHover:!0,interval:3e3,transitionTime:350,swipeScrollTolerance:5,swipeable:!0,dynamicHeight:!1,emulateTouch:!1,onClickItem:m,onClickThumb:m,onChange:m,statusFormatter:function(e,t){return e+" of "+t},centerMode:!1,centerSlidePercentage:80};var y=function(){var e=this;this.setThumbsRef=function(t){e.thumbsRef=t},this.setCarouselWrapperRef=function(t){e.carouselWrapperRef=t},this.setListRef=function(t){e.listRef=t},this.setItemsWrapperRef=function(t){e.itemsWrapperRef=t},this.setItemsRef=function(t,n){e.itemsRef||(e.itemsRef=[]),e.itemsRef[n]=t},this.autoPlay=function(){!e.state.autoPlay||i.Children.count(e.props.children)<=1||(clearTimeout(e.timer),e.timer=setTimeout(function(){e.increment()},e.props.interval))},this.clearAutoPlay=function(){e.state.autoPlay&&clearTimeout(e.timer)},this.resetAutoPlay=function(){e.clearAutoPlay(),e.autoPlay()},this.stopOnHover=function(){e.setState({isMouseEntered:!0}),e.clearAutoPlay()},this.startOnLeave=function(){e.setState({isMouseEntered:!1}),e.autoPlay()},this.navigateWithKeyboard=function(t){var n="horizontal"===e.props.axis,r=n?37:38;(n?39:40)===t.keyCode?e.increment():r===t.keyCode&&e.decrement()},this.updateSizes=function(){if(e.state.initialized){var t="horizontal"===e.props.axis,n=e.itemsRef[0],r=t?n.clientWidth:n.clientHeight;e.setState(function(e,n){return{itemSize:r,wrapperSize:t?r*i.Children.count(n.children):r}}),e.thumbsRef&&e.thumbsRef.updateSizes()}},this.setMountState=function(){e.setState({hasMount:!0}),e.updateSizes()},this.handleClickItem=function(t,n){i.Children.count(e.props.children)<=1||(e.state.cancelClick?e.setState({cancelClick:!1}):(e.props.onClickItem(t,n),t!==e.state.selectedItem&&e.setState({selectedItem:t})))},this.handleOnChange=function(t,n){i.Children.count(e.props.children)<=1||e.props.onChange(t,n)},this.handleClickThumb=function(t,n){e.props.onClickThumb(t,n),e.selectItem({selectedItem:t})},this.onSwipeStart=function(){e.setState({swiping:!0}),e.clearAutoPlay()},this.onSwipeEnd=function(){e.setState({swiping:!1}),e.autoPlay()},this.onSwipeMove=function(t){var n="horizontal"===e.props.axis,r=i.Children.count(e.props.children),o=e.getPosition(e.state.selectedItem),a=e.props.infiniteLoop?e.getPosition(r-1)-100:e.getPosition(r-1),s=n?t.x:t.y,l=s;0===o&&s>0&&(l=0),o===a&&s<0&&(l=0);var c=o+100/(e.state.itemSize/l);e.props.infiniteLoop&&(0===e.state.selectedItem&&c>-100?c-=100*r:e.state.selectedItem===r-1&&c<100*-r&&(c+=100*r)),c+="%",e.setPosition(c);var u=Math.abs(s)>e.props.swipeScrollTolerance;return u&&!e.state.cancelClick&&e.setState({cancelClick:!0}),u},this.setPosition=function(t,n){var r=s.default.findDOMNode(e.listRef);["WebkitTransform","MozTransform","MsTransform","OTransform","transform","msTransform"].forEach(function(n){r.style[n]=(0,u.default)(t,e.props.axis)}),n&&r.offsetLeft},this.resetPosition=function(){var t=e.getPosition(e.state.selectedItem)+"%";e.setPosition(t)},this.decrement=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.moveTo(e.state.selectedItem-("number"==typeof t?t:1),n)},this.increment=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.moveTo(e.state.selectedItem+("number"==typeof t?t:1),n)},this.moveTo=function(t,n){var r=i.Children.count(e.props.children)-1,o=e.props.infiniteLoop&&!n&&(t<0||t>r),a=t;t<0&&(t=e.props.infiniteLoop?r:0),t>r&&(t=e.props.infiniteLoop?0:r),o?e.setState({swiping:!0},function(){a<0?e.props.centerMode&&"horizontal"===e.props.axis?e.setPosition("-"+((r+2)*e.props.centerSlidePercentage-(100-e.props.centerSlidePercentage)/2)+"%",!0):e.setPosition("-"+100*(r+2)+"%",!0):a>r&&e.setPosition(0,!0),e.selectItem({selectedItem:t,swiping:!1})}):e.selectItem({selectedItem:t}),e.state.autoPlay&&!1===e.state.isMouseEntered&&e.resetAutoPlay()},this.onClickNext=function(){e.increment(1,!1)},this.onClickPrev=function(){e.decrement(1,!1)},this.onSwipeForward=function(){e.increment(1,!0)},this.onSwipeBackwards=function(){e.decrement(1,!0)},this.changeItem=function(t){if(!t.key||"Enter"===t.key){var n=t.target.value;e.selectItem({selectedItem:n})}},this.selectItem=function(t,n){e.setState(t,n),e.handleOnChange(t.selectedItem,i.Children.toArray(e.props.children)[t.selectedItem])},this.getInitialImage=function(){var t=e.props.selectedItem,n=e.itemsRef&&e.itemsRef[t],r=n&&n.getElementsByTagName("img");return r&&r[t]},this.getVariableImageHeight=function(t){var n=e.itemsRef&&e.itemsRef[t],r=n&&n.getElementsByTagName("img");if(e.state.hasMount&&r.length>0){var o=r[0];if(!o.complete){o.addEventListener("load",function t(){e.forceUpdate(),o.removeEventListener("load",t)})}var i=o.clientHeight;return i>0?i:null}return null}};t.default=v},function(e,t,n){e.exports=n(1)(78)},function(e,t,n){var r,o,i;o=[t,n(0),n(6)],void 0===(i="function"==typeof(r=function(e,t,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setHasSupportToCaptureOption=l;var r=i(t),o=i(n);function i(e){return e&&e.__esModule?e:{default:e}}var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=!1;function l(e){s=e}try{addEventListener("test",null,Object.defineProperty({},"capture",{get:function(){l(!0)}}))}catch(e){}function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{capture:!0};return s?e:e.capture}function u(e){if("touches"in e){var t=e.touches[0],n=t.pageX,r=t.pageY;return{x:n,y:r}}var o=e.screenX,i=e.screenY;return{x:o,y:i}}var f=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i._handleSwipeStart=i._handleSwipeStart.bind(i),i._handleSwipeMove=i._handleSwipeMove.bind(i),i._handleSwipeEnd=i._handleSwipeEnd.bind(i),i._onMouseDown=i._onMouseDown.bind(i),i._onMouseMove=i._onMouseMove.bind(i),i._onMouseUp=i._onMouseUp.bind(i),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.swiper&&this.swiper.addEventListener("touchmove",this._handleSwipeMove,c({capture:!0,passive:!1}))}},{key:"componentWillUnmount",value:function(){this.swiper&&this.swiper.removeEventListener("touchmove",this._handleSwipeMove,c({capture:!0,passive:!1}))}},{key:"_onMouseDown",value:function(e){this.props.allowMouseEvents&&(this.mouseDown=!0,document.addEventListener("mouseup",this._onMouseUp),document.addEventListener("mousemove",this._onMouseMove),this._handleSwipeStart(e))}},{key:"_onMouseMove",value:function(e){this.mouseDown&&this._handleSwipeMove(e)}},{key:"_onMouseUp",value:function(e){this.mouseDown=!1,document.removeEventListener("mouseup",this._onMouseUp),document.removeEventListener("mousemove",this._onMouseMove),this._handleSwipeEnd(e)}},{key:"_handleSwipeStart",value:function(e){var t=u(e),n=t.x,r=t.y;this.moveStart={x:n,y:r},this.props.onSwipeStart(e)}},{key:"_handleSwipeMove",value:function(e){if(this.moveStart){var t=u(e),n=t.x,r=t.y,o=n-this.moveStart.x,i=r-this.moveStart.y;this.moving=!0;var a=this.props.onSwipeMove({x:o,y:i},e);a&&e.preventDefault(),this.movePosition={deltaX:o,deltaY:i}}}},{key:"_handleSwipeEnd",value:function(e){this.props.onSwipeEnd(e);var t=this.props.tolerance;this.moving&&this.movePosition&&(this.movePosition.deltaX<-t?this.props.onSwipeLeft(1,e):this.movePosition.deltaX>t&&this.props.onSwipeRight(1,e),this.movePosition.deltaY<-t?this.props.onSwipeUp(1,e):this.movePosition.deltaY>t&&this.props.onSwipeDown(1,e)),this.moveStart=null,this.moving=!1,this.movePosition=null}},{key:"render",value:function(){var e=this;return r.default.createElement(this.props.tagName,{ref:function(t){return e.swiper=t},onMouseDown:this._onMouseDown,onTouchStart:this._handleSwipeStart,onTouchEnd:this._handleSwipeEnd,className:this.props.className,style:this.props.style},this.props.children)}}]),t}(t.Component);f.displayName="ReactSwipe",f.propTypes={tagName:o.default.string,className:o.default.string,style:o.default.object,children:o.default.node,allowMouseEvents:o.default.bool,onSwipeUp:o.default.func,onSwipeDown:o.default.func,onSwipeLeft:o.default.func,onSwipeRight:o.default.func,onSwipeStart:o.default.func,onSwipeMove:o.default.func,onSwipeEnd:o.default.func,tolerance:o.default.number.isRequired},f.defaultProps={tagName:"div",allowMouseEvents:!1,onSwipeUp:function(){},onSwipeDown:function(){},onSwipeLeft:function(){},onSwipeRight:function(){},onSwipeStart:function(){},onSwipeMove:function(){},onSwipeEnd:function(){},tolerance:0},e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.outerWidth=function(e){var t=e.offsetWidth,n=getComputedStyle(e);return t+=parseInt(n.marginLeft)+parseInt(n.marginRight)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.unit=function(e,t,n){if(!/(pt|px|em|rem|vw|vh|%)$/.test(e[t]))return new Error("Invalid prop `"+t+"` supplied to `"+n+"`. Validation failed. It needs to be a size unit like pt, px, em, rem, vw, %")}},function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(t,"__esModule",{value:!0});var o,i=n(102),a=n(0),s=r(n(103)),l=r(n(104)),c=r(n(108)),u=r(n(110)),f=r(n(111)),p=r(n(112)),d=r(n(113)),h=(o=l({})).Provider,m=o.Consumer;function v(e){var t=function(t){return a.createElement(m,null,function(n){return a.createElement(e,i.__assign({},t,{formik:n}))})};return t.WrappedComponent=e,s(t,e)}function y(e,t,n,r){void 0===r&&(r=0);for(var o=u(t);e&&r<o.length;)e=e[o[r++]];return void 0===e?n:e}function b(e,t,n){for(var r={},o=r,a=0,s=u(t);a<s.length-1;a++){var l=s[a],f=y(e,s.slice(0,a+1));if(o[l])o=o[l];else if(f)o=o[l]=c(f);else{var p=s[a+1];o=o[l]=E(p)&&Number(p)>=0?[]:{}}}if((0===a?e:o)[s[a]]===n)return e;void 0===n?delete o[s[a]]:o[s[a]]=n;var d=i.__assign({},e,r);return 0===a&&void 0===n&&delete d[s[a]],d}function g(e,t,n,r){void 0===n&&(n=new WeakMap),void 0===r&&(r={});for(var o=0,i=Object.keys(e);o<i.length;o++){var a=i[o],s=e[a];_(s)?n.get(s)||(n.set(s,!0),r[a]=Array.isArray(s)?[]:{},g(s,t,n,r[a])):r[a]=t}return r}var w=function(e){return"function"==typeof e},_=function(e){return null!==e&&"object"==typeof e},E=function(e){return String(Math.floor(Number(e)))===e},S=function(e){return"[object String]"===Object.prototype.toString.call(e)},P=function(e){return e!=e},O=function(e){return 0===a.Children.count(e)},k=function(e){return _(e)&&w(e.then)};var R=function(e){function t(t){var n=e.call(this,t)||this;return n.hcCache={},n.hbCache={},n.registerField=function(e,t){n.fields[e]=t},n.unregisterField=function(e){delete n.fields[e]},n.setErrors=function(e){n.setState({errors:e})},n.setTouched=function(e){n.setState({touched:e},function(){n.props.validateOnBlur&&n.runValidations(n.state.values)})},n.setValues=function(e){n.setState({values:e},function(){n.props.validateOnChange&&n.runValidations(e)})},n.setStatus=function(e){n.setState({status:e})},n.setError=function(e){n.setState({error:e})},n.setSubmitting=function(e){n.didMount&&n.setState({isSubmitting:e})},n.validateField=function(e){n.setState({isValidating:!0}),n.runSingleFieldLevelValidation(e,y(n.state.values,e)).then(function(t){n.didMount&&n.setState({errors:b(n.state.errors,e,t),isValidating:!1})})},n.runSingleFieldLevelValidation=function(e,t){return new Promise(function(r){return r(n.fields[e].props.validate(t))}).then(function(e){return e},function(e){return e})},n.runValidationSchema=function(e){return new Promise(function(t){var r=n.props.validationSchema,o=w(r)?r():r;C(e,o).then(function(){t({})},function(e){t(j(e))})})},n.runValidations=function(e){return void 0===e&&(e=n.state.values),n.setState({isValidating:!0}),Promise.all([n.runFieldLevelValidations(e),n.props.validationSchema?n.runValidationSchema(e):{},n.props.validate?n.runValidateHandler(e):{}]).then(function(e){var t=e[0],r=e[1],o=e[2],i=d.all([t,r,o],{arrayMerge:x});return n.didMount&&n.setState({isValidating:!1,errors:i}),i})},n.handleChange=function(e){var t=function(e,t){var r,o=t,a=e;if(!S(e)){e.persist&&e.persist();var s=e.target,l=s.type,c=s.name,u=s.id,f=s.value,p=s.checked;s.outerHTML;o=t||(c||u),a=/number|range/.test(l)?(r=parseFloat(f),P(r)?"":r):/checkbox/.test(l)?p:f}o&&n.setState(function(e){return i.__assign({},e,{values:b(e.values,o,a)})},function(){n.props.validateOnChange&&n.runValidations(b(n.state.values,o,a))})};if(S(e))return w(n.hcCache[e])?n.hcCache[e]:n.hcCache[e]=function(n){return t(n,e)};t(e)},n.setFieldValue=function(e,t,r){void 0===r&&(r=!0),n.didMount&&n.setState(function(n){return i.__assign({},n,{values:b(n.values,e,t)})},function(){n.props.validateOnChange&&r&&n.runValidations(n.state.values)})},n.handleSubmit=function(e){e&&e.preventDefault&&e.preventDefault(),n.submitForm()},n.submitForm=function(){return n.setState(function(e){return{touched:g(e.values,!0),isSubmitting:!0,submitCount:e.submitCount+1}}),n.runValidations().then(function(e){0===Object.keys(e).length?n.executeSubmit():n.didMount&&n.setState({isSubmitting:!1})})},n.executeSubmit=function(){n.props.onSubmit(n.state.values,n.getFormikActions())},n.handleBlur=function(e){var t=function(e,t){e.persist&&e.persist();var r=e.target,o=r.name,i=r.id,a=(r.outerHTML,t||(o||i));n.setState(function(e){return{touched:b(e.touched,a,!0)}}),n.props.validateOnBlur&&n.runValidations(n.state.values)};if(S(e))return w(n.hbCache[e])?n.hbCache[e]:n.hbCache[e]=function(n){return t(n,e)};t(e)},n.setFieldTouched=function(e,t,r){void 0===t&&(t=!0),void 0===r&&(r=!0),n.setState(function(n){return i.__assign({},n,{touched:b(n.touched,e,t)})},function(){n.props.validateOnBlur&&r&&n.runValidations(n.state.values)})},n.setFieldError=function(e,t){n.setState(function(n){return i.__assign({},n,{errors:b(n.errors,e,t)})})},n.resetForm=function(e){var t=e||n.props.initialValues;n.initialValues=t,n.setState({isSubmitting:!1,isValidating:!1,errors:{},touched:{},error:void 0,status:void 0,values:t,submitCount:0})},n.handleReset=function(){if(n.props.onReset){var e=n.props.onReset(n.state.values,n.getFormikActions());k(e)?e.then(n.resetForm):n.resetForm()}else n.resetForm()},n.setFormikState=function(e,t){return n.setState(e,t)},n.getFormikActions=function(){return{resetForm:n.resetForm,submitForm:n.submitForm,validateForm:n.runValidations,validateField:n.validateField,setError:n.setError,setErrors:n.setErrors,setFieldError:n.setFieldError,setFieldTouched:n.setFieldTouched,setFieldValue:n.setFieldValue,setStatus:n.setStatus,setSubmitting:n.setSubmitting,setTouched:n.setTouched,setValues:n.setValues,setFormikState:n.setFormikState}},n.getFormikComputedProps=function(){var e=n.props.isInitialValid,t=!f(n.initialValues,n.state.values);return{dirty:t,isValid:t?n.state.errors&&0===Object.keys(n.state.errors).length:!1!==e&&w(e)?e(n.props):e,initialValues:n.initialValues}},n.getFormikBag=function(){return i.__assign({},n.state,n.getFormikActions(),n.getFormikComputedProps(),{registerField:n.registerField,unregisterField:n.unregisterField,handleBlur:n.handleBlur,handleChange:n.handleChange,handleReset:n.handleReset,handleSubmit:n.handleSubmit,validateOnChange:n.props.validateOnChange,validateOnBlur:n.props.validateOnBlur})},n.getFormikContext=function(){return i.__assign({},n.getFormikBag(),{validationSchema:n.props.validationSchema,validate:n.props.validate,initialValues:n.initialValues})},n.state={values:t.initialValues||{},errors:{},touched:{},isSubmitting:!1,isValidating:!1,submitCount:0},n.didMount=!1,n.fields={},n.initialValues=t.initialValues||{},p(!(t.component&&t.render),"You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored"),p(!(t.component&&t.children&&!O(t.children)),"You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored"),p(!(t.render&&t.children&&!O(t.children)),"You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored"),n}return i.__extends(t,e),t.prototype.componentDidMount=function(){this.didMount=!0},t.prototype.componentWillUnmount=function(){this.didMount=!1},t.prototype.componentDidUpdate=function(e){this.props.enableReinitialize&&!f(e.initialValues,this.props.initialValues)&&(this.initialValues=this.props.initialValues,this.resetForm(this.props.initialValues))},t.prototype.runFieldLevelValidations=function(e){var t=this,n=Object.keys(this.fields).filter(function(e){return t.fields&&t.fields[e]&&t.fields[e].props.validate&&w(t.fields[e].props.validate)}),r=n.length>0?n.map(function(n){return t.runSingleFieldLevelValidation(n,y(e,n))}):[Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];return Promise.all(r).then(function(e){return e.reduce(function(e,t,r){return"DO_NOT_DELETE_YOU_WILL_BE_FIRED"===t?e:(t&&(e=b(e,n[r],t)),e)},{})})},t.prototype.runValidateHandler=function(e){var t=this;return new Promise(function(n){var r=t.props.validate(e);void 0===r?n({}):k(r)?r.then(function(){n({})},function(e){n(e)}):n(r)})},t.prototype.render=function(){var e=this.props,t=e.component,n=e.render,r=e.children,o=this.getFormikBag(),i=this.getFormikContext();return a.createElement(h,{value:i},t?a.createElement(t,o):n?n(o):r?w(r)?r(o):O(r)?null:a.Children.only(r):null)},t.defaultProps={validateOnChange:!0,validateOnBlur:!0,isInitialValid:!1,enableReinitialize:!1},t}(a.Component);function j(e){var t={};if(0===e.inner.length)return b(t,e.path,e.message);for(var n=0,r=e.inner;n<r.length;n++){var o=r[n];t[o.path]||(t=b(t,o.path,o.message))}return t}function C(e,t,n,r){void 0===n&&(n=!1),void 0===r&&(r={});var o={};for(var i in e)if(e.hasOwnProperty(i)){var a=String(i);o[a]=""!==e[a]?e[a]:void 0}return t[n?"validateSync":"validate"](o,{abortEarly:!1,context:r})}function x(e,t,n){var r=e.slice();return t.forEach(function(t,o){if(void 0===r[o]){var i=!1!==n.clone&&n.isMergeableObject(t);r[o]=i?d(Array.isArray(t)?[]:{},t,n):t}else n.isMergeableObject(t)?r[o]=d(e[o],t,n):-1===e.indexOf(t)&&r.push(t)}),r}var T=v(function(e){function t(t){var n=e.call(this,t)||this,r=t.render,o=t.children,i=t.component;return p(!(i&&r),"You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored"),p(!(i&&o&&w(o)),"You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored."),p(!(r&&o&&!O(o)),"You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored"),n}return i.__extends(t,e),t.prototype.componentDidMount=function(){this.props.formik.registerField(this.props.name,this)},t.prototype.componentDidUpdate=function(e){this.props.name!==e.name&&(this.props.formik.unregisterField(e.name),this.props.formik.registerField(this.props.name,this)),this.props.validate!==e.validate&&this.props.formik.registerField(this.props.name,this)},t.prototype.componentWillUnmount=function(){this.props.formik.unregisterField(this.props.name)},t.prototype.render=function(){var e=this.props,t=(e.validate,e.name),n=e.render,r=e.children,o=e.component,s=void 0===o?"input":o,l=e.formik,c=i.__rest(e,["validate","name","render","children","component","formik"]),u=(l.validate,l.validationSchema,i.__rest(l,["validate","validationSchema"])),f={value:"radio"===c.type||"checkbox"===c.type?c.value:y(l.values,t),name:t,onChange:l.handleChange,onBlur:l.handleBlur},p={field:f,form:u};if(n)return n(p);if(w(r))return r(p);if("string"==typeof s){var d=c.innerRef,h=i.__rest(c,["innerRef"]);return a.createElement(s,i.__assign({ref:d},f,h,{children:r}))}return a.createElement(s,i.__assign({},p,c,{children:r}))},t}(a.Component)),L=v(function(e){var t=e.formik,n=t.handleReset,r=t.handleSubmit,o=i.__rest(e,["formik"]);return a.createElement("form",i.__assign({onReset:n,onSubmit:r},o))});L.displayName="Form";var M=function(e,t,n){var r=(e||[]).slice(),o=r[t];return r.splice(t,1),r.splice(n,0,o),r},N=function(e,t,n){var r=(e||[]).slice(),o=r[t];return r[t]=r[n],r[n]=o,r},A=function(e,t,n){var r=(e||[]).slice();return r.splice(t,0,n),r},I=function(e,t,n){var r=(e||[]).slice();return r[t]=n,r},F=v(function(e){function t(t){var n=e.call(this,t)||this;return n.updateArrayField=function(e,t,r){var o=n.props,a=o.name,s=o.validateOnChange,l=o.formik,c=l.setFormikState,u=l.validateForm,f=l.values,p=l.touched,d=l.errors;c(function(n){return i.__assign({},n,{values:b(n.values,a,e(y(f,a))),errors:r?b(n.errors,a,e(y(d,a))):n.errors,touched:t?b(n.touched,a,e(y(p,a))):n.touched})},function(){s&&u()})},n.push=function(e){return n.updateArrayField(function(t){return(t||[]).concat([c(e)])},!1,!1)},n.handlePush=function(e){return function(){return n.push(e)}},n.swap=function(e,t){return n.updateArrayField(function(n){return N(n,e,t)},!0,!0)},n.handleSwap=function(e,t){return function(){return n.swap(e,t)}},n.move=function(e,t){return n.updateArrayField(function(n){return M(n,e,t)},!0,!0)},n.handleMove=function(e,t){return function(){return n.move(e,t)}},n.insert=function(e,t){return n.updateArrayField(function(n){return A(n,e,t)},!0,!0)},n.handleInsert=function(e,t){return function(){return n.insert(e,t)}},n.replace=function(e,t){return n.updateArrayField(function(n){return I(n,e,t)},!1,!1)},n.handleReplace=function(e,t){return function(){return n.replace(e,t)}},n.unshift=function(e){var t=-1;return n.updateArrayField(function(n){var r=n?[e].concat(n):[e];return t<0&&(t=r.length),r},!0,!0),t},n.handleUnshift=function(e){return function(){return n.unshift(e)}},n.handleRemove=function(e){return function(){return n.remove(e)}},n.handlePop=function(){return function(){return n.pop()}},n.remove=n.remove.bind(n),n.pop=n.pop.bind(n),n}return i.__extends(t,e),t.prototype.remove=function(e){var t;return this.updateArrayField(function(n){var r=n?n.slice():[];return t||(t=r[e]),w(r.splice)&&r.splice(e,1),r},!0,!0),t},t.prototype.pop=function(){var e;return this.updateArrayField(function(t){var n=t;return e||(e=n&&n.pop&&n.pop()),n},!0,!0),e},t.prototype.render=function(){var e={push:this.push,pop:this.pop,swap:this.swap,move:this.move,insert:this.insert,replace:this.replace,unshift:this.unshift,remove:this.remove,handlePush:this.handlePush,handlePop:this.handlePop,handleSwap:this.handleSwap,handleMove:this.handleMove,handleInsert:this.handleInsert,handleReplace:this.handleReplace,handleUnshift:this.handleUnshift,handleRemove:this.handleRemove},t=this.props,n=t.component,r=t.render,o=t.children,s=t.name,l=t.formik,c=(l.validate,l.validationSchema,i.__rest(l,["validate","validationSchema"])),u=i.__assign({},e,{form:c,name:s});return n?a.createElement(n,u):r?r(u):o?"function"==typeof o?o(u):O(o)?null:a.Children.only(o):null},t.defaultProps={validateOnChange:!0},t}(a.Component)),D=v(function(e){function t(t){var n=e.call(this,t)||this,r=t.render,o=t.children,i=t.component;return p(!(i&&r),"You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored"),p(!(i&&o&&w(o)),"You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored."),p(!(r&&o&&!O(o)),"You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored"),n}return i.__extends(t,e),t.prototype.shouldComponentUpdate=function(e){return this.props.shouldUpdate?this.props.shouldUpdate(e,this.props):y(this.props.formik.values,this.props.name)!==y(e.formik.values,this.props.name)||y(this.props.formik.errors,this.props.name)!==y(e.formik.errors,this.props.name)||y(this.props.formik.touched,this.props.name)!==y(e.formik.touched,this.props.name)||Object.keys(this.props).length!==Object.keys(e).length||this.props.formik.isSubmitting!==e.formik.isSubmitting},t.prototype.componentDidMount=function(){this.props.formik.registerField(this.props.name,this)},t.prototype.componentDidUpdate=function(e){this.props.name!==e.name&&(this.props.formik.unregisterField(e.name),this.props.formik.registerField(this.props.name,this)),this.props.validate!==e.validate&&this.props.formik.registerField(this.props.name,this)},t.prototype.componentWillUnmount=function(){this.props.formik.unregisterField(this.props.name)},t.prototype.render=function(){var e=this.props,t=(e.validate,e.name),n=e.render,r=e.children,o=e.component,s=void 0===o?"input":o,l=e.formik,c=i.__rest(e,["validate","name","render","children","component","formik"]),u=(l.validate,l.validationSchema,i.__rest(l,["validate","validationSchema"])),f={value:"radio"===c.type||"checkbox"===c.type?c.value:y(l.values,t),name:t,onChange:l.handleChange,onBlur:l.handleBlur},p={field:f,form:u};if(n)return n(p);if(w(r))return r(p);if("string"==typeof s){var d=c.innerRef,h=i.__rest(c,["innerRef"]);return a.createElement(s,i.__assign({ref:d},f,h,{children:r}))}return a.createElement(s,i.__assign({},p,c,{children:r}))},t}(a.Component)),W=v(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i.__extends(t,e),t.prototype.shouldComponentUpdate=function(e){return y(this.props.formik.errors,this.props.name)!==y(e.formik.errors,this.props.name)||y(this.props.formik.touched,this.props.name)!==y(e.formik.touched,this.props.name)||Object.keys(this.props).length!==Object.keys(e).length},t.prototype.render=function(){var e=this.props,t=e.component,n=e.formik,r=e.render,o=e.children,s=e.name,l=i.__rest(e,["component","formik","render","children","name"]),c=y(n.touched,s),u=y(n.errors,s);return c&&u?r?w(r)?r(u):null:o?w(o)?o(u):null:t?a.createElement(t,l,u):u:null},t}(a.Component));t.Formik=R,t.yupToFormErrors=j,t.validateYupSchema=C,t.Field=T,t.Form=L,t.withFormik=function(e){var t=e.mapPropsToValues,n=void 0===t?function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&"function"!=typeof e[n]&&(t[n]=e[n]);return t}:t,r=i.__rest(e,["mapPropsToValues"]);return function(e){var t=e.displayName||e.name||e.constructor&&e.constructor.name||"Component",o=function(o){function s(){var t=null!==o&&o.apply(this,arguments)||this;return t.validate=function(e){return r.validate(e,t.props)},t.validationSchema=function(){return w(r.validationSchema)?r.validationSchema(t.props):r.validationSchema},t.handleSubmit=function(e,n){return r.handleSubmit(e,i.__assign({},n,{props:t.props}))},t.renderFormComponent=function(n){return a.createElement(e,i.__assign({},t.props,n))},t}return i.__extends(s,o),s.prototype.render=function(){var e=this.props,t=(e.children,i.__rest(e,["children"]));return a.createElement(R,i.__assign({},t,r,{validate:r.validate&&this.validate,validationSchema:r.validationSchema&&this.validationSchema,initialValues:n(this.props),onSubmit:this.handleSubmit,render:this.renderFormComponent}))},s.displayName="WithFormik("+t+")",s}(a.Component);return s(o,e)}},t.move=M,t.swap=N,t.insert=A,t.replace=I,t.FieldArray=F,t.getIn=y,t.setIn=b,t.setNestedObjectValues=g,t.isFunction=w,t.isObject=_,t.isInteger=E,t.isString=S,t.isNaN=P,t.isEmptyChildren=O,t.isPromise=k,t.getActiveElement=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}},t.FastField=D,t.FormikProvider=h,t.FormikConsumer=m,t.connect=v,t.ErrorMessage=W},function(e,t,n){var r,o,i,a,s,l,c,u,f,p,d,h,m,v,y,b,g,w,_,E;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */!function(n){var S="object"==typeof global?global:"object"==typeof self?self:"object"==typeof this?this:{};function P(e,t){return e!==S&&("function"==typeof Object.create?Object.defineProperty(e,"__esModule",{value:!0}):e.__esModule=!0),function(n,r){return e[n]=t?t(n,r):r}}void 0===(r=function(e){!function(e){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};o=function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)},i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var o=0,r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]]);return n},s=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},l=function(e,t){return function(n,r){t(n,r,e)}},c=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},u=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},f=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},p=function(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])},d=function(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}},h=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},m=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(h(arguments[t]));return e},v=function(e){return this instanceof v?(this.v=e,this):new v(e)},y=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise(function(n,r){i.push([e,t,n,r])>1||s(e,t)})})}function s(e,t){try{!function(e){e.value instanceof v?Promise.resolve(e.value.v).then(l,c):u(i[0][2],e)}(o[e](t))}catch(e){u(i[0][3],e)}}function l(e){s("next",e)}function c(e){s("throw",e)}function u(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}},b=function(e){var t,n;return t={},r("next"),r("throw",function(e){throw e}),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:v(e[r](t)),done:"return"===r}:o?o(t):t}:o}},g=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e="function"==typeof d?d(e):e[Symbol.iterator](),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise(function(r,o){t=e[n](t),function(e,t,n,r){Promise.resolve(r).then(function(t){e({value:t,done:n})},t)}(r,o,t.done,t.value)})}}},w=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},_=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},E=function(e){return e&&e.__esModule?e:{default:e}},e("__extends",o),e("__assign",i),e("__rest",a),e("__decorate",s),e("__param",l),e("__metadata",c),e("__awaiter",u),e("__generator",f),e("__exportStar",p),e("__values",d),e("__read",h),e("__spread",m),e("__await",v),e("__asyncGenerator",y),e("__asyncDelegator",b),e("__asyncValues",g),e("__makeTemplateObject",w),e("__importStar",_),e("__importDefault",E)}(P(S,P(e)))}.apply(t,[t]))||(e.exports=r)}()},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,u=c&&c(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(u){var p=c(n);p&&p!==u&&e(t,p,f)}var d=a(n);s&&(d=d.concat(s(n)));for(var h=0;h<d.length;++h){var m=d[h];if(!(r[m]||o[m]||f&&f[m])){var v=l(n,m);try{i(t,m,v)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(0)),o=i(n(105));function i(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.createContext||o.default,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0),o=(a(r),a(n(6))),i=a(n(106));a(n(107));function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=1073741823;t.default=function(e,t){var n,a,f="__create-react-context-"+(0,i.default)()+"__",p=function(e){function n(){var t,r;s(this,n);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return t=r=l(this,e.call.apply(e,[this].concat(i))),r.emitter=function(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter(function(t){return t!==e})},get:function(){return e},set:function(n,r){e=n,t.forEach(function(t){return t(e,r)})}}}(r.props.value),l(r,t)}return c(n,e),n.prototype.getChildContext=function(){var e;return(e={})[f]=this.emitter,e},n.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n=this.props.value,r=e.value,o=void 0;!function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,r)?(o="function"==typeof t?t(n,r):u,0!=(o|=0)&&this.emitter.set(e.value,o)):o=0}},n.prototype.render=function(){return this.props.children},n}(r.Component);p.childContextTypes=((n={})[f]=o.default.object.isRequired,n);var d=function(t){function n(){var e,r;s(this,n);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=l(this,t.call.apply(t,[this].concat(i))),r.state={value:r.getValue()},r.onUpdate=function(e,t){0!=((0|r.observedBits)&t)&&r.setState({value:r.getValue()})},l(r,e)}return c(n,t),n.prototype.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=void 0===t||null===t?u:t},n.prototype.componentDidMount=function(){this.context[f]&&this.context[f].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=void 0===e||null===e?u:e},n.prototype.componentWillUnmount=function(){this.context[f]&&this.context[f].off(this.onUpdate)},n.prototype.getValue=function(){return this.context[f]?this.context[f].get():e},n.prototype.render=function(){return function(e){return Array.isArray(e)?e[0]:e}(this.props.children)(this.state.value)},n}(r.Component);return d.contextTypes=((a={})[f]=o.default.object,a),{Provider:p,Consumer:d}},e.exports=t.default},function(e,t,n){"use strict";var r="__global_unique_id__";e.exports=function(){return global[r]=(global[r]||0)+1}},function(e,t,n){"use strict";var r=n(37);e.exports=r},function(e,t,n){(function(e){var n=200,r="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",a="[object Boolean]",s="[object Date]",l="[object Function]",c="[object GeneratorFunction]",u="[object Map]",f="[object Number]",p="[object Object]",d="[object RegExp]",h="[object Set]",m="[object String]",v="[object Symbol]",y="[object ArrayBuffer]",b="[object DataView]",g="[object Float32Array]",w="[object Float64Array]",_="[object Int8Array]",E="[object Int16Array]",S="[object Int32Array]",P="[object Uint8Array]",O="[object Uint8ClampedArray]",k="[object Uint16Array]",R="[object Uint32Array]",j=/\w*$/,C=/^\[object .+?Constructor\]$/,x=/^(?:0|[1-9]\d*)$/,T={};T[i]=T["[object Array]"]=T[y]=T[b]=T[a]=T[s]=T[g]=T[w]=T[_]=T[E]=T[S]=T[u]=T[f]=T[p]=T[d]=T[h]=T[m]=T[v]=T[P]=T[O]=T[k]=T[R]=!0,T["[object Error]"]=T[l]=T["[object WeakMap]"]=!1;var L="object"==typeof global&&global&&global.Object===Object&&global,M="object"==typeof self&&self&&self.Object===Object&&self,N=L||M||Function("return this")(),A=t&&!t.nodeType&&t,I=A&&"object"==typeof e&&e&&!e.nodeType&&e,F=I&&I.exports===A;function D(e,t){return e.set(t[0],t[1]),e}function W(e,t){return e.add(t),e}function U(e,t,n,r){var o=-1,i=e?e.length:0;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function H(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function Y(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function B(e,t){return function(n){return e(t(n))}}function X(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}var z=Array.prototype,V=Function.prototype,q=Object.prototype,G=N["__core-js_shared__"],K=function(){var e=/[^.]+$/.exec(G&&G.keys&&G.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),J=V.toString,$=q.hasOwnProperty,Q=q.toString,Z=RegExp("^"+J.call($).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ee=F?N.Buffer:void 0,te=N.Symbol,ne=N.Uint8Array,re=B(Object.getPrototypeOf,Object),oe=Object.create,ie=q.propertyIsEnumerable,ae=z.splice,se=Object.getOwnPropertySymbols,le=ee?ee.isBuffer:void 0,ce=B(Object.keys,Object),ue=Ae(N,"DataView"),fe=Ae(N,"Map"),pe=Ae(N,"Promise"),de=Ae(N,"Set"),he=Ae(N,"WeakMap"),me=Ae(Object,"create"),ve=Ue(ue),ye=Ue(fe),be=Ue(pe),ge=Ue(de),we=Ue(he),_e=te?te.prototype:void 0,Ee=_e?_e.valueOf:void 0;function Se(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Pe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Oe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ke(e){this.__data__=new Pe(e)}function Re(e,t){var n=Ye(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&Be(e)}(e)&&$.call(e,"callee")&&(!ie.call(e,"callee")||Q.call(e)==i)}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,o=!!r;for(var a in e)!t&&!$.call(e,a)||o&&("length"==a||De(a,r))||n.push(a);return n}function je(e,t,n){var r=e[t];$.call(e,t)&&He(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function Ce(e,t){for(var n=e.length;n--;)if(He(e[n][0],t))return n;return-1}function xe(e,t,n,r,o,C,x){var L;if(r&&(L=C?r(e,o,C,x):r(e)),void 0!==L)return L;if(!Ve(e))return e;var M=Ye(e);if(M){if(L=function(e){var t=e.length,n=e.constructor(t);t&&"string"==typeof e[0]&&$.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!t)return function(e,t){var n=-1,r=e.length;t||(t=Array(r));for(;++n<r;)t[n]=e[n];return t}(e,L)}else{var N=Fe(e),A=N==l||N==c;if(Xe(e))return function(e,t){if(t)return e.slice();var n=new e.constructor(e.length);return e.copy(n),n}(e,t);if(N==p||N==i||A&&!C){if(H(e))return C?e:{};if(L=function(e){return"function"!=typeof e.constructor||We(e)?{}:function(e){return Ve(e)?oe(e):{}}(re(e))}(A?{}:e),!t)return function(e,t){return Me(e,Ie(e),t)}(e,function(e,t){return e&&Me(t,qe(t),e)}(L,e))}else{if(!T[N])return C?e:{};L=function(e,t,n,r){var o=e.constructor;switch(t){case y:return Le(e);case a:case s:return new o(+e);case b:return function(e,t){var n=t?Le(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,r);case g:case w:case _:case E:case S:case P:case O:case k:case R:return function(e,t){var n=t?Le(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}(e,r);case u:return function(e,t,n){return U(t?n(Y(e),!0):Y(e),D,new e.constructor)}(e,r,n);case f:case m:return new o(e);case d:return function(e){var t=new e.constructor(e.source,j.exec(e));return t.lastIndex=e.lastIndex,t}(e);case h:return function(e,t,n){return U(t?n(X(e),!0):X(e),W,new e.constructor)}(e,r,n);case v:return function(e){return Ee?Object(Ee.call(e)):{}}(e)}}(e,N,xe,t)}}x||(x=new ke);var I=x.get(e);if(I)return I;if(x.set(e,L),!M)var F=n?function(e){return function(e,t,n){var r=t(e);return Ye(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,qe,Ie)}(e):qe(e);return function(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););}(F||e,function(o,i){F&&(o=e[i=o]),je(L,i,xe(o,t,n,r,i,e,x))}),L}function Te(e){return!(!Ve(e)||function(e){return!!K&&K in e}(e))&&(ze(e)||H(e)?Z:C).test(Ue(e))}function Le(e){var t=new e.constructor(e.byteLength);return new ne(t).set(new ne(e)),t}function Me(e,t,n,r){n||(n={});for(var o=-1,i=t.length;++o<i;){var a=t[o],s=r?r(n[a],e[a],a,n,e):void 0;je(n,a,void 0===s?e[a]:s)}return n}function Ne(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function Ae(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Te(n)?n:void 0}Se.prototype.clear=function(){this.__data__=me?me(null):{}},Se.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},Se.prototype.get=function(e){var t=this.__data__;if(me){var n=t[e];return n===r?void 0:n}return $.call(t,e)?t[e]:void 0},Se.prototype.has=function(e){var t=this.__data__;return me?void 0!==t[e]:$.call(t,e)},Se.prototype.set=function(e,t){return this.__data__[e]=me&&void 0===t?r:t,this},Pe.prototype.clear=function(){this.__data__=[]},Pe.prototype.delete=function(e){var t=this.__data__,n=Ce(t,e);return!(n<0||(n==t.length-1?t.pop():ae.call(t,n,1),0))},Pe.prototype.get=function(e){var t=this.__data__,n=Ce(t,e);return n<0?void 0:t[n][1]},Pe.prototype.has=function(e){return Ce(this.__data__,e)>-1},Pe.prototype.set=function(e,t){var n=this.__data__,r=Ce(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},Oe.prototype.clear=function(){this.__data__={hash:new Se,map:new(fe||Pe),string:new Se}},Oe.prototype.delete=function(e){return Ne(this,e).delete(e)},Oe.prototype.get=function(e){return Ne(this,e).get(e)},Oe.prototype.has=function(e){return Ne(this,e).has(e)},Oe.prototype.set=function(e,t){return Ne(this,e).set(e,t),this},ke.prototype.clear=function(){this.__data__=new Pe},ke.prototype.delete=function(e){return this.__data__.delete(e)},ke.prototype.get=function(e){return this.__data__.get(e)},ke.prototype.has=function(e){return this.__data__.has(e)},ke.prototype.set=function(e,t){var r=this.__data__;if(r instanceof Pe){var o=r.__data__;if(!fe||o.length<n-1)return o.push([e,t]),this;r=this.__data__=new Oe(o)}return r.set(e,t),this};var Ie=se?B(se,Object):function(){return[]},Fe=function(e){return Q.call(e)};function De(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||x.test(e))&&e>-1&&e%1==0&&e<t}function We(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||q)}function Ue(e){if(null!=e){try{return J.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function He(e,t){return e===t||e!=e&&t!=t}(ue&&Fe(new ue(new ArrayBuffer(1)))!=b||fe&&Fe(new fe)!=u||pe&&"[object Promise]"!=Fe(pe.resolve())||de&&Fe(new de)!=h||he&&"[object WeakMap]"!=Fe(new he))&&(Fe=function(e){var t=Q.call(e),n=t==p?e.constructor:void 0,r=n?Ue(n):void 0;if(r)switch(r){case ve:return b;case ye:return u;case be:return"[object Promise]";case ge:return h;case we:return"[object WeakMap]"}return t});var Ye=Array.isArray;function Be(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}(e.length)&&!ze(e)}var Xe=le||function(){return!1};function ze(e){var t=Ve(e)?Q.call(e):"";return t==l||t==c}function Ve(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function qe(e){return Be(e)?Re(e):function(e){if(!We(e))return ce(e);var t=[];for(var n in Object(e))$.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)}e.exports=function(e){return xe(e,!0,!0)}}).call(this,n(109)(e))},function(e,t,n){e.exports=n(1)(277)},function(e,t){var n="Expected a function",r="__lodash_hash_undefined__",o=1/0,i="[object Function]",a="[object GeneratorFunction]",s="[object Symbol]",l=/^\./,c=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,u=/\\(\\)?/g,f=/^\[object .+?Constructor\]$/,p="object"==typeof global&&global&&global.Object===Object&&global,d="object"==typeof self&&self&&self.Object===Object&&self,h=p||d||Function("return this")();var m=Array.prototype,v=Function.prototype,y=Object.prototype,b=h["__core-js_shared__"],g=function(){var e=/[^.]+$/.exec(b&&b.keys&&b.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),w=v.toString,_=y.hasOwnProperty,E=y.toString,S=RegExp("^"+w.call(_).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),P=h.Symbol,O=m.splice,k=I(h,"Map"),R=I(Object,"create"),j=P?P.prototype:void 0,C=j?j.toString:void 0;function x(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function T(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function L(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function M(e,t){for(var n=e.length;n--;)if(U(e[n][0],t))return n;return-1}function N(e){return!(!Y(e)||function(e){return!!g&&g in e}(e))&&(function(e){var t=Y(e)?E.call(e):"";return t==i||t==a}(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e)?S:f).test(function(e){if(null!=e){try{return w.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}function A(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function I(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return N(n)?n:void 0}x.prototype.clear=function(){this.__data__=R?R(null):{}},x.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},x.prototype.get=function(e){var t=this.__data__;if(R){var n=t[e];return n===r?void 0:n}return _.call(t,e)?t[e]:void 0},x.prototype.has=function(e){var t=this.__data__;return R?void 0!==t[e]:_.call(t,e)},x.prototype.set=function(e,t){return this.__data__[e]=R&&void 0===t?r:t,this},T.prototype.clear=function(){this.__data__=[]},T.prototype.delete=function(e){var t=this.__data__,n=M(t,e);return!(n<0||(n==t.length-1?t.pop():O.call(t,n,1),0))},T.prototype.get=function(e){var t=this.__data__,n=M(t,e);return n<0?void 0:t[n][1]},T.prototype.has=function(e){return M(this.__data__,e)>-1},T.prototype.set=function(e,t){var n=this.__data__,r=M(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},L.prototype.clear=function(){this.__data__={hash:new x,map:new(k||T),string:new x}},L.prototype.delete=function(e){return A(this,e).delete(e)},L.prototype.get=function(e){return A(this,e).get(e)},L.prototype.has=function(e){return A(this,e).has(e)},L.prototype.set=function(e,t){return A(this,e).set(e,t),this};var F=W(function(e){e=function(e){return null==e?"":function(e){if("string"==typeof e)return e;if(B(e))return C?C.call(e):"";var t=e+"";return"0"==t&&1/e==-o?"-0":t}(e)}(e);var t=[];return l.test(e)&&t.push(""),e.replace(c,function(e,n,r,o){t.push(r?o.replace(u,"$1"):n||e)}),t});function D(e){if("string"==typeof e||B(e))return e;var t=e+"";return"0"==t&&1/e==-o?"-0":t}function W(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError(n);var r=function(){var n=arguments,o=t?t.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var a=e.apply(this,n);return r.cache=i.set(o,a),a};return r.cache=new(W.Cache||L),r}function U(e,t){return e===t||e!=e&&t!=t}W.Cache=L;var H=Array.isArray;function Y(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function B(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&E.call(e)==s}e.exports=function(e){return H(e)?function(e,t){for(var n=-1,r=e?e.length:0,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}(e,D):B(e)?[e]:function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}(F(e))}},function(e,t,n){"use strict";var r=Array.isArray,o=Object.keys,i=Object.prototype.hasOwnProperty;e.exports=function(e,t){try{return function e(t,n){if(t===n)return!0;var a,s,l,c=r(t),u=r(n);if(c&&u){if((s=t.length)!=n.length)return!1;for(a=0;a<s;a++)if(!e(t[a],n[a]))return!1;return!0}if(c!=u)return!1;var f=t instanceof Date,p=n instanceof Date;if(f!=p)return!1;if(f&&p)return t.getTime()==n.getTime();var d=t instanceof RegExp,h=n instanceof RegExp;if(d!=h)return!1;if(d&&h)return t.toString()==n.toString();if(t instanceof Object&&n instanceof Object){var m=o(t);if((s=m.length)!==o(n).length)return!1;for(a=0;a<s;a++)if(!i.call(n,m[a]))return!1;for(a=0;a<s;a++)if(!("_owner"===(l=m[a])&&t.$$typeof&&t._store||e(t[l],n[l])))return!1;return!0}return!1}(e,t)}catch(e){if(e.message&&e.message.match(/stack|recursion/i))return console.warn("Warning: react-fast-compare does not handle circular references.",e.name,e.message),!1;throw e}}},function(e,t,n){e.exports=n(1)(59)},function(e,t,n){e.exports=function(){"use strict";var e=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var n=Object.prototype.toString.call(e);return"[object RegExp]"===n||"[object Date]"===n||function(e){return e.$$typeof===t}(e)}(e)},t="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function n(e,t){return!1!==t.clone&&t.isMergeableObject(e)?o(function(e){return Array.isArray(e)?[]:{}}(e),e,t):e}function r(e,t,r){return e.concat(t).map(function(e){return n(e,r)})}function o(t,i,a){(a=a||{}).arrayMerge=a.arrayMerge||r,a.isMergeableObject=a.isMergeableObject||e;var s=Array.isArray(i),l=Array.isArray(t),c=s===l;return c?s?a.arrayMerge(t,i,a):function(e,t,r){var i={};return r.isMergeableObject(e)&&Object.keys(e).forEach(function(t){i[t]=n(e[t],r)}),Object.keys(t).forEach(function(a){r.isMergeableObject(t[a])&&e[a]?i[a]=o(e[a],t[a],r):i[a]=n(t[a],r)}),i}(t,i,a):n(i,a)}return o.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,n){return o(e,n,t)},{})},o}()},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=void 0,i=void 0,a=void 0,s=[];return function(){var l=function(e){return"function"==typeof e?e():e}(t),c=(new Date).getTime(),u=!o||c-o>l;o=c;for(var f=arguments.length,p=Array(f),d=0;d<f;d++)p[d]=arguments[d];if(u&&n.leading)return n.accumulate?Promise.resolve(e.call(this,[p])).then(function(e){return e[0]}):Promise.resolve(e.call.apply(e,[this].concat(p)));if(i?clearTimeout(a):i=function(){var e={};return e.promise=new Promise(function(t,n){e.resolve=t,e.reject=n}),e}(),s.push(p),a=setTimeout(function(){var t=i;clearTimeout(a),Promise.resolve(n.accumulate?e.call(this,s):e.apply(this,s[s.length-1])).then(t.resolve,t.reject),s=[],i=null}.bind(this),l),n.accumulate){var h=function(){var e=s.length-1;return{v:i.promise.then(function(t){return t[e]})}}();if("object"===(void 0===h?"undefined":r(h)))return h.v}return i.promise}}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n(10),i=n(43),a=n(4),s=n(12),l=n(44),c=n(45),u=n(5),f=n(8),p=function(){function e(){}return e.showErrors=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];e.forEach(function(e){Array.isArray(e)?e.forEach(function(e){return f.toast.error(e)}):f.toast.error(e)})},e.showInfo=function(e){f.toast.info(e)},e}(),d=function(){function e(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.value=e,this.errors=void 0==t[0]||null==t[0]?[]:t}return Object.defineProperty(e.prototype,"hasErrors",{get:function(){return null!=this.errors&&Array.isArray(this.errors)&&this.errors.length>0},enumerable:!0,configurable:!0}),e}(),h=n(7),m=n.n(h),v=n(9),y=n(46),b=n.n(y);function g(e){return JSON.parse(JSON.stringify(e))}function w(){return"object"==typeof process&&process.versions&&!!process.versions.node}var _,E=n(17),S=function(){return(S=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},P=function(){function e(){}return e.reset=function(){this.isInitialized=!1,this.gameReady=!1,this.data={}},e.init=function(e){if(this.isInitialized)throw Error("Globals is already initialized.");this.data=e||{public:{},private:{}},this.isInitialized=!0,E.NSerializeJson.options.useDotSeparatorInPath=!0},e.setGameReady=function(e){this.gameReady=e},e.isGameReady=function(){return this.gameReady},e.throwIfNotInitialized=function(){if(!this.isInitialized)throw Error("Globals is not initialized. You have to call Session.init before.")},e.getData=function(){return this.throwIfNotInitialized(),this.data},e.setData=function(e){this.throwIfNotInitialized();var t=this.data;this.data=S({},t,e)},Object.defineProperty(e,"serviceUser",{get:function(){return this.getData().public.serviceUser},set:function(e){this.setData({public:{serviceUser:e}})},enumerable:!0,configurable:!0}),Object.defineProperty(e,"isAuthenticated",{get:function(){return null!=this.serviceUser},enumerable:!0,configurable:!0}),e.isInitialized=!1,e.gameReady=!1,e.data={},e}(),O=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},k=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},R=function(){function e(){}return e.requestJson=function(e){return O(this,void 0,Promise,function(){var t,n,r,o,i;return k(this,function(a){switch(a.label){case 0:t=null,n=null,e.url=Object(v.transformUrl)(e.url),r=function(e,t){return t?e+"?"+b()(t):e},w()&&(o={headers:{Cookie:P.getData().private.cookie}}),a.label=1;case 1:switch(a.trys.push([1,13,,14]),e.method){case"GET":return[3,2];case"POST":return[3,4];case"PUT":return[3,6];case"PATCH":return[3,8];case"DELETE":return[3,10]}return[3,12];case 2:return[4,m.a.get(r(e.url,e.data),o)];case 3:return t=a.sent(),[3,12];case 4:return[4,m.a.post(e.url,e.data,o)];case 5:return t=a.sent(),[3,12];case 6:return[4,m.a.put(e.url,e.data,o)];case 7:return t=a.sent(),[3,12];case 8:return[4,m.a.patch(e.url,e.data,o)];case 9:return t=a.sent(),[3,12];case 10:return[4,m.a.delete(r(e.url,e.data),o)];case 11:return t=a.sent(),[3,12];case 12:return n=new(d.bind.apply(d,[void 0,t.data.value].concat(t.data.errors))),[3,14];case 13:return i=a.sent(),n=new d(null,i.message),[3,14];case 14:return n.hasErrors&&p.showErrors.apply(p,n.errors),[2,n]}})})},e.sendFormData=function(e){return O(this,void 0,Promise,function(){var t,n,r,o;return k(this,function(i){switch(i.label){case 0:t=null,n=null,e.url=Object(v.transformUrl)(e.url),r={headers:{"Content-Type":"multipart/form-data"}},i.label=1;case 1:switch(i.trys.push([1,9,,10]),e.method){case"POST":return[3,2];case"PUT":return[3,4];case"PATCH":return[3,6]}return[3,8];case 2:return[4,m.a.post(e.url,e.data,r)];case 3:return t=i.sent(),[3,8];case 4:return[4,m.a.put(e.url,e.data,r)];case 5:return t=i.sent(),[3,8];case 6:return[4,m.a.patch(e.url,e.data,r)];case 7:return t=i.sent(),[3,8];case 8:return n=new(d.bind.apply(d,[void 0,t.data.value].concat(t.data.errors))),[3,10];case 9:return o=i.sent(),n=new d(null,o.message),[3,10];case 10:return n.hasErrors&&p.showErrors.apply(p,n.errors),[2,n]}})})},e}(),j=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),C=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},x=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},T=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return j(t,e),t.login=function(e){return C(this,void 0,Promise,function(){var t;return x(this,function(n){switch(n.label){case 0:return[4,this.requestJson({url:"api/Account/Login",method:"POST",data:e})];case 1:return(t=n.sent()).hasErrors||(P.serviceUser=t.value),[2,t]}})})},t.logout=function(){return C(this,void 0,Promise,function(){var e;return x(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"api/Account/Logout",method:"POST"})];case 1:return(e=t.sent()).hasErrors||(P.serviceUser=null),[2,e]}})})},t}(R),L=n(18),M=n(2),N=n.n(M),A=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),I=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},F=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},D=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},W=function(e){function t(t){var n=e.call(this,t)||this;return n.state={logoutAction:!1},n}return A(t,e),t.prototype.onClickSignOut=function(e){return F(this,void 0,void 0,function(){return D(this,function(t){switch(t.label){case 0:return e.preventDefault(),[4,T.logout()];case 1:return t.sent(),this.setState({logoutAction:!0}),[2]}})})},t.prototype.componentDidMount=function(){new L.Dropdown(this.aboutDropdown)},t.prototype.componentDidUpdate=function(){},t.prototype.render=function(){var e=this;return this.state.logoutAction&&window.location.reload(),r.createElement("nav",{className:"navbar navbar-expand-md navbar-light bg-light"},r.createElement(a.NavLink,{exact:!0,to:"/",className:"navbar-brand"},"JG"),r.createElement("button",{className:"navbar-toggler",type:"button","data-toggle":"collapse","data-target":"#navbarNav","aria-controls":"navbarNav","aria-expanded":"false","aria-label":"Toggle navigation"},r.createElement("span",{className:"navbar-toggler-icon"})),r.createElement("div",{className:"collapse navbar-collapse",id:"navbarNav"},r.createElement("ul",{className:"navbar-nav"},r.createElement("li",{className:"nav-item active"},r.createElement(a.NavLink,{exact:!0,to:"/",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Home")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/portfolio",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Portfolio")),r.createElement("li",{className:"dropdown"},r.createElement("a",{href:"#",ref:function(t){return e.aboutDropdown=t},className:"dropdown-toggle nav-link",style:{fontSize:"18px"},"data-toggle":"dropdown",role:"button","aria-haspopup":"true","aria-expanded":"false"},r.createElement("span",{className:""},"About")),r.createElement("ul",{className:"dropdown-menu"},r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/about/me",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"About Me")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/about/music",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Music")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{exact:!0,to:"/about/reading",style:{fontSize:"18px"},className:"nav-link",activeClassName:"active"},"Reading")))))))},I([N.a],t.prototype,"onClickSignOut",null),t}(r.Component),U=Object(u.withRouter)(W),H=(n(82),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),Y=function(e){function t(t){return e.call(this,t)||this}return H(t,e),t.prototype.render=function(){return r.createElement("footer",{className:"footer text-center"})},t}(r.Component),B=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),X=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return B(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement("div",{id:"authorizedLayout",className:"layout"},r.createElement(U,null),r.createElement("div",{className:"container container-content"},this.props.children),r.createElement(f.ToastContainer,null),r.createElement(Y,null)))},t}(r.Component),z=(n(83),n(16)),V=n.n(z),q=n(23),G=n.n(q),K=n(47),J=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),$=function(e){function t(t){var n=e.call(this,t)||this;return n.unlisten=n.props.history.listen(function(e,t){P.currentLocation=e.pathname,n.updateNavigation()}),n}return J(t,e),t.prototype.updateNavigation=function(){"/"==P.currentLocation?(P.prevLocation="",P.nextLocation="/portfolio",P.nextDropDown=!1,P.prevDropDown=!1):"/portfolio"==P.currentLocation?(P.prevLocation="/",P.nextLocation="/about/me",P.nextDropDown=!0,P.prevDropDown=!1):"/about/me"==P.currentLocation?(P.prevLocation="/portfolio",P.nextLocation="/about/music",P.nextDropDown=!1,P.prevDropDown=!0):"/about/music"==P.currentLocation?(P.prevLocation="/about/me",P.nextLocation="/about/reading",P.nextDropDown=!1,P.prevDropDown=!1):"/about/reading"==P.currentLocation&&(P.prevLocation="/about/music",P.nextLocation="/",P.nextDropDown=!0,P.prevDropDown=!1),this.JGWGame.send("GameController","UpdatePageNavigation","{ currentLocation: "+P.currentLocation+", nextLocation: "+P.nextLocation+", nextDropDown: "+P.nextDropDown+", prevLocation: "+P.prevLocation+", prevDropDown: "+P.prevDropDown+" }")},t.prototype.componentDidMount=function(){var e=this;P.currentLocation=this.props.location.pathname,P.setGameReady(!1),"undefined"!=typeof window&&(this.JGWGame=new q.UnityContent("JayceeGriffithWebsiteGame/Build.json","JayceeGriffithWebsiteGame/UnityLoader.js"),this.JGWGame.on("OnReady",function(){P.setGameReady(!0),document.getElementById("preloader").classList.add("loaded"),Object(K.setTimeout)(function(){document.getElementById("preloader").classList.add("hidden")},500),document.getElementById("unityGame").classList.add("disablepointer"),e.JGWGame.send("GameController","Connected")}),this.JGWGame.on("GetPageNavigation",function(){e.updateNavigation()}),this.JGWGame.on("GetPageWidth",function(){e.JGWGame.send("GameController","UpdatePageWidth",document.getElementsByClassName("scrollbar-container")[0].clientWidth.toString()),console.log(document.getElementsByClassName("scrollbar-container")[0].clientWidth.toString())}),this.JGWGame.on("SetPage",function(t){t!=P.currentLocation&&e.props.history.push(t)}),this.JGWGame.on("OpenNewTab",function(e){window.open(e,"_blank").focus()}),V.a.render(r.createElement(G.a,{unityContent:this.JGWGame}),document.getElementById("unityGame")))},t.prototype.componentDidUpdate=function(e){},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props;e.match,e.location,e.history;return r.createElement("div",{id:"unityGame",className:"unityGame"})},t}(r.Component),Q=Object(a.withRouter)($),Z=n(48),ee=n.n(Z),te=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ne=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return te(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement("div",{id:"guestLayout",className:"layout"},r.createElement(U,null),r.createElement("div",{className:"container container-content"},r.createElement("div",{style:{height:"75%;"}},r.createElement(ee.a,{option:{suppressScrollX:"true"}},this.props.children))),r.createElement(f.ToastContainer,null),r.createElement(Q,null),r.createElement(Y,null)))},t}(r.Component),re=(n(94),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),oe=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},ie=function(e){function t(t){var n=e.call(this,t)||this;return n.renderKey=0,n}return re(t,e),t.prototype.forceUpdate=function(){this.renderKey=Math.random()},oe([N.a],t.prototype,"forceUpdate",null),t}(r.Component),ae=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),se=function(e){function t(t){return e.call(this,t)||this}return ae(t,e),t.prototype.render=function(){var e={display:"none"};return w()||(e={display:this.props.show?"block":"none"}),r.createElement("div",{key:this.renderKey,className:"loader-bg",style:e},r.createElement("div",{className:"sk-circle"},r.createElement("div",{className:"sk-circle1 sk-child"}),r.createElement("div",{className:"sk-circle2 sk-child"}),r.createElement("div",{className:"sk-circle3 sk-child"}),r.createElement("div",{className:"sk-circle4 sk-child"}),r.createElement("div",{className:"sk-circle5 sk-child"}),r.createElement("div",{className:"sk-circle6 sk-child"}),r.createElement("div",{className:"sk-circle7 sk-child"}),r.createElement("div",{className:"sk-circle8 sk-child"}),r.createElement("div",{className:"sk-circle9 sk-child"}),r.createElement("div",{className:"sk-circle10 sk-child"}),r.createElement("div",{className:"sk-circle11 sk-child"}),r.createElement("div",{className:"sk-circle12 sk-child"})))},t}(ie),le=function(){return(le=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ce=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},ue=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};!function(e){var t,n=this;!function(e){e.Init="LOGIN_INIT",e.Request="LOGIN_REQUEST",e.Success="LOGIN_SUCCESS",e.Failure="LOGIN_FAILURE"}(t=e.Actions||(e.Actions={})),e.actionCreators={init:function(){return function(e,r){return ce(n,void 0,void 0,function(){return ue(this,function(n){return e({type:t.Init}),[2]})})}},loginRequest:function(e){return function(r,o){return ce(n,void 0,void 0,function(){var n;return ue(this,function(o){switch(o.label){case 0:return r({type:t.Request}),[4,T.login(e)];case 1:return(n=o.sent()).hasErrors?(r({type:t.Failure}),[2]):(r({type:t.Success,payload:n.value}),[2])}})})}}};var r={indicators:{operationLoading:!1,loginSuccess:!1}};e.reducer=function(e,n){var o=n,i=function(){return g(e.indicators)};switch(o.type){case t.Init:return r;case t.Request:return(a=i()).operationLoading=!0,le({},e,{indicators:a});case t.Success:return(a=i()).operationLoading=!1,a.loginSuccess=!0,le({},e,{indicators:a});case t.Failure:var a;return(a=i()).operationLoading=!1,le({},e,{indicators:a});default:}return e||r}}(_||(_={}));n(38);var fe,pe=n(3),de=n(49),he=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),me=function(){return(me=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ve=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},ye=function(e){function t(t){return e.call(this,t)||this}return he(t,e),t.prototype.isValid=function(){return this.validator.isValid()},t.prototype.emptyForm=function(){!function(e){Array.from(e.querySelectorAll("input, select, textarea")).forEach(function(e){var t=e.getAttribute("type");"checkbox"===t||"radio"===t?e.checked=!1:e.value=""})}(this.elForm)},t.prototype.getData=function(){return E.NSerializeJson.serializeForm(this.elForm)},t.prototype.componentDidMount=function(){this.validator=new de.NValTippy(this.elForm)},t.prototype.render=function(){var e=this;return r.createElement("form",me({},this.props,{ref:function(t){return e.elForm=t}}),this.props.children)},ve([N.a],t.prototype,"isValid",null),ve([N.a],t.prototype,"emptyForm",null),ve([N.a],t.prototype,"getData",null),t}(r.Component),be=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ge=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},we=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},_e=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},Ee=function(e){function t(t){return e.call(this,t)||this}return be(t,e),t.prototype.componentDidMount=function(){this.props.init(),this.elLoader&&this.elLoader.forceUpdate()},t.prototype.onClickSubmitBtn=function(e){return we(this,void 0,void 0,function(){var t;return _e(this,function(n){return e.preventDefault(),this.elForm.isValid()&&(t=this.elForm.getData(),this.props.loginRequest(t)),[2]})})},t.prototype.render=function(){var e=this;return this.props.indicators.loginSuccess?r.createElement(u.Redirect,{to:"/"}):r.createElement("div",{id:"loginPage"},r.createElement(pe.Helmet,null,r.createElement("title",null,"Login page - Jaycee Griffith")),r.createElement(se,{ref:function(t){return e.elLoader=t},show:this.props.indicators.operationLoading}),r.createElement("div",{id:"loginContainer"},r.createElement("p",{className:"text-center"},"Type any login and password to enter."),r.createElement(ye,{ref:function(t){return e.elForm=t}},r.createElement("div",{className:"form-group"},r.createElement("label",{htmlFor:"inputLogin"},"Login"),r.createElement("input",{type:"text",name:"login","data-value-type":"string",className:"form-control",id:"inputLogin","data-val-required":"true","data-msg-required":"Login is required."})),r.createElement("div",{className:"form-group"},r.createElement("label",{htmlFor:"inputLogin"},"Password"),r.createElement("input",{type:"password",name:"password","data-value-type":"string",className:"form-control",id:"inputPassword","data-val-required":"true","data-msg-required":"Password is required."})),r.createElement("div",{className:"form-inline"},r.createElement("button",{className:"btn btn-success",onClick:this.onClickSubmitBtn},"Sign in")))))},ge([N.a],t.prototype,"onClickSubmitBtn",null),t}(r.Component),Se=Object(o.connect)(function(e){return e.login},_.actionCreators)(Ee),Pe=Object(u.withRouter)(Se),Oe=function(){return(Oe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ke=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]])}return n},Re=function(e){var t=e.component,n=e.layout,o=e.path,i=ke(e,["component","layout","path"]),a="/admin"===o,s="/login"===o;return!P.isAuthenticated&&a?r.createElement(u.Redirect,{to:"/login"}):P.isAuthenticated&&s?r.createElement(u.Redirect,{to:"/"}):r.createElement(u.Route,Oe({},i,{render:function(e){return r.createElement(n,null,r.createElement(t,Oe({},e)))}}))},je=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ce=function(e){function t(t){return e.call(this,t)||this}return je(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Home")),r.createElement("div",{className:"jumbotron p-3 p-md-5 rounded bg-white"},r.createElement("div",{className:"mobile-only-content col-md-6 px-0"},r.createElement("h1",{className:"display-4 font-italic"},"Welcome to my Web",r.createElement("del",null,"site")," game."),r.createElement("p",{className:"lead my-3"},"Navigate by ",r.createElement("b",null,"tilting")," your device"),r.createElement("p",{className:"lead mb-0"},r.createElement("span",null,"Make sure to check out my ",r.createElement("a",{href:"https://drive.google.com/open?id=189OkI7YVJyKv6PILqvEt_hRamQplSjr3",target:"_blank"},"Resume"),"."))),r.createElement("div",{className:"desktop-only-content col-md-6 px-0"},r.createElement("h1",{className:"display-4 font-italic"},"Welcome to my Web",r.createElement("del",null,"site")," game."),r.createElement("p",{className:"lead my-3"},"Navigate with ",r.createElement("b",null,"wasd")," or the ",r.createElement("b",null,"arrow keys")),r.createElement("p",{className:"lead my-3"},"Jump with ",r.createElement("b",null,"space")),r.createElement("p",{className:"lead mb-0"},r.createElement("span",null,"Fly by pressing ",r.createElement("b",null,"f"),", try not to get lost! ;)")),r.createElement("p",{className:"lead mb-0"},r.createElement("span",null,"Too slow? Hold ",r.createElement("b",null,"shift"),".")),r.createElement("p",{className:"lead mb-0"},r.createElement("span",null,"Make sure to check out my ",r.createElement("a",{href:"https://drive.google.com/open?id=189OkI7YVJyKv6PILqvEt_hRamQplSjr3",target:"_blank"},"Resume"),".")))))},t}(r.Component),xe=n(24),Te=n.n(xe),Le=n(25),Me=n.n(Le),Ne=n(26),Ae=n.n(Ne),Ie=n(27),Fe=n.n(Ie),De=n(28),We=n.n(De),Ue=n(29),He=n.n(Ue),Ye=n(30),Be=n.n(Ye),Xe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ze=(n(16),n(95).Carousel),Ve=function(e){function t(t){return e.call(this,t)||this}return Xe(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Portfolio")),r.createElement("div",{className:"text-center lead mb-0 mt-5"},r.createElement("h2",null,"Make sure to check out my ",r.createElement("a",{href:"https://drive.google.com/open?id=189OkI7YVJyKv6PILqvEt_hRamQplSjr3",target:"_blank"},"Resume"),".")),r.createElement("div",null,r.createElement(ze,{className:"col-md",showArrows:!0,showThumbs:!1,infiniteLoop:!0,swipeable:!1},r.createElement("div",null,r.createElement("img",{src:Me.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:Me.a,className:"w-75 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Cinema 4D Kitten Fully Rigged "),r.createElement("span",null,"Feel free to download the kitten | "),r.createElement("a",{href:"https://drive.google.com/open?id=1w56ctmWSgPDhRB7fKY-v-waFzBPImjZy",target:"_blank"},"Kitten Red_Final.zip"))),r.createElement("div",null,r.createElement("img",{src:Te.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:Te.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Cinema 4D Kitten Fully Rigged "),r.createElement("span",null,"Feel free to download the kitten | "),r.createElement("a",{href:"https://drive.google.com/open?id=1w56ctmWSgPDhRB7fKY-v-waFzBPImjZy",target:"_blank"},"Kitten Red_Final.zip"))),r.createElement("div",null,r.createElement("img",{src:We.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:We.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Download and play Life of Gooba | "),r.createElement("a",{href:"https://jgriffith3433.itch.io/lifeofgooba",target:"_blank"},"Itch.io game page"))),r.createElement("div",null,r.createElement("img",{src:Ae.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:Ae.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},"Low Poly Character Modeling")),r.createElement("div",null,r.createElement("img",{src:Fe.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:Fe.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},"3ds Max Smiling Boy")),r.createElement("div",null,r.createElement("iframe",{className:"w-75 h-50 mt-5 desktop-only-content-inline",src:"https://www.youtube.com/embed/j2jXD46B4Vw",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),r.createElement("iframe",{className:"w-75 h-50 mt-5 mobile-only-content-inline",src:"https://www.youtube.com/embed/j2jXD46B4Vw",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),r.createElement("p",{className:"legend"},r.createElement("span",null,"To play the Space Shooter Game, download and extract the zip file. Then use internet explorer and download the web player, don't worry it's safe and comes directly from Unity3d.com | "),r.createElement("a",{href:"https://drive.google.com/open?id=1Y2UwkA_pACRiDt2OCTH38uRfwbM_1AZW",target:"_blank"},"spaceshooter.zip"))),r.createElement("div",null,r.createElement("iframe",{className:"w-75 h-50 mt-5 desktop-only-content-inline",src:"https://www.youtube.com/embed/ns9sM42IP-I",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),r.createElement("iframe",{className:"w-75 h-50 mt-5 mobile-only-content-inline",src:"https://www.youtube.com/embed/ns9sM42IP-I",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),r.createElement("p",{className:"legend"},r.createElement("span",null,"To play the Hoop Jones Game, download and extract the zip file. Then use internet explorer and download the web player, don't worry it's safe and comes directly from Unity3d.com | "),r.createElement("a",{href:"https://drive.google.com/open?id=1hyRouxDJZufhvFK6tULyUaqJVrcTnrkw",target:"_blank"},"hoopjones.zip"))),r.createElement("div",null,r.createElement("img",{src:He.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:He.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},"UDK training simulation")),r.createElement("div",null,r.createElement("img",{src:Be.a,className:"w-50 desktop-only-content-inline"}),r.createElement("img",{src:Be.a,className:"w-50 mobile-only-content-inline"}),r.createElement("p",{className:"legend"},r.createElement("span",null,"Zelda-style camera | "),r.createElement("span",null,"Feel free to download the project | "),r.createElement("a",{href:"https://drive.google.com/open?id=1RcWA2-y2mBGhg3QYobmNaovrYf3F4TNn",target:"_blank"},"zelda.zip"))))))},t}(r.Component),qe=Object(a.withRouter)(Ve),Ge=n(50),Ke=n.n(Ge),Je=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),$e=function(e){function t(t){return e.call(this,t)||this}return Je(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Reading")),r.createElement("br",null),r.createElement("br",null),r.createElement("div",{className:"text-center"},r.createElement("h2",null,"I love the star wars books")),r.createElement("div",{className:"text-center"},r.createElement("p",null,"They are even better than the movies and you can read them chronologically"),r.createElement("img",{src:Ke.a,alt:"Star Wars Books",className:"img-fluid"})),r.createElement("div",{className:"text-center"},r.createElement("h3",null,"Something, something, something... Complete.")),r.createElement("div",{className:"text-center"},r.createElement("ul",null,r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/B00JN8H2TC/ref=cm_sw_em_r_mt_dp_U_MU1uCbF9FCBSZ",target:"_blank"},"Into the Void: Star Wars (Dawn of the Jedi)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345541324/ref=cm_sw_em_r_mt_dp_U_C41uCb9FHQ4BH",target:"_blank"},"Star Wars: Lost Tribe of the Sith - The Collected Stories (Star Wars: Lost Tribe of the Sith - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511352/ref=cm_sw_em_r_mt_dp_U_k51uCbDBCV9PR",target:"_blank"},"Star Wars: The Old Republic - Revan (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511395/ref=cm_sw_em_r_mt_dp_U_P51uCbPA6BPE7",target:"_blank"},"Star Wars: The Old Republic - Deceived (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345518594/ref=cm_sw_em_r_mt_dp_U_A61uCbNSRBSFT",target:"_blank"},"Star Wars: Red Harvest")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511336/ref=cm_sw_em_r_mt_dp_U_s71uCb3T663RH",target:"_blank"},"Fatal Alliance (Star Wars: The Old Republic) (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345529421/ref=cm_sw_em_r_mt_dp_U_Z71uCbW0C197J",target:"_blank"},"Annihilation: Star Wars Legends (The Old Republic) (Star Wars: The Old Republic - Legends)")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345522648/ref=cm_sw_em_r_mt_dp_U_q81uCbKK0TD18",target:"_blank"},"Star Wars: Knight Errant")),r.createElement("span",null," | "),r.createElement("span",null,"Completed")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345477375/ref=cm_sw_em_r_mt_dp_U_s91uCbRXD4FG9",target:"_blank"},"Path of Destruction (Star Wars: Darth Bane, Book 1)")),r.createElement("span",null," | "),r.createElement("span",null,"Currently Reading")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345477499/ref=cm_sw_em_r_mt_dp_U_u91uCb5930RYF",target:"_blank"},"Rule of Two (Star Wars: Darth Bane, Book 2)")),r.createElement("span",null," | "),r.createElement("span",null,"Queued")),r.createElement("li",null,r.createElement("span",null,r.createElement("a",{href:"https://www.amazon.com/dp/0345511573/ref=cm_sw_em_r_mt_dp_U_q91uCb786RBNS",target:"_blank"},"Dynasty of Evil (Star Wars: Darth Bane, Book 3)")),r.createElement("span",null," | "),r.createElement("span",null,"Queued")))))},t}(r.Component),Qe=n(51),Ze=n.n(Qe),et=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),tt=function(e){function t(t){return e.call(this,t)||this}return et(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - About Me")),r.createElement("div",{className:"mt-5"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col-md-4"},r.createElement("img",{src:Ze.a,className:"w-100"})),r.createElement("div",{className:"col-md-8"},r.createElement("h1",{className:"display-4 font-italic"},"I enjoy computers, reading, and music."),r.createElement("h2",{className:"lead my-3"},"I have lived in ",r.createElement("b",null,"Oklahom City, OK")," and ",r.createElement("b",null,"Albuquerque, NM"),". I currently live in ",r.createElement("b",null,"Reno, NV"),"."))),r.createElement("div",{className:"row"},r.createElement("div",{className:"col-md-12"},r.createElement("div",{className:"lead mt-5"},r.createElement("div",null,r.createElement("span",null,r.createElement("b",null,"External profile links")),r.createElement("p",null,r.createElement("a",{href:"https://github.com/jgriffith3433",target:"_blank"},"Github")),r.createElement("p",null,r.createElement("a",{href:"https://jgriffith3433.itch.io/lifeofgooba",target:"_blank"},"Itch.io")),r.createElement("p",null,r.createElement("a",{href:"https://www.kickstarter.com/profile/jgriffith3433",target:"_blank"},"Kickstarter")),r.createElement("p",null,r.createElement("a",{href:"https://www.linkedin.com/in/jaycee-griffith-760bb7116/",target:"_blank"},"LinkedIn")),r.createElement("p",null,r.createElement("a",{href:"https://soundcloud.com/jacobsgriffith",target:"_blank"},"Sound Cloud")),r.createElement("p",null,r.createElement("a",{href:"https://stackoverflow.com/users/941632/jacobsgriffith",target:"_blank"},"Stack Overflow")),r.createElement("p",null,r.createElement("a",{href:"https://trello.com/jayceegriffith",target:"_blank"},"Trello"))))))))},t}(r.Component),nt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),rt=function(e){function t(t){return e.call(this,t)||this}return nt(t,e),t.prototype.render=function(){return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Music")),r.createElement("br",null),r.createElement("br",null),r.createElement("div",{className:"text-center"},r.createElement("h2",null,"Listen to some of my sounds")),r.createElement("iframe",{width:"100%",height:"300",scrolling:"no",frameBorder:"no",allow:"autoplay",src:"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/users/47547303&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true"}))},t}(r.Component),ot=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),it=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},at=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},st=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ot(t,e),t.search=function(e){return void 0===e&&(e=null),it(this,void 0,Promise,function(){return at(this,function(t){switch(t.label){case 0:return null==e&&(e=""),[4,this.requestJson({url:"/api/Person/Search?term="+e,method:"GET"})];case 1:return[2,t.sent()]}})})},t.update=function(e){return it(this,void 0,Promise,function(){return at(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person",method:"PATCH",data:e})];case 1:return[2,t.sent()]}})})},t.delete=function(e){return it(this,void 0,Promise,function(){return at(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person/"+e,method:"DELETE"})];case 1:return[2,t.sent()]}})})},t.add=function(e){return it(this,void 0,Promise,function(){return at(this,function(t){switch(t.label){case 0:return[4,this.requestJson({url:"/api/Person/Add",method:"POST",data:e})];case 1:return[2,t.sent()]}})})},t}(R),lt=function(){return(lt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ct=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})},ut=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};!function(e){var t,n=this;!function(e){e.SearchRequest="PERSON_SEARCH_REQUEST",e.SearchResponse="PERSON_SEARCH_RESPONSE",e.AddRequest="PERSON_ADD_REQUEST",e.AddResponse="PERSON_ADD_RESPONSE",e.UpdateRequest="PERSON_UPDATE_REQUEST",e.UpdateResponse="PERSON_UPDATE_RESPONSE",e.DeleteRequest="PERSON_DELETE_REQUEST",e.DeleteResponse="PERSON_DELETE_RESPONSE"}(t=e.Actions||(e.Actions={})),e.actionCreators={searchRequest:function(e){return function(r,o){return ct(n,void 0,void 0,function(){var n=this;return ut(this,function(o){switch(o.label){case 0:return[4,Object(v.wait)(function(o){return ct(n,void 0,void 0,function(){var n;return ut(this,function(o){switch(o.label){case 0:return r({type:t.SearchRequest}),[4,st.search(e)];case 1:return(n=o.sent()).hasErrors||r({type:t.SearchResponse,payload:n.value}),[2]}})})})];case 1:return o.sent(),[2]}})})}},addRequest:function(e){return function(r,o){return ct(n,void 0,void 0,function(){var n;return ut(this,function(o){switch(o.label){case 0:return r({type:t.AddRequest}),[4,st.add(e)];case 1:return(n=o.sent()).hasErrors||(e.id=n.value,r({type:t.AddResponse,payload:e})),[2]}})})}},updateRequest:function(e){return function(r,o){return ct(n,void 0,void 0,function(){return ut(this,function(n){switch(n.label){case 0:return r({type:t.UpdateRequest}),[4,st.update(e)];case 1:return n.sent().hasErrors||r({type:t.UpdateResponse,payload:e}),[2]}})})}},deleteRequest:function(e){return function(r,o){return ct(n,void 0,void 0,function(){return ut(this,function(n){switch(n.label){case 0:return r({type:t.DeleteRequest}),[4,st.delete(e)];case 1:return n.sent().hasErrors||r({type:t.DeleteResponse,id:e}),[2]}})})}}};var r={people:[],indicators:{operationLoading:!1}};e.reducer=function(e,n){var o=n,i=function(){return g(e.indicators)};switch(o.type){case t.SearchRequest:return(s=i()).operationLoading=!0,lt({},e,{indicators:s});case t.SearchResponse:return(s=i()).operationLoading=!1,lt({},e,{indicators:s,people:o.payload});case t.UpdateRequest:return(s=i()).operationLoading=!0,lt({},e,{indicators:s});case t.UpdateResponse:(s=i()).operationLoading=!1;var a=(l=g(e.people)).filter(function(e){return e.id===o.payload.id})[0];return a.firstName=o.payload.firstName,a.lastName=o.payload.lastName,lt({},e,{indicators:s,people:l});case t.AddRequest:return(s=i()).operationLoading=!0,lt({},e,{indicators:s});case t.AddResponse:return(s=i()).operationLoading=!1,(l=g(e.people)).push(o.payload),lt({},e,{indicators:s,people:l});case t.DeleteRequest:return(s=i()).operationLoading=!0,lt({},e,{indicators:s});case t.DeleteResponse:var s;(s=i()).operationLoading=!1;var l=g(e.people).filter(function(e){return e.id!==o.id});return lt({},e,{indicators:s,people:l});default:}return e||r}}(fe||(fe={}));var ft=n(52),pt=n.n(ft),dt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ht=function(){return(ht=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},mt=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},vt=function(e){function t(t){return e.call(this,t)||this}return dt(t,e),t.prototype.setFirstPage=function(){this.elFirstPageBtn.click()},t.prototype.setLastPage=function(){this.elLastPageBtn.click()},t.prototype.render=function(){var e=this;return r.createElement(pt.a,{total:this.props.totalResults,limit:this.props.limitPerPage,currentPage:this.props.currentPage},function(t){var n=t.pages,o=t.currentPage,i=t.hasNextPage,a=t.hasPreviousPage,s=t.previousPage,l=t.nextPage,c=t.totalPages,u=t.getPageItemProps;return r.createElement("ul",{className:"pagination"},r.createElement("li",null,r.createElement("span",ht({},u({pageValue:1,onPageChange:e.props.onChangePage}),{ref:function(t){return e.elFirstPageBtn=t}}),"first")),a&&r.createElement("li",null,r.createElement("span",ht({},u({pageValue:s,onPageChange:e.props.onChangePage})),"<")),n.map(function(t){return r.createElement("li",{key:t,className:t===o?"active":""},r.createElement("span",ht({},u({pageValue:t,onPageChange:e.props.onChangePage})),t))}),i&&r.createElement("li",null,r.createElement("span",ht({},u({pageValue:l,onPageChange:e.props.onChangePage})),">")),r.createElement("li",null,r.createElement("span",ht({},u({pageValue:c,onPageChange:e.props.onChangePage}),{ref:function(t){return e.elLastPageBtn=t}}),"last")))})},mt([N.a],t.prototype,"setFirstPage",null),mt([N.a],t.prototype,"setLastPage",null),t}(r.Component),yt=n(53),bt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),gt=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},wt=function(e){function t(t){return e.call(this,t)||this}return bt(t,e),t.prototype.emptyForm=function(){this.elForm&&this.elForm.emptyForm()},t.prototype.componentDidMount=function(){},t.prototype.render=function(){var e=this;return r.createElement(yt.Formik,{enableReinitialize:!0,initialValues:{firstName:this.props.data.firstName||"",lastName:this.props.data.lastName||""},onSubmit:function(e,t){t.setSubmitting}},function(t){var n=t.values,o=(t.errors,t.touched,t.handleChange),i=t.handleBlur;t.handleSubmit,t.isSubmitting;return r.createElement(ye,{className:"form",ref:function(t){return e.elForm=t}},r.createElement("input",{type:"hidden",name:"id",defaultValue:(e.props.data.id||0).toString()}),r.createElement("div",{className:"form-group"},r.createElement("label",{className:"control-label required",htmlFor:"person__firstName"},"First name"),r.createElement("input",{type:"text",className:"form-control",id:"person__firstName",name:"firstName","data-value-type":"string","data-val-required":"true","data-msg-required":"First name is required.",value:n.firstName,onChange:o,onBlur:i})),r.createElement("div",{className:"form-group"},r.createElement("label",{className:"control-label required",htmlFor:"person__lastName"},"Last name"),r.createElement("input",{type:"text",className:"form-control",id:"person__lastName",name:"lastName","data-value-type":"string","data-val-required":"true","data-msg-required":"Last name is required.",value:n.lastName,onChange:o,onBlur:i})))})},gt([N.a],t.prototype,"emptyForm",null),t}(r.Component),_t=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Et=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},St=function(e){function t(t){return e.call(this,t)||this}return _t(t,e),t.prototype.show=function(){this.modalPlugin.show()},t.prototype.hide=function(){this.modalPlugin.hide()},t.prototype.componentDidMount=function(){var e=this;this.modalPlugin=new L.Modal(this.elModal),this.props.onShow&&this.elModal.addEventListener("show.bs.modal",function(){return e.props.onShow()}),this.props.onHide&&this.elModal.addEventListener("hide.bs.modal",function(){return e.props.onHide()})},t.prototype.componentWillUnmount=function(){this.modalPlugin.hide()},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"modal fade",tabIndex:-1,role:"dialog",ref:function(t){return e.elModal=t}},r.createElement("div",{className:"modal-dialog",role:"document"},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("button",{type:"button",className:"close","data-dismiss":"modal","aria-label":"Close"},r.createElement("span",{"aria-hidden":"true"},"×")),r.createElement("h4",{className:"modal-title"},this.props.title)),r.createElement("div",{className:"modal-body"},this.props.children),r.createElement("div",{className:"modal-footer"},this.props.buttons))))},Et([N.a],t.prototype,"show",null),Et([N.a],t.prototype,"hide",null),t}(r.Component),Pt=n(54),Ot=n.n(Pt),kt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Rt=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},jt=function(e){function t(t){var n=e.call(this,t)||this;return n.state={searchTerm:"",pageNum:1,limitPerPage:5,rowOffset:0,modelForEdit:{}},n.debouncedSearch=Ot()(function(e){t.searchRequest(e)},500),n}return kt(t,e),t.prototype.componentWillMount=function(){this.props.searchRequest()},t.prototype.componentWillUnmount=function(){this.elModalAdd&&this.elModalAdd.hide(),this.elModalEdit&&this.elModalEdit.hide(),this.elModalDelete&&this.elModalDelete.hide()},t.prototype.onChangePage=function(e){var t=Math.ceil((e-1)*this.state.limitPerPage);this.setState({pageNum:e,rowOffset:t})},t.prototype.onClickShowAddModal=function(e){this.elModalAdd.show()},t.prototype.onClickShowEditModal=function(e,t){this.setState({modelForEdit:t}),this.elModalEdit.show()},t.prototype.onClickShowDeleteModal=function(e,t){this.setState({modelForEdit:t}),this.elModalDelete.show()},t.prototype.onClickPersonEditorAdd__saveBtn=function(e){e.preventDefault(),this.personEditorAdd.elForm.isValid()&&(this.props.addRequest(this.personEditorAdd.elForm.getData()),this.pagingBar.setLastPage(),this.elModalAdd.hide())},t.prototype.onClickPersonEditorEdit__saveBtn=function(e){if(this.personEditorEdit.elForm.isValid()){var t=this.personEditorEdit.elForm.getData();this.props.updateRequest(t),this.elModalEdit.hide()}},t.prototype.onClickPersonEditorDelete__saveBtn=function(e){this.props.deleteRequest(this.state.modelForEdit.id),this.elModalDelete.hide()},t.prototype.renderRow=function(e){var t=this;return r.createElement("tr",{key:e.id},r.createElement("td",null,e.firstName),r.createElement("td",null,e.lastName),r.createElement("td",null,r.createElement("button",{className:"btn btn-info",onClick:function(n){return t.onClickShowEditModal(n,e)}},"Edit")," ",r.createElement("button",{className:"btn btn-danger",onClick:function(n){return t.onClickShowDeleteModal(n,e)}},"Delete")))},t.prototype.renderRows=function(e){var t=this;return e.slice(this.state.rowOffset,this.state.rowOffset+this.state.limitPerPage).map(function(e){return t.renderRow(e)})},t.prototype.onChangeSearchInput=function(e){var t=e.currentTarget.value;this.debouncedSearch(t),this.pagingBar.setFirstPage()},t.prototype.render=function(){var e=this;return r.createElement("div",null,r.createElement(pe.Helmet,null,r.createElement("title",null,"Jaycee Griffith - Portfolio")),r.createElement(se,{show:this.props.indicators.operationLoading}),r.createElement("div",{className:"panel panel-default"},r.createElement("div",{className:"panel-body row"},r.createElement("div",{className:"col-sm-1"},r.createElement("button",{className:"btn btn-success",onClick:this.onClickShowAddModal},"Add")),r.createElement("div",{className:"col-sm-11"},r.createElement("input",{type:"text",className:"form-control",defaultValue:"",onChange:this.onChangeSearchInput,placeholder:"Search for people..."})))),r.createElement("table",{className:"table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"First name"),r.createElement("th",null,"Last name"),r.createElement("th",null))),r.createElement("tbody",null,this.renderRows(this.props.people))),r.createElement(St,{ref:function(t){return e.elModalAdd=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-primary",onClick:this.onClickPersonEditorAdd__saveBtn},"Save")),title:"Add person",onHide:function(){e.personEditorAdd&&e.personEditorAdd.emptyForm()}},r.createElement(wt,{ref:function(t){return e.personEditorAdd=t},data:{}})),r.createElement(St,{ref:function(t){return e.elModalEdit=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-primary",onClick:this.onClickPersonEditorEdit__saveBtn},"Save")),title:"Edit person: "+this.state.modelForEdit.firstName+" "+this.state.modelForEdit.lastName,onHide:function(){e.personEditorEdit&&e.setState({modelForEdit:{}})}},r.createElement(wt,{ref:function(t){return e.personEditorEdit=t},data:this.state.modelForEdit})),r.createElement(St,{ref:function(t){return e.elModalDelete=t},buttons:r.createElement("div",null,r.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),r.createElement("button",{type:"button",className:"btn btn-danger",onClick:this.onClickPersonEditorDelete__saveBtn},"Delete")),title:"Delete person: "+this.state.modelForEdit.firstName+" "+this.state.modelForEdit.lastName},r.createElement("p",null,"Do you really want to delete this person?")),r.createElement(vt,{ref:function(t){return e.pagingBar=t},totalResults:this.props.people.length,limitPerPage:this.state.limitPerPage,currentPage:this.state.pageNum,onChangePage:this.onChangePage}))},Rt([N.a],t.prototype,"onChangePage",null),Rt([N.a],t.prototype,"onClickShowAddModal",null),Rt([N.a],t.prototype,"onClickShowEditModal",null),Rt([N.a],t.prototype,"onClickShowDeleteModal",null),Rt([N.a],t.prototype,"onClickPersonEditorAdd__saveBtn",null),Rt([N.a],t.prototype,"onClickPersonEditorEdit__saveBtn",null),Rt([N.a],t.prototype,"onClickPersonEditorDelete__saveBtn",null),Rt([N.a],t.prototype,"renderRow",null),Rt([N.a],t.prototype,"renderRows",null),Rt([N.a],t.prototype,"onChangeSearchInput",null),t}(r.Component),Ct=Object(o.connect)(function(e){return e.person},fe.actionCreators)(jt),xt=Object(u.withRouter)(Ct),Tt=r.createElement(a.Switch,null,r.createElement(Re,{layout:ne,exact:!0,path:"/login",component:Pe}),r.createElement(Re,{layout:ne,exact:!0,path:"/",component:Ce}),r.createElement(Re,{layout:ne,exact:!0,path:"/portfolio",component:qe}),r.createElement(Re,{layout:ne,exact:!0,path:"/about/me",component:tt}),r.createElement(Re,{layout:ne,exact:!0,path:"/about/music",component:rt}),r.createElement(Re,{layout:ne,exact:!0,path:"/about/reading",component:$e}),r.createElement(Re,{layout:X,exact:!0,path:"/admin",component:xt})),Lt=n(13),Mt=n(55),Nt=n.n(Mt),At={login:_.reducer,person:fe.reducer},It=function(){return(It=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function Ft(e,t){var n="undefined"==typeof window?null:window,r=n&&n.__REDUX_DEVTOOLS_EXTENSION__;return Object(Lt.compose)(Object(Lt.applyMiddleware)(Nt.a,Object(s.routerMiddleware)(e)),r?r():function(e){return e})(Lt.createStore)(function(e,t){return Object(Lt.combineReducers)(It({},e,{router:Dt(t)}))}(At,e),t)}var Dt=function(e){var t={location:e.location,action:e.action};return function(e,n){return void 0===e&&(e=t),void 0===n&&(n={}),n.type===s.LOCATION_CHANGE?It({},e,n.payload):e}};var Wt=function(){var e=pe.Helmet.renderStatic(),t="";for(var n in e)e.hasOwnProperty(n)&&(t+=e[n].toString());return t},Ut=function(e,t,n){return{completedTasks:v.completedTasks,nodeSession:e,initialReduxState:t,helmetStrings:n}};t.default=Object(c.createServerRenderer)(function(e){return P.reset(),P.init(e.data),new Promise(function(t,n){var c=e.baseUrl.substring(0,e.baseUrl.length-1),u=e.url.substring(c.length),f=Ft(Object(l.createMemoryHistory)());f.dispatch(Object(s.replace)(u));var p={},d=r.createElement(o.Provider,{store:f},r.createElement(a.StaticRouter,{basename:c,context:p,location:e.location.path,children:Tt})),h=function(){return Object(i.renderToString)(d)};h(),p.url?t({redirectUrl:p.url,globals:Ut(e.data,f.getState(),Wt())}):e.domainTasks.then(function(){t({html:h(),globals:Ut(e.data,f.getState(),Wt())})},n)})})}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,